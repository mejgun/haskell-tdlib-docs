-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/mejgun/haskell-tdlib</a>
@package haskell-tdlib
@version 2.0.32.0

module TD.Lib.Internal
newtype Extra
Extra :: String -> Extra

-- | Show class alternative that hides unset and bytes values, multiline
--   text values are shown as single line
class ShortShow a
shortShow :: ShortShow a => a -> String
p :: ShortShow a => String -> Maybe a -> String
cc :: [String] -> String
readInt64 :: String -> Int
writeInt64 :: Int -> Value
readBytes :: String -> ByteString
writeBytes :: ByteString -> Value
instance GHC.Generics.Generic TD.Lib.Internal.Extra
instance GHC.Classes.Eq TD.Lib.Internal.Extra
instance TD.Lib.Internal.ShortShow GHC.Types.Int
instance TD.Lib.Internal.ShortShow GHC.Types.Double
instance TD.Lib.Internal.ShortShow GHC.Types.Bool
instance TD.Lib.Internal.ShortShow Data.Text.Internal.Text
instance TD.Lib.Internal.ShortShow Data.ByteString.Internal.Type.ByteString
instance TD.Lib.Internal.ShortShow a => TD.Lib.Internal.ShortShow [a]
instance Data.Hashable.Class.Hashable TD.Lib.Internal.Extra
instance Data.Aeson.Types.FromJSON.FromJSON TD.Lib.Internal.Extra

module TD.Data.WebAppInfo
data WebAppInfo

-- | Contains information about a Web App
WebAppInfo :: Maybe Int -> Maybe Text -> WebAppInfo

-- | Unique identifier for the Web App launch
[launch_id] :: WebAppInfo -> Maybe Int

-- | A Web App URL to open in a web view
[url] :: WebAppInfo -> Maybe Text
instance GHC.Show.Show TD.Data.WebAppInfo.WebAppInfo
instance GHC.Classes.Eq TD.Data.WebAppInfo.WebAppInfo
instance TD.Lib.Internal.ShortShow TD.Data.WebAppInfo.WebAppInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebAppInfo.WebAppInfo

module TD.Data.Users
data Users

-- | Represents a list of users
Users :: Maybe Int -> Maybe [Int] -> Users

-- | Approximate total number of users found
[total_count] :: Users -> Maybe Int

-- | A list of user identifiers
[user_ids] :: Users -> Maybe [Int]
instance GHC.Show.Show TD.Data.Users.Users
instance GHC.Classes.Eq TD.Data.Users.Users
instance TD.Lib.Internal.ShortShow TD.Data.Users.Users
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Users.Users

module TD.Data.Usernames
data Usernames

-- | Describes usernames assigned to a user, a supergroup, or a channel
Usernames :: Maybe [Text] -> Maybe [Text] -> Maybe Text -> Usernames

-- | List of active usernames; the first one must be shown as the primary
--   username. The order of active usernames can be changed with
--   reorderActiveUsernames, reorderBotActiveUsernames or
--   reorderSupergroupActiveUsernames
[active_usernames] :: Usernames -> Maybe [Text]

-- | List of currently disabled usernames; the username can be activated
--   with toggleUsernameIsActive, toggleBotUsernameIsActive, or
--   toggleSupergroupUsernameIsActive
[disabled_usernames] :: Usernames -> Maybe [Text]

-- | The active username, which can be changed with setUsername or
--   setSupergroupUsername. Information about other active usernames can be
--   received using getCollectibleItemInfo
[editable_username] :: Usernames -> Maybe Text
instance GHC.Show.Show TD.Data.Usernames.Usernames
instance GHC.Classes.Eq TD.Data.Usernames.Usernames
instance TD.Lib.Internal.ShortShow TD.Data.Usernames.Usernames
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Usernames.Usernames

module TD.Data.UserType

-- | Represents the type of user. The following types are possible: regular
--   users, deleted users and bots
data UserType

-- | A regular user
UserTypeRegular :: UserType

-- | A deleted user or deleted bot. No information on the user besides the
--   user identifier is available. It is not possible to perform any active
--   actions on this type of user
UserTypeDeleted :: UserType

-- | A bot (see <a>https://core.telegram.org/bots)</a>
UserTypeBot :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> UserType

-- | True, if the bot is owned by the current user and can be edited using
--   the methods toggleBotUsernameIsActive, reorderBotActiveUsernames,
--   setBotProfilePhoto, setBotName, setBotInfoDescription, and
--   setBotInfoShortDescription
[can_be_edited] :: UserType -> Maybe Bool

-- | True, if the bot can be invited to basic group and supergroup chats
[can_join_groups] :: UserType -> Maybe Bool

-- | True, if the bot can read all messages in basic group or supergroup
--   chats and not just those addressed to the bot. In private and channel
--   chats a bot can always read all messages
[can_read_all_group_messages] :: UserType -> Maybe Bool

-- | True, if the bot supports inline queries
[is_inline] :: UserType -> Maybe Bool

-- | Placeholder for inline queries (displayed on the application input
--   field)
[inline_query_placeholder] :: UserType -> Maybe Text

-- | True, if the location of the user is expected to be sent with every
--   inline query to this bot
[need_location] :: UserType -> Maybe Bool

-- | True, if the bot supports connection to Telegram Business accounts
[can_connect_to_business] :: UserType -> Maybe Bool

-- | True, if the bot can be added to attachment or side menu
[can_be_added_to_attachment_menu] :: UserType -> Maybe Bool

-- | No information on the user besides the user identifier is available,
--   yet this user has not been deleted. This object is extremely rare and
--   must be handled like a deleted user. It is not possible to perform any
--   actions on users of this type
UserTypeUnknown :: UserType
instance GHC.Show.Show TD.Data.UserType.UserType
instance GHC.Classes.Eq TD.Data.UserType.UserType
instance TD.Lib.Internal.ShortShow TD.Data.UserType.UserType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserType.UserType

module TD.Data.UserStatus

-- | Describes the last time the user was online
data UserStatus

-- | The user's status has never been changed
UserStatusEmpty :: UserStatus

-- | The user is online
UserStatusOnline :: Maybe Int -> UserStatus

-- | Point in time (Unix timestamp) when the user's online status will
--   expire
[expires] :: UserStatus -> Maybe Int

-- | The user is offline
UserStatusOffline :: Maybe Int -> UserStatus

-- | Point in time (Unix timestamp) when the user was last online
[was_online] :: UserStatus -> Maybe Int

-- | The user was online recently
UserStatusRecently :: Maybe Bool -> UserStatus

-- | Exact user's status is hidden because the current user enabled
--   userPrivacySettingShowStatus privacy setting for the user and has no
--   Telegram Premium
[by_my_privacy_settings] :: UserStatus -> Maybe Bool

-- | The user is offline, but was online last week
UserStatusLastWeek :: Maybe Bool -> UserStatus

-- | Exact user's status is hidden because the current user enabled
--   userPrivacySettingShowStatus privacy setting for the user and has no
--   Telegram Premium
[by_my_privacy_settings] :: UserStatus -> Maybe Bool

-- | The user is offline, but was online last month
UserStatusLastMonth :: Maybe Bool -> UserStatus

-- | Exact user's status is hidden because the current user enabled
--   userPrivacySettingShowStatus privacy setting for the user and has no
--   Telegram Premium
[by_my_privacy_settings] :: UserStatus -> Maybe Bool
instance GHC.Show.Show TD.Data.UserStatus.UserStatus
instance GHC.Classes.Eq TD.Data.UserStatus.UserStatus
instance TD.Lib.Internal.ShortShow TD.Data.UserStatus.UserStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserStatus.UserStatus

module TD.Data.UserPrivacySettingRule

-- | Represents a single rule for managing user privacy settings
data UserPrivacySettingRule

-- | A rule to allow all users to do something
UserPrivacySettingRuleAllowAll :: UserPrivacySettingRule

-- | A rule to allow all contacts of the user to do something
UserPrivacySettingRuleAllowContacts :: UserPrivacySettingRule

-- | A rule to allow all Premium Users to do something; currently, allowed
--   only for userPrivacySettingAllowChatInvites
UserPrivacySettingRuleAllowPremiumUsers :: UserPrivacySettingRule

-- | A rule to allow certain specified users to do something
UserPrivacySettingRuleAllowUsers :: Maybe [Int] -> UserPrivacySettingRule

-- | The user identifiers, total number of users in all rules must not
--   exceed 1000
[user_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to allow all members of certain specified basic groups and
--   supergroups to doing something
UserPrivacySettingRuleAllowChatMembers :: Maybe [Int] -> UserPrivacySettingRule

-- | The chat identifiers, total number of chats in all rules must not
--   exceed 20
[chat_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to restrict all users from doing something
UserPrivacySettingRuleRestrictAll :: UserPrivacySettingRule

-- | A rule to restrict all contacts of the user from doing something
UserPrivacySettingRuleRestrictContacts :: UserPrivacySettingRule

-- | A rule to restrict all specified users from doing something
UserPrivacySettingRuleRestrictUsers :: Maybe [Int] -> UserPrivacySettingRule

-- | The user identifiers, total number of users in all rules must not
--   exceed 1000
[user_ids] :: UserPrivacySettingRule -> Maybe [Int]

-- | A rule to restrict all members of specified basic groups and
--   supergroups from doing something
UserPrivacySettingRuleRestrictChatMembers :: Maybe [Int] -> UserPrivacySettingRule

-- | The chat identifiers, total number of chats in all rules must not
--   exceed 20
[chat_ids] :: UserPrivacySettingRule -> Maybe [Int]
instance GHC.Show.Show TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance GHC.Classes.Eq TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance TD.Lib.Internal.ShortShow TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySettingRule.UserPrivacySettingRule
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySettingRule.UserPrivacySettingRule

module TD.Data.UserPrivacySettingRules
data UserPrivacySettingRules

-- | A list of privacy rules. Rules are matched in the specified order. The
--   first matched rule defines the privacy setting for a given user. If no
--   rule matches, the action is not allowed
UserPrivacySettingRules :: Maybe [UserPrivacySettingRule] -> UserPrivacySettingRules

-- | A list of rules
[rules] :: UserPrivacySettingRules -> Maybe [UserPrivacySettingRule]
defaultUserPrivacySettingRules :: UserPrivacySettingRules
instance GHC.Show.Show TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance GHC.Classes.Eq TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance TD.Lib.Internal.ShortShow TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySettingRules.UserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySettingRules.UserPrivacySettingRules

module TD.Data.UserPrivacySetting

-- | Describes available user privacy settings
data UserPrivacySetting

-- | A privacy setting for managing whether the user's online status is
--   visible
UserPrivacySettingShowStatus :: UserPrivacySetting

-- | A privacy setting for managing whether the user's profile photo is
--   visible
UserPrivacySettingShowProfilePhoto :: UserPrivacySetting

-- | A privacy setting for managing whether a link to the user's account is
--   included in forwarded messages
UserPrivacySettingShowLinkInForwardedMessages :: UserPrivacySetting

-- | A privacy setting for managing whether the user's phone number is
--   visible
UserPrivacySettingShowPhoneNumber :: UserPrivacySetting

-- | A privacy setting for managing whether the user's bio is visible
UserPrivacySettingShowBio :: UserPrivacySetting

-- | A privacy setting for managing whether the user's birthdate is visible
UserPrivacySettingShowBirthdate :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be invited to
--   chats
UserPrivacySettingAllowChatInvites :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be called
UserPrivacySettingAllowCalls :: UserPrivacySetting

-- | A privacy setting for managing whether peer-to-peer connections can be
--   used for calls
UserPrivacySettingAllowPeerToPeerCalls :: UserPrivacySetting

-- | A privacy setting for managing whether the user can be found by their
--   phone number. Checked only if the phone number is not known to the
--   other user. Can be set only to "Allow contacts" or "Allow all"
UserPrivacySettingAllowFindingByPhoneNumber :: UserPrivacySetting

-- | A privacy setting for managing whether the user can receive voice and
--   video messages in private chats; for Telegram Premium users only
UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages :: UserPrivacySetting
instance GHC.Show.Show TD.Data.UserPrivacySetting.UserPrivacySetting
instance GHC.Classes.Eq TD.Data.UserPrivacySetting.UserPrivacySetting
instance TD.Lib.Internal.ShortShow TD.Data.UserPrivacySetting.UserPrivacySetting
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserPrivacySetting.UserPrivacySetting
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.UserPrivacySetting.UserPrivacySetting

module TD.Data.UserLink
data UserLink

-- | Contains an HTTPS URL, which can be used to get information about a
--   user
UserLink :: Maybe Text -> Maybe Int -> UserLink

-- | The URL
[url] :: UserLink -> Maybe Text

-- | Left time for which the link is valid, in seconds; 0 if the link is a
--   public username link
[expires_in] :: UserLink -> Maybe Int
instance GHC.Show.Show TD.Data.UserLink.UserLink
instance GHC.Classes.Eq TD.Data.UserLink.UserLink
instance TD.Lib.Internal.ShortShow TD.Data.UserLink.UserLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserLink.UserLink

module TD.Data.UnconfirmedSession
data UnconfirmedSession

-- | Contains information about an unconfirmed session
UnconfirmedSession :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> UnconfirmedSession

-- | Session identifier
[_id] :: UnconfirmedSession -> Maybe Int

-- | Point in time (Unix timestamp) when the user has logged in
[log_in_date] :: UnconfirmedSession -> Maybe Int

-- | Model of the device that was used for the session creation, as
--   provided by the application
[device_model] :: UnconfirmedSession -> Maybe Text

-- | A human-readable description of the location from which the session
--   was created, based on the IP address
[location] :: UnconfirmedSession -> Maybe Text
instance GHC.Show.Show TD.Data.UnconfirmedSession.UnconfirmedSession
instance GHC.Classes.Eq TD.Data.UnconfirmedSession.UnconfirmedSession
instance TD.Lib.Internal.ShortShow TD.Data.UnconfirmedSession.UnconfirmedSession
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UnconfirmedSession.UnconfirmedSession

module TD.Data.TopChatCategory

-- | Represents the categories of chats for which a list of frequently used
--   chats can be retrieved
data TopChatCategory

-- | A category containing frequently used private chats with non-bot users
TopChatCategoryUsers :: TopChatCategory

-- | A category containing frequently used private chats with bot users
TopChatCategoryBots :: TopChatCategory

-- | A category containing frequently used basic groups and supergroups
TopChatCategoryGroups :: TopChatCategory

-- | A category containing frequently used channels
TopChatCategoryChannels :: TopChatCategory

-- | A category containing frequently used chats with inline bots sorted by
--   their usage in inline mode
TopChatCategoryInlineBots :: TopChatCategory

-- | A category containing frequently used chats used for calls
TopChatCategoryCalls :: TopChatCategory

-- | A category containing frequently used chats used to forward messages
TopChatCategoryForwardChats :: TopChatCategory
instance GHC.Show.Show TD.Data.TopChatCategory.TopChatCategory
instance GHC.Classes.Eq TD.Data.TopChatCategory.TopChatCategory
instance TD.Lib.Internal.ShortShow TD.Data.TopChatCategory.TopChatCategory
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TopChatCategory.TopChatCategory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TopChatCategory.TopChatCategory

module TD.Data.TimeZone
data TimeZone

-- | Describes a time zone
TimeZone :: Maybe Text -> Maybe Text -> Maybe Int -> TimeZone

-- | Unique time zone identifier
[_id] :: TimeZone -> Maybe Text

-- | Time zone name
[name] :: TimeZone -> Maybe Text

-- | Current UTC time offset for the time zone
[utc_time_offset] :: TimeZone -> Maybe Int
instance GHC.Show.Show TD.Data.TimeZone.TimeZone
instance GHC.Classes.Eq TD.Data.TimeZone.TimeZone
instance TD.Lib.Internal.ShortShow TD.Data.TimeZone.TimeZone
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TimeZone.TimeZone

module TD.Data.TimeZones
data TimeZones

-- | Contains a list of time zones
TimeZones :: Maybe [TimeZone] -> TimeZones

-- | A list of time zones
[time_zones] :: TimeZones -> Maybe [TimeZone]
instance GHC.Show.Show TD.Data.TimeZones.TimeZones
instance GHC.Classes.Eq TD.Data.TimeZones.TimeZones
instance TD.Lib.Internal.ShortShow TD.Data.TimeZones.TimeZones
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TimeZones.TimeZones

module TD.Data.ThumbnailFormat

-- | Describes format of a thumbnail
data ThumbnailFormat

-- | The thumbnail is in JPEG format
ThumbnailFormatJpeg :: ThumbnailFormat

-- | The thumbnail is in static GIF format. It will be used only for some
--   bot inline query results
ThumbnailFormatGif :: ThumbnailFormat

-- | The thumbnail is in MPEG4 format. It will be used only for some
--   animations and videos
ThumbnailFormatMpeg4 :: ThumbnailFormat

-- | The thumbnail is in PNG format. It will be used only for background
--   patterns
ThumbnailFormatPng :: ThumbnailFormat

-- | The thumbnail is in TGS format. It will be used only for sticker sets
ThumbnailFormatTgs :: ThumbnailFormat

-- | The thumbnail is in WEBM format. It will be used only for sticker sets
ThumbnailFormatWebm :: ThumbnailFormat

-- | The thumbnail is in WEBP format. It will be used only for some
--   stickers and sticker sets
ThumbnailFormatWebp :: ThumbnailFormat
instance GHC.Show.Show TD.Data.ThumbnailFormat.ThumbnailFormat
instance GHC.Classes.Eq TD.Data.ThumbnailFormat.ThumbnailFormat
instance TD.Lib.Internal.ShortShow TD.Data.ThumbnailFormat.ThumbnailFormat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThumbnailFormat.ThumbnailFormat

module TD.Data.ThemeParameters
data ThemeParameters

-- | Contains parameters of the application theme
ThemeParameters :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ThemeParameters

-- | A color of the background in the RGB24 format
[background_color] :: ThemeParameters -> Maybe Int

-- | A secondary color for the background in the RGB24 format
[secondary_background_color] :: ThemeParameters -> Maybe Int

-- | A color of the header background in the RGB24 format
[header_background_color] :: ThemeParameters -> Maybe Int

-- | A color of the section background in the RGB24 format
[section_background_color] :: ThemeParameters -> Maybe Int

-- | A color of text in the RGB24 format
[text_color] :: ThemeParameters -> Maybe Int

-- | An accent color of the text in the RGB24 format
[accent_text_color] :: ThemeParameters -> Maybe Int

-- | A color of text on the section headers in the RGB24 format
[section_header_text_color] :: ThemeParameters -> Maybe Int

-- | A color of the subtitle text in the RGB24 format
[subtitle_text_color] :: ThemeParameters -> Maybe Int

-- | A color of the text for destructive actions in the RGB24 format
[destructive_text_color] :: ThemeParameters -> Maybe Int

-- | A color of hints in the RGB24 format
[hint_color] :: ThemeParameters -> Maybe Int

-- | A color of links in the RGB24 format
[link_color] :: ThemeParameters -> Maybe Int

-- | A color of the buttons in the RGB24 format
[button_color] :: ThemeParameters -> Maybe Int

-- | A color of text on the buttons in the RGB24 format
[button_text_color] :: ThemeParameters -> Maybe Int
defaultThemeParameters :: ThemeParameters
instance GHC.Show.Show TD.Data.ThemeParameters.ThemeParameters
instance GHC.Classes.Eq TD.Data.ThemeParameters.ThemeParameters
instance TD.Lib.Internal.ShortShow TD.Data.ThemeParameters.ThemeParameters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThemeParameters.ThemeParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ThemeParameters.ThemeParameters

module TD.Data.TextParseMode

-- | Describes the way the text needs to be parsed for text entities
data TextParseMode

-- | The text uses Markdown-style formatting
TextParseModeMarkdown :: Maybe Int -> TextParseMode

-- | Version of the parser: 0 or 1 - Telegram Bot API <a>Markdown</a> parse
--   mode, 2 - Telegram Bot API <a>MarkdownV2</a> parse mode
[version] :: TextParseMode -> Maybe Int

-- | The text uses HTML-style formatting. The same as Telegram Bot API
--   <a>HTML</a> parse mode
TextParseModeHTML :: TextParseMode
instance GHC.Show.Show TD.Data.TextParseMode.TextParseMode
instance GHC.Classes.Eq TD.Data.TextParseMode.TextParseMode
instance TD.Lib.Internal.ShortShow TD.Data.TextParseMode.TextParseMode
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextParseMode.TextParseMode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextParseMode.TextParseMode

module TD.Data.TextEntityType

-- | Represents a part of the text which must be formatted differently
data TextEntityType

-- | A mention of a user, a supergroup, or a channel by their username
TextEntityTypeMention :: TextEntityType

-- | A hashtag text, beginning with "#"
TextEntityTypeHashtag :: TextEntityType

-- | A cashtag text, beginning with "$" and consisting of capital English
--   letters (e.g., "$USD")
TextEntityTypeCashtag :: TextEntityType

-- | A bot command, beginning with "/"
TextEntityTypeBotCommand :: TextEntityType

-- | An HTTP URL
TextEntityTypeUrl :: TextEntityType

-- | An email address
TextEntityTypeEmailAddress :: TextEntityType

-- | A phone number
TextEntityTypePhoneNumber :: TextEntityType

-- | A bank card number. The getBankCardInfo method can be used to get
--   information about the bank card
TextEntityTypeBankCardNumber :: TextEntityType

-- | A bold text
TextEntityTypeBold :: TextEntityType

-- | An italic text
TextEntityTypeItalic :: TextEntityType

-- | An underlined text
TextEntityTypeUnderline :: TextEntityType

-- | A strikethrough text
TextEntityTypeStrikethrough :: TextEntityType

-- | A spoiler text
TextEntityTypeSpoiler :: TextEntityType

-- | Text that must be formatted as if inside a code HTML tag
TextEntityTypeCode :: TextEntityType

-- | Text that must be formatted as if inside a pre HTML tag
TextEntityTypePre :: TextEntityType

-- | Text that must be formatted as if inside pre, and code HTML tags
TextEntityTypePreCode :: Maybe Text -> TextEntityType

-- | Programming language of the code; as defined by the sender
[language] :: TextEntityType -> Maybe Text

-- | Text that must be formatted as if inside a blockquote HTML tag
TextEntityTypeBlockQuote :: TextEntityType

-- | A text description shown instead of a raw URL
TextEntityTypeTextUrl :: Maybe Text -> TextEntityType

-- | HTTP or tg:// URL to be opened when the link is clicked
[url] :: TextEntityType -> Maybe Text

-- | A text shows instead of a raw mention of the user (e.g., when the user
--   has no username)
TextEntityTypeMentionName :: Maybe Int -> TextEntityType

-- | Identifier of the mentioned user
[user_id] :: TextEntityType -> Maybe Int

-- | A custom emoji. The text behind a custom emoji must be an emoji. Only
--   premium users can use premium custom emoji
TextEntityTypeCustomEmoji :: Maybe Int -> TextEntityType

-- | Unique identifier of the custom emoji
[custom_emoji_id] :: TextEntityType -> Maybe Int

-- | A media timestamp
TextEntityTypeMediaTimestamp :: Maybe Int -> TextEntityType

-- | Timestamp from which a video<i>audio</i>video note<i>voice
--   note</i>story playing must start, in seconds. The media can be in the
--   content or the web page preview of the current message, or in the same
--   places in the replied message
[media_timestamp] :: TextEntityType -> Maybe Int
instance GHC.Show.Show TD.Data.TextEntityType.TextEntityType
instance GHC.Classes.Eq TD.Data.TextEntityType.TextEntityType
instance TD.Lib.Internal.ShortShow TD.Data.TextEntityType.TextEntityType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntityType.TextEntityType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextEntityType.TextEntityType

module TD.Data.TextEntity
data TextEntity

-- | Represents a part of the text that needs to be formatted in some
--   unusual way
TextEntity :: Maybe Int -> Maybe Int -> Maybe TextEntityType -> TextEntity

-- | Offset of the entity, in UTF-16 code units
[offset] :: TextEntity -> Maybe Int

-- | Length of the entity, in UTF-16 code units
[_length] :: TextEntity -> Maybe Int

-- | Type of the entity
[_type] :: TextEntity -> Maybe TextEntityType
defaultTextEntity :: TextEntity
instance GHC.Show.Show TD.Data.TextEntity.TextEntity
instance GHC.Classes.Eq TD.Data.TextEntity.TextEntity
instance TD.Lib.Internal.ShortShow TD.Data.TextEntity.TextEntity
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntity.TextEntity
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TextEntity.TextEntity

module TD.Data.TextEntities
data TextEntities

-- | Contains a list of text entities
TextEntities :: Maybe [TextEntity] -> TextEntities

-- | List of text entities
[entities] :: TextEntities -> Maybe [TextEntity]
instance GHC.Show.Show TD.Data.TextEntities.TextEntities
instance GHC.Classes.Eq TD.Data.TextEntities.TextEntities
instance TD.Lib.Internal.ShortShow TD.Data.TextEntities.TextEntities
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextEntities.TextEntities

module TD.Data.Text
data Text

-- | Contains some text
Text :: Maybe Text -> Text

-- | Text
[text] :: Text -> Maybe Text
instance GHC.Show.Show TD.Data.Text.Text
instance GHC.Classes.Eq TD.Data.Text.Text
instance TD.Lib.Internal.ShortShow TD.Data.Text.Text
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Text.Text

module TD.Data.TestVectorString
data TestVectorString

-- | A simple object containing a vector of strings; for testing only
TestVectorString :: Maybe [Text] -> TestVectorString

-- | Vector of strings
[value] :: TestVectorString -> Maybe [Text]
instance GHC.Show.Show TD.Data.TestVectorString.TestVectorString
instance GHC.Classes.Eq TD.Data.TestVectorString.TestVectorString
instance TD.Lib.Internal.ShortShow TD.Data.TestVectorString.TestVectorString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorString.TestVectorString

module TD.Data.TestVectorInt
data TestVectorInt

-- | A simple object containing a vector of numbers; for testing only
TestVectorInt :: Maybe [Int] -> TestVectorInt

-- | Vector of numbers
[value] :: TestVectorInt -> Maybe [Int]
instance GHC.Show.Show TD.Data.TestVectorInt.TestVectorInt
instance GHC.Classes.Eq TD.Data.TestVectorInt.TestVectorInt
instance TD.Lib.Internal.ShortShow TD.Data.TestVectorInt.TestVectorInt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorInt.TestVectorInt

module TD.Data.TestString
data TestString

-- | A simple object containing a string; for testing only
TestString :: Maybe Text -> TestString

-- | String
[value] :: TestString -> Maybe Text
defaultTestString :: TestString
instance GHC.Show.Show TD.Data.TestString.TestString
instance GHC.Classes.Eq TD.Data.TestString.TestString
instance TD.Lib.Internal.ShortShow TD.Data.TestString.TestString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestString.TestString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestString.TestString

module TD.Data.TestVectorStringObject
data TestVectorStringObject

-- | A simple object containing a vector of objects that hold a string; for
--   testing only
TestVectorStringObject :: Maybe [TestString] -> TestVectorStringObject

-- | Vector of objects
[value] :: TestVectorStringObject -> Maybe [TestString]
instance GHC.Show.Show TD.Data.TestVectorStringObject.TestVectorStringObject
instance GHC.Classes.Eq TD.Data.TestVectorStringObject.TestVectorStringObject
instance TD.Lib.Internal.ShortShow TD.Data.TestVectorStringObject.TestVectorStringObject
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorStringObject.TestVectorStringObject

module TD.Data.TestInt
data TestInt

-- | A simple object containing a number; for testing only
TestInt :: Maybe Int -> TestInt

-- | Number
[value] :: TestInt -> Maybe Int
defaultTestInt :: TestInt
instance GHC.Show.Show TD.Data.TestInt.TestInt
instance GHC.Classes.Eq TD.Data.TestInt.TestInt
instance TD.Lib.Internal.ShortShow TD.Data.TestInt.TestInt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestInt.TestInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TestInt.TestInt

module TD.Data.TestVectorIntObject
data TestVectorIntObject

-- | A simple object containing a vector of objects that hold a number; for
--   testing only
TestVectorIntObject :: Maybe [TestInt] -> TestVectorIntObject

-- | Vector of objects
[value] :: TestVectorIntObject -> Maybe [TestInt]
instance GHC.Show.Show TD.Data.TestVectorIntObject.TestVectorIntObject
instance GHC.Classes.Eq TD.Data.TestVectorIntObject.TestVectorIntObject
instance TD.Lib.Internal.ShortShow TD.Data.TestVectorIntObject.TestVectorIntObject
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestVectorIntObject.TestVectorIntObject

module TD.Data.TestBytes
data TestBytes

-- | A simple object containing a sequence of bytes; for testing only
TestBytes :: Maybe ByteString -> TestBytes

-- | Bytes
[value] :: TestBytes -> Maybe ByteString
instance GHC.Show.Show TD.Data.TestBytes.TestBytes
instance GHC.Classes.Eq TD.Data.TestBytes.TestBytes
instance TD.Lib.Internal.ShortShow TD.Data.TestBytes.TestBytes
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TestBytes.TestBytes

module TD.Data.TemporaryPasswordState
data TemporaryPasswordState

-- | Returns information about the availability of a temporary password,
--   which can be used for payments
TemporaryPasswordState :: Maybe Bool -> Maybe Int -> TemporaryPasswordState

-- | True, if a temporary password is available
[has_password] :: TemporaryPasswordState -> Maybe Bool

-- | Time left before the temporary password expires, in seconds
[valid_for] :: TemporaryPasswordState -> Maybe Int
instance GHC.Show.Show TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance GHC.Classes.Eq TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance TD.Lib.Internal.ShortShow TD.Data.TemporaryPasswordState.TemporaryPasswordState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TemporaryPasswordState.TemporaryPasswordState

module TD.Data.SupergroupMembersFilter

-- | Specifies the kind of chat members to return in getSupergroupMembers
data SupergroupMembersFilter

-- | Returns recently active users in reverse chronological order
SupergroupMembersFilterRecent :: SupergroupMembersFilter

-- | Returns contacts of the user, which are members of the supergroup or
--   channel
SupergroupMembersFilterContacts :: Maybe Text -> SupergroupMembersFilter

-- | Query to search for
[query] :: SupergroupMembersFilter -> Maybe Text

-- | Returns the owner and administrators
SupergroupMembersFilterAdministrators :: SupergroupMembersFilter

-- | Used to search for supergroup or channel members via a (string) query
SupergroupMembersFilterSearch :: Maybe Text -> SupergroupMembersFilter

-- | Query to search for
[query] :: SupergroupMembersFilter -> Maybe Text

-- | Returns restricted supergroup members; can be used only by
--   administrators
SupergroupMembersFilterRestricted :: Maybe Text -> SupergroupMembersFilter

-- | Query to search for
[query] :: SupergroupMembersFilter -> Maybe Text

-- | Returns users banned from the supergroup or channel; can be used only
--   by administrators
SupergroupMembersFilterBanned :: Maybe Text -> SupergroupMembersFilter

-- | Query to search for
[query] :: SupergroupMembersFilter -> Maybe Text

-- | Returns users which can be mentioned in the supergroup
SupergroupMembersFilterMention :: Maybe Text -> Maybe Int -> SupergroupMembersFilter

-- | Query to search for
[query] :: SupergroupMembersFilter -> Maybe Text

-- | If non-zero, the identifier of the current message thread
[message_thread_id] :: SupergroupMembersFilter -> Maybe Int

-- | Returns bot members of the supergroup or channel
SupergroupMembersFilterBots :: SupergroupMembersFilter
instance GHC.Show.Show TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance GHC.Classes.Eq TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance TD.Lib.Internal.ShortShow TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SupergroupMembersFilter.SupergroupMembersFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SupergroupMembersFilter.SupergroupMembersFilter

module TD.Data.SuggestedAction

-- | Describes an action suggested to the current user
data SuggestedAction

-- | Suggests the user to enable
--   archive_and_mute_new_chats_from_unknown_users setting in
--   archiveChatListSettings
SuggestedActionEnableArchiveAndMuteNewChats :: SuggestedAction

-- | Suggests the user to check whether they still remember their 2-step
--   verification password
SuggestedActionCheckPassword :: SuggestedAction

-- | Suggests the user to check whether authorization phone number is
--   correct and change the phone number if it is inaccessible
SuggestedActionCheckPhoneNumber :: SuggestedAction

-- | Suggests the user to view a hint about the meaning of one and two
--   check marks on sent messages
SuggestedActionViewChecksHint :: SuggestedAction

-- | Suggests the user to convert specified supergroup to a broadcast group
SuggestedActionConvertToBroadcastGroup :: Maybe Int -> SuggestedAction

-- | Supergroup identifier
[supergroup_id] :: SuggestedAction -> Maybe Int

-- | Suggests the user to set a 2-step verification password to be able to
--   log in again
SuggestedActionSetPassword :: Maybe Int -> SuggestedAction

-- | The number of days to pass between consecutive authorizations if the
--   user declines to set password; if 0, then the user is advised to set
--   the password for security reasons
[authorization_delay] :: SuggestedAction -> Maybe Int

-- | Suggests the user to upgrade the Premium subscription from monthly
--   payments to annual payments
SuggestedActionUpgradePremium :: SuggestedAction

-- | Suggests the user to restore a recently expired Premium subscription
SuggestedActionRestorePremium :: SuggestedAction

-- | Suggests the user to subscribe to the Premium subscription with annual
--   payments
SuggestedActionSubscribeToAnnualPremium :: SuggestedAction

-- | Suggests the user to gift Telegram Premium to friends for Christmas
SuggestedActionGiftPremiumForChristmas :: SuggestedAction

-- | Suggests the user to set birthdate
SuggestedActionSetBirthdate :: SuggestedAction

-- | Suggests the user to extend their expiring Telegram Premium
--   subscription
SuggestedActionExtendPremium :: Maybe Text -> SuggestedAction

-- | A URL for managing Telegram Premium subscription
[manage_premium_subscription_url] :: SuggestedAction -> Maybe Text
instance GHC.Show.Show TD.Data.SuggestedAction.SuggestedAction
instance GHC.Classes.Eq TD.Data.SuggestedAction.SuggestedAction
instance TD.Lib.Internal.ShortShow TD.Data.SuggestedAction.SuggestedAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SuggestedAction.SuggestedAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SuggestedAction.SuggestedAction

module TD.Data.StoryPrivacySettings

-- | Describes privacy settings of a story
data StoryPrivacySettings

-- | The story can be viewed by everyone
StoryPrivacySettingsEveryone :: Maybe [Int] -> StoryPrivacySettings

-- | Identifiers of the users that can't see the story; always unknown and
--   empty for non-owned stories
[except_user_ids] :: StoryPrivacySettings -> Maybe [Int]

-- | The story can be viewed by all contacts except chosen users
StoryPrivacySettingsContacts :: Maybe [Int] -> StoryPrivacySettings

-- | Identifiers of the users that can't see the story; always unknown and
--   empty for non-owned stories
[except_user_ids] :: StoryPrivacySettings -> Maybe [Int]

-- | The story can be viewed by all close friends
StoryPrivacySettingsCloseFriends :: StoryPrivacySettings

-- | The story can be viewed by certain specified users
StoryPrivacySettingsSelectedUsers :: Maybe [Int] -> StoryPrivacySettings

-- | Identifiers of the users; always unknown and empty for non-owned
--   stories
[user_ids] :: StoryPrivacySettings -> Maybe [Int]
instance GHC.Show.Show TD.Data.StoryPrivacySettings.StoryPrivacySettings
instance GHC.Classes.Eq TD.Data.StoryPrivacySettings.StoryPrivacySettings
instance TD.Lib.Internal.ShortShow TD.Data.StoryPrivacySettings.StoryPrivacySettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryPrivacySettings.StoryPrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StoryPrivacySettings.StoryPrivacySettings

module TD.Data.StoryOrigin

-- | Contains information about the origin of a story that was reposted
data StoryOrigin

-- | The original story was a public story with known sender
StoryOriginPublicStory :: Maybe Int -> Maybe Int -> StoryOrigin

-- | Identifier of the chat that posted original story
[chat_id] :: StoryOrigin -> Maybe Int

-- | Story identifier of the original story
[story_id] :: StoryOrigin -> Maybe Int

-- | The original story was sent by an unknown user
StoryOriginHiddenUser :: Maybe Text -> StoryOrigin

-- | Name of the story sender
[sender_name] :: StoryOrigin -> Maybe Text
instance GHC.Show.Show TD.Data.StoryOrigin.StoryOrigin
instance GHC.Classes.Eq TD.Data.StoryOrigin.StoryOrigin
instance TD.Lib.Internal.ShortShow TD.Data.StoryOrigin.StoryOrigin
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryOrigin.StoryOrigin

module TD.Data.StoryRepostInfo
data StoryRepostInfo

-- | Contains information about original story that was reposted
StoryRepostInfo :: Maybe StoryOrigin -> Maybe Bool -> StoryRepostInfo

-- | Origin of the story that was reposted
[origin] :: StoryRepostInfo -> Maybe StoryOrigin

-- | True, if story content was modified during reposting; otherwise, story
--   wasn't modified
[is_content_modified] :: StoryRepostInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.StoryRepostInfo.StoryRepostInfo
instance GHC.Classes.Eq TD.Data.StoryRepostInfo.StoryRepostInfo
instance TD.Lib.Internal.ShortShow TD.Data.StoryRepostInfo.StoryRepostInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryRepostInfo.StoryRepostInfo

module TD.Data.StoryList

-- | Describes a list of stories
data StoryList

-- | The list of stories, shown in the main chat list and folder chat lists
StoryListMain :: StoryList

-- | The list of stories, shown in the Arvhive chat list
StoryListArchive :: StoryList
instance GHC.Show.Show TD.Data.StoryList.StoryList
instance GHC.Classes.Eq TD.Data.StoryList.StoryList
instance TD.Lib.Internal.ShortShow TD.Data.StoryList.StoryList
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryList.StoryList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StoryList.StoryList

module TD.Data.StoryInteractionInfo
data StoryInteractionInfo

-- | Contains information about interactions with a story
StoryInteractionInfo :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Int] -> StoryInteractionInfo

-- | Number of times the story was viewed
[view_count] :: StoryInteractionInfo -> Maybe Int

-- | Number of times the story was forwarded; 0 if none or unknown
[forward_count] :: StoryInteractionInfo -> Maybe Int

-- | Number of reactions added to the story; 0 if none or unknown
[reaction_count] :: StoryInteractionInfo -> Maybe Int

-- | Identifiers of at most 3 recent viewers of the story
[recent_viewer_user_ids] :: StoryInteractionInfo -> Maybe [Int]
instance GHC.Show.Show TD.Data.StoryInteractionInfo.StoryInteractionInfo
instance GHC.Classes.Eq TD.Data.StoryInteractionInfo.StoryInteractionInfo
instance TD.Lib.Internal.ShortShow TD.Data.StoryInteractionInfo.StoryInteractionInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryInteractionInfo.StoryInteractionInfo

module TD.Data.StoryInfo
data StoryInfo

-- | Contains basic information about a story
StoryInfo :: Maybe Int -> Maybe Int -> Maybe Bool -> StoryInfo

-- | Unique story identifier among stories of the given sender
[story_id] :: StoryInfo -> Maybe Int

-- | Point in time (Unix timestamp) when the story was published
[date] :: StoryInfo -> Maybe Int

-- | True, if the story is available only to close friends
[is_for_close_friends] :: StoryInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.StoryInfo.StoryInfo
instance GHC.Classes.Eq TD.Data.StoryInfo.StoryInfo
instance TD.Lib.Internal.ShortShow TD.Data.StoryInfo.StoryInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryInfo.StoryInfo

module TD.Data.StoryFullId
data StoryFullId

-- | Contains identifier of a story along with identifier of its sender
StoryFullId :: Maybe Int -> Maybe Int -> StoryFullId

-- | Identifier of the chat that posted the story
[sender_chat_id] :: StoryFullId -> Maybe Int

-- | Unique story identifier among stories of the given sender
[story_id] :: StoryFullId -> Maybe Int
defaultStoryFullId :: StoryFullId
instance GHC.Show.Show TD.Data.StoryFullId.StoryFullId
instance GHC.Classes.Eq TD.Data.StoryFullId.StoryFullId
instance TD.Lib.Internal.ShortShow TD.Data.StoryFullId.StoryFullId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryFullId.StoryFullId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StoryFullId.StoryFullId

module TD.Data.StoryAreaPosition
data StoryAreaPosition

-- | Describes position of a clickable rectangle area on a story media
StoryAreaPosition :: Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> Maybe Double -> StoryAreaPosition

-- | The abscissa of the rectangle's center, as a percentage of the media
--   width
[x_percentage] :: StoryAreaPosition -> Maybe Double

-- | The ordinate of the rectangle's center, as a percentage of the media
--   height
[y_percentage] :: StoryAreaPosition -> Maybe Double

-- | The width of the rectangle, as a percentage of the media width
[width_percentage] :: StoryAreaPosition -> Maybe Double

-- | The height of the rectangle, as a percentage of the media height
[height_percentage] :: StoryAreaPosition -> Maybe Double

-- | Clockwise rotation angle of the rectangle, in degrees; 0-360
[rotation_angle] :: StoryAreaPosition -> Maybe Double
defaultStoryAreaPosition :: StoryAreaPosition
instance GHC.Show.Show TD.Data.StoryAreaPosition.StoryAreaPosition
instance GHC.Classes.Eq TD.Data.StoryAreaPosition.StoryAreaPosition
instance TD.Lib.Internal.ShortShow TD.Data.StoryAreaPosition.StoryAreaPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryAreaPosition.StoryAreaPosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StoryAreaPosition.StoryAreaPosition

module TD.Data.StorageStatisticsFast
data StorageStatisticsFast

-- | Contains approximate storage usage statistics, excluding files of
--   unknown file type
StorageStatisticsFast :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> StorageStatisticsFast

-- | Approximate total size of files, in bytes
[files_size] :: StorageStatisticsFast -> Maybe Int

-- | Approximate number of files
[file_count] :: StorageStatisticsFast -> Maybe Int

-- | Size of the database
[database_size] :: StorageStatisticsFast -> Maybe Int

-- | Size of the language pack database
[language_pack_database_size] :: StorageStatisticsFast -> Maybe Int

-- | Size of the TDLib internal log
[log_size] :: StorageStatisticsFast -> Maybe Int
instance GHC.Show.Show TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance GHC.Classes.Eq TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance TD.Lib.Internal.ShortShow TD.Data.StorageStatisticsFast.StorageStatisticsFast
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsFast.StorageStatisticsFast

module TD.Data.StickerType

-- | Describes type of sticker
data StickerType

-- | The sticker is a regular sticker
StickerTypeRegular :: StickerType

-- | The sticker is a mask in WEBP format to be placed on photos or videos
StickerTypeMask :: StickerType

-- | The sticker is a custom emoji to be used inside message text and
--   caption
StickerTypeCustomEmoji :: StickerType
instance GHC.Show.Show TD.Data.StickerType.StickerType
instance GHC.Classes.Eq TD.Data.StickerType.StickerType
instance TD.Lib.Internal.ShortShow TD.Data.StickerType.StickerType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerType.StickerType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerType.StickerType

module TD.Data.StickerFormat

-- | Describes format of a sticker
data StickerFormat

-- | The sticker is an image in WEBP format
StickerFormatWebp :: StickerFormat

-- | The sticker is an animation in TGS format
StickerFormatTgs :: StickerFormat

-- | The sticker is a video in WEBM format
StickerFormatWebm :: StickerFormat
instance GHC.Show.Show TD.Data.StickerFormat.StickerFormat
instance GHC.Classes.Eq TD.Data.StickerFormat.StickerFormat
instance TD.Lib.Internal.ShortShow TD.Data.StickerFormat.StickerFormat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerFormat.StickerFormat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StickerFormat.StickerFormat

module TD.Data.StatisticalValue
data StatisticalValue

-- | A value with information about its recent changes
StatisticalValue :: Maybe Double -> Maybe Double -> Maybe Double -> StatisticalValue

-- | The current value
[value] :: StatisticalValue -> Maybe Double

-- | The value for the previous day
[previous_value] :: StatisticalValue -> Maybe Double

-- | The growth rate of the value, as a percentage
[growth_rate_percentage] :: StatisticalValue -> Maybe Double
instance GHC.Show.Show TD.Data.StatisticalValue.StatisticalValue
instance GHC.Classes.Eq TD.Data.StatisticalValue.StatisticalValue
instance TD.Lib.Internal.ShortShow TD.Data.StatisticalValue.StatisticalValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StatisticalValue.StatisticalValue

module TD.Data.StatisticalGraph

-- | Describes a statistical graph
data StatisticalGraph

-- | A graph data
StatisticalGraphData :: Maybe Text -> Maybe Text -> StatisticalGraph

-- | Graph data in JSON format
[json_data] :: StatisticalGraph -> Maybe Text

-- | If non-empty, a token which can be used to receive a zoomed in graph
[zoom_token] :: StatisticalGraph -> Maybe Text

-- | The graph data to be asynchronously loaded through getStatisticalGraph
StatisticalGraphAsync :: Maybe Text -> StatisticalGraph

-- | The token to use for data loading
[token] :: StatisticalGraph -> Maybe Text

-- | An error message to be shown to the user instead of the graph
StatisticalGraphError :: Maybe Text -> StatisticalGraph

-- | The error message
[error_message] :: StatisticalGraph -> Maybe Text
instance GHC.Show.Show TD.Data.StatisticalGraph.StatisticalGraph
instance GHC.Classes.Eq TD.Data.StatisticalGraph.StatisticalGraph
instance TD.Lib.Internal.ShortShow TD.Data.StatisticalGraph.StatisticalGraph
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StatisticalGraph.StatisticalGraph

module TD.Data.StoryStatistics
data StoryStatistics

-- | A detailed statistics about a story
StoryStatistics :: Maybe StatisticalGraph -> Maybe StatisticalGraph -> StoryStatistics

-- | A graph containing number of story views and shares
[story_interaction_graph] :: StoryStatistics -> Maybe StatisticalGraph

-- | A graph containing number of story reactions
[story_reaction_graph] :: StoryStatistics -> Maybe StatisticalGraph
instance GHC.Show.Show TD.Data.StoryStatistics.StoryStatistics
instance GHC.Classes.Eq TD.Data.StoryStatistics.StoryStatistics
instance TD.Lib.Internal.ShortShow TD.Data.StoryStatistics.StoryStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryStatistics.StoryStatistics

module TD.Data.SessionType

-- | Represents the type of session
data SessionType

-- | The session is running on an Android device
SessionTypeAndroid :: SessionType

-- | The session is running on a generic Apple device
SessionTypeApple :: SessionType

-- | The session is running on the Brave browser
SessionTypeBrave :: SessionType

-- | The session is running on the Chrome browser
SessionTypeChrome :: SessionType

-- | The session is running on the Edge browser
SessionTypeEdge :: SessionType

-- | The session is running on the Firefox browser
SessionTypeFirefox :: SessionType

-- | The session is running on an iPad device
SessionTypeIpad :: SessionType

-- | The session is running on an iPhone device
SessionTypeIphone :: SessionType

-- | The session is running on a Linux device
SessionTypeLinux :: SessionType

-- | The session is running on a Mac device
SessionTypeMac :: SessionType

-- | The session is running on the Opera browser
SessionTypeOpera :: SessionType

-- | The session is running on the Safari browser
SessionTypeSafari :: SessionType

-- | The session is running on an Ubuntu device
SessionTypeUbuntu :: SessionType

-- | The session is running on an unknown type of device
SessionTypeUnknown :: SessionType

-- | The session is running on the Vivaldi browser
SessionTypeVivaldi :: SessionType

-- | The session is running on a Windows device
SessionTypeWindows :: SessionType

-- | The session is running on an Xbox console
SessionTypeXbox :: SessionType
instance GHC.Show.Show TD.Data.SessionType.SessionType
instance GHC.Classes.Eq TD.Data.SessionType.SessionType
instance TD.Lib.Internal.ShortShow TD.Data.SessionType.SessionType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SessionType.SessionType

module TD.Data.Session
data Session

-- | Contains information about one session in a Telegram application used
--   by the current user. Sessions must be shown to the user in the
--   returned order
Session :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe SessionType -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Session

-- | Session identifier
[_id] :: Session -> Maybe Int

-- | True, if this session is the current session
[is_current] :: Session -> Maybe Bool

-- | True, if a 2-step verification password is needed to complete
--   authorization of the session
[is_password_pending] :: Session -> Maybe Bool

-- | True, if the session wasn't confirmed from another session
[is_unconfirmed] :: Session -> Maybe Bool

-- | True, if incoming secret chats can be accepted by the session
[can_accept_secret_chats] :: Session -> Maybe Bool

-- | True, if incoming calls can be accepted by the session
[can_accept_calls] :: Session -> Maybe Bool

-- | Session type based on the system and application version, which can be
--   used to display a corresponding icon
[_type] :: Session -> Maybe SessionType

-- | Telegram API identifier, as provided by the application
[api_id] :: Session -> Maybe Int

-- | Name of the application, as provided by the application
[application_name] :: Session -> Maybe Text

-- | The version of the application, as provided by the application
[application_version] :: Session -> Maybe Text

-- | True, if the application is an official application or uses the api_id
--   of an official application
[is_official_application] :: Session -> Maybe Bool

-- | Model of the device the application has been run or is running on, as
--   provided by the application
[device_model] :: Session -> Maybe Text

-- | Operating system the application has been run or is running on, as
--   provided by the application
[platform] :: Session -> Maybe Text

-- | Version of the operating system the application has been run or is
--   running on, as provided by the application
[system_version] :: Session -> Maybe Text

-- | Point in time (Unix timestamp) when the user has logged in
[log_in_date] :: Session -> Maybe Int

-- | Point in time (Unix timestamp) when the session was last used
[last_active_date] :: Session -> Maybe Int

-- | IP address from which the session was created, in human-readable
--   format
[ip_address] :: Session -> Maybe Text

-- | A human-readable description of the location from which the session
--   was created, based on the IP address
[location] :: Session -> Maybe Text
instance GHC.Show.Show TD.Data.Session.Session
instance GHC.Classes.Eq TD.Data.Session.Session
instance TD.Lib.Internal.ShortShow TD.Data.Session.Session
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Session.Session

module TD.Data.Sessions
data Sessions

-- | Contains a list of sessions
Sessions :: Maybe [Session] -> Maybe Int -> Sessions

-- | List of sessions
[sessions] :: Sessions -> Maybe [Session]

-- | Number of days of inactivity before sessions will automatically be
--   terminated; 1-366 days
[inactive_session_ttl_days] :: Sessions -> Maybe Int
instance GHC.Show.Show TD.Data.Sessions.Sessions
instance GHC.Classes.Eq TD.Data.Sessions.Sessions
instance TD.Lib.Internal.ShortShow TD.Data.Sessions.Sessions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Sessions.Sessions

module TD.Data.SentWebAppMessage
data SentWebAppMessage

-- | Information about the message sent by answerWebAppQuery
SentWebAppMessage :: Maybe Text -> SentWebAppMessage

-- | Identifier of the sent inline message, if known
[inline_message_id] :: SentWebAppMessage -> Maybe Text
instance GHC.Show.Show TD.Data.SentWebAppMessage.SentWebAppMessage
instance GHC.Classes.Eq TD.Data.SentWebAppMessage.SentWebAppMessage
instance TD.Lib.Internal.ShortShow TD.Data.SentWebAppMessage.SentWebAppMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SentWebAppMessage.SentWebAppMessage

module TD.Data.SecretChatState

-- | Describes the current secret chat state
data SecretChatState

-- | The secret chat is not yet created; waiting for the other user to get
--   online
SecretChatStatePending :: SecretChatState

-- | The secret chat is ready to use
SecretChatStateReady :: SecretChatState

-- | The secret chat is closed
SecretChatStateClosed :: SecretChatState
instance GHC.Show.Show TD.Data.SecretChatState.SecretChatState
instance GHC.Classes.Eq TD.Data.SecretChatState.SecretChatState
instance TD.Lib.Internal.ShortShow TD.Data.SecretChatState.SecretChatState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SecretChatState.SecretChatState

module TD.Data.SecretChat
data SecretChat

-- | Represents a secret chat
SecretChat :: Maybe Int -> Maybe Int -> Maybe SecretChatState -> Maybe Bool -> Maybe ByteString -> Maybe Int -> SecretChat

-- | Secret chat identifier
[_id] :: SecretChat -> Maybe Int

-- | Identifier of the chat partner
[user_id] :: SecretChat -> Maybe Int

-- | State of the secret chat
[state] :: SecretChat -> Maybe SecretChatState

-- | True, if the chat was created by the current user; false otherwise
[is_outbound] :: SecretChat -> Maybe Bool

-- | Hash of the currently used key for comparison with the hash of the
--   chat partner's key. This is a string of 36 little-endian bytes, which
--   must be split into groups of 2 bits, each denoting a pixel of one of 4
--   colors FFFFFF, D5E6F3, 2D5775, and 2F99C9. The pixels must be used to
--   make a 12x12 square image filled from left to right, top to bottom.
--   Alternatively, the first 32 bytes of the hash can be converted to the
--   hexadecimal format and printed as 32 2-digit hex numbers
[key_hash] :: SecretChat -> Maybe ByteString

-- | Secret chat layer; determines features supported by the chat partner's
--   application. Nested text entities and underline and strikethrough
--   entities are supported if the layer &gt;= 101, files bigger than
--   2000MB are supported if the layer &gt;= 143, spoiler and custom emoji
--   text entities are supported if the layer &gt;= 144
[layer] :: SecretChat -> Maybe Int
instance GHC.Show.Show TD.Data.SecretChat.SecretChat
instance GHC.Classes.Eq TD.Data.SecretChat.SecretChat
instance TD.Lib.Internal.ShortShow TD.Data.SecretChat.SecretChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SecretChat.SecretChat

module TD.Data.Seconds
data Seconds

-- | Contains a value representing a number of seconds
Seconds :: Maybe Double -> Seconds

-- | Number of seconds
[seconds] :: Seconds -> Maybe Double
instance GHC.Show.Show TD.Data.Seconds.Seconds
instance GHC.Classes.Eq TD.Data.Seconds.Seconds
instance TD.Lib.Internal.ShortShow TD.Data.Seconds.Seconds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Seconds.Seconds

module TD.Data.SearchMessagesFilter

-- | Represents a filter for message search results
data SearchMessagesFilter

-- | Returns all found messages, no filter is applied
SearchMessagesFilterEmpty :: SearchMessagesFilter

-- | Returns only animation messages
SearchMessagesFilterAnimation :: SearchMessagesFilter

-- | Returns only audio messages
SearchMessagesFilterAudio :: SearchMessagesFilter

-- | Returns only document messages
SearchMessagesFilterDocument :: SearchMessagesFilter

-- | Returns only photo messages
SearchMessagesFilterPhoto :: SearchMessagesFilter

-- | Returns only video messages
SearchMessagesFilterVideo :: SearchMessagesFilter

-- | Returns only voice note messages
SearchMessagesFilterVoiceNote :: SearchMessagesFilter

-- | Returns only photo and video messages
SearchMessagesFilterPhotoAndVideo :: SearchMessagesFilter

-- | Returns only messages containing URLs
SearchMessagesFilterUrl :: SearchMessagesFilter

-- | Returns only messages containing chat photos
SearchMessagesFilterChatPhoto :: SearchMessagesFilter

-- | Returns only video note messages
SearchMessagesFilterVideoNote :: SearchMessagesFilter

-- | Returns only voice and video note messages
SearchMessagesFilterVoiceAndVideoNote :: SearchMessagesFilter

-- | Returns only messages with mentions of the current user, or messages
--   that are replies to their messages
SearchMessagesFilterMention :: SearchMessagesFilter

-- | Returns only messages with unread mentions of the current user, or
--   messages that are replies to their messages. When using this filter
--   the results can't be additionally filtered by a query, a message
--   thread or by the sending user
SearchMessagesFilterUnreadMention :: SearchMessagesFilter

-- | Returns only messages with unread reactions for the current user. When
--   using this filter the results can't be additionally filtered by a
--   query, a message thread or by the sending user
SearchMessagesFilterUnreadReaction :: SearchMessagesFilter

-- | Returns only failed to send messages. This filter can be used only if
--   the message database is used
SearchMessagesFilterFailedToSend :: SearchMessagesFilter

-- | Returns only pinned messages
SearchMessagesFilterPinned :: SearchMessagesFilter
instance GHC.Show.Show TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance GHC.Classes.Eq TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance TD.Lib.Internal.ShortShow TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SearchMessagesFilter.SearchMessagesFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.SearchMessagesFilter.SearchMessagesFilter

module TD.Data.ScopeNotificationSettings
data ScopeNotificationSettings

-- | Contains information about notification settings for several chats
ScopeNotificationSettings :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ScopeNotificationSettings

-- | Time left before notifications will be unmuted, in seconds
[mute_for] :: ScopeNotificationSettings -> Maybe Int

-- | Identifier of the notification sound to be played; 0 if sound is
--   disabled
[sound_id] :: ScopeNotificationSettings -> Maybe Int

-- | True, if message content must be displayed in notifications
[show_preview] :: ScopeNotificationSettings -> Maybe Bool

-- | If true, story notifications are received only for the first 5 chats
--   from topChatCategoryUsers regardless of the value of mute_stories
[use_default_mute_stories] :: ScopeNotificationSettings -> Maybe Bool

-- | True, if story notifications are disabled
[mute_stories] :: ScopeNotificationSettings -> Maybe Bool

-- | Identifier of the notification sound to be played for stories; 0 if
--   sound is disabled
[story_sound_id] :: ScopeNotificationSettings -> Maybe Int

-- | True, if the sender of stories must be displayed in notifications
[show_story_sender] :: ScopeNotificationSettings -> Maybe Bool

-- | True, if notifications for incoming pinned messages will be created as
--   for an ordinary unread message
[disable_pinned_message_notifications] :: ScopeNotificationSettings -> Maybe Bool

-- | True, if notifications for messages with mentions will be created as
--   for an ordinary unread message
[disable_mention_notifications] :: ScopeNotificationSettings -> Maybe Bool
defaultScopeNotificationSettings :: ScopeNotificationSettings
instance GHC.Show.Show TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance GHC.Classes.Eq TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ScopeNotificationSettings.ScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ScopeNotificationSettings.ScopeNotificationSettings

module TD.Data.ScopeAutosaveSettings
data ScopeAutosaveSettings

-- | Contains autosave settings for an autosave settings scope
ScopeAutosaveSettings :: Maybe Bool -> Maybe Bool -> Maybe Int -> ScopeAutosaveSettings

-- | True, if photo autosave is enabled
[autosave_photos] :: ScopeAutosaveSettings -> Maybe Bool

-- | True, if video autosave is enabled
[autosave_videos] :: ScopeAutosaveSettings -> Maybe Bool

-- | The maximum size of a video file to be autosaved, in bytes; 512 KB -
--   4000 MB
[max_video_file_size] :: ScopeAutosaveSettings -> Maybe Int
defaultScopeAutosaveSettings :: ScopeAutosaveSettings
instance GHC.Show.Show TD.Data.ScopeAutosaveSettings.ScopeAutosaveSettings
instance GHC.Classes.Eq TD.Data.ScopeAutosaveSettings.ScopeAutosaveSettings
instance TD.Lib.Internal.ShortShow TD.Data.ScopeAutosaveSettings.ScopeAutosaveSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ScopeAutosaveSettings.ScopeAutosaveSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ScopeAutosaveSettings.ScopeAutosaveSettings

module TD.Data.SavedMessagesTopicType

-- | Describes type of Saved Messages topic
data SavedMessagesTopicType

-- | Topic containing messages sent by the current user of forwarded from
--   an unknown chat
SavedMessagesTopicTypeMyNotes :: SavedMessagesTopicType

-- | Topic containing messages forwarded from a user with hidden privacy
SavedMessagesTopicTypeAuthorHidden :: SavedMessagesTopicType

-- | Topic containing messages forwarded from a specific chat
SavedMessagesTopicTypeSavedFromChat :: Maybe Int -> SavedMessagesTopicType

-- | Identifier of the chat
[chat_id] :: SavedMessagesTopicType -> Maybe Int
instance GHC.Show.Show TD.Data.SavedMessagesTopicType.SavedMessagesTopicType
instance GHC.Classes.Eq TD.Data.SavedMessagesTopicType.SavedMessagesTopicType
instance TD.Lib.Internal.ShortShow TD.Data.SavedMessagesTopicType.SavedMessagesTopicType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedMessagesTopicType.SavedMessagesTopicType

module TD.Data.SavedCredentials
data SavedCredentials

-- | Contains information about saved payment credentials
SavedCredentials :: Maybe Text -> Maybe Text -> SavedCredentials

-- | Unique identifier of the saved credentials
[_id] :: SavedCredentials -> Maybe Text

-- | Title of the saved credentials
[title] :: SavedCredentials -> Maybe Text
instance GHC.Show.Show TD.Data.SavedCredentials.SavedCredentials
instance GHC.Classes.Eq TD.Data.SavedCredentials.SavedCredentials
instance TD.Lib.Internal.ShortShow TD.Data.SavedCredentials.SavedCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedCredentials.SavedCredentials

module TD.Data.RtmpUrl
data RtmpUrl

-- | Represents an RTMP URL
RtmpUrl :: Maybe Text -> Maybe Text -> RtmpUrl

-- | The URL
[url] :: RtmpUrl -> Maybe Text

-- | Stream key
[stream_key] :: RtmpUrl -> Maybe Text
instance GHC.Show.Show TD.Data.RtmpUrl.RtmpUrl
instance GHC.Classes.Eq TD.Data.RtmpUrl.RtmpUrl
instance TD.Lib.Internal.ShortShow TD.Data.RtmpUrl.RtmpUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RtmpUrl.RtmpUrl

module TD.Data.ResetPasswordResult

-- | Represents result of 2-step verification password reset
data ResetPasswordResult

-- | The password was reset
ResetPasswordResultOk :: ResetPasswordResult

-- | The password reset request is pending
ResetPasswordResultPending :: Maybe Int -> ResetPasswordResult

-- | Point in time (Unix timestamp) after which the password can be reset
--   immediately using resetPassword
[pending_reset_date] :: ResetPasswordResult -> Maybe Int

-- | The password reset request was declined
ResetPasswordResultDeclined :: Maybe Int -> ResetPasswordResult

-- | Point in time (Unix timestamp) when the password reset can be retried
[retry_date] :: ResetPasswordResult -> Maybe Int
instance GHC.Show.Show TD.Data.ResetPasswordResult.ResetPasswordResult
instance GHC.Classes.Eq TD.Data.ResetPasswordResult.ResetPasswordResult
instance TD.Lib.Internal.ShortShow TD.Data.ResetPasswordResult.ResetPasswordResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ResetPasswordResult.ResetPasswordResult

module TD.Data.ReportReason

-- | Describes the reason why a chat is reported
data ReportReason

-- | The chat contains spam messages
ReportReasonSpam :: ReportReason

-- | The chat promotes violence
ReportReasonViolence :: ReportReason

-- | The chat contains pornographic messages
ReportReasonPornography :: ReportReason

-- | The chat has child abuse related content
ReportReasonChildAbuse :: ReportReason

-- | The chat contains copyrighted content
ReportReasonCopyright :: ReportReason

-- | The location-based chat is unrelated to its stated location
ReportReasonUnrelatedLocation :: ReportReason

-- | The chat represents a fake account
ReportReasonFake :: ReportReason

-- | The chat has illegal drugs related content
ReportReasonIllegalDrugs :: ReportReason

-- | The chat contains messages with personal details
ReportReasonPersonalDetails :: ReportReason

-- | A custom reason provided by the user
ReportReasonCustom :: ReportReason
instance GHC.Show.Show TD.Data.ReportReason.ReportReason
instance GHC.Classes.Eq TD.Data.ReportReason.ReportReason
instance TD.Lib.Internal.ShortShow TD.Data.ReportReason.ReportReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReportReason.ReportReason
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReportReason.ReportReason

module TD.Data.ReportChatSponsoredMessageOption
data ReportChatSponsoredMessageOption

-- | Describes an option to report a sponsored message
ReportChatSponsoredMessageOption :: Maybe ByteString -> Maybe Text -> ReportChatSponsoredMessageOption

-- | Unique identifier of the option
[_id] :: ReportChatSponsoredMessageOption -> Maybe ByteString

-- | Text of the option
[text] :: ReportChatSponsoredMessageOption -> Maybe Text
instance GHC.Show.Show TD.Data.ReportChatSponsoredMessageOption.ReportChatSponsoredMessageOption
instance GHC.Classes.Eq TD.Data.ReportChatSponsoredMessageOption.ReportChatSponsoredMessageOption
instance TD.Lib.Internal.ShortShow TD.Data.ReportChatSponsoredMessageOption.ReportChatSponsoredMessageOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReportChatSponsoredMessageOption.ReportChatSponsoredMessageOption

module TD.Data.ReportChatSponsoredMessageResult

-- | Describes result of sponsored message report
data ReportChatSponsoredMessageResult

-- | The message was reported successfully
ReportChatSponsoredMessageResultOk :: ReportChatSponsoredMessageResult

-- | The sponsored message is too old or not found
ReportChatSponsoredMessageResultFailed :: ReportChatSponsoredMessageResult

-- | The user must choose an option to report the message and repeat
--   request with the chosen option
ReportChatSponsoredMessageResultOptionRequired :: Maybe Text -> Maybe [ReportChatSponsoredMessageOption] -> ReportChatSponsoredMessageResult

-- | Title for the option choice
[title] :: ReportChatSponsoredMessageResult -> Maybe Text

-- | List of available options
[options] :: ReportChatSponsoredMessageResult -> Maybe [ReportChatSponsoredMessageOption]

-- | Sponsored messages were hidden for the user in all chats
ReportChatSponsoredMessageResultAdsHidden :: ReportChatSponsoredMessageResult

-- | The user asked to hide sponsored messages, but Telegram Premium is
--   required for this
ReportChatSponsoredMessageResultPremiumRequired :: ReportChatSponsoredMessageResult
instance GHC.Show.Show TD.Data.ReportChatSponsoredMessageResult.ReportChatSponsoredMessageResult
instance GHC.Classes.Eq TD.Data.ReportChatSponsoredMessageResult.ReportChatSponsoredMessageResult
instance TD.Lib.Internal.ShortShow TD.Data.ReportChatSponsoredMessageResult.ReportChatSponsoredMessageResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReportChatSponsoredMessageResult.ReportChatSponsoredMessageResult

module TD.Data.RemoteFile
data RemoteFile

-- | Represents a remote file
RemoteFile :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Int -> RemoteFile

-- | Remote file identifier; may be empty. Can be used by the current user
--   across application restarts or even from other devices. Uniquely
--   identifies a file, but a file can have a lot of different valid
--   identifiers. If the identifier starts with "<a>http://"</a> or
--   "<a>https://"</a>, it represents the HTTP URL of the file. TDLib is
--   currently unable to download files if only their URL is known. If
--   downloadFile/addFileToDownloads is called on such a file or if it is
--   sent to a secret chat, TDLib starts a file generation process by
--   sending updateFileGenerationStart to the application with the HTTP URL
--   in the original_path and "" as the conversion string. Application must
--   generate the file by downloading it to the specified location
[_id] :: RemoteFile -> Maybe Text

-- | Unique file identifier; may be empty if unknown. The unique file
--   identifier which is the same for the same file even for different
--   users and is persistent over time
[unique_id] :: RemoteFile -> Maybe Text

-- | True, if the file is currently being uploaded (or a remote copy is
--   being generated by some other means)
[is_uploading_active] :: RemoteFile -> Maybe Bool

-- | True, if a remote copy is fully available
[is_uploading_completed] :: RemoteFile -> Maybe Bool

-- | Size of the remote available part of the file, in bytes; 0 if unknown
[uploaded_size] :: RemoteFile -> Maybe Int
instance GHC.Show.Show TD.Data.RemoteFile.RemoteFile
instance GHC.Classes.Eq TD.Data.RemoteFile.RemoteFile
instance TD.Lib.Internal.ShortShow TD.Data.RemoteFile.RemoteFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RemoteFile.RemoteFile

module TD.Data.RecoveryEmailAddress
data RecoveryEmailAddress

-- | Contains information about the current recovery email address
RecoveryEmailAddress :: Maybe Text -> RecoveryEmailAddress

-- | Recovery email address
[recovery_email_address] :: RecoveryEmailAddress -> Maybe Text
instance GHC.Show.Show TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance GHC.Classes.Eq TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance TD.Lib.Internal.ShortShow TD.Data.RecoveryEmailAddress.RecoveryEmailAddress
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecoveryEmailAddress.RecoveryEmailAddress

module TD.Data.ReadDatePrivacySettings
data ReadDatePrivacySettings

-- | Contains privacy settings for message read date in private chats. Read
--   dates are always shown to the users that can see online status of the
--   current user regardless of this setting
ReadDatePrivacySettings :: Maybe Bool -> ReadDatePrivacySettings

-- | True, if message read date is shown to other users in private chats.
--   If false and the current user isn't a Telegram Premium user, then they
--   will not be able to see other's message read date.
[show_read_date] :: ReadDatePrivacySettings -> Maybe Bool
defaultReadDatePrivacySettings :: ReadDatePrivacySettings
instance GHC.Show.Show TD.Data.ReadDatePrivacySettings.ReadDatePrivacySettings
instance GHC.Classes.Eq TD.Data.ReadDatePrivacySettings.ReadDatePrivacySettings
instance TD.Lib.Internal.ShortShow TD.Data.ReadDatePrivacySettings.ReadDatePrivacySettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReadDatePrivacySettings.ReadDatePrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReadDatePrivacySettings.ReadDatePrivacySettings

module TD.Data.ReactionUnavailabilityReason

-- | Describes why the current user can't add reactions to the message,
--   despite some other users can
data ReactionUnavailabilityReason

-- | The user is an anonymous administrator in the supergroup, but isn't a
--   creator of it, so they can't vote on behalf of the supergroup
ReactionUnavailabilityReasonAnonymousAdministrator :: ReactionUnavailabilityReason

-- | The user isn't a member of the supergroup and can't send messages and
--   reactions there without joining
ReactionUnavailabilityReasonGuest :: ReactionUnavailabilityReason
instance GHC.Show.Show TD.Data.ReactionUnavailabilityReason.ReactionUnavailabilityReason
instance GHC.Classes.Eq TD.Data.ReactionUnavailabilityReason.ReactionUnavailabilityReason
instance TD.Lib.Internal.ShortShow TD.Data.ReactionUnavailabilityReason.ReactionUnavailabilityReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReactionUnavailabilityReason.ReactionUnavailabilityReason

module TD.Data.ReactionType

-- | Describes type of message reaction
data ReactionType

-- | A reaction with an emoji
ReactionTypeEmoji :: Maybe Text -> ReactionType

-- | Text representation of the reaction
[emoji] :: ReactionType -> Maybe Text

-- | A reaction with a custom emoji
ReactionTypeCustomEmoji :: Maybe Int -> ReactionType

-- | Unique identifier of the custom emoji
[custom_emoji_id] :: ReactionType -> Maybe Int
instance GHC.Show.Show TD.Data.ReactionType.ReactionType
instance GHC.Classes.Eq TD.Data.ReactionType.ReactionType
instance TD.Lib.Internal.ShortShow TD.Data.ReactionType.ReactionType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReactionType.ReactionType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReactionType.ReactionType

module TD.Data.SavedMessagesTag
data SavedMessagesTag

-- | Represents a tag used in Saved Messages or a Saved Messages topic
SavedMessagesTag :: Maybe ReactionType -> Maybe Text -> Maybe Int -> SavedMessagesTag

-- | The tag
[tag] :: SavedMessagesTag -> Maybe ReactionType

-- | Label of the tag; 0-12 characters. Always empty if the tag is returned
--   for a Saved Messages topic
[label] :: SavedMessagesTag -> Maybe Text

-- | Number of times the tag was used; may be 0 if the tag has non-empty
--   label
[count] :: SavedMessagesTag -> Maybe Int
instance GHC.Show.Show TD.Data.SavedMessagesTag.SavedMessagesTag
instance GHC.Classes.Eq TD.Data.SavedMessagesTag.SavedMessagesTag
instance TD.Lib.Internal.ShortShow TD.Data.SavedMessagesTag.SavedMessagesTag
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedMessagesTag.SavedMessagesTag

module TD.Data.SavedMessagesTags
data SavedMessagesTags

-- | Contains a list of tags used in Saved Messages
SavedMessagesTags :: Maybe [SavedMessagesTag] -> SavedMessagesTags

-- | List of tags
[tags] :: SavedMessagesTags -> Maybe [SavedMessagesTag]
instance GHC.Show.Show TD.Data.SavedMessagesTags.SavedMessagesTags
instance GHC.Classes.Eq TD.Data.SavedMessagesTags.SavedMessagesTags
instance TD.Lib.Internal.ShortShow TD.Data.SavedMessagesTags.SavedMessagesTags
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedMessagesTags.SavedMessagesTags

module TD.Data.ReactionNotificationSource

-- | Describes sources of reactions for which notifications will be shown
data ReactionNotificationSource

-- | Notifications for reactions are disabled
ReactionNotificationSourceNone :: ReactionNotificationSource

-- | Notifications for reactions are shown only for reactions from contacts
ReactionNotificationSourceContacts :: ReactionNotificationSource

-- | Notifications for reactions are shown for all reactions
ReactionNotificationSourceAll :: ReactionNotificationSource
instance GHC.Show.Show TD.Data.ReactionNotificationSource.ReactionNotificationSource
instance GHC.Classes.Eq TD.Data.ReactionNotificationSource.ReactionNotificationSource
instance TD.Lib.Internal.ShortShow TD.Data.ReactionNotificationSource.ReactionNotificationSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReactionNotificationSource.ReactionNotificationSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReactionNotificationSource.ReactionNotificationSource

module TD.Data.ReactionNotificationSettings
data ReactionNotificationSettings

-- | Contains information about notification settings for reactions
ReactionNotificationSettings :: Maybe ReactionNotificationSource -> Maybe ReactionNotificationSource -> Maybe Int -> Maybe Bool -> ReactionNotificationSettings

-- | Source of message reactions for which notifications are shown
[message_reaction_source] :: ReactionNotificationSettings -> Maybe ReactionNotificationSource

-- | Source of story reactions for which notifications are shown
[story_reaction_source] :: ReactionNotificationSettings -> Maybe ReactionNotificationSource

-- | Identifier of the notification sound to be played; 0 if sound is
--   disabled
[sound_id] :: ReactionNotificationSettings -> Maybe Int

-- | True, if reaction sender and emoji must be displayed in notifications
[show_preview] :: ReactionNotificationSettings -> Maybe Bool
defaultReactionNotificationSettings :: ReactionNotificationSettings
instance GHC.Show.Show TD.Data.ReactionNotificationSettings.ReactionNotificationSettings
instance GHC.Classes.Eq TD.Data.ReactionNotificationSettings.ReactionNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Data.ReactionNotificationSettings.ReactionNotificationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReactionNotificationSettings.ReactionNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReactionNotificationSettings.ReactionNotificationSettings

module TD.Data.PushReceiverId
data PushReceiverId

-- | Contains a globally unique push receiver identifier, which can be used
--   to identify which account has received a push notification
PushReceiverId :: Maybe Int -> PushReceiverId

-- | The globally unique identifier of push notification subscription
[_id] :: PushReceiverId -> Maybe Int
instance GHC.Show.Show TD.Data.PushReceiverId.PushReceiverId
instance GHC.Classes.Eq TD.Data.PushReceiverId.PushReceiverId
instance TD.Lib.Internal.ShortShow TD.Data.PushReceiverId.PushReceiverId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PushReceiverId.PushReceiverId

module TD.Data.PublicChatType

-- | Describes a type of public chats
data PublicChatType

-- | The chat is public, because it has an active username
PublicChatTypeHasUsername :: PublicChatType

-- | The chat is public, because it is a location-based supergroup
PublicChatTypeIsLocationBased :: PublicChatType
instance GHC.Show.Show TD.Data.PublicChatType.PublicChatType
instance GHC.Classes.Eq TD.Data.PublicChatType.PublicChatType
instance TD.Lib.Internal.ShortShow TD.Data.PublicChatType.PublicChatType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PublicChatType.PublicChatType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PublicChatType.PublicChatType

module TD.Data.ProxyType

-- | Describes the type of proxy server
data ProxyType

-- | A SOCKS5 proxy server
ProxyTypeSocks5 :: Maybe Text -> Maybe Text -> ProxyType

-- | Username for logging in; may be empty
[username] :: ProxyType -> Maybe Text

-- | Password for logging in; may be empty
[password] :: ProxyType -> Maybe Text

-- | A HTTP transparent proxy server
ProxyTypeHttp :: Maybe Text -> Maybe Text -> Maybe Bool -> ProxyType

-- | Username for logging in; may be empty
[username] :: ProxyType -> Maybe Text

-- | Password for logging in; may be empty
[password] :: ProxyType -> Maybe Text

-- | Pass true if the proxy supports only HTTP requests and doesn't support
--   transparent TCP connections via HTTP CONNECT method
[http_only] :: ProxyType -> Maybe Bool

-- | An MTProto proxy server
ProxyTypeMtproto :: Maybe Text -> ProxyType

-- | The proxy's secret in hexadecimal encoding
[secret] :: ProxyType -> Maybe Text
instance GHC.Show.Show TD.Data.ProxyType.ProxyType
instance GHC.Classes.Eq TD.Data.ProxyType.ProxyType
instance TD.Lib.Internal.ShortShow TD.Data.ProxyType.ProxyType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProxyType.ProxyType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ProxyType.ProxyType

module TD.Data.Proxy
data Proxy

-- | Contains information about a proxy server
Proxy :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe ProxyType -> Proxy

-- | Unique identifier of the proxy
[_id] :: Proxy -> Maybe Int

-- | Proxy server domain or IP address
[server] :: Proxy -> Maybe Text

-- | Proxy server port
[port] :: Proxy -> Maybe Int

-- | Point in time (Unix timestamp) when the proxy was last used; 0 if
--   never
[last_used_date] :: Proxy -> Maybe Int

-- | True, if the proxy is enabled now
[is_enabled] :: Proxy -> Maybe Bool

-- | Type of the proxy
[_type] :: Proxy -> Maybe ProxyType
instance GHC.Show.Show TD.Data.Proxy.Proxy
instance GHC.Classes.Eq TD.Data.Proxy.Proxy
instance TD.Lib.Internal.ShortShow TD.Data.Proxy.Proxy
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Proxy.Proxy

module TD.Data.Proxies
data Proxies

-- | Represents a list of proxy servers
Proxies :: Maybe [Proxy] -> Proxies

-- | List of proxy servers
[proxies] :: Proxies -> Maybe [Proxy]
instance GHC.Show.Show TD.Data.Proxies.Proxies
instance GHC.Classes.Eq TD.Data.Proxies.Proxies
instance TD.Lib.Internal.ShortShow TD.Data.Proxies.Proxies
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Proxies.Proxies

module TD.Data.ProfileAccentColors
data ProfileAccentColors

-- | Contains information about supported accent colors for user profile
--   photo background in RGB format
ProfileAccentColors :: Maybe [Int] -> Maybe [Int] -> Maybe [Int] -> ProfileAccentColors

-- | The list of 1-2 colors in RGB format, describing the colors, as
--   expected to be shown in the color palette settings
[palette_colors] :: ProfileAccentColors -> Maybe [Int]

-- | The list of 1-2 colors in RGB format, describing the colors, as
--   expected to be used for the profile photo background
[background_colors] :: ProfileAccentColors -> Maybe [Int]

-- | The list of 2 colors in RGB format, describing the colors of the
--   gradient to be used for the unread active story indicator around
--   profile photo
[story_colors] :: ProfileAccentColors -> Maybe [Int]
instance GHC.Show.Show TD.Data.ProfileAccentColors.ProfileAccentColors
instance GHC.Classes.Eq TD.Data.ProfileAccentColors.ProfileAccentColors
instance TD.Lib.Internal.ShortShow TD.Data.ProfileAccentColors.ProfileAccentColors
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProfileAccentColors.ProfileAccentColors

module TD.Data.ProfileAccentColor
data ProfileAccentColor

-- | Contains information about supported accent color for user profile
--   photo background
ProfileAccentColor :: Maybe Int -> Maybe ProfileAccentColors -> Maybe ProfileAccentColors -> Maybe Int -> Maybe Int -> ProfileAccentColor

-- | Profile accent color identifier
[_id] :: ProfileAccentColor -> Maybe Int

-- | Accent colors expected to be used in light themes
[light_theme_colors] :: ProfileAccentColor -> Maybe ProfileAccentColors

-- | Accent colors expected to be used in dark themes
[dark_theme_colors] :: ProfileAccentColor -> Maybe ProfileAccentColors

-- | The minimum chat boost level required to use the color in a supergroup
--   chat
[min_supergroup_chat_boost_level] :: ProfileAccentColor -> Maybe Int

-- | The minimum chat boost level required to use the color in a channel
--   chat
[min_channel_chat_boost_level] :: ProfileAccentColor -> Maybe Int
instance GHC.Show.Show TD.Data.ProfileAccentColor.ProfileAccentColor
instance GHC.Classes.Eq TD.Data.ProfileAccentColor.ProfileAccentColor
instance TD.Lib.Internal.ShortShow TD.Data.ProfileAccentColor.ProfileAccentColor
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProfileAccentColor.ProfileAccentColor

module TD.Data.PrepaidPremiumGiveaway
data PrepaidPremiumGiveaway

-- | Describes a prepaid Telegram Premium giveaway
PrepaidPremiumGiveaway :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> PrepaidPremiumGiveaway

-- | Unique identifier of the prepaid giveaway
[_id] :: PrepaidPremiumGiveaway -> Maybe Int

-- | Number of users which will receive Telegram Premium subscription gift
--   codes
[winner_count] :: PrepaidPremiumGiveaway -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
--   after code activation
[month_count] :: PrepaidPremiumGiveaway -> Maybe Int

-- | Point in time (Unix timestamp) when the giveaway was paid
[payment_date] :: PrepaidPremiumGiveaway -> Maybe Int
instance GHC.Show.Show TD.Data.PrepaidPremiumGiveaway.PrepaidPremiumGiveaway
instance GHC.Classes.Eq TD.Data.PrepaidPremiumGiveaway.PrepaidPremiumGiveaway
instance TD.Lib.Internal.ShortShow TD.Data.PrepaidPremiumGiveaway.PrepaidPremiumGiveaway
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PrepaidPremiumGiveaway.PrepaidPremiumGiveaway

module TD.Data.PremiumStoryFeature

-- | Describes a story feature available to Premium users
data PremiumStoryFeature

-- | Stories of the current user are displayed before stories of
--   non-Premium contacts, supergroups, and channels
PremiumStoryFeaturePriorityOrder :: PremiumStoryFeature

-- | The ability to hide the fact that the user viewed other's stories
PremiumStoryFeatureStealthMode :: PremiumStoryFeature

-- | The ability to check who opened the current user's stories after they
--   expire
PremiumStoryFeaturePermanentViewsHistory :: PremiumStoryFeature

-- | The ability to set custom expiration duration for stories
PremiumStoryFeatureCustomExpirationDuration :: PremiumStoryFeature

-- | The ability to save other's unprotected stories
PremiumStoryFeatureSaveStories :: PremiumStoryFeature

-- | The ability to use links and formatting in story caption
PremiumStoryFeatureLinksAndFormatting :: PremiumStoryFeature

-- | The ability to choose better quality for viewed stories
PremiumStoryFeatureVideoQuality :: PremiumStoryFeature
instance GHC.Show.Show TD.Data.PremiumStoryFeature.PremiumStoryFeature
instance GHC.Classes.Eq TD.Data.PremiumStoryFeature.PremiumStoryFeature
instance TD.Lib.Internal.ShortShow TD.Data.PremiumStoryFeature.PremiumStoryFeature
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumStoryFeature.PremiumStoryFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumStoryFeature.PremiumStoryFeature

module TD.Data.PremiumLimitType

-- | Describes type of limit, increased for Premium users
data PremiumLimitType

-- | The maximum number of joined supergroups and channels
PremiumLimitTypeSupergroupCount :: PremiumLimitType

-- | The maximum number of pinned chats in the main chat list
PremiumLimitTypePinnedChatCount :: PremiumLimitType

-- | The maximum number of created public chats
PremiumLimitTypeCreatedPublicChatCount :: PremiumLimitType

-- | The maximum number of saved animations
PremiumLimitTypeSavedAnimationCount :: PremiumLimitType

-- | The maximum number of favorite stickers
PremiumLimitTypeFavoriteStickerCount :: PremiumLimitType

-- | The maximum number of chat folders
PremiumLimitTypeChatFolderCount :: PremiumLimitType

-- | The maximum number of pinned and always included, or always excluded
--   chats in a chat folder
PremiumLimitTypeChatFolderChosenChatCount :: PremiumLimitType

-- | The maximum number of pinned chats in the archive chat list
PremiumLimitTypePinnedArchivedChatCount :: PremiumLimitType

-- | The maximum number of pinned Saved Messages topics
PremiumLimitTypePinnedSavedMessagesTopicCount :: PremiumLimitType

-- | The maximum length of sent media caption
PremiumLimitTypeCaptionLength :: PremiumLimitType

-- | The maximum length of the user's bio
PremiumLimitTypeBioLength :: PremiumLimitType

-- | The maximum number of invite links for a chat folder
PremiumLimitTypeChatFolderInviteLinkCount :: PremiumLimitType

-- | The maximum number of added shareable chat folders
PremiumLimitTypeShareableChatFolderCount :: PremiumLimitType

-- | The maximum number of active stories
PremiumLimitTypeActiveStoryCount :: PremiumLimitType

-- | The maximum number of stories sent per week
PremiumLimitTypeWeeklySentStoryCount :: PremiumLimitType

-- | The maximum number of stories sent per month
PremiumLimitTypeMonthlySentStoryCount :: PremiumLimitType

-- | The maximum length of captions of sent stories
PremiumLimitTypeStoryCaptionLength :: PremiumLimitType

-- | The maximum number of suggested reaction areas on a story
PremiumLimitTypeStorySuggestedReactionAreaCount :: PremiumLimitType

-- | The maximum number of received similar chats
PremiumLimitTypeSimilarChatCount :: PremiumLimitType
instance GHC.Show.Show TD.Data.PremiumLimitType.PremiumLimitType
instance GHC.Classes.Eq TD.Data.PremiumLimitType.PremiumLimitType
instance TD.Lib.Internal.ShortShow TD.Data.PremiumLimitType.PremiumLimitType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumLimitType.PremiumLimitType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumLimitType.PremiumLimitType

module TD.Data.PremiumLimit
data PremiumLimit

-- | Contains information about a limit, increased for Premium users
PremiumLimit :: Maybe PremiumLimitType -> Maybe Int -> Maybe Int -> PremiumLimit

-- | The type of the limit
[_type] :: PremiumLimit -> Maybe PremiumLimitType

-- | Default value of the limit
[default_value] :: PremiumLimit -> Maybe Int

-- | Value of the limit for Premium users
[premium_value] :: PremiumLimit -> Maybe Int
instance GHC.Show.Show TD.Data.PremiumLimit.PremiumLimit
instance GHC.Classes.Eq TD.Data.PremiumLimit.PremiumLimit
instance TD.Lib.Internal.ShortShow TD.Data.PremiumLimit.PremiumLimit
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumLimit.PremiumLimit

module TD.Data.PremiumGiveawayParticipantStatus

-- | Contains information about status of a user in a Telegram Premium
--   giveaway
data PremiumGiveawayParticipantStatus

-- | The user is eligible for the giveaway
PremiumGiveawayParticipantStatusEligible :: PremiumGiveawayParticipantStatus

-- | The user participates in the giveaway
PremiumGiveawayParticipantStatusParticipating :: PremiumGiveawayParticipantStatus

-- | The user can't participate in the giveaway, because they have already
--   been member of the chat
PremiumGiveawayParticipantStatusAlreadyWasMember :: Maybe Int -> PremiumGiveawayParticipantStatus

-- | Point in time (Unix timestamp) when the user joined the chat
[joined_chat_date] :: PremiumGiveawayParticipantStatus -> Maybe Int

-- | The user can't participate in the giveaway, because they are an
--   administrator in one of the chats that created the giveaway
PremiumGiveawayParticipantStatusAdministrator :: Maybe Int -> PremiumGiveawayParticipantStatus

-- | Identifier of the chat administered by the user
[chat_id] :: PremiumGiveawayParticipantStatus -> Maybe Int

-- | The user can't participate in the giveaway, because they phone number
--   is from a disallowed country
PremiumGiveawayParticipantStatusDisallowedCountry :: Maybe Text -> PremiumGiveawayParticipantStatus

-- | A two-letter ISO 3166-1 alpha-2 country code of the user's country
[user_country_code] :: PremiumGiveawayParticipantStatus -> Maybe Text
instance GHC.Show.Show TD.Data.PremiumGiveawayParticipantStatus.PremiumGiveawayParticipantStatus
instance GHC.Classes.Eq TD.Data.PremiumGiveawayParticipantStatus.PremiumGiveawayParticipantStatus
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiveawayParticipantStatus.PremiumGiveawayParticipantStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiveawayParticipantStatus.PremiumGiveawayParticipantStatus

module TD.Data.PremiumGiveawayParameters
data PremiumGiveawayParameters

-- | Describes parameters of a Telegram Premium giveaway
PremiumGiveawayParameters :: Maybe Int -> Maybe [Int] -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe Text -> PremiumGiveawayParameters

-- | Identifier of the supergroup or channel chat, which will be
--   automatically boosted by the winners of the giveaway for duration of
--   the Premium subscription. If the chat is a channel, then
--   can_post_messages right is required in the channel, otherwise, the
--   user must be an administrator in the supergroup
[boosted_chat_id] :: PremiumGiveawayParameters -> Maybe Int

-- | Identifiers of other supergroup or channel chats that must be
--   subscribed by the users to be eligible for the giveaway. There can be
--   up to getOption("giveaway_additional_chat_count_max") additional chats
[additional_chat_ids] :: PremiumGiveawayParameters -> Maybe [Int]

-- | Point in time (Unix timestamp) when the giveaway is expected to be
--   performed; must be 60-getOption("giveaway_duration_max") seconds in
--   the future in scheduled giveaways
[winners_selection_date] :: PremiumGiveawayParameters -> Maybe Int

-- | True, if only new members of the chats will be eligible for the
--   giveaway
[only_new_members] :: PremiumGiveawayParameters -> Maybe Bool

-- | True, if the list of winners of the giveaway will be available to
--   everyone
[has_public_winners] :: PremiumGiveawayParameters -> Maybe Bool

-- | The list of two-letter ISO 3166-1 alpha-2 codes of countries, users
--   from which will be eligible for the giveaway. If empty, then all users
--   can participate in the giveaway. There can be up to
--   getOption("giveaway_country_count_max") chosen countries. Users with
--   phone number that was bought at <a>https://fragment.com</a> can
--   participate in any giveaway and the country code <a>FT</a> must not be
--   specified in the list
[country_codes] :: PremiumGiveawayParameters -> Maybe [Text]

-- | Additional description of the giveaway prize; 0-128 characters
[prize_description] :: PremiumGiveawayParameters -> Maybe Text
defaultPremiumGiveawayParameters :: PremiumGiveawayParameters
instance GHC.Show.Show TD.Data.PremiumGiveawayParameters.PremiumGiveawayParameters
instance GHC.Classes.Eq TD.Data.PremiumGiveawayParameters.PremiumGiveawayParameters
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiveawayParameters.PremiumGiveawayParameters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiveawayParameters.PremiumGiveawayParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumGiveawayParameters.PremiumGiveawayParameters

module TD.Data.TelegramPaymentPurpose

-- | Describes a purpose of a payment toward Telegram
data TelegramPaymentPurpose

-- | The user creating Telegram Premium gift codes for other users
TelegramPaymentPurposePremiumGiftCodes :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe Int -> TelegramPaymentPurpose

-- | Identifier of the supergroup or channel chat, which will be
--   automatically boosted by the users for duration of the Premium
--   subscription and which is administered by the user; 0 if none
[boosted_chat_id] :: TelegramPaymentPurpose -> Maybe Int

-- | ISO 4217 currency code of the payment currency
[currency] :: TelegramPaymentPurpose -> Maybe Text

-- | Paid amount, in the smallest units of the currency
[amount] :: TelegramPaymentPurpose -> Maybe Int

-- | Identifiers of the users which can activate the gift codes
[user_ids] :: TelegramPaymentPurpose -> Maybe [Int]

-- | Number of months the Telegram Premium subscription will be active for
--   the users
[month_count] :: TelegramPaymentPurpose -> Maybe Int

-- | The user creating a Telegram Premium giveaway
TelegramPaymentPurposePremiumGiveaway :: Maybe PremiumGiveawayParameters -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> TelegramPaymentPurpose

-- | Giveaway parameters
[parameters] :: TelegramPaymentPurpose -> Maybe PremiumGiveawayParameters

-- | ISO 4217 currency code of the payment currency
[currency] :: TelegramPaymentPurpose -> Maybe Text

-- | Paid amount, in the smallest units of the currency
[amount] :: TelegramPaymentPurpose -> Maybe Int

-- | Number of users which will be able to activate the gift codes
[winner_count] :: TelegramPaymentPurpose -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active for
--   the users
[month_count] :: TelegramPaymentPurpose -> Maybe Int
instance GHC.Show.Show TD.Data.TelegramPaymentPurpose.TelegramPaymentPurpose
instance GHC.Classes.Eq TD.Data.TelegramPaymentPurpose.TelegramPaymentPurpose
instance TD.Lib.Internal.ShortShow TD.Data.TelegramPaymentPurpose.TelegramPaymentPurpose
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TelegramPaymentPurpose.TelegramPaymentPurpose
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TelegramPaymentPurpose.TelegramPaymentPurpose

module TD.Data.StorePaymentPurpose

-- | Describes a purpose of an in-store payment
data StorePaymentPurpose

-- | The user subscribing to Telegram Premium
StorePaymentPurposePremiumSubscription :: Maybe Bool -> Maybe Bool -> StorePaymentPurpose

-- | Pass true if this is a restore of a Telegram Premium purchase; only
--   for App Store
[is_restore] :: StorePaymentPurpose -> Maybe Bool

-- | Pass true if this is an upgrade from a monthly subscription to early
--   subscription; only for App Store
[is_upgrade] :: StorePaymentPurpose -> Maybe Bool

-- | The user gifting Telegram Premium to another user
StorePaymentPurposeGiftedPremium :: Maybe Int -> Maybe Text -> Maybe Int -> StorePaymentPurpose

-- | Identifier of the user to which Premium was gifted
[user_id] :: StorePaymentPurpose -> Maybe Int

-- | ISO 4217 currency code of the payment currency
[currency] :: StorePaymentPurpose -> Maybe Text

-- | Paid amount, in the smallest units of the currency
[amount] :: StorePaymentPurpose -> Maybe Int

-- | The user creating Telegram Premium gift codes for other users
StorePaymentPurposePremiumGiftCodes :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe [Int] -> StorePaymentPurpose

-- | Identifier of the supergroup or channel chat, which will be
--   automatically boosted by the users for duration of the Premium
--   subscription and which is administered by the user; 0 if none
[boosted_chat_id] :: StorePaymentPurpose -> Maybe Int

-- | ISO 4217 currency code of the payment currency
[currency] :: StorePaymentPurpose -> Maybe Text

-- | Paid amount, in the smallest units of the currency
[amount] :: StorePaymentPurpose -> Maybe Int

-- | Identifiers of the users which can activate the gift codes
[user_ids] :: StorePaymentPurpose -> Maybe [Int]

-- | The user creating a Telegram Premium giveaway
StorePaymentPurposePremiumGiveaway :: Maybe PremiumGiveawayParameters -> Maybe Text -> Maybe Int -> StorePaymentPurpose

-- | Giveaway parameters
[parameters] :: StorePaymentPurpose -> Maybe PremiumGiveawayParameters

-- | ISO 4217 currency code of the payment currency
[currency] :: StorePaymentPurpose -> Maybe Text

-- | Paid amount, in the smallest units of the currency
[amount] :: StorePaymentPurpose -> Maybe Int
instance GHC.Show.Show TD.Data.StorePaymentPurpose.StorePaymentPurpose
instance GHC.Classes.Eq TD.Data.StorePaymentPurpose.StorePaymentPurpose
instance TD.Lib.Internal.ShortShow TD.Data.StorePaymentPurpose.StorePaymentPurpose
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorePaymentPurpose.StorePaymentPurpose
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.StorePaymentPurpose.StorePaymentPurpose

module TD.Data.PremiumGiveawayInfo

-- | Contains information about Telegram Premium giveaway
data PremiumGiveawayInfo

-- | Describes an ongoing giveaway
PremiumGiveawayInfoOngoing :: Maybe Int -> Maybe PremiumGiveawayParticipantStatus -> Maybe Bool -> PremiumGiveawayInfo

-- | Point in time (Unix timestamp) when the giveaway was created
[creation_date] :: PremiumGiveawayInfo -> Maybe Int

-- | Status of the current user in the giveaway
[status] :: PremiumGiveawayInfo -> Maybe PremiumGiveawayParticipantStatus

-- | True, if the giveaway has ended and results are being prepared
[is_ended] :: PremiumGiveawayInfo -> Maybe Bool

-- | Describes a completed giveaway
PremiumGiveawayInfoCompleted :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> PremiumGiveawayInfo

-- | Point in time (Unix timestamp) when the giveaway was created
[creation_date] :: PremiumGiveawayInfo -> Maybe Int

-- | Point in time (Unix timestamp) when the winners were selected. May be
--   bigger than winners selection date specified in parameters of the
--   giveaway
[actual_winners_selection_date] :: PremiumGiveawayInfo -> Maybe Int

-- | True, if the giveaway was canceled and was fully refunded
[was_refunded] :: PremiumGiveawayInfo -> Maybe Bool

-- | Number of winners in the giveaway
[winner_count] :: PremiumGiveawayInfo -> Maybe Int

-- | Number of winners, which activated their gift codes
[activation_count] :: PremiumGiveawayInfo -> Maybe Int

-- | Telegram Premium gift code that was received by the current user;
--   empty if the user isn't a winner in the giveaway
[gift_code] :: PremiumGiveawayInfo -> Maybe Text
instance GHC.Show.Show TD.Data.PremiumGiveawayInfo.PremiumGiveawayInfo
instance GHC.Classes.Eq TD.Data.PremiumGiveawayInfo.PremiumGiveawayInfo
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiveawayInfo.PremiumGiveawayInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiveawayInfo.PremiumGiveawayInfo

module TD.Data.PremiumGiftCodePaymentOption
data PremiumGiftCodePaymentOption

-- | Describes an option for creating Telegram Premium gift codes
PremiumGiftCodePaymentOption :: Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> PremiumGiftCodePaymentOption

-- | ISO 4217 currency code for Telegram Premium gift code payment
[currency] :: PremiumGiftCodePaymentOption -> Maybe Text

-- | The amount to pay, in the smallest units of the currency
[amount] :: PremiumGiftCodePaymentOption -> Maybe Int

-- | Number of users which will be able to activate the gift codes
[user_count] :: PremiumGiftCodePaymentOption -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: PremiumGiftCodePaymentOption -> Maybe Int

-- | Identifier of the store product associated with the option; may be
--   empty if none
[store_product_id] :: PremiumGiftCodePaymentOption -> Maybe Text

-- | Number of times the store product must be paid
[store_product_quantity] :: PremiumGiftCodePaymentOption -> Maybe Int
instance GHC.Show.Show TD.Data.PremiumGiftCodePaymentOption.PremiumGiftCodePaymentOption
instance GHC.Classes.Eq TD.Data.PremiumGiftCodePaymentOption.PremiumGiftCodePaymentOption
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiftCodePaymentOption.PremiumGiftCodePaymentOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiftCodePaymentOption.PremiumGiftCodePaymentOption

module TD.Data.PremiumGiftCodePaymentOptions
data PremiumGiftCodePaymentOptions

-- | Contains a list of options for creating Telegram Premium gift codes
PremiumGiftCodePaymentOptions :: Maybe [PremiumGiftCodePaymentOption] -> PremiumGiftCodePaymentOptions

-- | The list of options
[options] :: PremiumGiftCodePaymentOptions -> Maybe [PremiumGiftCodePaymentOption]
instance GHC.Show.Show TD.Data.PremiumGiftCodePaymentOptions.PremiumGiftCodePaymentOptions
instance GHC.Classes.Eq TD.Data.PremiumGiftCodePaymentOptions.PremiumGiftCodePaymentOptions
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiftCodePaymentOptions.PremiumGiftCodePaymentOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiftCodePaymentOptions.PremiumGiftCodePaymentOptions

module TD.Data.PremiumFeature

-- | Describes a feature available to Premium users
data PremiumFeature

-- | Increased limits
PremiumFeatureIncreasedLimits :: PremiumFeature

-- | Increased maximum upload file size
PremiumFeatureIncreasedUploadFileSize :: PremiumFeature

-- | Improved download speed
PremiumFeatureImprovedDownloadSpeed :: PremiumFeature

-- | The ability to convert voice notes to text
PremiumFeatureVoiceRecognition :: PremiumFeature

-- | Disabled ads
PremiumFeatureDisabledAds :: PremiumFeature

-- | Allowed to use more reactions
PremiumFeatureUniqueReactions :: PremiumFeature

-- | Allowed to use premium stickers with unique effects
PremiumFeatureUniqueStickers :: PremiumFeature

-- | Allowed to use custom emoji stickers in message texts and captions
PremiumFeatureCustomEmoji :: PremiumFeature

-- | Ability to change position of the main chat list, archive and mute all
--   new chats from non-contacts, and completely disable notifications
--   about the user's contacts joined Telegram
PremiumFeatureAdvancedChatManagement :: PremiumFeature

-- | A badge in the user's profile
PremiumFeatureProfileBadge :: PremiumFeature

-- | The ability to show an emoji status along with the user's name
PremiumFeatureEmojiStatus :: PremiumFeature

-- | Profile photo animation on message and chat screens
PremiumFeatureAnimatedProfilePhoto :: PremiumFeature

-- | The ability to set a custom emoji as a forum topic icon
PremiumFeatureForumTopicIcon :: PremiumFeature

-- | Allowed to set a premium application icons
PremiumFeatureAppIcons :: PremiumFeature

-- | Allowed to translate chat messages real-time
PremiumFeatureRealTimeChatTranslation :: PremiumFeature

-- | Allowed to use many additional features for stories
PremiumFeatureUpgradedStories :: PremiumFeature

-- | The ability to boost chats
PremiumFeatureChatBoost :: PremiumFeature

-- | The ability to choose accent color for replies and user profile
PremiumFeatureAccentColor :: PremiumFeature

-- | The ability to set private chat background for both users
PremiumFeatureBackgroundForBoth :: PremiumFeature

-- | The ability to use tags in Saved Messages
PremiumFeatureSavedMessagesTags :: PremiumFeature

-- | The ability to disallow incoming voice and video note messages in
--   private chats using setUserPrivacySettingRules with
--   userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages and to
--   restrict incoming messages from non-contacts using
--   setNewChatPrivacySettings
PremiumFeatureMessagePrivacy :: PremiumFeature

-- | The ability to view last seen and read times of other users even they
--   can't view last seen or read time for the current user
PremiumFeatureLastSeenTimes :: PremiumFeature

-- | The ability to use Business features
PremiumFeatureBusiness :: PremiumFeature
instance GHC.Show.Show TD.Data.PremiumFeature.PremiumFeature
instance GHC.Classes.Eq TD.Data.PremiumFeature.PremiumFeature
instance TD.Lib.Internal.ShortShow TD.Data.PremiumFeature.PremiumFeature
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeature.PremiumFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumFeature.PremiumFeature

module TD.Data.Point
data Point

-- | A point on a Cartesian plane
Point :: Maybe Double -> Maybe Double -> Point

-- | The point's first coordinate
[x] :: Point -> Maybe Double

-- | The point's second coordinate
[y] :: Point -> Maybe Double
instance GHC.Show.Show TD.Data.Point.Point
instance GHC.Classes.Eq TD.Data.Point.Point
instance TD.Lib.Internal.ShortShow TD.Data.Point.Point
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Point.Point

module TD.Data.VectorPathCommand

-- | Represents a vector path command
data VectorPathCommand

-- | A straight line to a given point
VectorPathCommandLine :: Maybe Point -> VectorPathCommand

-- | The end point of the straight line
[end_point] :: VectorPathCommand -> Maybe Point

-- | A cubic Bézier curve to a given point
VectorPathCommandCubicBezierCurve :: Maybe Point -> Maybe Point -> Maybe Point -> VectorPathCommand

-- | The start control point of the curve
[start_control_point] :: VectorPathCommand -> Maybe Point

-- | The end control point of the curve
[end_control_point] :: VectorPathCommand -> Maybe Point

-- | The end point of the straight line
[end_point] :: VectorPathCommand -> Maybe Point
instance GHC.Show.Show TD.Data.VectorPathCommand.VectorPathCommand
instance GHC.Classes.Eq TD.Data.VectorPathCommand.VectorPathCommand
instance TD.Lib.Internal.ShortShow TD.Data.VectorPathCommand.VectorPathCommand
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VectorPathCommand.VectorPathCommand

module TD.Data.PhoneNumberCodeType

-- | Describes type of the request for which a code is sent to a phone
--   number
data PhoneNumberCodeType

-- | Checks ownership of a new phone number to change the user's
--   authentication phone number; for official Android and iOS applications
--   only.
PhoneNumberCodeTypeChange :: PhoneNumberCodeType

-- | Verifies ownership of a phone number to be added to the user's
--   Telegram Passport
PhoneNumberCodeTypeVerify :: PhoneNumberCodeType

-- | Confirms ownership of a phone number to prevent account deletion while
--   handling links of the type internalLinkTypePhoneNumberConfirmation
PhoneNumberCodeTypeConfirmOwnership :: Maybe Text -> PhoneNumberCodeType

-- | Hash value from the link
[hash] :: PhoneNumberCodeType -> Maybe Text
instance GHC.Show.Show TD.Data.PhoneNumberCodeType.PhoneNumberCodeType
instance GHC.Classes.Eq TD.Data.PhoneNumberCodeType.PhoneNumberCodeType
instance TD.Lib.Internal.ShortShow TD.Data.PhoneNumberCodeType.PhoneNumberCodeType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhoneNumberCodeType.PhoneNumberCodeType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PhoneNumberCodeType.PhoneNumberCodeType

module TD.Data.PaymentResult
data PaymentResult

-- | Contains the result of a payment request
PaymentResult :: Maybe Bool -> Maybe Text -> PaymentResult

-- | True, if the payment request was successful; otherwise, the
--   verification_url will be non-empty
[success] :: PaymentResult -> Maybe Bool

-- | URL for additional payment credentials verification
[verification_url] :: PaymentResult -> Maybe Text
instance GHC.Show.Show TD.Data.PaymentResult.PaymentResult
instance GHC.Classes.Eq TD.Data.PaymentResult.PaymentResult
instance TD.Lib.Internal.ShortShow TD.Data.PaymentResult.PaymentResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentResult.PaymentResult

module TD.Data.PaymentProvider

-- | Contains information about a payment provider
data PaymentProvider

-- | Smart Glocal payment provider
PaymentProviderSmartGlocal :: Maybe Text -> Maybe Text -> PaymentProvider

-- | Public payment token
[public_token] :: PaymentProvider -> Maybe Text

-- | URL for sending card tokenization requests
[tokenize_url] :: PaymentProvider -> Maybe Text

-- | Stripe payment provider
PaymentProviderStripe :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> PaymentProvider

-- | Stripe API publishable key
[publishable_key] :: PaymentProvider -> Maybe Text

-- | True, if the user country must be provided
[need_country] :: PaymentProvider -> Maybe Bool

-- | True, if the user ZIP/postal code must be provided
[need_postal_code] :: PaymentProvider -> Maybe Bool

-- | True, if the cardholder name must be provided
[need_cardholder_name] :: PaymentProvider -> Maybe Bool

-- | Some other payment provider, for which a web payment form must be
--   shown
PaymentProviderOther :: Maybe Text -> PaymentProvider

-- | Payment form URL
[url] :: PaymentProvider -> Maybe Text
instance GHC.Show.Show TD.Data.PaymentProvider.PaymentProvider
instance GHC.Classes.Eq TD.Data.PaymentProvider.PaymentProvider
instance TD.Lib.Internal.ShortShow TD.Data.PaymentProvider.PaymentProvider
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentProvider.PaymentProvider

module TD.Data.PaymentOption
data PaymentOption

-- | Describes an additional payment option
PaymentOption :: Maybe Text -> Maybe Text -> PaymentOption

-- | Title for the payment option
[title] :: PaymentOption -> Maybe Text

-- | Payment form URL to be opened in a web view
[url] :: PaymentOption -> Maybe Text
instance GHC.Show.Show TD.Data.PaymentOption.PaymentOption
instance GHC.Classes.Eq TD.Data.PaymentOption.PaymentOption
instance TD.Lib.Internal.ShortShow TD.Data.PaymentOption.PaymentOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentOption.PaymentOption

module TD.Data.PassportElementType

-- | Contains the type of Telegram Passport element
data PassportElementType

-- | A Telegram Passport element containing the user's personal details
PassportElementTypePersonalDetails :: PassportElementType

-- | A Telegram Passport element containing the user's passport
PassportElementTypePassport :: PassportElementType

-- | A Telegram Passport element containing the user's driver license
PassportElementTypeDriverLicense :: PassportElementType

-- | A Telegram Passport element containing the user's identity card
PassportElementTypeIdentityCard :: PassportElementType

-- | A Telegram Passport element containing the user's internal passport
PassportElementTypeInternalPassport :: PassportElementType

-- | A Telegram Passport element containing the user's address
PassportElementTypeAddress :: PassportElementType

-- | A Telegram Passport element containing the user's utility bill
PassportElementTypeUtilityBill :: PassportElementType

-- | A Telegram Passport element containing the user's bank statement
PassportElementTypeBankStatement :: PassportElementType

-- | A Telegram Passport element containing the user's rental agreement
PassportElementTypeRentalAgreement :: PassportElementType

-- | A Telegram Passport element containing the registration page of the
--   user's passport
PassportElementTypePassportRegistration :: PassportElementType

-- | A Telegram Passport element containing the user's temporary
--   registration
PassportElementTypeTemporaryRegistration :: PassportElementType

-- | A Telegram Passport element containing the user's phone number
PassportElementTypePhoneNumber :: PassportElementType

-- | A Telegram Passport element containing the user's email address
PassportElementTypeEmailAddress :: PassportElementType
instance GHC.Show.Show TD.Data.PassportElementType.PassportElementType
instance GHC.Classes.Eq TD.Data.PassportElementType.PassportElementType
instance TD.Lib.Internal.ShortShow TD.Data.PassportElementType.PassportElementType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementType.PassportElementType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PassportElementType.PassportElementType

module TD.Data.PassportSuitableElement
data PassportSuitableElement

-- | Contains information about a Telegram Passport element that was
--   requested by a service
PassportSuitableElement :: Maybe PassportElementType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> PassportSuitableElement

-- | Type of the element
[_type] :: PassportSuitableElement -> Maybe PassportElementType

-- | True, if a selfie is required with the identity document
[is_selfie_required] :: PassportSuitableElement -> Maybe Bool

-- | True, if a certified English translation is required with the document
[is_translation_required] :: PassportSuitableElement -> Maybe Bool

-- | True, if personal details must include the user's name in the language
--   of their country of residence
[is_native_name_required] :: PassportSuitableElement -> Maybe Bool
instance GHC.Show.Show TD.Data.PassportSuitableElement.PassportSuitableElement
instance GHC.Classes.Eq TD.Data.PassportSuitableElement.PassportSuitableElement
instance TD.Lib.Internal.ShortShow TD.Data.PassportSuitableElement.PassportSuitableElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportSuitableElement.PassportSuitableElement

module TD.Data.PassportRequiredElement
data PassportRequiredElement

-- | Contains a description of the required Telegram Passport element that
--   was requested by a service
PassportRequiredElement :: Maybe [PassportSuitableElement] -> PassportRequiredElement

-- | List of Telegram Passport elements any of which is enough to provide
[suitable_elements] :: PassportRequiredElement -> Maybe [PassportSuitableElement]
instance GHC.Show.Show TD.Data.PassportRequiredElement.PassportRequiredElement
instance GHC.Classes.Eq TD.Data.PassportRequiredElement.PassportRequiredElement
instance TD.Lib.Internal.ShortShow TD.Data.PassportRequiredElement.PassportRequiredElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportRequiredElement.PassportRequiredElement

module TD.Data.PassportElementErrorSource

-- | Contains the description of an error in a Telegram Passport element
data PassportElementErrorSource

-- | The element contains an error in an unspecified place. The error will
--   be considered resolved when new data is added
PassportElementErrorSourceUnspecified :: PassportElementErrorSource

-- | One of the data fields contains an error. The error will be considered
--   resolved when the value of the field changes
PassportElementErrorSourceDataField :: Maybe Text -> PassportElementErrorSource

-- | Field name
[field_name] :: PassportElementErrorSource -> Maybe Text

-- | The front side of the document contains an error. The error will be
--   considered resolved when the file with the front side changes
PassportElementErrorSourceFrontSide :: PassportElementErrorSource

-- | The reverse side of the document contains an error. The error will be
--   considered resolved when the file with the reverse side changes
PassportElementErrorSourceReverseSide :: PassportElementErrorSource

-- | The selfie with the document contains an error. The error will be
--   considered resolved when the file with the selfie changes
PassportElementErrorSourceSelfie :: PassportElementErrorSource

-- | One of files with the translation of the document contains an error.
--   The error will be considered resolved when the file changes
PassportElementErrorSourceTranslationFile :: Maybe Int -> PassportElementErrorSource

-- | Index of a file with the error
[file_index] :: PassportElementErrorSource -> Maybe Int

-- | The translation of the document contains an error. The error will be
--   considered resolved when the list of translation files changes
PassportElementErrorSourceTranslationFiles :: PassportElementErrorSource

-- | The file contains an error. The error will be considered resolved when
--   the file changes
PassportElementErrorSourceFile :: Maybe Int -> PassportElementErrorSource

-- | Index of a file with the error
[file_index] :: PassportElementErrorSource -> Maybe Int

-- | The list of attached files contains an error. The error will be
--   considered resolved when the list of files changes
PassportElementErrorSourceFiles :: PassportElementErrorSource
instance GHC.Show.Show TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance GHC.Classes.Eq TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance TD.Lib.Internal.ShortShow TD.Data.PassportElementErrorSource.PassportElementErrorSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementErrorSource.PassportElementErrorSource

module TD.Data.PassportElementError
data PassportElementError

-- | Contains the description of an error in a Telegram Passport element
PassportElementError :: Maybe PassportElementType -> Maybe Text -> Maybe PassportElementErrorSource -> PassportElementError

-- | Type of the Telegram Passport element which has the error
[_type] :: PassportElementError -> Maybe PassportElementType

-- | Error message
[message] :: PassportElementError -> Maybe Text

-- | Error source
[source] :: PassportElementError -> Maybe PassportElementErrorSource
instance GHC.Show.Show TD.Data.PassportElementError.PassportElementError
instance GHC.Classes.Eq TD.Data.PassportElementError.PassportElementError
instance TD.Lib.Internal.ShortShow TD.Data.PassportElementError.PassportElementError
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementError.PassportElementError

module TD.Data.PassportAuthorizationForm
data PassportAuthorizationForm

-- | Contains information about a Telegram Passport authorization form that
--   was requested
PassportAuthorizationForm :: Maybe Int -> Maybe [PassportRequiredElement] -> Maybe Text -> PassportAuthorizationForm

-- | Unique identifier of the authorization form
[_id] :: PassportAuthorizationForm -> Maybe Int

-- | Telegram Passport elements that must be provided to complete the form
[required_elements] :: PassportAuthorizationForm -> Maybe [PassportRequiredElement]

-- | URL for the privacy policy of the service; may be empty
[privacy_policy_url] :: PassportAuthorizationForm -> Maybe Text
instance GHC.Show.Show TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance GHC.Classes.Eq TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance TD.Lib.Internal.ShortShow TD.Data.PassportAuthorizationForm.PassportAuthorizationForm
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportAuthorizationForm.PassportAuthorizationForm

module TD.Data.PageBlockVerticalAlignment

-- | Describes a Vertical alignment of a table cell content
data PageBlockVerticalAlignment

-- | The content must be top-aligned
PageBlockVerticalAlignmentTop :: PageBlockVerticalAlignment

-- | The content must be middle-aligned
PageBlockVerticalAlignmentMiddle :: PageBlockVerticalAlignment

-- | The content must be bottom-aligned
PageBlockVerticalAlignmentBottom :: PageBlockVerticalAlignment
instance GHC.Show.Show TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance GHC.Classes.Eq TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockVerticalAlignment.PageBlockVerticalAlignment

module TD.Data.PageBlockHorizontalAlignment

-- | Describes a horizontal alignment of a table cell content
data PageBlockHorizontalAlignment

-- | The content must be left-aligned
PageBlockHorizontalAlignmentLeft :: PageBlockHorizontalAlignment

-- | The content must be center-aligned
PageBlockHorizontalAlignmentCenter :: PageBlockHorizontalAlignment

-- | The content must be right-aligned
PageBlockHorizontalAlignmentRight :: PageBlockHorizontalAlignment
instance GHC.Show.Show TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance GHC.Classes.Eq TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockHorizontalAlignment.PageBlockHorizontalAlignment

module TD.Data.PageBlockListItem
data PageBlockListItem

-- | Describes an item of a list page block
PageBlockListItem :: Maybe Text -> Maybe [PageBlock] -> PageBlockListItem

-- | Item label
[label] :: PageBlockListItem -> Maybe Text

-- | Item blocks
[page_blocks] :: PageBlockListItem -> Maybe [PageBlock]
instance GHC.Show.Show TD.Data.PageBlockListItem.PageBlockListItem
instance GHC.Classes.Eq TD.Data.PageBlockListItem.PageBlockListItem
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockListItem.PageBlockListItem
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockListItem.PageBlockListItem

module TD.Data.OptionValue

-- | Represents the value of an option
data OptionValue

-- | Represents a boolean option
OptionValueBoolean :: Maybe Bool -> OptionValue

-- | The value of the option
[value] :: OptionValue -> Maybe Bool

-- | Represents an unknown option or an option which has a default value
OptionValueEmpty :: OptionValue

-- | Represents an integer option
OptionValueInteger :: Maybe Int -> OptionValue

-- | The value of the option
[_value] :: OptionValue -> Maybe Int

-- | Represents a string option
OptionValueString :: Maybe Text -> OptionValue

-- | The value of the option
[__value] :: OptionValue -> Maybe Text
instance GHC.Show.Show TD.Data.OptionValue.OptionValue
instance GHC.Classes.Eq TD.Data.OptionValue.OptionValue
instance TD.Lib.Internal.ShortShow TD.Data.OptionValue.OptionValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.OptionValue.OptionValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.OptionValue.OptionValue

module TD.Data.Ok
data Ok

-- | An object of this type is returned on a successful function call for
--   certain functions
Ok :: Ok
instance GHC.Show.Show TD.Data.Ok.Ok
instance GHC.Classes.Eq TD.Data.Ok.Ok
instance TD.Lib.Internal.ShortShow TD.Data.Ok.Ok
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Ok.Ok

module TD.Data.NotificationSettingsScope

-- | Describes the types of chats to which notification settings are
--   relevant
data NotificationSettingsScope

-- | Notification settings applied to all private and secret chats when the
--   corresponding chat setting has a default value
NotificationSettingsScopePrivateChats :: NotificationSettingsScope

-- | Notification settings applied to all basic group and supergroup chats
--   when the corresponding chat setting has a default value
NotificationSettingsScopeGroupChats :: NotificationSettingsScope

-- | Notification settings applied to all channel chats when the
--   corresponding chat setting has a default value
NotificationSettingsScopeChannelChats :: NotificationSettingsScope
instance GHC.Show.Show TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance GHC.Classes.Eq TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance TD.Lib.Internal.ShortShow TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSettingsScope.NotificationSettingsScope
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NotificationSettingsScope.NotificationSettingsScope

module TD.Data.NotificationGroupType

-- | Describes the type of notifications in a notification group
data NotificationGroupType

-- | A group containing notifications of type notificationTypeNewMessage
--   and notificationTypeNewPushMessage with ordinary unread messages
NotificationGroupTypeMessages :: NotificationGroupType

-- | A group containing notifications of type notificationTypeNewMessage
--   and notificationTypeNewPushMessage with unread mentions of the current
--   user, replies to their messages, or a pinned message
NotificationGroupTypeMentions :: NotificationGroupType

-- | A group containing a notification of type
--   notificationTypeNewSecretChat
NotificationGroupTypeSecretChat :: NotificationGroupType

-- | A group containing notifications of type notificationTypeNewCall
NotificationGroupTypeCalls :: NotificationGroupType
instance GHC.Show.Show TD.Data.NotificationGroupType.NotificationGroupType
instance GHC.Classes.Eq TD.Data.NotificationGroupType.NotificationGroupType
instance TD.Lib.Internal.ShortShow TD.Data.NotificationGroupType.NotificationGroupType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationGroupType.NotificationGroupType

module TD.Data.NewChatPrivacySettings
data NewChatPrivacySettings

-- | Contains privacy settings for new chats with non-contacts
NewChatPrivacySettings :: Maybe Bool -> NewChatPrivacySettings

-- | True, if non-contacts users are able to write first to the current
--   user. Telegram Premium subscribers are able to write first regardless
--   of this setting
[allow_new_chats_from_unknown_users] :: NewChatPrivacySettings -> Maybe Bool
defaultNewChatPrivacySettings :: NewChatPrivacySettings
instance GHC.Show.Show TD.Data.NewChatPrivacySettings.NewChatPrivacySettings
instance GHC.Classes.Eq TD.Data.NewChatPrivacySettings.NewChatPrivacySettings
instance TD.Lib.Internal.ShortShow TD.Data.NewChatPrivacySettings.NewChatPrivacySettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NewChatPrivacySettings.NewChatPrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NewChatPrivacySettings.NewChatPrivacySettings

module TD.Data.NetworkType

-- | Represents the type of network
data NetworkType

-- | The network is not available
NetworkTypeNone :: NetworkType

-- | A mobile network
NetworkTypeMobile :: NetworkType

-- | A mobile roaming network
NetworkTypeMobileRoaming :: NetworkType

-- | A Wi-Fi network
NetworkTypeWiFi :: NetworkType

-- | A different network type (e.g., Ethernet network)
NetworkTypeOther :: NetworkType
instance GHC.Show.Show TD.Data.NetworkType.NetworkType
instance GHC.Classes.Eq TD.Data.NetworkType.NetworkType
instance TD.Lib.Internal.ShortShow TD.Data.NetworkType.NetworkType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkType.NetworkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NetworkType.NetworkType

module TD.Data.Minithumbnail
data Minithumbnail

-- | Thumbnail image of a very poor quality and low resolution
Minithumbnail :: Maybe Int -> Maybe Int -> Maybe ByteString -> Minithumbnail

-- | Thumbnail width, usually doesn't exceed 40
[width] :: Minithumbnail -> Maybe Int

-- | Thumbnail height, usually doesn't exceed 40
[height] :: Minithumbnail -> Maybe Int

-- | The thumbnail in JPEG format
[_data] :: Minithumbnail -> Maybe ByteString
instance GHC.Show.Show TD.Data.Minithumbnail.Minithumbnail
instance GHC.Classes.Eq TD.Data.Minithumbnail.Minithumbnail
instance TD.Lib.Internal.ShortShow TD.Data.Minithumbnail.Minithumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Minithumbnail.Minithumbnail

module TD.Data.MessageViewer
data MessageViewer

-- | Represents a viewer of a message
MessageViewer :: Maybe Int -> Maybe Int -> MessageViewer

-- | User identifier of the viewer
[user_id] :: MessageViewer -> Maybe Int

-- | Approximate point in time (Unix timestamp) when the message was viewed
[view_date] :: MessageViewer -> Maybe Int
instance GHC.Show.Show TD.Data.MessageViewer.MessageViewer
instance GHC.Classes.Eq TD.Data.MessageViewer.MessageViewer
instance TD.Lib.Internal.ShortShow TD.Data.MessageViewer.MessageViewer
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageViewer.MessageViewer

module TD.Data.MessageViewers
data MessageViewers

-- | Represents a list of message viewers
MessageViewers :: Maybe [MessageViewer] -> MessageViewers

-- | List of message viewers
[viewers] :: MessageViewers -> Maybe [MessageViewer]
instance GHC.Show.Show TD.Data.MessageViewers.MessageViewers
instance GHC.Classes.Eq TD.Data.MessageViewers.MessageViewers
instance TD.Lib.Internal.ShortShow TD.Data.MessageViewers.MessageViewers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageViewers.MessageViewers

module TD.Data.MessageStatistics
data MessageStatistics

-- | A detailed statistics about a message
MessageStatistics :: Maybe StatisticalGraph -> Maybe StatisticalGraph -> MessageStatistics

-- | A graph containing number of message views and shares
[message_interaction_graph] :: MessageStatistics -> Maybe StatisticalGraph

-- | A graph containing number of message reactions
[message_reaction_graph] :: MessageStatistics -> Maybe StatisticalGraph
instance GHC.Show.Show TD.Data.MessageStatistics.MessageStatistics
instance GHC.Classes.Eq TD.Data.MessageStatistics.MessageStatistics
instance TD.Lib.Internal.ShortShow TD.Data.MessageStatistics.MessageStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageStatistics.MessageStatistics

module TD.Data.MessageSource

-- | Describes source of a message
data MessageSource

-- | The message is from a chat history
MessageSourceChatHistory :: MessageSource

-- | The message is from a message thread history
MessageSourceMessageThreadHistory :: MessageSource

-- | The message is from a forum topic history
MessageSourceForumTopicHistory :: MessageSource

-- | The message is from chat, message thread or forum topic history
--   preview
MessageSourceHistoryPreview :: MessageSource

-- | The message is from a chat list or a forum topic list
MessageSourceChatList :: MessageSource

-- | The message is from search results, including file downloads, local
--   file list, outgoing document messages, calendar
MessageSourceSearch :: MessageSource

-- | The message is from a chat event log
MessageSourceChatEventLog :: MessageSource

-- | The message is from a notification
MessageSourceNotification :: MessageSource

-- | The message was screenshotted; the source must be used only if the
--   message content was visible during the screenshot
MessageSourceScreenshot :: MessageSource

-- | The message is from some other source
MessageSourceOther :: MessageSource
instance GHC.Show.Show TD.Data.MessageSource.MessageSource
instance GHC.Classes.Eq TD.Data.MessageSource.MessageSource
instance TD.Lib.Internal.ShortShow TD.Data.MessageSource.MessageSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSource.MessageSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSource.MessageSource

module TD.Data.MessageSender

-- | Contains information about the sender of a message
data MessageSender

-- | The message was sent by a known user
MessageSenderUser :: Maybe Int -> MessageSender

-- | Identifier of the user that sent the message
[user_id] :: MessageSender -> Maybe Int

-- | The message was sent on behalf of a chat
MessageSenderChat :: Maybe Int -> MessageSender

-- | Identifier of the chat that sent the message
[chat_id] :: MessageSender -> Maybe Int
instance GHC.Show.Show TD.Data.MessageSender.MessageSender
instance GHC.Classes.Eq TD.Data.MessageSender.MessageSender
instance TD.Lib.Internal.ShortShow TD.Data.MessageSender.MessageSender
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSender.MessageSender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSender.MessageSender

module TD.Data.VideoChat
data VideoChat

-- | Describes a video chat
VideoChat :: Maybe Int -> Maybe Bool -> Maybe MessageSender -> VideoChat

-- | Group call identifier of an active video chat; 0 if none. Full
--   information about the video chat can be received through the method
--   getGroupCall
[group_call_id] :: VideoChat -> Maybe Int

-- | True, if the video chat has participants
[has_participants] :: VideoChat -> Maybe Bool

-- | Default group call participant identifier to join the video chat; may
--   be null
[default_participant_id] :: VideoChat -> Maybe MessageSender
instance GHC.Show.Show TD.Data.VideoChat.VideoChat
instance GHC.Classes.Eq TD.Data.VideoChat.VideoChat
instance TD.Lib.Internal.ShortShow TD.Data.VideoChat.VideoChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VideoChat.VideoChat

module TD.Data.UnreadReaction
data UnreadReaction

-- | Contains information about an unread reaction to a message
UnreadReaction :: Maybe ReactionType -> Maybe MessageSender -> Maybe Bool -> UnreadReaction

-- | Type of the reaction
[_type] :: UnreadReaction -> Maybe ReactionType

-- | Identifier of the sender, added the reaction
[sender_id] :: UnreadReaction -> Maybe MessageSender

-- | True, if the reaction was added with a big animation
[is_big] :: UnreadReaction -> Maybe Bool
instance GHC.Show.Show TD.Data.UnreadReaction.UnreadReaction
instance GHC.Classes.Eq TD.Data.UnreadReaction.UnreadReaction
instance TD.Lib.Internal.ShortShow TD.Data.UnreadReaction.UnreadReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UnreadReaction.UnreadReaction

module TD.Data.PremiumGiftCodeInfo
data PremiumGiftCodeInfo

-- | Contains information about a Telegram Premium gift code
PremiumGiftCodeInfo :: Maybe MessageSender -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> PremiumGiftCodeInfo

-- | Identifier of a chat or a user that created the gift code; may be null
--   if unknown. If null and the code is from messagePremiumGiftCode
--   message, then creator_id from the message can be used
[creator_id] :: PremiumGiftCodeInfo -> Maybe MessageSender

-- | Point in time (Unix timestamp) when the code was created
[creation_date] :: PremiumGiftCodeInfo -> Maybe Int

-- | True, if the gift code was created for a giveaway
[is_from_giveaway] :: PremiumGiftCodeInfo -> Maybe Bool

-- | Identifier of the corresponding giveaway message in the creator_id
--   chat; can be 0 or an identifier of a deleted message
[giveaway_message_id] :: PremiumGiftCodeInfo -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
--   after code activation
[month_count] :: PremiumGiftCodeInfo -> Maybe Int

-- | Identifier of a user for which the code was created; 0 if none
[user_id] :: PremiumGiftCodeInfo -> Maybe Int

-- | Point in time (Unix timestamp) when the code was activated; 0 if none
[use_date] :: PremiumGiftCodeInfo -> Maybe Int
instance GHC.Show.Show TD.Data.PremiumGiftCodeInfo.PremiumGiftCodeInfo
instance GHC.Classes.Eq TD.Data.PremiumGiftCodeInfo.PremiumGiftCodeInfo
instance TD.Lib.Internal.ShortShow TD.Data.PremiumGiftCodeInfo.PremiumGiftCodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumGiftCodeInfo.PremiumGiftCodeInfo

module TD.Data.MessageSenders
data MessageSenders

-- | Represents a list of message senders
MessageSenders :: Maybe Int -> Maybe [MessageSender] -> MessageSenders

-- | Approximate total number of messages senders found
[total_count] :: MessageSenders -> Maybe Int

-- | List of message senders
[senders] :: MessageSenders -> Maybe [MessageSender]
instance GHC.Show.Show TD.Data.MessageSenders.MessageSenders
instance GHC.Classes.Eq TD.Data.MessageSenders.MessageSenders
instance TD.Lib.Internal.ShortShow TD.Data.MessageSenders.MessageSenders
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSenders.MessageSenders

module TD.Data.MessageSelfDestructType

-- | Describes when a message will be self-destructed
data MessageSelfDestructType

-- | The message will be self-destructed in the specified time after its
--   content was opened
MessageSelfDestructTypeTimer :: Maybe Int -> MessageSelfDestructType

-- | The message's self-destruct time, in seconds; must be between 0 and 60
--   in private chats
[self_destruct_time] :: MessageSelfDestructType -> Maybe Int

-- | The message can be opened only once and will be self-destructed once
--   closed
MessageSelfDestructTypeImmediately :: MessageSelfDestructType
instance GHC.Show.Show TD.Data.MessageSelfDestructType.MessageSelfDestructType
instance GHC.Classes.Eq TD.Data.MessageSelfDestructType.MessageSelfDestructType
instance TD.Lib.Internal.ShortShow TD.Data.MessageSelfDestructType.MessageSelfDestructType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSelfDestructType.MessageSelfDestructType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSelfDestructType.MessageSelfDestructType

module TD.Data.MessageSchedulingState

-- | Contains information about the time when a scheduled message will be
--   sent
data MessageSchedulingState

-- | The message will be sent at the specified date
MessageSchedulingStateSendAtDate :: Maybe Int -> MessageSchedulingState

-- | Point in time (Unix timestamp) when the message will be sent. The date
--   must be within 367 days in the future
[send_date] :: MessageSchedulingState -> Maybe Int

-- | The message will be sent when the other user is online. Applicable to
--   private chats only and when the exact online status of the other user
--   is known
MessageSchedulingStateSendWhenOnline :: MessageSchedulingState
instance GHC.Show.Show TD.Data.MessageSchedulingState.MessageSchedulingState
instance GHC.Classes.Eq TD.Data.MessageSchedulingState.MessageSchedulingState
instance TD.Lib.Internal.ShortShow TD.Data.MessageSchedulingState.MessageSchedulingState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSchedulingState.MessageSchedulingState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSchedulingState.MessageSchedulingState

module TD.Data.MessageSendOptions
data MessageSendOptions

-- | Options to be used when a message is sent
MessageSendOptions :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe MessageSchedulingState -> Maybe Int -> Maybe Bool -> MessageSendOptions

-- | Pass true to disable notification for the message
[disable_notification] :: MessageSendOptions -> Maybe Bool

-- | Pass true if the message is sent from the background
[from_background] :: MessageSendOptions -> Maybe Bool

-- | Pass true if the content of the message must be protected from
--   forwarding and saving; for bots only
[protect_content] :: MessageSendOptions -> Maybe Bool

-- | Pass true if the user explicitly chosen a sticker or a custom emoji
--   from an installed sticker set; applicable only to sendMessage and
--   sendMessageAlbum
[update_order_of_installed_sticker_sets] :: MessageSendOptions -> Maybe Bool

-- | Message scheduling state; pass null to send message immediately.
--   Messages sent to a secret chat, live location messages and
--   self-destructing messages can't be scheduled
[scheduling_state] :: MessageSendOptions -> Maybe MessageSchedulingState

-- | Non-persistent identifier, which will be returned back in
--   messageSendingStatePending object and can be used to match sent
--   messages and corresponding updateNewMessage updates
[sending_id] :: MessageSendOptions -> Maybe Int

-- | Pass true to get a fake message instead of actually sending them
[only_preview] :: MessageSendOptions -> Maybe Bool
defaultMessageSendOptions :: MessageSendOptions
instance GHC.Show.Show TD.Data.MessageSendOptions.MessageSendOptions
instance GHC.Classes.Eq TD.Data.MessageSendOptions.MessageSendOptions
instance TD.Lib.Internal.ShortShow TD.Data.MessageSendOptions.MessageSendOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSendOptions.MessageSendOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageSendOptions.MessageSendOptions

module TD.Data.MessageReplyInfo
data MessageReplyInfo

-- | Contains information about replies to a message
MessageReplyInfo :: Maybe Int -> Maybe [MessageSender] -> Maybe Int -> Maybe Int -> Maybe Int -> MessageReplyInfo

-- | Number of times the message was directly or indirectly replied
[reply_count] :: MessageReplyInfo -> Maybe Int

-- | Identifiers of at most 3 recent repliers to the message; available in
--   channels with a discussion supergroup. The users and chats are
--   expected to be inaccessible: only their photo and name will be
--   available
[recent_replier_ids] :: MessageReplyInfo -> Maybe [MessageSender]

-- | Identifier of the last read incoming reply to the message
[last_read_inbox_message_id] :: MessageReplyInfo -> Maybe Int

-- | Identifier of the last read outgoing reply to the message
[last_read_outbox_message_id] :: MessageReplyInfo -> Maybe Int

-- | Identifier of the last reply to the message
[last_message_id] :: MessageReplyInfo -> Maybe Int
instance GHC.Show.Show TD.Data.MessageReplyInfo.MessageReplyInfo
instance GHC.Classes.Eq TD.Data.MessageReplyInfo.MessageReplyInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageReplyInfo.MessageReplyInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReplyInfo.MessageReplyInfo

module TD.Data.MessageReadDate

-- | Describes read date of a recent outgoing message in a private chat
data MessageReadDate

-- | Contains read date of the message
MessageReadDateRead :: Maybe Int -> MessageReadDate

-- | Point in time (Unix timestamp) when the message was read by the other
--   user
[read_date] :: MessageReadDate -> Maybe Int

-- | The message is unread yet
MessageReadDateUnread :: MessageReadDate

-- | The message is too old to get read date
MessageReadDateTooOld :: MessageReadDate

-- | The read date is unknown due to privacy settings of the other user
MessageReadDateUserPrivacyRestricted :: MessageReadDate

-- | The read date is unknown due to privacy settings of the current user,
--   but will be known if the user subscribes to Telegram Premium
MessageReadDateMyPrivacyRestricted :: MessageReadDate
instance GHC.Show.Show TD.Data.MessageReadDate.MessageReadDate
instance GHC.Classes.Eq TD.Data.MessageReadDate.MessageReadDate
instance TD.Lib.Internal.ShortShow TD.Data.MessageReadDate.MessageReadDate
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReadDate.MessageReadDate

module TD.Data.MessageReaction
data MessageReaction

-- | Contains information about a reaction to a message
MessageReaction :: Maybe ReactionType -> Maybe Int -> Maybe Bool -> Maybe MessageSender -> Maybe [MessageSender] -> MessageReaction

-- | Type of the reaction
[_type] :: MessageReaction -> Maybe ReactionType

-- | Number of times the reaction was added
[total_count] :: MessageReaction -> Maybe Int

-- | True, if the reaction is chosen by the current user
[is_chosen] :: MessageReaction -> Maybe Bool

-- | Identifier of the message sender used by the current user to add the
--   reaction; may be null if unknown or the reaction isn't chosen
[used_sender_id] :: MessageReaction -> Maybe MessageSender

-- | Identifiers of at most 3 recent message senders, added the reaction;
--   available in private, basic group and supergroup chats
[recent_sender_ids] :: MessageReaction -> Maybe [MessageSender]
instance GHC.Show.Show TD.Data.MessageReaction.MessageReaction
instance GHC.Classes.Eq TD.Data.MessageReaction.MessageReaction
instance TD.Lib.Internal.ShortShow TD.Data.MessageReaction.MessageReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReaction.MessageReaction

module TD.Data.MessageReactions
data MessageReactions

-- | Contains a list of reactions added to a message
MessageReactions :: Maybe [MessageReaction] -> Maybe Bool -> MessageReactions

-- | List of added reactions
[reactions] :: MessageReactions -> Maybe [MessageReaction]

-- | True, if the reactions are tags and Telegram Premium users can filter
--   messages by them
[are_tags] :: MessageReactions -> Maybe Bool
instance GHC.Show.Show TD.Data.MessageReactions.MessageReactions
instance GHC.Classes.Eq TD.Data.MessageReactions.MessageReactions
instance TD.Lib.Internal.ShortShow TD.Data.MessageReactions.MessageReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReactions.MessageReactions

module TD.Data.MessagePosition
data MessagePosition

-- | Contains information about a message in a specific position
MessagePosition :: Maybe Int -> Maybe Int -> Maybe Int -> MessagePosition

-- | 0-based message position in the full list of suitable messages
[position] :: MessagePosition -> Maybe Int

-- | Message identifier
[message_id] :: MessagePosition -> Maybe Int

-- | Point in time (Unix timestamp) when the message was sent
[date] :: MessagePosition -> Maybe Int
instance GHC.Show.Show TD.Data.MessagePosition.MessagePosition
instance GHC.Classes.Eq TD.Data.MessagePosition.MessagePosition
instance TD.Lib.Internal.ShortShow TD.Data.MessagePosition.MessagePosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessagePosition.MessagePosition

module TD.Data.MessagePositions
data MessagePositions

-- | Contains a list of message positions
MessagePositions :: Maybe Int -> Maybe [MessagePosition] -> MessagePositions

-- | Total number of messages found
[total_count] :: MessagePositions -> Maybe Int

-- | List of message positions
[positions] :: MessagePositions -> Maybe [MessagePosition]
instance GHC.Show.Show TD.Data.MessagePositions.MessagePositions
instance GHC.Classes.Eq TD.Data.MessagePositions.MessagePositions
instance TD.Lib.Internal.ShortShow TD.Data.MessagePositions.MessagePositions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessagePositions.MessagePositions

module TD.Data.MessageOrigin

-- | Contains information about the origin of a message
data MessageOrigin

-- | The message was originally sent by a known user
MessageOriginUser :: Maybe Int -> MessageOrigin

-- | Identifier of the user that originally sent the message
[sender_user_id] :: MessageOrigin -> Maybe Int

-- | The message was originally sent by a user, which is hidden by their
--   privacy settings
MessageOriginHiddenUser :: Maybe Text -> MessageOrigin

-- | Name of the sender
[sender_name] :: MessageOrigin -> Maybe Text

-- | The message was originally sent on behalf of a chat
MessageOriginChat :: Maybe Int -> Maybe Text -> MessageOrigin

-- | Identifier of the chat that originally sent the message
[sender_chat_id] :: MessageOrigin -> Maybe Int

-- | For messages originally sent by an anonymous chat administrator,
--   original message author signature
[author_signature] :: MessageOrigin -> Maybe Text

-- | The message was originally a post in a channel
MessageOriginChannel :: Maybe Int -> Maybe Int -> Maybe Text -> MessageOrigin

-- | Identifier of the channel chat to which the message was originally
--   sent
[chat_id] :: MessageOrigin -> Maybe Int

-- | Message identifier of the original message
[message_id] :: MessageOrigin -> Maybe Int

-- | For messages originally sent by an anonymous chat administrator,
--   original message author signature
[author_signature] :: MessageOrigin -> Maybe Text
instance GHC.Show.Show TD.Data.MessageOrigin.MessageOrigin
instance GHC.Classes.Eq TD.Data.MessageOrigin.MessageOrigin
instance TD.Lib.Internal.ShortShow TD.Data.MessageOrigin.MessageOrigin
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageOrigin.MessageOrigin

module TD.Data.MessageLink
data MessageLink

-- | Contains an HTTPS link to a message in a supergroup or channel, or a
--   forum topic
MessageLink :: Maybe Text -> Maybe Bool -> MessageLink

-- | The link
[link] :: MessageLink -> Maybe Text

-- | True, if the link will work for non-members of the chat
[is_public] :: MessageLink -> Maybe Bool
instance GHC.Show.Show TD.Data.MessageLink.MessageLink
instance GHC.Classes.Eq TD.Data.MessageLink.MessageLink
instance TD.Lib.Internal.ShortShow TD.Data.MessageLink.MessageLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageLink.MessageLink

module TD.Data.MessageInteractionInfo
data MessageInteractionInfo

-- | Contains information about interactions with a message
MessageInteractionInfo :: Maybe Int -> Maybe Int -> Maybe MessageReplyInfo -> Maybe MessageReactions -> MessageInteractionInfo

-- | Number of times the message was viewed
[view_count] :: MessageInteractionInfo -> Maybe Int

-- | Number of times the message was forwarded
[forward_count] :: MessageInteractionInfo -> Maybe Int

-- | Information about direct or indirect replies to the message; may be
--   null. Currently, available only in channels with a discussion
--   supergroup and discussion supergroups for messages, which are not
--   replies itself
[reply_info] :: MessageInteractionInfo -> Maybe MessageReplyInfo

-- | The list of reactions or tags added to the message; may be null
[reactions] :: MessageInteractionInfo -> Maybe MessageReactions
instance GHC.Show.Show TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance GHC.Classes.Eq TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageInteractionInfo.MessageInteractionInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageInteractionInfo.MessageInteractionInfo

module TD.Data.MessageImportInfo
data MessageImportInfo

-- | Contains information about a message created with importMessages
MessageImportInfo :: Maybe Text -> Maybe Int -> MessageImportInfo

-- | Name of the original sender
[sender_name] :: MessageImportInfo -> Maybe Text

-- | Point in time (Unix timestamp) when the message was originally sent
[date] :: MessageImportInfo -> Maybe Int
instance GHC.Show.Show TD.Data.MessageImportInfo.MessageImportInfo
instance GHC.Classes.Eq TD.Data.MessageImportInfo.MessageImportInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageImportInfo.MessageImportInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageImportInfo.MessageImportInfo

module TD.Data.MessageFileType

-- | Contains information about a file with messages exported from another
--   app
data MessageFileType

-- | The messages were exported from a private chat
MessageFileTypePrivate :: Maybe Text -> MessageFileType

-- | Name of the other party; may be empty if unrecognized
[name] :: MessageFileType -> Maybe Text

-- | The messages were exported from a group chat
MessageFileTypeGroup :: Maybe Text -> MessageFileType

-- | Title of the group chat; may be empty if unrecognized
[title] :: MessageFileType -> Maybe Text

-- | The messages were exported from a chat of unknown type
MessageFileTypeUnknown :: MessageFileType
instance GHC.Show.Show TD.Data.MessageFileType.MessageFileType
instance GHC.Classes.Eq TD.Data.MessageFileType.MessageFileType
instance TD.Lib.Internal.ShortShow TD.Data.MessageFileType.MessageFileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageFileType.MessageFileType

module TD.Data.MessageAutoDeleteTime
data MessageAutoDeleteTime

-- | Contains default auto-delete timer setting for new chats
MessageAutoDeleteTime :: Maybe Int -> MessageAutoDeleteTime

-- | Message auto-delete time, in seconds. If 0, then messages aren't
--   deleted automatically
[time] :: MessageAutoDeleteTime -> Maybe Int
defaultMessageAutoDeleteTime :: MessageAutoDeleteTime
instance GHC.Show.Show TD.Data.MessageAutoDeleteTime.MessageAutoDeleteTime
instance GHC.Classes.Eq TD.Data.MessageAutoDeleteTime.MessageAutoDeleteTime
instance TD.Lib.Internal.ShortShow TD.Data.MessageAutoDeleteTime.MessageAutoDeleteTime
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageAutoDeleteTime.MessageAutoDeleteTime
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageAutoDeleteTime.MessageAutoDeleteTime

module TD.Data.MaskPoint

-- | Part of the face, relative to which a mask is placed
data MaskPoint

-- | The mask is placed relatively to the forehead
MaskPointForehead :: MaskPoint

-- | The mask is placed relatively to the eyes
MaskPointEyes :: MaskPoint

-- | The mask is placed relatively to the mouth
MaskPointMouth :: MaskPoint

-- | The mask is placed relatively to the chin
MaskPointChin :: MaskPoint
instance GHC.Show.Show TD.Data.MaskPoint.MaskPoint
instance GHC.Classes.Eq TD.Data.MaskPoint.MaskPoint
instance TD.Lib.Internal.ShortShow TD.Data.MaskPoint.MaskPoint
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MaskPoint.MaskPoint
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MaskPoint.MaskPoint

module TD.Data.MaskPosition
data MaskPosition

-- | Position on a photo where a mask is placed
MaskPosition :: Maybe MaskPoint -> Maybe Double -> Maybe Double -> Maybe Double -> MaskPosition

-- | Part of the face, relative to which the mask is placed
[point] :: MaskPosition -> Maybe MaskPoint

-- | Shift by X-axis measured in widths of the mask scaled to the face
--   size, from left to right. (For example, -1.0 will place the mask just
--   to the left of the default mask position)
[x_shift] :: MaskPosition -> Maybe Double

-- | Shift by Y-axis measured in heights of the mask scaled to the face
--   size, from top to bottom. (For example, 1.0 will place the mask just
--   below the default mask position)
[y_shift] :: MaskPosition -> Maybe Double

-- | Mask scaling coefficient. (For example, 2.0 means a doubled size)
[scale] :: MaskPosition -> Maybe Double
defaultMaskPosition :: MaskPosition
instance GHC.Show.Show TD.Data.MaskPosition.MaskPosition
instance GHC.Classes.Eq TD.Data.MaskPosition.MaskPosition
instance TD.Lib.Internal.ShortShow TD.Data.MaskPosition.MaskPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MaskPosition.MaskPosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MaskPosition.MaskPosition

module TD.Data.LoginUrlInfo

-- | Contains information about an inline button of type
--   inlineKeyboardButtonTypeLoginUrl
data LoginUrlInfo

-- | An HTTP URL needs to be open
LoginUrlInfoOpen :: Maybe Text -> Maybe Bool -> LoginUrlInfo

-- | The URL to open
[url] :: LoginUrlInfo -> Maybe Text

-- | True, if there is no need to show an ordinary open URL confirmation
[skip_confirmation] :: LoginUrlInfo -> Maybe Bool

-- | An authorization confirmation dialog needs to be shown to the user
LoginUrlInfoRequestConfirmation :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Bool -> LoginUrlInfo

-- | The URL to open
[url] :: LoginUrlInfo -> Maybe Text

-- | A domain of the URL
[domain] :: LoginUrlInfo -> Maybe Text

-- | User identifier of a bot linked with the website
[bot_user_id] :: LoginUrlInfo -> Maybe Int

-- | True, if the user must be asked for the permission to the bot to send
--   them messages
[request_write_access] :: LoginUrlInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.LoginUrlInfo.LoginUrlInfo
instance GHC.Classes.Eq TD.Data.LoginUrlInfo.LoginUrlInfo
instance TD.Lib.Internal.ShortShow TD.Data.LoginUrlInfo.LoginUrlInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LoginUrlInfo.LoginUrlInfo

module TD.Data.LogVerbosityLevel
data LogVerbosityLevel

-- | Contains a TDLib internal log verbosity level
LogVerbosityLevel :: Maybe Int -> LogVerbosityLevel

-- | Log verbosity level
[verbosity_level] :: LogVerbosityLevel -> Maybe Int
instance GHC.Show.Show TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance GHC.Classes.Eq TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance TD.Lib.Internal.ShortShow TD.Data.LogVerbosityLevel.LogVerbosityLevel
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogVerbosityLevel.LogVerbosityLevel

module TD.Data.LogTags
data LogTags

-- | Contains a list of available TDLib internal log tags
LogTags :: Maybe [Text] -> LogTags

-- | List of log tags
[tags] :: LogTags -> Maybe [Text]
instance GHC.Show.Show TD.Data.LogTags.LogTags
instance GHC.Classes.Eq TD.Data.LogTags.LogTags
instance TD.Lib.Internal.ShortShow TD.Data.LogTags.LogTags
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogTags.LogTags

module TD.Data.LogStream

-- | Describes a stream to which TDLib internal log is written
data LogStream

-- | The log is written to stderr or an OS specific log
LogStreamDefault :: LogStream

-- | The log is written to a file
LogStreamFile :: Maybe Text -> Maybe Int -> Maybe Bool -> LogStream

-- | Path to the file to where the internal TDLib log will be written
[path] :: LogStream -> Maybe Text

-- | The maximum size of the file to where the internal TDLib log is
--   written before the file will automatically be rotated, in bytes
[max_file_size] :: LogStream -> Maybe Int

-- | Pass true to additionally redirect stderr to the log file. Ignored on
--   Windows
[redirect_stderr] :: LogStream -> Maybe Bool

-- | The log is written nowhere
LogStreamEmpty :: LogStream
instance GHC.Show.Show TD.Data.LogStream.LogStream
instance GHC.Classes.Eq TD.Data.LogStream.LogStream
instance TD.Lib.Internal.ShortShow TD.Data.LogStream.LogStream
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LogStream.LogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LogStream.LogStream

module TD.Data.Location
data Location

-- | Describes a location on planet Earth
Location :: Maybe Double -> Maybe Double -> Maybe Double -> Location

-- | Latitude of the location in degrees; as defined by the sender
[latitude] :: Location -> Maybe Double

-- | Longitude of the location, in degrees; as defined by the sender
[longitude] :: Location -> Maybe Double

-- | The estimated horizontal accuracy of the location, in meters; as
--   defined by the sender. 0 if unknown
[horizontal_accuracy] :: Location -> Maybe Double
defaultLocation :: Location
instance GHC.Show.Show TD.Data.Location.Location
instance GHC.Classes.Eq TD.Data.Location.Location
instance TD.Lib.Internal.ShortShow TD.Data.Location.Location
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Location.Location
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Location.Location

module TD.Data.Venue
data Venue

-- | Describes a venue
Venue :: Maybe Location -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Venue

-- | Venue location; as defined by the sender
[location] :: Venue -> Maybe Location

-- | Venue name; as defined by the sender
[title] :: Venue -> Maybe Text

-- | Venue address; as defined by the sender
[address] :: Venue -> Maybe Text

-- | Provider of the venue database; as defined by the sender. Currently,
--   only "foursquare" and "gplaces" (Google Places) need to be supported
[provider] :: Venue -> Maybe Text

-- | Identifier of the venue in the provider database; as defined by the
--   sender
[_id] :: Venue -> Maybe Text

-- | Type of the venue in the provider database; as defined by the sender
[_type] :: Venue -> Maybe Text
defaultVenue :: Venue
instance GHC.Show.Show TD.Data.Venue.Venue
instance GHC.Classes.Eq TD.Data.Venue.Venue
instance TD.Lib.Internal.ShortShow TD.Data.Venue.Venue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Venue.Venue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Venue.Venue

module TD.Data.StoryAreaType

-- | Describes type of clickable rectangle area on a story media
data StoryAreaType

-- | An area pointing to a location
StoryAreaTypeLocation :: Maybe Location -> StoryAreaType

-- | The location
[location] :: StoryAreaType -> Maybe Location

-- | An area pointing to a venue
StoryAreaTypeVenue :: Maybe Venue -> StoryAreaType

-- | Information about the venue
[venue] :: StoryAreaType -> Maybe Venue

-- | An area pointing to a suggested reaction. App needs to show a
--   clickable reaction on the area and call setStoryReaction when the are
--   is clicked
StoryAreaTypeSuggestedReaction :: Maybe ReactionType -> Maybe Int -> Maybe Bool -> Maybe Bool -> StoryAreaType

-- | Type of the reaction
[reaction_type] :: StoryAreaType -> Maybe ReactionType

-- | Number of times the reaction was added
[total_count] :: StoryAreaType -> Maybe Int

-- | True, if reaction has a dark background
[is_dark] :: StoryAreaType -> Maybe Bool

-- | True, if reaction corner is flipped
[is_flipped] :: StoryAreaType -> Maybe Bool

-- | An area pointing to a message
StoryAreaTypeMessage :: Maybe Int -> Maybe Int -> StoryAreaType

-- | Identifier of the chat with the message
[chat_id] :: StoryAreaType -> Maybe Int

-- | Identifier of the message
[message_id] :: StoryAreaType -> Maybe Int
instance GHC.Show.Show TD.Data.StoryAreaType.StoryAreaType
instance GHC.Classes.Eq TD.Data.StoryAreaType.StoryAreaType
instance TD.Lib.Internal.ShortShow TD.Data.StoryAreaType.StoryAreaType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryAreaType.StoryAreaType

module TD.Data.StoryArea
data StoryArea

-- | Describes a clickable rectangle area on a story media
StoryArea :: Maybe StoryAreaPosition -> Maybe StoryAreaType -> StoryArea

-- | Position of the area
[position] :: StoryArea -> Maybe StoryAreaPosition

-- | Type of the area
[_type] :: StoryArea -> Maybe StoryAreaType
instance GHC.Show.Show TD.Data.StoryArea.StoryArea
instance GHC.Classes.Eq TD.Data.StoryArea.StoryArea
instance TD.Lib.Internal.ShortShow TD.Data.StoryArea.StoryArea
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryArea.StoryArea

module TD.Data.LocalFile
data LocalFile

-- | Represents a local file
LocalFile :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> LocalFile

-- | Local path to the locally available file part; may be empty
[path] :: LocalFile -> Maybe Text

-- | True, if it is possible to download or generate the file
[can_be_downloaded] :: LocalFile -> Maybe Bool

-- | True, if the file can be deleted
[can_be_deleted] :: LocalFile -> Maybe Bool

-- | True, if the file is currently being downloaded (or a local copy is
--   being generated by some other means)
[is_downloading_active] :: LocalFile -> Maybe Bool

-- | True, if the local copy is fully available
[is_downloading_completed] :: LocalFile -> Maybe Bool

-- | Download will be started from this offset. downloaded_prefix_size is
--   calculated from this offset
[download_offset] :: LocalFile -> Maybe Int

-- | If is_downloading_completed is false, then only some prefix of the
--   file starting from download_offset is ready to be read.
--   downloaded_prefix_size is the size of that prefix in bytes
[downloaded_prefix_size] :: LocalFile -> Maybe Int

-- | Total downloaded file size, in bytes. Can be used only for calculating
--   download progress. The actual file size may be bigger, and some parts
--   of it may contain garbage
[downloaded_size] :: LocalFile -> Maybe Int
instance GHC.Show.Show TD.Data.LocalFile.LocalFile
instance GHC.Classes.Eq TD.Data.LocalFile.LocalFile
instance TD.Lib.Internal.ShortShow TD.Data.LocalFile.LocalFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LocalFile.LocalFile

module TD.Data.LinkPreviewOptions
data LinkPreviewOptions

-- | Options to be used for generation of a link preview
LinkPreviewOptions :: Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> LinkPreviewOptions

-- | True, if link preview must be disabled
[is_disabled] :: LinkPreviewOptions -> Maybe Bool

-- | URL to use for link preview. If empty, then the first URL found in the
--   message text will be used
[url] :: LinkPreviewOptions -> Maybe Text

-- | True, if shown media preview must be small; ignored in secret chats or
--   if the URL isn't explicitly specified
[force_small_media] :: LinkPreviewOptions -> Maybe Bool

-- | True, if shown media preview must be large; ignored in secret chats or
--   if the URL isn't explicitly specified
[force_large_media] :: LinkPreviewOptions -> Maybe Bool

-- | True, if link preview must be shown above message text; otherwise, the
--   link preview will be shown below the message text; ignored in secret
--   chats
[show_above_text] :: LinkPreviewOptions -> Maybe Bool
defaultLinkPreviewOptions :: LinkPreviewOptions
instance GHC.Show.Show TD.Data.LinkPreviewOptions.LinkPreviewOptions
instance GHC.Classes.Eq TD.Data.LinkPreviewOptions.LinkPreviewOptions
instance TD.Lib.Internal.ShortShow TD.Data.LinkPreviewOptions.LinkPreviewOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LinkPreviewOptions.LinkPreviewOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LinkPreviewOptions.LinkPreviewOptions

module TD.Data.LanguagePackStringValue

-- | Represents the value of a string in a language pack
data LanguagePackStringValue

-- | An ordinary language pack string
LanguagePackStringValueOrdinary :: Maybe Text -> LanguagePackStringValue

-- | String value
[value] :: LanguagePackStringValue -> Maybe Text

-- | A language pack string which has different forms based on the number
--   of some object it mentions. See
--   <a>https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a>
--   for more information
LanguagePackStringValuePluralized :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> LanguagePackStringValue

-- | Value for zero objects
[zero_value] :: LanguagePackStringValue -> Maybe Text

-- | Value for one object
[one_value] :: LanguagePackStringValue -> Maybe Text

-- | Value for two objects
[two_value] :: LanguagePackStringValue -> Maybe Text

-- | Value for few objects
[few_value] :: LanguagePackStringValue -> Maybe Text

-- | Value for many objects
[many_value] :: LanguagePackStringValue -> Maybe Text

-- | Default value
[other_value] :: LanguagePackStringValue -> Maybe Text

-- | A deleted language pack string, the value must be taken from the
--   built-in English language pack
LanguagePackStringValueDeleted :: LanguagePackStringValue
instance GHC.Show.Show TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance GHC.Classes.Eq TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance TD.Lib.Internal.ShortShow TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackStringValue.LanguagePackStringValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackStringValue.LanguagePackStringValue

module TD.Data.LanguagePackString
data LanguagePackString

-- | Represents one language pack string
LanguagePackString :: Maybe Text -> Maybe LanguagePackStringValue -> LanguagePackString

-- | String key
[key] :: LanguagePackString -> Maybe Text

-- | String value; pass null if the string needs to be taken from the
--   built-in English language pack
[value] :: LanguagePackString -> Maybe LanguagePackStringValue
defaultLanguagePackString :: LanguagePackString
instance GHC.Show.Show TD.Data.LanguagePackString.LanguagePackString
instance GHC.Classes.Eq TD.Data.LanguagePackString.LanguagePackString
instance TD.Lib.Internal.ShortShow TD.Data.LanguagePackString.LanguagePackString
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackString.LanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackString.LanguagePackString

module TD.Data.LanguagePackStrings
data LanguagePackStrings

-- | Contains a list of language pack strings
LanguagePackStrings :: Maybe [LanguagePackString] -> LanguagePackStrings

-- | A list of language pack strings
[strings] :: LanguagePackStrings -> Maybe [LanguagePackString]
instance GHC.Show.Show TD.Data.LanguagePackStrings.LanguagePackStrings
instance GHC.Classes.Eq TD.Data.LanguagePackStrings.LanguagePackStrings
instance TD.Lib.Internal.ShortShow TD.Data.LanguagePackStrings.LanguagePackStrings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackStrings.LanguagePackStrings

module TD.Data.LanguagePackInfo
data LanguagePackInfo

-- | Contains information about a language pack
LanguagePackInfo :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> LanguagePackInfo

-- | Unique language pack identifier
[_id] :: LanguagePackInfo -> Maybe Text

-- | Identifier of a base language pack; may be empty. If a string is
--   missed in the language pack, then it must be fetched from base
--   language pack. Unsupported in custom language packs
[base_language_pack_id] :: LanguagePackInfo -> Maybe Text

-- | Language name
[name] :: LanguagePackInfo -> Maybe Text

-- | Name of the language in that language
[native_name] :: LanguagePackInfo -> Maybe Text

-- | A language code to be used to apply plural forms. See
--   <a>https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html</a>
--   for more information
[plural_code] :: LanguagePackInfo -> Maybe Text

-- | True, if the language pack is official
[is_official] :: LanguagePackInfo -> Maybe Bool

-- | True, if the language pack strings are RTL
[is_rtl] :: LanguagePackInfo -> Maybe Bool

-- | True, if the language pack is a beta language pack
[is_beta] :: LanguagePackInfo -> Maybe Bool

-- | True, if the language pack is installed by the current user
[is_installed] :: LanguagePackInfo -> Maybe Bool

-- | Total number of non-deleted strings from the language pack
[total_string_count] :: LanguagePackInfo -> Maybe Int

-- | Total number of translated strings from the language pack
[translated_string_count] :: LanguagePackInfo -> Maybe Int

-- | Total number of non-deleted strings from the language pack available
--   locally
[local_string_count] :: LanguagePackInfo -> Maybe Int

-- | Link to language translation interface; empty for custom local
--   language packs
[translation_url] :: LanguagePackInfo -> Maybe Text
defaultLanguagePackInfo :: LanguagePackInfo
instance GHC.Show.Show TD.Data.LanguagePackInfo.LanguagePackInfo
instance GHC.Classes.Eq TD.Data.LanguagePackInfo.LanguagePackInfo
instance TD.Lib.Internal.ShortShow TD.Data.LanguagePackInfo.LanguagePackInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LanguagePackInfo.LanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LanguagePackInfo.LanguagePackInfo

module TD.Data.LocalizationTargetInfo
data LocalizationTargetInfo

-- | Contains information about the current localization target
LocalizationTargetInfo :: Maybe [LanguagePackInfo] -> LocalizationTargetInfo

-- | List of available language packs for this application
[language_packs] :: LocalizationTargetInfo -> Maybe [LanguagePackInfo]
instance GHC.Show.Show TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance GHC.Classes.Eq TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance TD.Lib.Internal.ShortShow TD.Data.LocalizationTargetInfo.LocalizationTargetInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LocalizationTargetInfo.LocalizationTargetInfo

module TD.Data.LabeledPricePart
data LabeledPricePart

-- | Portion of the price of a product (e.g., "delivery cost", "tax
--   amount")
LabeledPricePart :: Maybe Text -> Maybe Int -> LabeledPricePart

-- | Label for this portion of the product price
[label] :: LabeledPricePart -> Maybe Text

-- | Currency amount in the smallest units of the currency
[amount] :: LabeledPricePart -> Maybe Int
defaultLabeledPricePart :: LabeledPricePart
instance GHC.Show.Show TD.Data.LabeledPricePart.LabeledPricePart
instance GHC.Classes.Eq TD.Data.LabeledPricePart.LabeledPricePart
instance TD.Lib.Internal.ShortShow TD.Data.LabeledPricePart.LabeledPricePart
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.LabeledPricePart.LabeledPricePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.LabeledPricePart.LabeledPricePart

module TD.Data.ShippingOption
data ShippingOption

-- | One shipping option
ShippingOption :: Maybe Text -> Maybe Text -> Maybe [LabeledPricePart] -> ShippingOption

-- | Shipping option identifier
[_id] :: ShippingOption -> Maybe Text

-- | Option title
[title] :: ShippingOption -> Maybe Text

-- | A list of objects used to calculate the total shipping costs
[price_parts] :: ShippingOption -> Maybe [LabeledPricePart]
defaultShippingOption :: ShippingOption
instance GHC.Show.Show TD.Data.ShippingOption.ShippingOption
instance GHC.Classes.Eq TD.Data.ShippingOption.ShippingOption
instance TD.Lib.Internal.ShortShow TD.Data.ShippingOption.ShippingOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ShippingOption.ShippingOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ShippingOption.ShippingOption

module TD.Data.ValidatedOrderInfo
data ValidatedOrderInfo

-- | Contains a temporary identifier of validated order information, which
--   is stored for one hour, and the available shipping options
ValidatedOrderInfo :: Maybe Text -> Maybe [ShippingOption] -> ValidatedOrderInfo

-- | Temporary identifier of the order information
[order_info_id] :: ValidatedOrderInfo -> Maybe Text

-- | Available shipping options
[shipping_options] :: ValidatedOrderInfo -> Maybe [ShippingOption]
instance GHC.Show.Show TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance GHC.Classes.Eq TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance TD.Lib.Internal.ShortShow TD.Data.ValidatedOrderInfo.ValidatedOrderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ValidatedOrderInfo.ValidatedOrderInfo

module TD.Data.JsonValue

-- | Represents a JSON value
data JsonValue

-- | Represents a null JSON value
JsonValueNull :: JsonValue

-- | Represents a boolean JSON value
JsonValueBoolean :: Maybe Bool -> JsonValue

-- | The value
[value] :: JsonValue -> Maybe Bool

-- | Represents a numeric JSON value
JsonValueNumber :: Maybe Double -> JsonValue

-- | The value
[_value] :: JsonValue -> Maybe Double

-- | Represents a string JSON value
JsonValueString :: Maybe Text -> JsonValue

-- | The value
[__value] :: JsonValue -> Maybe Text

-- | Represents a JSON array
JsonValueArray :: Maybe [JsonValue] -> JsonValue

-- | The list of array elements
[values] :: JsonValue -> Maybe [JsonValue]

-- | Represents a JSON object
JsonValueObject :: Maybe [JsonObjectMember] -> JsonValue

-- | The list of object members
[members] :: JsonValue -> Maybe [JsonObjectMember]
instance GHC.Show.Show TD.Data.JsonValue.JsonValue
instance GHC.Classes.Eq TD.Data.JsonValue.JsonValue
instance TD.Lib.Internal.ShortShow TD.Data.JsonValue.JsonValue
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.JsonValue.JsonValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.JsonValue.JsonValue

module TD.Data.JsonObjectMember
data JsonObjectMember

-- | Represents one member of a JSON object
JsonObjectMember :: Maybe Text -> Maybe JsonValue -> JsonObjectMember

-- | Member's key
[key] :: JsonObjectMember -> Maybe Text

-- | Member's value
[value] :: JsonObjectMember -> Maybe JsonValue
defaultJsonObjectMember :: JsonObjectMember
instance GHC.Show.Show TD.Data.JsonObjectMember.JsonObjectMember
instance GHC.Classes.Eq TD.Data.JsonObjectMember.JsonObjectMember
instance TD.Lib.Internal.ShortShow TD.Data.JsonObjectMember.JsonObjectMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.JsonObjectMember.JsonObjectMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.JsonObjectMember.JsonObjectMember

module TD.Data.Invoice
data Invoice

-- | Product invoice
Invoice :: Maybe Text -> Maybe [LabeledPricePart] -> Maybe Int -> Maybe [Int] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Invoice

-- | ISO 4217 currency code
[currency] :: Invoice -> Maybe Text

-- | A list of objects used to calculate the total price of the product
[price_parts] :: Invoice -> Maybe [LabeledPricePart]

-- | The maximum allowed amount of tip in the smallest units of the
--   currency
[max_tip_amount] :: Invoice -> Maybe Int

-- | Suggested amounts of tip in the smallest units of the currency
[suggested_tip_amounts] :: Invoice -> Maybe [Int]

-- | An HTTP URL with terms of service for recurring payments. If
--   non-empty, the invoice payment will result in recurring payments and
--   the user must accept the terms of service before allowed to pay
[recurring_payment_terms_of_service_url] :: Invoice -> Maybe Text

-- | An HTTP URL with terms of service for non-recurring payments. If
--   non-empty, then the user must accept the terms of service before
--   allowed to pay
[terms_of_service_url] :: Invoice -> Maybe Text

-- | True, if the payment is a test payment
[is_test] :: Invoice -> Maybe Bool

-- | True, if the user's name is needed for payment
[need_name] :: Invoice -> Maybe Bool

-- | True, if the user's phone number is needed for payment
[need_phone_number] :: Invoice -> Maybe Bool

-- | True, if the user's email address is needed for payment
[need_email_address] :: Invoice -> Maybe Bool

-- | True, if the user's shipping address is needed for payment
[need_shipping_address] :: Invoice -> Maybe Bool

-- | True, if the user's phone number will be sent to the provider
[send_phone_number_to_provider] :: Invoice -> Maybe Bool

-- | True, if the user's email address will be sent to the provider
[send_email_address_to_provider] :: Invoice -> Maybe Bool

-- | True, if the total price depends on the shipping method
[is_flexible] :: Invoice -> Maybe Bool
defaultInvoice :: Invoice
instance GHC.Show.Show TD.Data.Invoice.Invoice
instance GHC.Classes.Eq TD.Data.Invoice.Invoice
instance TD.Lib.Internal.ShortShow TD.Data.Invoice.Invoice
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Invoice.Invoice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Invoice.Invoice

module TD.Data.InviteLinkChatType

-- | Describes the type of chat to which points an invite link
data InviteLinkChatType

-- | The link is an invite link for a basic group
InviteLinkChatTypeBasicGroup :: InviteLinkChatType

-- | The link is an invite link for a supergroup
InviteLinkChatTypeSupergroup :: InviteLinkChatType

-- | The link is an invite link for a channel
InviteLinkChatTypeChannel :: InviteLinkChatType
instance GHC.Show.Show TD.Data.InviteLinkChatType.InviteLinkChatType
instance GHC.Classes.Eq TD.Data.InviteLinkChatType.InviteLinkChatType
instance TD.Lib.Internal.ShortShow TD.Data.InviteLinkChatType.InviteLinkChatType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InviteLinkChatType.InviteLinkChatType

module TD.Data.TargetChat

-- | Describes the target chat to be opened
data TargetChat

-- | The currently opened chat needs to be kept
TargetChatCurrent :: TargetChat

-- | The chat needs to be chosen by the user among chats of the specified
--   types
TargetChatChosen :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> TargetChat

-- | True, if private chats with ordinary users are allowed
[allow_user_chats] :: TargetChat -> Maybe Bool

-- | True, if private chats with other bots are allowed
[allow_bot_chats] :: TargetChat -> Maybe Bool

-- | True, if basic group and supergroup chats are allowed
[allow_group_chats] :: TargetChat -> Maybe Bool

-- | True, if channel chats are allowed
[allow_channel_chats] :: TargetChat -> Maybe Bool

-- | The chat needs to be open with the provided internal link
TargetChatInternalLink :: Maybe InternalLinkType -> TargetChat

-- | An internal link pointing to the chat
[link] :: TargetChat -> Maybe InternalLinkType
instance GHC.Show.Show TD.Data.TargetChat.TargetChat
instance GHC.Classes.Eq TD.Data.TargetChat.TargetChat
instance TD.Lib.Internal.ShortShow TD.Data.TargetChat.TargetChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TargetChat.TargetChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.TargetChat.TargetChat

module TD.Data.InputStoryAreaType

-- | Describes type of clickable rectangle area on a story media to be
--   added
data InputStoryAreaType

-- | An area pointing to a location
InputStoryAreaTypeLocation :: Maybe Location -> InputStoryAreaType

-- | The location
[location] :: InputStoryAreaType -> Maybe Location

-- | An area pointing to a venue found by the bot
--   getOption("venue_search_bot_username")
InputStoryAreaTypeFoundVenue :: Maybe Int -> Maybe Text -> InputStoryAreaType

-- | Identifier of the inline query, used to found the venue
[query_id] :: InputStoryAreaType -> Maybe Int

-- | Identifier of the inline query result
[result_id] :: InputStoryAreaType -> Maybe Text

-- | An area pointing to a venue already added to the story
InputStoryAreaTypePreviousVenue :: Maybe Text -> Maybe Text -> InputStoryAreaType

-- | Provider of the venue
[venue_provider] :: InputStoryAreaType -> Maybe Text

-- | Identifier of the venue in the provider database
[venue_id] :: InputStoryAreaType -> Maybe Text

-- | An area pointing to a suggested reaction
InputStoryAreaTypeSuggestedReaction :: Maybe ReactionType -> Maybe Bool -> Maybe Bool -> InputStoryAreaType

-- | Type of the reaction
[reaction_type] :: InputStoryAreaType -> Maybe ReactionType

-- | True, if reaction has a dark background
[is_dark] :: InputStoryAreaType -> Maybe Bool

-- | True, if reaction corner is flipped
[is_flipped] :: InputStoryAreaType -> Maybe Bool

-- | An area pointing to a message
InputStoryAreaTypeMessage :: Maybe Int -> Maybe Int -> InputStoryAreaType

-- | Identifier of the chat with the message. Currently, the chat must be a
--   supergroup or a channel chat
[chat_id] :: InputStoryAreaType -> Maybe Int

-- | Identifier of the message. Only successfully sent non-scheduled
--   messages can be specified
[message_id] :: InputStoryAreaType -> Maybe Int
instance GHC.Show.Show TD.Data.InputStoryAreaType.InputStoryAreaType
instance GHC.Classes.Eq TD.Data.InputStoryAreaType.InputStoryAreaType
instance TD.Lib.Internal.ShortShow TD.Data.InputStoryAreaType.InputStoryAreaType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputStoryAreaType.InputStoryAreaType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputStoryAreaType.InputStoryAreaType

module TD.Data.InputStoryArea
data InputStoryArea

-- | Describes a clickable rectangle area on a story media to be added
InputStoryArea :: Maybe StoryAreaPosition -> Maybe InputStoryAreaType -> InputStoryArea

-- | Position of the area
[position] :: InputStoryArea -> Maybe StoryAreaPosition

-- | Type of the area
[_type] :: InputStoryArea -> Maybe InputStoryAreaType
defaultInputStoryArea :: InputStoryArea
instance GHC.Show.Show TD.Data.InputStoryArea.InputStoryArea
instance GHC.Classes.Eq TD.Data.InputStoryArea.InputStoryArea
instance TD.Lib.Internal.ShortShow TD.Data.InputStoryArea.InputStoryArea
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputStoryArea.InputStoryArea
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputStoryArea.InputStoryArea

module TD.Data.InputStoryAreas
data InputStoryAreas

-- | Contains a list of story areas to be added
InputStoryAreas :: Maybe [InputStoryArea] -> InputStoryAreas

-- | List of input story areas. Currently, a story can have up to 10
--   inputStoryAreaTypeLocation, inputStoryAreaTypeFoundVenue, and
--   inputStoryAreaTypePreviousVenue areas, up to
--   getOption("story_suggested_reaction_area_count_max")
--   inputStoryAreaTypeSuggestedReaction areas, and up to 1
--   inputStoryAreaTypeMessage area
[areas] :: InputStoryAreas -> Maybe [InputStoryArea]
defaultInputStoryAreas :: InputStoryAreas
instance GHC.Show.Show TD.Data.InputStoryAreas.InputStoryAreas
instance GHC.Classes.Eq TD.Data.InputStoryAreas.InputStoryAreas
instance TD.Lib.Internal.ShortShow TD.Data.InputStoryAreas.InputStoryAreas
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputStoryAreas.InputStoryAreas
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputStoryAreas.InputStoryAreas

module TD.Data.InputPassportElementErrorSource

-- | Contains the description of an error in a Telegram Passport element;
--   for bots only
data InputPassportElementErrorSource

-- | The element contains an error in an unspecified place. The error will
--   be considered resolved when new data is added
InputPassportElementErrorSourceUnspecified :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the entire element
[element_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | A data field contains an error. The error is considered resolved when
--   the field's value changes
InputPassportElementErrorSourceDataField :: Maybe Text -> Maybe ByteString -> InputPassportElementErrorSource

-- | Field name
[field_name] :: InputPassportElementErrorSource -> Maybe Text

-- | Current data hash
[data_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | The front side of the document contains an error. The error is
--   considered resolved when the file with the front side of the document
--   changes
InputPassportElementErrorSourceFrontSide :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the file containing the front side
[file_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | The reverse side of the document contains an error. The error is
--   considered resolved when the file with the reverse side of the
--   document changes
InputPassportElementErrorSourceReverseSide :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the file containing the front side
[file_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | The selfie contains an error. The error is considered resolved when
--   the file with the selfie changes
InputPassportElementErrorSourceSelfie :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the file containing the front side
[file_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | One of the files containing the translation of the document contains
--   an error. The error is considered resolved when the file with the
--   translation changes
InputPassportElementErrorSourceTranslationFile :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the file containing the front side
[file_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | The translation of the document contains an error. The error is
--   considered resolved when the list of files changes
InputPassportElementErrorSourceTranslationFiles :: Maybe [ByteString] -> InputPassportElementErrorSource

-- | Current hashes of all files with the translation
[file_hashes] :: InputPassportElementErrorSource -> Maybe [ByteString]

-- | The file contains an error. The error is considered resolved when the
--   file changes
InputPassportElementErrorSourceFile :: Maybe ByteString -> InputPassportElementErrorSource

-- | Current hash of the file containing the front side
[file_hash] :: InputPassportElementErrorSource -> Maybe ByteString

-- | The list of attached files contains an error. The error is considered
--   resolved when the file list changes
InputPassportElementErrorSourceFiles :: Maybe [ByteString] -> InputPassportElementErrorSource

-- | Current hashes of all files with the translation
[file_hashes] :: InputPassportElementErrorSource -> Maybe [ByteString]
instance GHC.Show.Show TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance GHC.Classes.Eq TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance TD.Lib.Internal.ShortShow TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElementErrorSource.InputPassportElementErrorSource

module TD.Data.InputPassportElementError
data InputPassportElementError

-- | Contains the description of an error in a Telegram Passport element;
--   for bots only
InputPassportElementError :: Maybe PassportElementType -> Maybe Text -> Maybe InputPassportElementErrorSource -> InputPassportElementError

-- | Type of Telegram Passport element that has the error
[_type] :: InputPassportElementError -> Maybe PassportElementType

-- | Error message
[message] :: InputPassportElementError -> Maybe Text

-- | Error source
[source] :: InputPassportElementError -> Maybe InputPassportElementErrorSource
defaultInputPassportElementError :: InputPassportElementError
instance GHC.Show.Show TD.Data.InputPassportElementError.InputPassportElementError
instance GHC.Classes.Eq TD.Data.InputPassportElementError.InputPassportElementError
instance TD.Lib.Internal.ShortShow TD.Data.InputPassportElementError.InputPassportElementError
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElementError.InputPassportElementError
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElementError.InputPassportElementError

module TD.Data.InputInvoice

-- | Describes an invoice to process
data InputInvoice

-- | An invoice from a message of the type messageInvoice
InputInvoiceMessage :: Maybe Int -> Maybe Int -> InputInvoice

-- | Chat identifier of the message
[chat_id] :: InputInvoice -> Maybe Int

-- | Message identifier
[message_id] :: InputInvoice -> Maybe Int

-- | An invoice from a link of the type internalLinkTypeInvoice
InputInvoiceName :: Maybe Text -> InputInvoice

-- | Name of the invoice
[name] :: InputInvoice -> Maybe Text

-- | An invoice for a payment toward Telegram; must not be used in the
--   in-store apps
InputInvoiceTelegram :: Maybe TelegramPaymentPurpose -> InputInvoice

-- | Transaction purpose
[purpose] :: InputInvoice -> Maybe TelegramPaymentPurpose
instance GHC.Show.Show TD.Data.InputInvoice.InputInvoice
instance GHC.Classes.Eq TD.Data.InputInvoice.InputInvoice
instance TD.Lib.Internal.ShortShow TD.Data.InputInvoice.InputInvoice
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputInvoice.InputInvoice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputInvoice.InputInvoice

module TD.Data.InputFile

-- | Points to a file
data InputFile

-- | A file defined by its unique identifier
InputFileId :: Maybe Int -> InputFile

-- | Unique file identifier
[_id] :: InputFile -> Maybe Int

-- | A file defined by its remote identifier. The remote identifier is
--   guaranteed to be usable only if the corresponding file is still
--   accessible to the user and known to TDLib. For example, if the file is
--   from a message, then the message must be not deleted and accessible to
--   the user. If the file database is disabled, then the corresponding
--   object with the file must be preloaded by the application
InputFileRemote :: Maybe Text -> InputFile

-- | Remote file identifier
[__id] :: InputFile -> Maybe Text

-- | A file defined by a local path
InputFileLocal :: Maybe Text -> InputFile

-- | Local path to the file
[path] :: InputFile -> Maybe Text

-- | A file generated by the application
InputFileGenerated :: Maybe Text -> Maybe Text -> Maybe Int -> InputFile

-- | Local path to a file from which the file is generated; may be empty if
--   there is no such file
[original_path] :: InputFile -> Maybe Text

-- | String specifying the conversion applied to the original file; must be
--   persistent across application restarts. Conversions beginning with
--   <tt>#</tt> are reserved for internal TDLib usage
[conversion] :: InputFile -> Maybe Text

-- | Expected size of the generated file, in bytes; 0 if unknown
[expected_size] :: InputFile -> Maybe Int
instance GHC.Show.Show TD.Data.InputFile.InputFile
instance GHC.Classes.Eq TD.Data.InputFile.InputFile
instance TD.Lib.Internal.ShortShow TD.Data.InputFile.InputFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputFile.InputFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputFile.InputFile

module TD.Data.InputThumbnail
data InputThumbnail

-- | A thumbnail to be sent along with a file; must be in JPEG or WEBP
--   format for stickers, and less than 200 KB in size
InputThumbnail :: Maybe InputFile -> Maybe Int -> Maybe Int -> InputThumbnail

-- | Thumbnail file to send. Sending thumbnails by file_id is currently not
--   supported
[thumbnail] :: InputThumbnail -> Maybe InputFile

-- | Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown
[width] :: InputThumbnail -> Maybe Int

-- | Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown
[height] :: InputThumbnail -> Maybe Int
defaultInputThumbnail :: InputThumbnail
instance GHC.Show.Show TD.Data.InputThumbnail.InputThumbnail
instance GHC.Classes.Eq TD.Data.InputThumbnail.InputThumbnail
instance TD.Lib.Internal.ShortShow TD.Data.InputThumbnail.InputThumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputThumbnail.InputThumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputThumbnail.InputThumbnail

module TD.Data.InputStoryContent

-- | The content of a story to send
data InputStoryContent

-- | A photo story
InputStoryContentPhoto :: Maybe InputFile -> Maybe [Int] -> InputStoryContent

-- | Photo to send. The photo must be at most 10 MB in size. The photo size
--   must be 1080x1920
[photo] :: InputStoryContent -> Maybe InputFile

-- | File identifiers of the stickers added to the photo, if applicable
[added_sticker_file_ids] :: InputStoryContent -> Maybe [Int]

-- | A video story
InputStoryContentVideo :: Maybe InputFile -> Maybe [Int] -> Maybe Double -> Maybe Bool -> InputStoryContent

-- | Video to be sent. The video size must be 720x1280. The video must be
--   streamable and stored in MPEG4 format, after encoding with x265 codec
--   and key frames added each second
[video] :: InputStoryContent -> Maybe InputFile

-- | File identifiers of the stickers added to the photo, if applicable
[added_sticker_file_ids] :: InputStoryContent -> Maybe [Int]

-- | Precise duration of the video, in seconds; 0-60
[duration] :: InputStoryContent -> Maybe Double

-- | True, if the video has no sound
[is_animation] :: InputStoryContent -> Maybe Bool
instance GHC.Show.Show TD.Data.InputStoryContent.InputStoryContent
instance GHC.Classes.Eq TD.Data.InputStoryContent.InputStoryContent
instance TD.Lib.Internal.ShortShow TD.Data.InputStoryContent.InputStoryContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputStoryContent.InputStoryContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputStoryContent.InputStoryContent

module TD.Data.InputSticker
data InputSticker

-- | A sticker to be added to a sticker set
InputSticker :: Maybe InputFile -> Maybe StickerFormat -> Maybe Text -> Maybe MaskPosition -> Maybe [Text] -> InputSticker

-- | File with the sticker; must fit in a 512x512 square. For WEBP stickers
--   the file must be in WEBP or PNG format, which will be converted to
--   WEBP server-side. See
--   <a>https://core.telegram.org/animated_stickers#technical-requirements</a>
--   for technical requirements
[sticker] :: InputSticker -> Maybe InputFile

-- | Format of the sticker
[format] :: InputSticker -> Maybe StickerFormat

-- | String with 1-20 emoji corresponding to the sticker
[emojis] :: InputSticker -> Maybe Text

-- | Position where the mask is placed; pass null if not specified
[mask_position] :: InputSticker -> Maybe MaskPosition

-- | List of up to 20 keywords with total length up to 64 characters, which
--   can be used to find the sticker
[keywords] :: InputSticker -> Maybe [Text]
defaultInputSticker :: InputSticker
instance GHC.Show.Show TD.Data.InputSticker.InputSticker
instance GHC.Classes.Eq TD.Data.InputSticker.InputSticker
instance TD.Lib.Internal.ShortShow TD.Data.InputSticker.InputSticker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputSticker.InputSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputSticker.InputSticker

module TD.Data.InputPersonalDocument
data InputPersonalDocument

-- | A personal document to be saved to Telegram Passport
InputPersonalDocument :: Maybe [InputFile] -> Maybe [InputFile] -> InputPersonalDocument

-- | List of files containing the pages of the document
[files] :: InputPersonalDocument -> Maybe [InputFile]

-- | List of files containing a certified English translation of the
--   document
[translation] :: InputPersonalDocument -> Maybe [InputFile]
defaultInputPersonalDocument :: InputPersonalDocument
instance GHC.Show.Show TD.Data.InputPersonalDocument.InputPersonalDocument
instance GHC.Classes.Eq TD.Data.InputPersonalDocument.InputPersonalDocument
instance TD.Lib.Internal.ShortShow TD.Data.InputPersonalDocument.InputPersonalDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPersonalDocument.InputPersonalDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPersonalDocument.InputPersonalDocument

module TD.Data.InputCredentials

-- | Contains information about the payment method chosen by the user
data InputCredentials

-- | Applies if a user chooses some previously saved payment credentials.
--   To use their previously saved credentials, the user must have a valid
--   temporary password
InputCredentialsSaved :: Maybe Text -> InputCredentials

-- | Identifier of the saved credentials
[saved_credentials_id] :: InputCredentials -> Maybe Text

-- | Applies if a user enters new credentials on a payment provider website
InputCredentialsNew :: Maybe Text -> Maybe Bool -> InputCredentials

-- | JSON-encoded data with the credential identifier from the payment
--   provider
[_data] :: InputCredentials -> Maybe Text

-- | True, if the credential identifier can be saved on the server side
[allow_save] :: InputCredentials -> Maybe Bool

-- | Applies if a user enters new credentials using Apple Pay
InputCredentialsApplePay :: Maybe Text -> InputCredentials

-- | JSON-encoded data with the credential identifier from the payment
--   provider
[_data] :: InputCredentials -> Maybe Text

-- | Applies if a user enters new credentials using Google Pay
InputCredentialsGooglePay :: Maybe Text -> InputCredentials

-- | JSON-encoded data with the credential identifier from the payment
--   provider
[_data] :: InputCredentials -> Maybe Text
instance GHC.Show.Show TD.Data.InputCredentials.InputCredentials
instance GHC.Classes.Eq TD.Data.InputCredentials.InputCredentials
instance TD.Lib.Internal.ShortShow TD.Data.InputCredentials.InputCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputCredentials.InputCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputCredentials.InputCredentials

module TD.Data.InputBusinessStartPage
data InputBusinessStartPage

-- | Describes settings for a business account start page to set
InputBusinessStartPage :: Maybe Text -> Maybe Text -> Maybe InputFile -> InputBusinessStartPage

-- | Title text of the start page;
--   0-getOption("business_start_page_title_length_max") characters
[title] :: InputBusinessStartPage -> Maybe Text

-- | Message text of the start page;
--   0-getOption("business_start_page_message_length_max") characters
[message] :: InputBusinessStartPage -> Maybe Text

-- | Greeting sticker of the start page; pass null if none. The sticker
--   must belong to a sticker set and must not be a custom emoji
[sticker] :: InputBusinessStartPage -> Maybe InputFile
defaultInputBusinessStartPage :: InputBusinessStartPage
instance GHC.Show.Show TD.Data.InputBusinessStartPage.InputBusinessStartPage
instance GHC.Classes.Eq TD.Data.InputBusinessStartPage.InputBusinessStartPage
instance TD.Lib.Internal.ShortShow TD.Data.InputBusinessStartPage.InputBusinessStartPage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputBusinessStartPage.InputBusinessStartPage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputBusinessStartPage.InputBusinessStartPage

module TD.Data.InputBackground

-- | Contains information about background to set
data InputBackground

-- | A background from a local file
InputBackgroundLocal :: Maybe InputFile -> InputBackground

-- | Background file to use. Only inputFileLocal and inputFileGenerated are
--   supported. The file must be in JPEG format for wallpapers and in PNG
--   format for patterns
[background] :: InputBackground -> Maybe InputFile

-- | A background from the server
InputBackgroundRemote :: Maybe Int -> InputBackground

-- | The background identifier
[background_id] :: InputBackground -> Maybe Int

-- | A background previously set in the chat; for chat backgrounds only
InputBackgroundPrevious :: Maybe Int -> InputBackground

-- | Identifier of the message with the background
[message_id] :: InputBackground -> Maybe Int
instance GHC.Show.Show TD.Data.InputBackground.InputBackground
instance GHC.Classes.Eq TD.Data.InputBackground.InputBackground
instance TD.Lib.Internal.ShortShow TD.Data.InputBackground.InputBackground
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputBackground.InputBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputBackground.InputBackground

module TD.Data.InlineQueryResultsButtonType

-- | Represents a type of button in results of inline query
data InlineQueryResultsButtonType

-- | Describes the button that opens a private chat with the bot and sends
--   a start message to the bot with the given parameter
InlineQueryResultsButtonTypeStartBot :: Maybe Text -> InlineQueryResultsButtonType

-- | The parameter for the bot start message
[parameter] :: InlineQueryResultsButtonType -> Maybe Text

-- | Describes the button that opens a Web App by calling getWebAppUrl
InlineQueryResultsButtonTypeWebApp :: Maybe Text -> InlineQueryResultsButtonType

-- | An HTTP URL to pass to getWebAppUrl
[url] :: InlineQueryResultsButtonType -> Maybe Text
instance GHC.Show.Show TD.Data.InlineQueryResultsButtonType.InlineQueryResultsButtonType
instance GHC.Classes.Eq TD.Data.InlineQueryResultsButtonType.InlineQueryResultsButtonType
instance TD.Lib.Internal.ShortShow TD.Data.InlineQueryResultsButtonType.InlineQueryResultsButtonType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResultsButtonType.InlineQueryResultsButtonType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineQueryResultsButtonType.InlineQueryResultsButtonType

module TD.Data.InlineQueryResultsButton
data InlineQueryResultsButton

-- | Represents a button to be shown above inline query results
InlineQueryResultsButton :: Maybe Text -> Maybe InlineQueryResultsButtonType -> InlineQueryResultsButton

-- | The text of the button
[text] :: InlineQueryResultsButton -> Maybe Text

-- | Type of the button
[_type] :: InlineQueryResultsButton -> Maybe InlineQueryResultsButtonType
defaultInlineQueryResultsButton :: InlineQueryResultsButton
instance GHC.Show.Show TD.Data.InlineQueryResultsButton.InlineQueryResultsButton
instance GHC.Classes.Eq TD.Data.InlineQueryResultsButton.InlineQueryResultsButton
instance TD.Lib.Internal.ShortShow TD.Data.InlineQueryResultsButton.InlineQueryResultsButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResultsButton.InlineQueryResultsButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineQueryResultsButton.InlineQueryResultsButton

module TD.Data.InlineKeyboardButtonType

-- | Describes the type of inline keyboard button
data InlineKeyboardButtonType

-- | A button that opens a specified URL
InlineKeyboardButtonTypeUrl :: Maybe Text -> InlineKeyboardButtonType

-- | HTTP or tg:// URL to open
[url] :: InlineKeyboardButtonType -> Maybe Text

-- | A button that opens a specified URL and automatically authorize the
--   current user by calling getLoginUrlInfo
InlineKeyboardButtonTypeLoginUrl :: Maybe Text -> Maybe Int -> Maybe Text -> InlineKeyboardButtonType

-- | HTTP or tg:// URL to open
[url] :: InlineKeyboardButtonType -> Maybe Text

-- | Unique button identifier
[_id] :: InlineKeyboardButtonType -> Maybe Int

-- | If non-empty, new text of the button in forwarded messages
[forward_text] :: InlineKeyboardButtonType -> Maybe Text

-- | A button that opens a Web App by calling openWebApp
InlineKeyboardButtonTypeWebApp :: Maybe Text -> InlineKeyboardButtonType

-- | HTTP or tg:// URL to open
[url] :: InlineKeyboardButtonType -> Maybe Text

-- | A button that sends a callback query to a bot
InlineKeyboardButtonTypeCallback :: Maybe ByteString -> InlineKeyboardButtonType

-- | Data to be sent to the bot via a callback query
[_data] :: InlineKeyboardButtonType -> Maybe ByteString

-- | A button that asks for the 2-step verification password of the current
--   user and then sends a callback query to a bot
InlineKeyboardButtonTypeCallbackWithPassword :: Maybe ByteString -> InlineKeyboardButtonType

-- | Data to be sent to the bot via a callback query
[_data] :: InlineKeyboardButtonType -> Maybe ByteString

-- | A button with a game that sends a callback query to a bot. This button
--   must be in the first column and row of the keyboard and can be
--   attached only to a message with content of the type messageGame
InlineKeyboardButtonTypeCallbackGame :: InlineKeyboardButtonType

-- | A button that forces an inline query to the bot to be inserted in the
--   input field
InlineKeyboardButtonTypeSwitchInline :: Maybe Text -> Maybe TargetChat -> InlineKeyboardButtonType

-- | Inline query to be sent to the bot
[query] :: InlineKeyboardButtonType -> Maybe Text

-- | Target chat from which to send the inline query
[target_chat] :: InlineKeyboardButtonType -> Maybe TargetChat

-- | A button to buy something. This button must be in the first column and
--   row of the keyboard and can be attached only to a message with content
--   of the type messageInvoice
InlineKeyboardButtonTypeBuy :: InlineKeyboardButtonType

-- | A button with a user reference to be handled in the same way as
--   textEntityTypeMentionName entities
InlineKeyboardButtonTypeUser :: Maybe Int -> InlineKeyboardButtonType

-- | User identifier
[user_id] :: InlineKeyboardButtonType -> Maybe Int
instance GHC.Show.Show TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance GHC.Classes.Eq TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance TD.Lib.Internal.ShortShow TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineKeyboardButtonType.InlineKeyboardButtonType

module TD.Data.InlineKeyboardButton
data InlineKeyboardButton

-- | Represents a single button in an inline keyboard
InlineKeyboardButton :: Maybe Text -> Maybe InlineKeyboardButtonType -> InlineKeyboardButton

-- | Text of the button
[text] :: InlineKeyboardButton -> Maybe Text

-- | Type of the button
[_type] :: InlineKeyboardButton -> Maybe InlineKeyboardButtonType
defaultInlineKeyboardButton :: InlineKeyboardButton
instance GHC.Show.Show TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance GHC.Classes.Eq TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance TD.Lib.Internal.ShortShow TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineKeyboardButton.InlineKeyboardButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InlineKeyboardButton.InlineKeyboardButton

module TD.Data.ImportedContacts
data ImportedContacts

-- | Represents the result of an importContacts request
ImportedContacts :: Maybe [Int] -> Maybe [Int] -> ImportedContacts

-- | User identifiers of the imported contacts in the same order as they
--   were specified in the request; 0 if the contact is not yet a
--   registered user
[user_ids] :: ImportedContacts -> Maybe [Int]

-- | The number of users that imported the corresponding contact; 0 for
--   already registered users or if unavailable
[importer_count] :: ImportedContacts -> Maybe [Int]
instance GHC.Show.Show TD.Data.ImportedContacts.ImportedContacts
instance GHC.Classes.Eq TD.Data.ImportedContacts.ImportedContacts
instance TD.Lib.Internal.ShortShow TD.Data.ImportedContacts.ImportedContacts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ImportedContacts.ImportedContacts

module TD.Data.HttpUrl
data HttpUrl

-- | Contains an HTTP URL
HttpUrl :: Maybe Text -> HttpUrl

-- | The URL
[url] :: HttpUrl -> Maybe Text
instance GHC.Show.Show TD.Data.HttpUrl.HttpUrl
instance GHC.Classes.Eq TD.Data.HttpUrl.HttpUrl
instance TD.Lib.Internal.ShortShow TD.Data.HttpUrl.HttpUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.HttpUrl.HttpUrl

module TD.Data.Hashtags
data Hashtags

-- | Contains a list of hashtags
Hashtags :: Maybe [Text] -> Hashtags

-- | A list of hashtags
[hashtags] :: Hashtags -> Maybe [Text]
instance GHC.Show.Show TD.Data.Hashtags.Hashtags
instance GHC.Classes.Eq TD.Data.Hashtags.Hashtags
instance TD.Lib.Internal.ShortShow TD.Data.Hashtags.Hashtags
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Hashtags.Hashtags

module TD.Data.GroupCallVideoSourceGroup
data GroupCallVideoSourceGroup

-- | Describes a group of video synchronization source identifiers
GroupCallVideoSourceGroup :: Maybe Text -> Maybe [Int] -> GroupCallVideoSourceGroup

-- | The semantics of sources, one of <a>SIM</a> or <a>FID</a>
[semantics] :: GroupCallVideoSourceGroup -> Maybe Text

-- | The list of synchronization source identifiers
[source_ids] :: GroupCallVideoSourceGroup -> Maybe [Int]
instance GHC.Show.Show TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance GHC.Classes.Eq TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallVideoSourceGroup.GroupCallVideoSourceGroup

module TD.Data.GroupCallVideoQuality

-- | Describes the quality of a group call video
data GroupCallVideoQuality

-- | The worst available video quality
GroupCallVideoQualityThumbnail :: GroupCallVideoQuality

-- | The medium video quality
GroupCallVideoQualityMedium :: GroupCallVideoQuality

-- | The best available video quality
GroupCallVideoQualityFull :: GroupCallVideoQuality
instance GHC.Show.Show TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance GHC.Classes.Eq TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallVideoQuality.GroupCallVideoQuality
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.GroupCallVideoQuality.GroupCallVideoQuality

module TD.Data.GroupCallStream
data GroupCallStream

-- | Describes an available stream in a group call
GroupCallStream :: Maybe Int -> Maybe Int -> Maybe Int -> GroupCallStream

-- | Identifier of an audio/video channel
[channel_id] :: GroupCallStream -> Maybe Int

-- | Scale of segment durations in the stream. The duration is
--   1000/(2**scale) milliseconds
[scale] :: GroupCallStream -> Maybe Int

-- | Point in time when the stream currently ends; Unix timestamp in
--   milliseconds
[time_offset] :: GroupCallStream -> Maybe Int
instance GHC.Show.Show TD.Data.GroupCallStream.GroupCallStream
instance GHC.Classes.Eq TD.Data.GroupCallStream.GroupCallStream
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallStream.GroupCallStream
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallStream.GroupCallStream

module TD.Data.GroupCallStreams
data GroupCallStreams

-- | Represents a list of group call streams
GroupCallStreams :: Maybe [GroupCallStream] -> GroupCallStreams

-- | A list of group call streams
[streams] :: GroupCallStreams -> Maybe [GroupCallStream]
instance GHC.Show.Show TD.Data.GroupCallStreams.GroupCallStreams
instance GHC.Classes.Eq TD.Data.GroupCallStreams.GroupCallStreams
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallStreams.GroupCallStreams
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallStreams.GroupCallStreams

module TD.Data.GroupCallRecentSpeaker
data GroupCallRecentSpeaker

-- | Describes a recently speaking participant in a group call
GroupCallRecentSpeaker :: Maybe MessageSender -> Maybe Bool -> GroupCallRecentSpeaker

-- | Group call participant identifier
[participant_id] :: GroupCallRecentSpeaker -> Maybe MessageSender

-- | True, is the user has spoken recently
[is_speaking] :: GroupCallRecentSpeaker -> Maybe Bool
instance GHC.Show.Show TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance GHC.Classes.Eq TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallRecentSpeaker.GroupCallRecentSpeaker

module TD.Data.GroupCallParticipantVideoInfo
data GroupCallParticipantVideoInfo

-- | Contains information about a group call participant's video channel
GroupCallParticipantVideoInfo :: Maybe [GroupCallVideoSourceGroup] -> Maybe Text -> Maybe Bool -> GroupCallParticipantVideoInfo

-- | List of synchronization source groups of the video
[source_groups] :: GroupCallParticipantVideoInfo -> Maybe [GroupCallVideoSourceGroup]

-- | Video channel endpoint identifier
[endpoint_id] :: GroupCallParticipantVideoInfo -> Maybe Text

-- | True, if the video is paused. This flag needs to be ignored, if new
--   video frames are received
[is_paused] :: GroupCallParticipantVideoInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance GHC.Classes.Eq TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallParticipantVideoInfo.GroupCallParticipantVideoInfo

module TD.Data.GroupCallParticipant
data GroupCallParticipant

-- | Represents a group call participant
GroupCallParticipant :: Maybe MessageSender -> Maybe Int -> Maybe Int -> Maybe GroupCallParticipantVideoInfo -> Maybe GroupCallParticipantVideoInfo -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Text -> GroupCallParticipant

-- | Identifier of the group call participant
[participant_id] :: GroupCallParticipant -> Maybe MessageSender

-- | User's audio channel synchronization source identifier
[audio_source_id] :: GroupCallParticipant -> Maybe Int

-- | User's screen sharing audio channel synchronization source identifier
[screen_sharing_audio_source_id] :: GroupCallParticipant -> Maybe Int

-- | Information about user's video channel; may be null if there is no
--   active video
[video_info] :: GroupCallParticipant -> Maybe GroupCallParticipantVideoInfo

-- | Information about user's screen sharing video channel; may be null if
--   there is no active screen sharing video
[screen_sharing_video_info] :: GroupCallParticipant -> Maybe GroupCallParticipantVideoInfo

-- | The participant user's bio or the participant chat's description
[bio] :: GroupCallParticipant -> Maybe Text

-- | True, if the participant is the current user
[is_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is speaking as set by
--   setGroupCallParticipantIsSpeaking
[is_speaking] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant hand is raised
[is_hand_raised] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can mute the participant for all other group
--   call participants
[can_be_muted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can allow the participant to unmute
--   themselves or unmute the participant (if the participant is the
--   current user)
[can_be_unmuted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can mute the participant only for self
[can_be_muted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the current user can unmute the participant for self
[can_be_unmuted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is muted for all users
[is_muted_for_all_users] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is muted for the current user
[is_muted_for_current_user] :: GroupCallParticipant -> Maybe Bool

-- | True, if the participant is muted for all users, but can unmute
--   themselves
[can_unmute_self] :: GroupCallParticipant -> Maybe Bool

-- | Participant's volume level; 1-20000 in hundreds of percents
[volume_level] :: GroupCallParticipant -> Maybe Int

-- | User's order in the group call participant list. Orders must be
--   compared lexicographically. The bigger is order, the higher is user in
--   the list. If order is empty, the user must be removed from the
--   participant list
[order] :: GroupCallParticipant -> Maybe Text
instance GHC.Show.Show TD.Data.GroupCallParticipant.GroupCallParticipant
instance GHC.Classes.Eq TD.Data.GroupCallParticipant.GroupCallParticipant
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallParticipant.GroupCallParticipant
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallParticipant.GroupCallParticipant

module TD.Data.GroupCallId
data GroupCallId

-- | Contains the group call identifier
GroupCallId :: Maybe Int -> GroupCallId

-- | Group call identifier
[_id] :: GroupCallId -> Maybe Int
instance GHC.Show.Show TD.Data.GroupCallId.GroupCallId
instance GHC.Classes.Eq TD.Data.GroupCallId.GroupCallId
instance TD.Lib.Internal.ShortShow TD.Data.GroupCallId.GroupCallId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCallId.GroupCallId

module TD.Data.GroupCall
data GroupCall

-- | Describes a group call
GroupCall :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe [GroupCallRecentSpeaker] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> GroupCall

-- | Group call identifier
[_id] :: GroupCall -> Maybe Int

-- | Group call title
[title] :: GroupCall -> Maybe Text

-- | Point in time (Unix timestamp) when the group call is supposed to be
--   started by an administrator; 0 if it is already active or was ended
[scheduled_start_date] :: GroupCall -> Maybe Int

-- | True, if the group call is scheduled and the current user will receive
--   a notification when the group call starts
[enabled_start_notification] :: GroupCall -> Maybe Bool

-- | True, if the call is active
[is_active] :: GroupCall -> Maybe Bool

-- | True, if the chat is an RTMP stream instead of an ordinary video chat
[is_rtmp_stream] :: GroupCall -> Maybe Bool

-- | True, if the call is joined
[is_joined] :: GroupCall -> Maybe Bool

-- | True, if user was kicked from the call because of network loss and the
--   call needs to be rejoined
[need_rejoin] :: GroupCall -> Maybe Bool

-- | True, if the current user can manage the group call
[can_be_managed] :: GroupCall -> Maybe Bool

-- | Number of participants in the group call
[participant_count] :: GroupCall -> Maybe Int

-- | True, if group call participants, which are muted, aren't returned in
--   participant list
[has_hidden_listeners] :: GroupCall -> Maybe Bool

-- | True, if all group call participants are loaded
[loaded_all_participants] :: GroupCall -> Maybe Bool

-- | At most 3 recently speaking users in the group call
[recent_speakers] :: GroupCall -> Maybe [GroupCallRecentSpeaker]

-- | True, if the current user's video is enabled
[is_my_video_enabled] :: GroupCall -> Maybe Bool

-- | True, if the current user's video is paused
[is_my_video_paused] :: GroupCall -> Maybe Bool

-- | True, if the current user can broadcast video or share screen
[can_enable_video] :: GroupCall -> Maybe Bool

-- | True, if only group call administrators can unmute new participants
[mute_new_participants] :: GroupCall -> Maybe Bool

-- | True, if the current user can enable or disable mute_new_participants
--   setting
[can_toggle_mute_new_participants] :: GroupCall -> Maybe Bool

-- | Duration of the ongoing group call recording, in seconds; 0 if none.
--   An updateGroupCall update is not triggered when value of this field
--   changes, but the same recording goes on
[record_duration] :: GroupCall -> Maybe Int

-- | True, if a video file is being recorded for the call
[is_video_recorded] :: GroupCall -> Maybe Bool

-- | Call duration, in seconds; for ended calls only
[duration] :: GroupCall -> Maybe Int
instance GHC.Show.Show TD.Data.GroupCall.GroupCall
instance GHC.Classes.Eq TD.Data.GroupCall.GroupCall
instance TD.Lib.Internal.ShortShow TD.Data.GroupCall.GroupCall
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GroupCall.GroupCall

module TD.Data.GameHighScore
data GameHighScore

-- | Contains one row of the game high score table
GameHighScore :: Maybe Int -> Maybe Int -> Maybe Int -> GameHighScore

-- | Position in the high score table
[position] :: GameHighScore -> Maybe Int

-- | User identifier
[user_id] :: GameHighScore -> Maybe Int

-- | User score
[score] :: GameHighScore -> Maybe Int
instance GHC.Show.Show TD.Data.GameHighScore.GameHighScore
instance GHC.Classes.Eq TD.Data.GameHighScore.GameHighScore
instance TD.Lib.Internal.ShortShow TD.Data.GameHighScore.GameHighScore
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GameHighScore.GameHighScore

module TD.Data.GameHighScores
data GameHighScores

-- | Contains a list of game high scores
GameHighScores :: Maybe [GameHighScore] -> GameHighScores

-- | A list of game high scores
[scores] :: GameHighScores -> Maybe [GameHighScore]
instance GHC.Show.Show TD.Data.GameHighScores.GameHighScores
instance GHC.Classes.Eq TD.Data.GameHighScores.GameHighScores
instance TD.Lib.Internal.ShortShow TD.Data.GameHighScores.GameHighScores
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.GameHighScores.GameHighScores

module TD.Data.FoundPositions
data FoundPositions

-- | Contains 0-based positions of matched objects
FoundPositions :: Maybe Int -> Maybe [Int] -> FoundPositions

-- | Total number of matched objects
[total_count] :: FoundPositions -> Maybe Int

-- | The positions of the matched objects
[positions] :: FoundPositions -> Maybe [Int]
instance GHC.Show.Show TD.Data.FoundPositions.FoundPositions
instance GHC.Classes.Eq TD.Data.FoundPositions.FoundPositions
instance TD.Lib.Internal.ShortShow TD.Data.FoundPositions.FoundPositions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundPositions.FoundPositions

module TD.Data.FoundPosition
data FoundPosition

-- | Contains 0-based match position
FoundPosition :: Maybe Int -> FoundPosition

-- | The position of the match
[position] :: FoundPosition -> Maybe Int
instance GHC.Show.Show TD.Data.FoundPosition.FoundPosition
instance GHC.Classes.Eq TD.Data.FoundPosition.FoundPosition
instance TD.Lib.Internal.ShortShow TD.Data.FoundPosition.FoundPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundPosition.FoundPosition

module TD.Data.ForwardSource
data ForwardSource

-- | Contains information about the last message from which a new message
--   was forwarded last time
ForwardSource :: Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe Text -> Maybe Int -> Maybe Bool -> ForwardSource

-- | Identifier of the chat to which the message that was forwarded
--   belonged; may be 0 if unknown
[chat_id] :: ForwardSource -> Maybe Int

-- | Identifier of the message; may be 0 if unknown
[message_id] :: ForwardSource -> Maybe Int

-- | Identifier of the sender of the message; may be null if unknown or the
--   new message was forwarded not to Saved Messages
[sender_id] :: ForwardSource -> Maybe MessageSender

-- | Name of the sender of the message if the sender is hidden by their
--   privacy settings
[sender_name] :: ForwardSource -> Maybe Text

-- | Point in time (Unix timestamp) when the message is sent; 0 if unknown
[date] :: ForwardSource -> Maybe Int

-- | True, if the message that was forwarded is outgoing; always false if
--   sender is unknown
[is_outgoing] :: ForwardSource -> Maybe Bool
instance GHC.Show.Show TD.Data.ForwardSource.ForwardSource
instance GHC.Classes.Eq TD.Data.ForwardSource.ForwardSource
instance TD.Lib.Internal.ShortShow TD.Data.ForwardSource.ForwardSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ForwardSource.ForwardSource

module TD.Data.MessageForwardInfo
data MessageForwardInfo

-- | Contains information about a forwarded message
MessageForwardInfo :: Maybe MessageOrigin -> Maybe Int -> Maybe ForwardSource -> Maybe Text -> MessageForwardInfo

-- | Origin of the forwarded message
[origin] :: MessageForwardInfo -> Maybe MessageOrigin

-- | Point in time (Unix timestamp) when the message was originally sent
[date] :: MessageForwardInfo -> Maybe Int

-- | For messages forwarded to the chat with the current user (Saved
--   Messages), to the Replies bot chat, or to the channel's discussion
--   group, information about the source message from which the message was
--   forwarded last time; may be null for other forwards or if unknown
[source] :: MessageForwardInfo -> Maybe ForwardSource

-- | The type of public service announcement for the forwarded message
[public_service_announcement_type] :: MessageForwardInfo -> Maybe Text
instance GHC.Show.Show TD.Data.MessageForwardInfo.MessageForwardInfo
instance GHC.Classes.Eq TD.Data.MessageForwardInfo.MessageForwardInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageForwardInfo.MessageForwardInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageForwardInfo.MessageForwardInfo

module TD.Data.ForumTopicIcon
data ForumTopicIcon

-- | Describes a forum topic icon
ForumTopicIcon :: Maybe Int -> Maybe Int -> ForumTopicIcon

-- | Color of the topic icon in RGB format
[color] :: ForumTopicIcon -> Maybe Int

-- | Unique identifier of the custom emoji shown on the topic icon; 0 if
--   none
[custom_emoji_id] :: ForumTopicIcon -> Maybe Int
defaultForumTopicIcon :: ForumTopicIcon
instance GHC.Show.Show TD.Data.ForumTopicIcon.ForumTopicIcon
instance GHC.Classes.Eq TD.Data.ForumTopicIcon.ForumTopicIcon
instance TD.Lib.Internal.ShortShow TD.Data.ForumTopicIcon.ForumTopicIcon
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ForumTopicIcon.ForumTopicIcon
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ForumTopicIcon.ForumTopicIcon

module TD.Data.ForumTopicInfo
data ForumTopicInfo

-- | Contains basic information about a forum topic
ForumTopicInfo :: Maybe Int -> Maybe Text -> Maybe ForumTopicIcon -> Maybe Int -> Maybe MessageSender -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ForumTopicInfo

-- | Message thread identifier of the topic
[message_thread_id] :: ForumTopicInfo -> Maybe Int

-- | Name of the topic
[name] :: ForumTopicInfo -> Maybe Text

-- | Icon of the topic
[icon] :: ForumTopicInfo -> Maybe ForumTopicIcon

-- | Point in time (Unix timestamp) when the topic was created
[creation_date] :: ForumTopicInfo -> Maybe Int

-- | Identifier of the creator of the topic
[creator_id] :: ForumTopicInfo -> Maybe MessageSender

-- | True, if the topic is the General topic list
[is_general] :: ForumTopicInfo -> Maybe Bool

-- | True, if the topic was created by the current user
[is_outgoing] :: ForumTopicInfo -> Maybe Bool

-- | True, if the topic is closed
[is_closed] :: ForumTopicInfo -> Maybe Bool

-- | True, if the topic is hidden above the topic list and closed; for
--   General topic only
[is_hidden] :: ForumTopicInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.ForumTopicInfo.ForumTopicInfo
instance GHC.Classes.Eq TD.Data.ForumTopicInfo.ForumTopicInfo
instance TD.Lib.Internal.ShortShow TD.Data.ForumTopicInfo.ForumTopicInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ForumTopicInfo.ForumTopicInfo

module TD.Data.FormattedText
data FormattedText

-- | A text with some entities
FormattedText :: Maybe Text -> Maybe [TextEntity] -> FormattedText

-- | The text
[text] :: FormattedText -> Maybe Text

-- | Entities contained in the text. Entities can be nested, but must not
--   mutually intersect with each other. Pre, Code and PreCode entities
--   can't contain other entities. BlockQuote entities can't contain other
--   BlockQuote entities. Bold, Italic, Underline, Strikethrough, and
--   Spoiler entities can contain and can be part of any other entities.
--   All other entities can't contain each other
[entities] :: FormattedText -> Maybe [TextEntity]
defaultFormattedText :: FormattedText
instance GHC.Show.Show TD.Data.FormattedText.FormattedText
instance GHC.Classes.Eq TD.Data.FormattedText.FormattedText
instance TD.Lib.Internal.ShortShow TD.Data.FormattedText.FormattedText
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FormattedText.FormattedText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FormattedText.FormattedText

module TD.Data.UserSupportInfo
data UserSupportInfo

-- | Contains custom information about the user
UserSupportInfo :: Maybe FormattedText -> Maybe Text -> Maybe Int -> UserSupportInfo

-- | Information message
[message] :: UserSupportInfo -> Maybe FormattedText

-- | Information author
[author] :: UserSupportInfo -> Maybe Text

-- | Information change date
[date] :: UserSupportInfo -> Maybe Int
instance GHC.Show.Show TD.Data.UserSupportInfo.UserSupportInfo
instance GHC.Classes.Eq TD.Data.UserSupportInfo.UserSupportInfo
instance TD.Lib.Internal.ShortShow TD.Data.UserSupportInfo.UserSupportInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserSupportInfo.UserSupportInfo

module TD.Data.TextQuote
data TextQuote

-- | Describes manually or automatically chosen quote from another message
TextQuote :: Maybe FormattedText -> Maybe Int -> Maybe Bool -> TextQuote

-- | Text of the quote. Only Bold, Italic, Underline, Strikethrough,
--   Spoiler, and CustomEmoji entities can be present in the text
[text] :: TextQuote -> Maybe FormattedText

-- | Approximate quote position in the original message in UTF-16 code
--   units as specified by the message sender
[position] :: TextQuote -> Maybe Int

-- | True, if the quote was manually chosen by the message sender
[is_manual] :: TextQuote -> Maybe Bool
instance GHC.Show.Show TD.Data.TextQuote.TextQuote
instance GHC.Classes.Eq TD.Data.TextQuote.TextQuote
instance TD.Lib.Internal.ShortShow TD.Data.TextQuote.TextQuote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TextQuote.TextQuote

module TD.Data.TermsOfService
data TermsOfService

-- | Contains Telegram terms of service
TermsOfService :: Maybe FormattedText -> Maybe Int -> Maybe Bool -> TermsOfService

-- | Text of the terms of service
[text] :: TermsOfService -> Maybe FormattedText

-- | The minimum age of a user to be able to accept the terms; 0 if age
--   isn't restricted
[min_user_age] :: TermsOfService -> Maybe Int

-- | True, if a blocking popup with terms of service must be shown to the
--   user
[show_popup] :: TermsOfService -> Maybe Bool
instance GHC.Show.Show TD.Data.TermsOfService.TermsOfService
instance GHC.Classes.Eq TD.Data.TermsOfService.TermsOfService
instance TD.Lib.Internal.ShortShow TD.Data.TermsOfService.TermsOfService
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TermsOfService.TermsOfService

module TD.Data.PollType

-- | Describes the type of poll
data PollType

-- | A regular poll
PollTypeRegular :: Maybe Bool -> PollType

-- | True, if multiple answer options can be chosen simultaneously
[allow_multiple_answers] :: PollType -> Maybe Bool

-- | A poll in quiz mode, which has exactly one correct answer option and
--   can be answered only once
PollTypeQuiz :: Maybe Int -> Maybe FormattedText -> PollType

-- | 0-based identifier of the correct answer option; -1 for a yet
--   unanswered poll
[correct_option_id] :: PollType -> Maybe Int

-- | Text that is shown when the user chooses an incorrect answer or taps
--   on the lamp icon; 0-200 characters with at most 2 line feeds; empty
--   for a yet unanswered poll
[explanation] :: PollType -> Maybe FormattedText
instance GHC.Show.Show TD.Data.PollType.PollType
instance GHC.Classes.Eq TD.Data.PollType.PollType
instance TD.Lib.Internal.ShortShow TD.Data.PollType.PollType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PollType.PollType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PollType.PollType

module TD.Data.PollOption
data PollOption

-- | Describes one answer option of a poll
PollOption :: Maybe FormattedText -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> PollOption

-- | Option text; 1-100 characters. Only custom emoji entities are allowed
[text] :: PollOption -> Maybe FormattedText

-- | Number of voters for this option, available only for closed or voted
--   polls
[voter_count] :: PollOption -> Maybe Int

-- | The percentage of votes for this option; 0-100
[vote_percentage] :: PollOption -> Maybe Int

-- | True, if the option was chosen by the user
[is_chosen] :: PollOption -> Maybe Bool

-- | True, if the option is being chosen by a pending setPollAnswer request
[is_being_chosen] :: PollOption -> Maybe Bool
instance GHC.Show.Show TD.Data.PollOption.PollOption
instance GHC.Classes.Eq TD.Data.PollOption.PollOption
instance TD.Lib.Internal.ShortShow TD.Data.PollOption.PollOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PollOption.PollOption

module TD.Data.Poll
data Poll

-- | Describes a poll
Poll :: Maybe Int -> Maybe FormattedText -> Maybe [PollOption] -> Maybe Int -> Maybe [MessageSender] -> Maybe Bool -> Maybe PollType -> Maybe Int -> Maybe Int -> Maybe Bool -> Poll

-- | Unique poll identifier
[_id] :: Poll -> Maybe Int

-- | Poll question; 1-300 characters. Only custom emoji entities are
--   allowed
[question] :: Poll -> Maybe FormattedText

-- | List of poll answer options
[options] :: Poll -> Maybe [PollOption]

-- | Total number of voters, participating in the poll
[total_voter_count] :: Poll -> Maybe Int

-- | Identifiers of recent voters, if the poll is non-anonymous
[recent_voter_ids] :: Poll -> Maybe [MessageSender]

-- | True, if the poll is anonymous
[is_anonymous] :: Poll -> Maybe Bool

-- | Type of the poll
[_type] :: Poll -> Maybe PollType

-- | Amount of time the poll will be active after creation, in seconds
[open_period] :: Poll -> Maybe Int

-- | Point in time (Unix timestamp) when the poll will automatically be
--   closed
[close_date] :: Poll -> Maybe Int

-- | True, if the poll is closed
[is_closed] :: Poll -> Maybe Bool
instance GHC.Show.Show TD.Data.Poll.Poll
instance GHC.Classes.Eq TD.Data.Poll.Poll
instance TD.Lib.Internal.ShortShow TD.Data.Poll.Poll
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Poll.Poll

module TD.Data.MessageCopyOptions
data MessageCopyOptions

-- | Options to be used when a message content is copied without reference
--   to the original sender. Service messages, messages with
--   messageInvoice, messagePremiumGiveaway, or
--   messagePremiumGiveawayWinners content can't be copied
MessageCopyOptions :: Maybe Bool -> Maybe Bool -> Maybe FormattedText -> MessageCopyOptions

-- | True, if content of the message needs to be copied without reference
--   to the original sender. Always true if the message is forwarded to a
--   secret chat or is local
[send_copy] :: MessageCopyOptions -> Maybe Bool

-- | True, if media caption of the message copy needs to be replaced.
--   Ignored if send_copy is false
[replace_caption] :: MessageCopyOptions -> Maybe Bool

-- | New message caption; pass null to copy message without caption.
--   Ignored if replace_caption is false
[new_caption] :: MessageCopyOptions -> Maybe FormattedText
defaultMessageCopyOptions :: MessageCopyOptions
instance GHC.Show.Show TD.Data.MessageCopyOptions.MessageCopyOptions
instance GHC.Classes.Eq TD.Data.MessageCopyOptions.MessageCopyOptions
instance TD.Lib.Internal.ShortShow TD.Data.MessageCopyOptions.MessageCopyOptions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCopyOptions.MessageCopyOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.MessageCopyOptions.MessageCopyOptions

module TD.Data.InputTextQuote
data InputTextQuote

-- | Describes manually chosen quote from another message
InputTextQuote :: Maybe FormattedText -> Maybe Int -> InputTextQuote

-- | Text of the quote; 0-getOption("message_reply_quote_length_max")
--   characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and
--   CustomEmoji entities are allowed to be kept and must be kept in the
--   quote
[text] :: InputTextQuote -> Maybe FormattedText

-- | Quote position in the original message in UTF-16 code units
[position] :: InputTextQuote -> Maybe Int
defaultInputTextQuote :: InputTextQuote
instance GHC.Show.Show TD.Data.InputTextQuote.InputTextQuote
instance GHC.Classes.Eq TD.Data.InputTextQuote.InputTextQuote
instance TD.Lib.Internal.ShortShow TD.Data.InputTextQuote.InputTextQuote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputTextQuote.InputTextQuote
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputTextQuote.InputTextQuote

module TD.Data.InputMessageReplyTo

-- | Contains information about the message or the story to be replied
data InputMessageReplyTo

-- | Describes a message to be replied
InputMessageReplyToMessage :: Maybe Int -> Maybe Int -> Maybe InputTextQuote -> InputMessageReplyTo

-- | The identifier of the chat to which the message to be replied belongs;
--   pass 0 if the message to be replied is in the same chat. Must always
--   be 0 for replies in secret chats. A message can be replied in another
--   chat or topic only if message.can_be_replied_in_another_chat
[chat_id] :: InputMessageReplyTo -> Maybe Int

-- | The identifier of the message to be replied in the same or the
--   specified chat
[message_id] :: InputMessageReplyTo -> Maybe Int

-- | Quote from the message to be replied; pass null if none. Must always
--   be null for replies in secret chats
[quote] :: InputMessageReplyTo -> Maybe InputTextQuote

-- | Describes a story to be replied
InputMessageReplyToStory :: Maybe Int -> Maybe Int -> InputMessageReplyTo

-- | The identifier of the sender of the story. Currently, stories can be
--   replied only in the sender's chat and channel stories can't be replied
[story_sender_chat_id] :: InputMessageReplyTo -> Maybe Int

-- | The identifier of the story
[story_id] :: InputMessageReplyTo -> Maybe Int
instance GHC.Show.Show TD.Data.InputMessageReplyTo.InputMessageReplyTo
instance GHC.Classes.Eq TD.Data.InputMessageReplyTo.InputMessageReplyTo
instance TD.Lib.Internal.ShortShow TD.Data.InputMessageReplyTo.InputMessageReplyTo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputMessageReplyTo.InputMessageReplyTo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputMessageReplyTo.InputMessageReplyTo

module TD.Data.InputBusinessChatLink
data InputBusinessChatLink

-- | Describes a business chat link to create or edit
InputBusinessChatLink :: Maybe FormattedText -> Maybe Text -> InputBusinessChatLink

-- | Message draft text that will be added to the input field
[text] :: InputBusinessChatLink -> Maybe FormattedText

-- | Link title
[title] :: InputBusinessChatLink -> Maybe Text
defaultInputBusinessChatLink :: InputBusinessChatLink
instance GHC.Show.Show TD.Data.InputBusinessChatLink.InputBusinessChatLink
instance GHC.Classes.Eq TD.Data.InputBusinessChatLink.InputBusinessChatLink
instance TD.Lib.Internal.ShortShow TD.Data.InputBusinessChatLink.InputBusinessChatLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputBusinessChatLink.InputBusinessChatLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputBusinessChatLink.InputBusinessChatLink

module TD.Data.FirebaseAuthenticationSettings

-- | Contains settings for Firebase Authentication in the official
--   applications
data FirebaseAuthenticationSettings

-- | Settings for Firebase Authentication in the official Android
--   application
FirebaseAuthenticationSettingsAndroid :: FirebaseAuthenticationSettings

-- | Settings for Firebase Authentication in the official iOS application
FirebaseAuthenticationSettingsIos :: Maybe Text -> Maybe Bool -> FirebaseAuthenticationSettings

-- | Device token from Apple Push Notification service
[device_token] :: FirebaseAuthenticationSettings -> Maybe Text

-- | True, if App Sandbox is enabled
[is_app_sandbox] :: FirebaseAuthenticationSettings -> Maybe Bool
instance GHC.Show.Show TD.Data.FirebaseAuthenticationSettings.FirebaseAuthenticationSettings
instance GHC.Classes.Eq TD.Data.FirebaseAuthenticationSettings.FirebaseAuthenticationSettings
instance TD.Lib.Internal.ShortShow TD.Data.FirebaseAuthenticationSettings.FirebaseAuthenticationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FirebaseAuthenticationSettings.FirebaseAuthenticationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FirebaseAuthenticationSettings.FirebaseAuthenticationSettings

module TD.Data.PhoneNumberAuthenticationSettings
data PhoneNumberAuthenticationSettings

-- | Contains settings for the authentication of the user's phone number
PhoneNumberAuthenticationSettings :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe FirebaseAuthenticationSettings -> Maybe [Text] -> PhoneNumberAuthenticationSettings

-- | Pass true if the authentication code may be sent via a flash call to
--   the specified phone number
[allow_flash_call] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if the authentication code may be sent via a missed call to
--   the specified phone number
[allow_missed_call] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if the authenticated phone number is used on the current
--   device
[is_current_phone_number] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | Pass true if there is a SIM card in the current device, but it is not
--   possible to check whether phone number matches
[has_unknown_phone_number] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | For official applications only. True, if the application can use
--   Android SMS Retriever API (requires Google Play Services &gt;= 10.2)
--   to automatically receive the authentication code from the SMS. See
--   <a>https://developers.google.com/identity/sms-retriever/</a> for more
--   details
[allow_sms_retriever_api] :: PhoneNumberAuthenticationSettings -> Maybe Bool

-- | For official Android and iOS applications only; pass null otherwise.
--   Settings for Firebase Authentication
[firebase_authentication_settings] :: PhoneNumberAuthenticationSettings -> Maybe FirebaseAuthenticationSettings

-- | List of up to 20 authentication tokens, recently received in
--   updateOption("authentication_token") in previously logged out sessions
[authentication_tokens] :: PhoneNumberAuthenticationSettings -> Maybe [Text]
defaultPhoneNumberAuthenticationSettings :: PhoneNumberAuthenticationSettings
instance GHC.Show.Show TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance GHC.Classes.Eq TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance TD.Lib.Internal.ShortShow TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PhoneNumberAuthenticationSettings.PhoneNumberAuthenticationSettings

module TD.Data.FileType

-- | Represents the type of file
data FileType

-- | The data is not a file
FileTypeNone :: FileType

-- | The file is an animation
FileTypeAnimation :: FileType

-- | The file is an audio file
FileTypeAudio :: FileType

-- | The file is a document
FileTypeDocument :: FileType

-- | The file is a notification sound
FileTypeNotificationSound :: FileType

-- | The file is a photo
FileTypePhoto :: FileType

-- | The file is a photo published as a story
FileTypePhotoStory :: FileType

-- | The file is a profile photo
FileTypeProfilePhoto :: FileType

-- | The file was sent to a secret chat (the file type is not known to the
--   server)
FileTypeSecret :: FileType

-- | The file is a thumbnail of a file from a secret chat
FileTypeSecretThumbnail :: FileType

-- | The file is a file from Secure storage used for storing Telegram
--   Passport files
FileTypeSecure :: FileType

-- | The file is a sticker
FileTypeSticker :: FileType

-- | The file is a thumbnail of another file
FileTypeThumbnail :: FileType

-- | The file type is not yet known
FileTypeUnknown :: FileType

-- | The file is a video
FileTypeVideo :: FileType

-- | The file is a video note
FileTypeVideoNote :: FileType

-- | The file is a video published as a story
FileTypeVideoStory :: FileType

-- | The file is a voice note
FileTypeVoiceNote :: FileType

-- | The file is a wallpaper or a background pattern
FileTypeWallpaper :: FileType
instance GHC.Show.Show TD.Data.FileType.FileType
instance GHC.Classes.Eq TD.Data.FileType.FileType
instance TD.Lib.Internal.ShortShow TD.Data.FileType.FileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileType.FileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.FileType.FileType

module TD.Data.StorageStatisticsByFileType
data StorageStatisticsByFileType

-- | Contains the storage usage statistics for a specific file type
StorageStatisticsByFileType :: Maybe FileType -> Maybe Int -> Maybe Int -> StorageStatisticsByFileType

-- | File type
[file_type] :: StorageStatisticsByFileType -> Maybe FileType

-- | Total size of the files, in bytes
[size] :: StorageStatisticsByFileType -> Maybe Int

-- | Total number of files
[count] :: StorageStatisticsByFileType -> Maybe Int
instance GHC.Show.Show TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance GHC.Classes.Eq TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance TD.Lib.Internal.ShortShow TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsByFileType.StorageStatisticsByFileType

module TD.Data.StorageStatisticsByChat
data StorageStatisticsByChat

-- | Contains the storage usage statistics for a specific chat
StorageStatisticsByChat :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [StorageStatisticsByFileType] -> StorageStatisticsByChat

-- | Chat identifier; 0 if none
[chat_id] :: StorageStatisticsByChat -> Maybe Int

-- | Total size of the files in the chat, in bytes
[size] :: StorageStatisticsByChat -> Maybe Int

-- | Total number of files in the chat
[count] :: StorageStatisticsByChat -> Maybe Int

-- | Statistics split by file types
[by_file_type] :: StorageStatisticsByChat -> Maybe [StorageStatisticsByFileType]
instance GHC.Show.Show TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance GHC.Classes.Eq TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance TD.Lib.Internal.ShortShow TD.Data.StorageStatisticsByChat.StorageStatisticsByChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatisticsByChat.StorageStatisticsByChat

module TD.Data.StorageStatistics
data StorageStatistics

-- | Contains the exact storage usage statistics split by chats and file
--   type
StorageStatistics :: Maybe Int -> Maybe Int -> Maybe [StorageStatisticsByChat] -> StorageStatistics

-- | Total size of files, in bytes
[size] :: StorageStatistics -> Maybe Int

-- | Total number of files
[count] :: StorageStatistics -> Maybe Int

-- | Statistics split by chats
[by_chat] :: StorageStatistics -> Maybe [StorageStatisticsByChat]
instance GHC.Show.Show TD.Data.StorageStatistics.StorageStatistics
instance GHC.Classes.Eq TD.Data.StorageStatistics.StorageStatistics
instance TD.Lib.Internal.ShortShow TD.Data.StorageStatistics.StorageStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StorageStatistics.StorageStatistics

module TD.Data.NetworkStatisticsEntry

-- | Contains statistics about network usage
data NetworkStatisticsEntry

-- | Contains information about the total amount of data that was used to
--   send and receive files
NetworkStatisticsEntryFile :: Maybe FileType -> Maybe NetworkType -> Maybe Int -> Maybe Int -> NetworkStatisticsEntry

-- | Type of the file the data is part of; pass null if the data isn't
--   related to files
[file_type] :: NetworkStatisticsEntry -> Maybe FileType

-- | Type of the network the data was sent through. Call setNetworkType to
--   maintain the actual network type
[network_type] :: NetworkStatisticsEntry -> Maybe NetworkType

-- | Total number of bytes sent
[sent_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Total number of bytes received
[received_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Contains information about the total amount of data that was used for
--   calls
NetworkStatisticsEntryCall :: Maybe NetworkType -> Maybe Int -> Maybe Int -> Maybe Double -> NetworkStatisticsEntry

-- | Type of the network the data was sent through. Call setNetworkType to
--   maintain the actual network type
[network_type] :: NetworkStatisticsEntry -> Maybe NetworkType

-- | Total number of bytes sent
[sent_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Total number of bytes received
[received_bytes] :: NetworkStatisticsEntry -> Maybe Int

-- | Total call duration, in seconds
[duration] :: NetworkStatisticsEntry -> Maybe Double
instance GHC.Show.Show TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance GHC.Classes.Eq TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance TD.Lib.Internal.ShortShow TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.NetworkStatisticsEntry.NetworkStatisticsEntry

module TD.Data.NetworkStatistics
data NetworkStatistics

-- | A full list of available network statistic entries
NetworkStatistics :: Maybe Int -> Maybe [NetworkStatisticsEntry] -> NetworkStatistics

-- | Point in time (Unix timestamp) from which the statistics are collected
[since_date] :: NetworkStatistics -> Maybe Int

-- | Network statistics entries
[entries] :: NetworkStatistics -> Maybe [NetworkStatisticsEntry]
instance GHC.Show.Show TD.Data.NetworkStatistics.NetworkStatistics
instance GHC.Classes.Eq TD.Data.NetworkStatistics.NetworkStatistics
instance TD.Lib.Internal.ShortShow TD.Data.NetworkStatistics.NetworkStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NetworkStatistics.NetworkStatistics

module TD.Data.FilePart
data FilePart

-- | Contains a part of a file
FilePart :: Maybe ByteString -> FilePart

-- | File bytes
[_data] :: FilePart -> Maybe ByteString
instance GHC.Show.Show TD.Data.FilePart.FilePart
instance GHC.Classes.Eq TD.Data.FilePart.FilePart
instance TD.Lib.Internal.ShortShow TD.Data.FilePart.FilePart
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FilePart.FilePart

module TD.Data.FileDownloadedPrefixSize
data FileDownloadedPrefixSize

-- | Contains size of downloaded prefix of a file
FileDownloadedPrefixSize :: Maybe Int -> FileDownloadedPrefixSize

-- | The prefix size, in bytes
[size] :: FileDownloadedPrefixSize -> Maybe Int
instance GHC.Show.Show TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance GHC.Classes.Eq TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance TD.Lib.Internal.ShortShow TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileDownloadedPrefixSize.FileDownloadedPrefixSize

module TD.Data.File
data File

-- | Represents a file
File :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe LocalFile -> Maybe RemoteFile -> File

-- | Unique file identifier
[_id] :: File -> Maybe Int

-- | File size, in bytes; 0 if unknown
[size] :: File -> Maybe Int

-- | Approximate file size in bytes in case the exact file size is unknown.
--   Can be used to show download/upload progress
[expected_size] :: File -> Maybe Int

-- | Information about the local copy of the file
[local] :: File -> Maybe LocalFile

-- | Information about the remote copy of the file
[remote] :: File -> Maybe RemoteFile
instance GHC.Show.Show TD.Data.File.File
instance GHC.Classes.Eq TD.Data.File.File
instance TD.Lib.Internal.ShortShow TD.Data.File.File
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.File.File

module TD.Data.Thumbnail
data Thumbnail

-- | Represents a thumbnail
Thumbnail :: Maybe ThumbnailFormat -> Maybe Int -> Maybe Int -> Maybe File -> Thumbnail

-- | Thumbnail format
[format] :: Thumbnail -> Maybe ThumbnailFormat

-- | Thumbnail width
[width] :: Thumbnail -> Maybe Int

-- | Thumbnail height
[height] :: Thumbnail -> Maybe Int

-- | The thumbnail
[file] :: Thumbnail -> Maybe File
instance GHC.Show.Show TD.Data.Thumbnail.Thumbnail
instance GHC.Classes.Eq TD.Data.Thumbnail.Thumbnail
instance TD.Lib.Internal.ShortShow TD.Data.Thumbnail.Thumbnail
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Thumbnail.Thumbnail

module TD.Data.Video
data Video

-- | Describes a video file
Video :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe File -> Video

-- | Duration of the video, in seconds; as defined by the sender
[duration] :: Video -> Maybe Int

-- | Video width; as defined by the sender
[width] :: Video -> Maybe Int

-- | Video height; as defined by the sender
[height] :: Video -> Maybe Int

-- | Original name of the file; as defined by the sender
[file_name] :: Video -> Maybe Text

-- | MIME type of the file; as defined by the sender
[mime_type] :: Video -> Maybe Text

-- | True, if stickers were added to the video. The list of corresponding
--   sticker sets can be received using getAttachedStickerSets
[has_stickers] :: Video -> Maybe Bool

-- | True, if the video is supposed to be streamed
[supports_streaming] :: Video -> Maybe Bool

-- | Video minithumbnail; may be null
[minithumbnail] :: Video -> Maybe Minithumbnail

-- | Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may
--   be null
[thumbnail] :: Video -> Maybe Thumbnail

-- | File containing the video
[video] :: Video -> Maybe File
instance GHC.Show.Show TD.Data.Video.Video
instance GHC.Classes.Eq TD.Data.Video.Video
instance TD.Lib.Internal.ShortShow TD.Data.Video.Video
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Video.Video

module TD.Data.StoryVideo
data StoryVideo

-- | Describes a video file sent in a story
StoryVideo :: Maybe Double -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe Int -> Maybe File -> StoryVideo

-- | Duration of the video, in seconds
[duration] :: StoryVideo -> Maybe Double

-- | Video width
[width] :: StoryVideo -> Maybe Int

-- | Video height
[height] :: StoryVideo -> Maybe Int

-- | True, if stickers were added to the video. The list of corresponding
--   sticker sets can be received using getAttachedStickerSets
[has_stickers] :: StoryVideo -> Maybe Bool

-- | True, if the video has no sound
[is_animation] :: StoryVideo -> Maybe Bool

-- | Video minithumbnail; may be null
[minithumbnail] :: StoryVideo -> Maybe Minithumbnail

-- | Video thumbnail in JPEG or MPEG4 format; may be null
[thumbnail] :: StoryVideo -> Maybe Thumbnail

-- | Size of file prefix, which is supposed to be preloaded, in bytes
[preload_prefix_size] :: StoryVideo -> Maybe Int

-- | File containing the video
[video] :: StoryVideo -> Maybe File
instance GHC.Show.Show TD.Data.StoryVideo.StoryVideo
instance GHC.Classes.Eq TD.Data.StoryVideo.StoryVideo
instance TD.Lib.Internal.ShortShow TD.Data.StoryVideo.StoryVideo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryVideo.StoryVideo

module TD.Data.StickerFullType

-- | Contains full information about sticker type
data StickerFullType

-- | The sticker is a regular sticker
StickerFullTypeRegular :: Maybe File -> StickerFullType

-- | Premium animation of the sticker; may be null. If present, only
--   Telegram Premium users can use the sticker
[premium_animation] :: StickerFullType -> Maybe File

-- | The sticker is a mask in WEBP format to be placed on photos or videos
StickerFullTypeMask :: Maybe MaskPosition -> StickerFullType

-- | Position where the mask is placed; may be null
[mask_position] :: StickerFullType -> Maybe MaskPosition

-- | The sticker is a custom emoji to be used inside message text and
--   caption. Currently, only Telegram Premium users can use custom emoji
StickerFullTypeCustomEmoji :: Maybe Int -> Maybe Bool -> StickerFullType

-- | Identifier of the custom emoji
[custom_emoji_id] :: StickerFullType -> Maybe Int

-- | True, if the sticker must be repainted to a text color in messages,
--   the color of the Telegram Premium badge in emoji status, white color
--   on chat photos, or another appropriate color in other places
[needs_repainting] :: StickerFullType -> Maybe Bool
instance GHC.Show.Show TD.Data.StickerFullType.StickerFullType
instance GHC.Classes.Eq TD.Data.StickerFullType.StickerFullType
instance TD.Lib.Internal.ShortShow TD.Data.StickerFullType.StickerFullType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerFullType.StickerFullType

module TD.Data.ProfilePhoto
data ProfilePhoto

-- | Describes a user profile photo
ProfilePhoto :: Maybe Int -> Maybe File -> Maybe File -> Maybe Minithumbnail -> Maybe Bool -> Maybe Bool -> ProfilePhoto

-- | Photo identifier; 0 for an empty photo. Can be used to find a photo in
--   a list of user profile photos
[_id] :: ProfilePhoto -> Maybe Int

-- | A small (160x160) user profile photo. The file can be downloaded only
--   before the photo is changed
[small] :: ProfilePhoto -> Maybe File

-- | A big (640x640) user profile photo. The file can be downloaded only
--   before the photo is changed
[big] :: ProfilePhoto -> Maybe File

-- | User profile photo minithumbnail; may be null
[minithumbnail] :: ProfilePhoto -> Maybe Minithumbnail

-- | True, if the photo has animated variant
[has_animation] :: ProfilePhoto -> Maybe Bool

-- | True, if the photo is visible only for the current user
[is_personal] :: ProfilePhoto -> Maybe Bool
instance GHC.Show.Show TD.Data.ProfilePhoto.ProfilePhoto
instance GHC.Classes.Eq TD.Data.ProfilePhoto.ProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Data.ProfilePhoto.ProfilePhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ProfilePhoto.ProfilePhoto

module TD.Data.PhotoSize
data PhotoSize

-- | Describes an image in JPEG format
PhotoSize :: Maybe Text -> Maybe File -> Maybe Int -> Maybe Int -> Maybe [Int] -> PhotoSize

-- | Image type (see
--   <a>https://core.telegram.org/constructor/photoSize)</a>
[_type] :: PhotoSize -> Maybe Text

-- | Information about the image file
[photo] :: PhotoSize -> Maybe File

-- | Image width
[width] :: PhotoSize -> Maybe Int

-- | Image height
[height] :: PhotoSize -> Maybe Int

-- | Sizes of progressive JPEG file prefixes, which can be used to
--   preliminarily show the image; in bytes
[progressive_sizes] :: PhotoSize -> Maybe [Int]
instance GHC.Show.Show TD.Data.PhotoSize.PhotoSize
instance GHC.Classes.Eq TD.Data.PhotoSize.PhotoSize
instance TD.Lib.Internal.ShortShow TD.Data.PhotoSize.PhotoSize
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhotoSize.PhotoSize

module TD.Data.Photo
data Photo

-- | Describes a photo
Photo :: Maybe Bool -> Maybe Minithumbnail -> Maybe [PhotoSize] -> Photo

-- | True, if stickers were added to the photo. The list of corresponding
--   sticker sets can be received using getAttachedStickerSets
[has_stickers] :: Photo -> Maybe Bool

-- | Photo minithumbnail; may be null
[minithumbnail] :: Photo -> Maybe Minithumbnail

-- | Available variants of the photo, in different sizes
[sizes] :: Photo -> Maybe [PhotoSize]
instance GHC.Show.Show TD.Data.Photo.Photo
instance GHC.Classes.Eq TD.Data.Photo.Photo
instance TD.Lib.Internal.ShortShow TD.Data.Photo.Photo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Photo.Photo

module TD.Data.StoryContent

-- | Contains the content of a story
data StoryContent

-- | A photo story
StoryContentPhoto :: Maybe Photo -> StoryContent

-- | The photo
[photo] :: StoryContent -> Maybe Photo

-- | A video story
StoryContentVideo :: Maybe StoryVideo -> Maybe StoryVideo -> StoryContent

-- | The video in MPEG4 format
[video] :: StoryContent -> Maybe StoryVideo

-- | Alternative version of the video in MPEG4 format, encoded by x264
--   codec; may be null
[alternative_video] :: StoryContent -> Maybe StoryVideo

-- | A story content that is not supported in the current TDLib version
StoryContentUnsupported :: StoryContent
instance GHC.Show.Show TD.Data.StoryContent.StoryContent
instance GHC.Classes.Eq TD.Data.StoryContent.StoryContent
instance TD.Lib.Internal.ShortShow TD.Data.StoryContent.StoryContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryContent.StoryContent

module TD.Data.Story
data Story

-- | Represents a story
Story :: Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe StoryRepostInfo -> Maybe StoryInteractionInfo -> Maybe ReactionType -> Maybe StoryPrivacySettings -> Maybe StoryContent -> Maybe [StoryArea] -> Maybe FormattedText -> Story

-- | Unique story identifier among stories of the given sender
[_id] :: Story -> Maybe Int

-- | Identifier of the chat that posted the story
[sender_chat_id] :: Story -> Maybe Int

-- | Identifier of the sender of the story; may be null if the story is
--   posted on behalf of the sender_chat_id
[sender_id] :: Story -> Maybe MessageSender

-- | Point in time (Unix timestamp) when the story was published
[date] :: Story -> Maybe Int

-- | True, if the story is being sent by the current user
[is_being_sent] :: Story -> Maybe Bool

-- | True, if the story is being edited by the current user
[is_being_edited] :: Story -> Maybe Bool

-- | True, if the story was edited
[is_edited] :: Story -> Maybe Bool

-- | True, if the story is saved in the sender's profile and will be
--   available there after expiration
[is_posted_to_chat_page] :: Story -> Maybe Bool

-- | True, if the story is visible only for the current user
[is_visible_only_for_self] :: Story -> Maybe Bool

-- | True, if the story can be deleted
[can_be_deleted] :: Story -> Maybe Bool

-- | True, if the story can be edited
[can_be_edited] :: Story -> Maybe Bool

-- | True, if the story can be forwarded as a message. Otherwise,
--   screenshots and saving of the story content must be also forbidden
[can_be_forwarded] :: Story -> Maybe Bool

-- | True, if the story can be replied in the chat with the story sender
[can_be_replied] :: Story -> Maybe Bool

-- | True, if the story's is_posted_to_chat_page value can be changed
[can_toggle_is_posted_to_chat_page] :: Story -> Maybe Bool

-- | True, if the story statistics are available through getStoryStatistics
[can_get_statistics] :: Story -> Maybe Bool

-- | True, if interactions with the story can be received through
--   getStoryInteractions
[can_get_interactions] :: Story -> Maybe Bool

-- | True, if users viewed the story can't be received, because the story
--   has expired more than getOption("story_viewers_expiration_delay")
--   seconds ago
[has_expired_viewers] :: Story -> Maybe Bool

-- | Information about the original story; may be null if the story wasn't
--   reposted
[repost_info] :: Story -> Maybe StoryRepostInfo

-- | Information about interactions with the story; may be null if the
--   story isn't owned or there were no interactions
[interaction_info] :: Story -> Maybe StoryInteractionInfo

-- | Type of the chosen reaction; may be null if none
[chosen_reaction_type] :: Story -> Maybe ReactionType

-- | Privacy rules affecting story visibility; may be approximate for
--   non-owned stories
[privacy_settings] :: Story -> Maybe StoryPrivacySettings

-- | Content of the story
[content] :: Story -> Maybe StoryContent

-- | Clickable areas to be shown on the story content
[areas] :: Story -> Maybe [StoryArea]

-- | Caption of the story
[caption] :: Story -> Maybe FormattedText
instance GHC.Show.Show TD.Data.Story.Story
instance GHC.Classes.Eq TD.Data.Story.Story
instance TD.Lib.Internal.ShortShow TD.Data.Story.Story
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Story.Story

module TD.Data.Stories
data Stories

-- | Represents a list of stories
Stories :: Maybe Int -> Maybe [Story] -> Maybe [Int] -> Stories

-- | Approximate total number of stories found
[total_count] :: Stories -> Maybe Int

-- | The list of stories
[stories] :: Stories -> Maybe [Story]

-- | Identifiers of the pinned stories; returned only in
--   getChatPostedToChatPageStories with from_story_id == 0
[pinned_story_ids] :: Stories -> Maybe [Int]
instance GHC.Show.Show TD.Data.Stories.Stories
instance GHC.Classes.Eq TD.Data.Stories.Stories
instance TD.Lib.Internal.ShortShow TD.Data.Stories.Stories
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Stories.Stories

module TD.Data.SharedUser
data SharedUser

-- | Contains information about a user shared with a bot
SharedUser :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Photo -> SharedUser

-- | User identifier
[user_id] :: SharedUser -> Maybe Int

-- | First name of the user; for bots only
[first_name] :: SharedUser -> Maybe Text

-- | Last name of the user; for bots only
[last_name] :: SharedUser -> Maybe Text

-- | Username of the user; for bots only
[username] :: SharedUser -> Maybe Text

-- | Profile photo of the user; for bots only; may be null
[photo] :: SharedUser -> Maybe Photo
instance GHC.Show.Show TD.Data.SharedUser.SharedUser
instance GHC.Classes.Eq TD.Data.SharedUser.SharedUser
instance TD.Lib.Internal.ShortShow TD.Data.SharedUser.SharedUser
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SharedUser.SharedUser

module TD.Data.SharedChat
data SharedChat

-- | Contains information about a chat shared with a bot
SharedChat :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Photo -> SharedChat

-- | Chat identifier
[chat_id] :: SharedChat -> Maybe Int

-- | Title of the chat; for bots only
[title] :: SharedChat -> Maybe Text

-- | Username of the chat; for bots only
[username] :: SharedChat -> Maybe Text

-- | Photo of the chat; for bots only; may be null
[photo] :: SharedChat -> Maybe Photo
instance GHC.Show.Show TD.Data.SharedChat.SharedChat
instance GHC.Classes.Eq TD.Data.SharedChat.SharedChat
instance TD.Lib.Internal.ShortShow TD.Data.SharedChat.SharedChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SharedChat.SharedChat

module TD.Data.PageBlockRelatedArticle
data PageBlockRelatedArticle

-- | Contains information about a related article
PageBlockRelatedArticle :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Photo -> Maybe Text -> Maybe Int -> PageBlockRelatedArticle

-- | Related article URL
[url] :: PageBlockRelatedArticle -> Maybe Text

-- | Article title; may be empty
[title] :: PageBlockRelatedArticle -> Maybe Text
[description] :: PageBlockRelatedArticle -> Maybe Text

-- | Article photo; may be null
[photo] :: PageBlockRelatedArticle -> Maybe Photo

-- | Article author; may be empty
[author] :: PageBlockRelatedArticle -> Maybe Text

-- | Point in time (Unix timestamp) when the article was published; 0 if
--   unknown
[publish_date] :: PageBlockRelatedArticle -> Maybe Int
instance GHC.Show.Show TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance GHC.Classes.Eq TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockRelatedArticle.PageBlockRelatedArticle

module TD.Data.MessageSponsor
data MessageSponsor

-- | Information about the sponsor of a message
MessageSponsor :: Maybe Text -> Maybe Photo -> Maybe Text -> MessageSponsor

-- | URL of the sponsor to be opened when the message is clicked
[url] :: MessageSponsor -> Maybe Text

-- | Photo of the sponsor; may be null if must not be shown
[photo] :: MessageSponsor -> Maybe Photo

-- | Additional optional information about the sponsor to be shown along
--   with the message
[info] :: MessageSponsor -> Maybe Text
instance GHC.Show.Show TD.Data.MessageSponsor.MessageSponsor
instance GHC.Classes.Eq TD.Data.MessageSponsor.MessageSponsor
instance TD.Lib.Internal.ShortShow TD.Data.MessageSponsor.MessageSponsor
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSponsor.MessageSponsor

module TD.Data.MessageExtendedMedia

-- | Describes a media, which is attached to an invoice
data MessageExtendedMedia

-- | The media is hidden until the invoice is paid
MessageExtendedMediaPreview :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Minithumbnail -> Maybe FormattedText -> MessageExtendedMedia

-- | Media width; 0 if unknown
[width] :: MessageExtendedMedia -> Maybe Int

-- | Media height; 0 if unknown
[height] :: MessageExtendedMedia -> Maybe Int

-- | Media duration, in seconds; 0 if unknown
[duration] :: MessageExtendedMedia -> Maybe Int

-- | Media minithumbnail; may be null
[minithumbnail] :: MessageExtendedMedia -> Maybe Minithumbnail

-- | Media caption
[caption] :: MessageExtendedMedia -> Maybe FormattedText

-- | The media is a photo
MessageExtendedMediaPhoto :: Maybe Photo -> Maybe FormattedText -> MessageExtendedMedia

-- | The photo
[photo] :: MessageExtendedMedia -> Maybe Photo

-- | Media caption
[caption] :: MessageExtendedMedia -> Maybe FormattedText

-- | The media is a video
MessageExtendedMediaVideo :: Maybe Video -> Maybe FormattedText -> MessageExtendedMedia

-- | The video
[video] :: MessageExtendedMedia -> Maybe Video

-- | Media caption
[caption] :: MessageExtendedMedia -> Maybe FormattedText

-- | The media is unsupported
MessageExtendedMediaUnsupported :: Maybe FormattedText -> MessageExtendedMedia

-- | Media caption
[caption] :: MessageExtendedMedia -> Maybe FormattedText
instance GHC.Show.Show TD.Data.MessageExtendedMedia.MessageExtendedMedia
instance GHC.Classes.Eq TD.Data.MessageExtendedMedia.MessageExtendedMedia
instance TD.Lib.Internal.ShortShow TD.Data.MessageExtendedMedia.MessageExtendedMedia
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageExtendedMedia.MessageExtendedMedia

module TD.Data.NotificationSound
data NotificationSound

-- | Describes a notification sound in MP3 format
NotificationSound :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe File -> NotificationSound

-- | Unique identifier of the notification sound
[_id] :: NotificationSound -> Maybe Int

-- | Duration of the sound, in seconds
[duration] :: NotificationSound -> Maybe Int

-- | Point in time (Unix timestamp) when the sound was created
[date] :: NotificationSound -> Maybe Int

-- | Title of the notification sound
[title] :: NotificationSound -> Maybe Text

-- | Arbitrary data, defined while the sound was uploaded
[_data] :: NotificationSound -> Maybe Text

-- | File containing the sound
[sound] :: NotificationSound -> Maybe File
instance GHC.Show.Show TD.Data.NotificationSound.NotificationSound
instance GHC.Classes.Eq TD.Data.NotificationSound.NotificationSound
instance TD.Lib.Internal.ShortShow TD.Data.NotificationSound.NotificationSound
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSound.NotificationSound

module TD.Data.NotificationSounds
data NotificationSounds

-- | Contains a list of notification sounds
NotificationSounds :: Maybe [NotificationSound] -> NotificationSounds

-- | A list of notification sounds
[notification_sounds] :: NotificationSounds -> Maybe [NotificationSound]
instance GHC.Show.Show TD.Data.NotificationSounds.NotificationSounds
instance GHC.Classes.Eq TD.Data.NotificationSounds.NotificationSounds
instance TD.Lib.Internal.ShortShow TD.Data.NotificationSounds.NotificationSounds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationSounds.NotificationSounds

module TD.Data.FailedToAddMember
data FailedToAddMember

-- | Contains information about a user that has failed to be added to a
--   chat
FailedToAddMember :: Maybe Int -> Maybe Bool -> Maybe Bool -> FailedToAddMember

-- | User identifier
[user_id] :: FailedToAddMember -> Maybe Int

-- | True, if subscription to Telegram Premium would have allowed to add
--   the user to the chat
[premium_would_allow_invite] :: FailedToAddMember -> Maybe Bool

-- | True, if subscription to Telegram Premium is required to send the user
--   chat invite link
[premium_required_to_send_messages] :: FailedToAddMember -> Maybe Bool
instance GHC.Show.Show TD.Data.FailedToAddMember.FailedToAddMember
instance GHC.Classes.Eq TD.Data.FailedToAddMember.FailedToAddMember
instance TD.Lib.Internal.ShortShow TD.Data.FailedToAddMember.FailedToAddMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FailedToAddMember.FailedToAddMember

module TD.Data.FailedToAddMembers
data FailedToAddMembers

-- | Represents a list of users that has failed to be added to a chat
FailedToAddMembers :: Maybe [FailedToAddMember] -> FailedToAddMembers

-- | Information about users that weren't added to the chat
[failed_to_add_members] :: FailedToAddMembers -> Maybe [FailedToAddMember]
instance GHC.Show.Show TD.Data.FailedToAddMembers.FailedToAddMembers
instance GHC.Classes.Eq TD.Data.FailedToAddMembers.FailedToAddMembers
instance TD.Lib.Internal.ShortShow TD.Data.FailedToAddMembers.FailedToAddMembers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FailedToAddMembers.FailedToAddMembers

module TD.Data.Error
data Error

-- | An object of this type can be returned on every function call, in case
--   of an error
Error :: Maybe Int -> Maybe Text -> Error

-- | Error code; subject to future changes. If the error code is 406, the
--   error message must not be processed in any way and must not be
--   displayed to the user
[code] :: Error -> Maybe Int

-- | Error message; subject to future changes
[message] :: Error -> Maybe Text
defaultError :: Error
instance GHC.Show.Show TD.Data.Error.Error
instance GHC.Classes.Eq TD.Data.Error.Error
instance TD.Lib.Internal.ShortShow TD.Data.Error.Error
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Error.Error
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Error.Error

module TD.Data.SpeechRecognitionResult

-- | Describes result of speech recognition in a voice note
data SpeechRecognitionResult

-- | The speech recognition is ongoing
SpeechRecognitionResultPending :: Maybe Text -> SpeechRecognitionResult

-- | Partially recognized text
[partial_text] :: SpeechRecognitionResult -> Maybe Text

-- | The speech recognition successfully finished
SpeechRecognitionResultText :: Maybe Text -> SpeechRecognitionResult

-- | Recognized text
[text] :: SpeechRecognitionResult -> Maybe Text

-- | The speech recognition failed
SpeechRecognitionResultError :: Maybe Error -> SpeechRecognitionResult

-- | Recognition error. An error with a message <a>MSG_VOICE_TOO_LONG</a>
--   is returned when media duration is too big to be recognized
[_error] :: SpeechRecognitionResult -> Maybe Error
instance GHC.Show.Show TD.Data.SpeechRecognitionResult.SpeechRecognitionResult
instance GHC.Classes.Eq TD.Data.SpeechRecognitionResult.SpeechRecognitionResult
instance TD.Lib.Internal.ShortShow TD.Data.SpeechRecognitionResult.SpeechRecognitionResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SpeechRecognitionResult.SpeechRecognitionResult

module TD.Data.VoiceNote
data VoiceNote

-- | Describes a voice note
VoiceNote :: Maybe Int -> Maybe ByteString -> Maybe Text -> Maybe SpeechRecognitionResult -> Maybe File -> VoiceNote

-- | Duration of the voice note, in seconds; as defined by the sender
[duration] :: VoiceNote -> Maybe Int

-- | A waveform representation of the voice note in 5-bit format
[waveform] :: VoiceNote -> Maybe ByteString

-- | MIME type of the file; as defined by the sender. Usually, one of
--   "audio<i>ogg" for Opus in an OGG container, "audio</i>mpeg" for an MP3
--   audio, or "audio/mp4" for an M4A audio
[mime_type] :: VoiceNote -> Maybe Text

-- | Result of speech recognition in the voice note; may be null
[speech_recognition_result] :: VoiceNote -> Maybe SpeechRecognitionResult

-- | File containing the voice note
[voice] :: VoiceNote -> Maybe File
instance GHC.Show.Show TD.Data.VoiceNote.VoiceNote
instance GHC.Classes.Eq TD.Data.VoiceNote.VoiceNote
instance TD.Lib.Internal.ShortShow TD.Data.VoiceNote.VoiceNote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VoiceNote.VoiceNote

module TD.Data.VideoNote
data VideoNote

-- | Describes a video note. The video must be equal in width and height,
--   cropped to a circle, and stored in MPEG4 format
VideoNote :: Maybe Int -> Maybe ByteString -> Maybe Int -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe SpeechRecognitionResult -> Maybe File -> VideoNote

-- | Duration of the video, in seconds; as defined by the sender
[duration] :: VideoNote -> Maybe Int

-- | A waveform representation of the video note's audio in 5-bit format;
--   may be empty if unknown
[waveform] :: VideoNote -> Maybe ByteString

-- | Video width and height; as defined by the sender
[_length] :: VideoNote -> Maybe Int

-- | Video minithumbnail; may be null
[minithumbnail] :: VideoNote -> Maybe Minithumbnail

-- | Video thumbnail in JPEG format; as defined by the sender; may be null
[thumbnail] :: VideoNote -> Maybe Thumbnail

-- | Result of speech recognition in the video note; may be null
[speech_recognition_result] :: VideoNote -> Maybe SpeechRecognitionResult

-- | File containing the video
[video] :: VideoNote -> Maybe File
instance GHC.Show.Show TD.Data.VideoNote.VideoNote
instance GHC.Classes.Eq TD.Data.VideoNote.VideoNote
instance TD.Lib.Internal.ShortShow TD.Data.VideoNote.VideoNote
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.VideoNote.VideoNote

module TD.Data.MessageSendingState

-- | Contains information about the sending state of the message
data MessageSendingState

-- | The message is being sent now, but has not yet been delivered to the
--   server
MessageSendingStatePending :: Maybe Int -> MessageSendingState

-- | Non-persistent message sending identifier, specified by the
--   application
[sending_id] :: MessageSendingState -> Maybe Int

-- | The message failed to be sent
MessageSendingStateFailed :: Maybe Error -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Double -> MessageSendingState

-- | The cause of the message sending failure
[_error] :: MessageSendingState -> Maybe Error

-- | True, if the message can be re-sent
[can_retry] :: MessageSendingState -> Maybe Bool

-- | True, if the message can be re-sent only on behalf of a different
--   sender
[need_another_sender] :: MessageSendingState -> Maybe Bool

-- | True, if the message can be re-sent only if another quote is chosen in
--   the message that is replied by the given message
[need_another_reply_quote] :: MessageSendingState -> Maybe Bool

-- | True, if the message can be re-sent only if the message to be replied
--   is removed. This will be done automatically by resendMessages
[need_drop_reply] :: MessageSendingState -> Maybe Bool

-- | Time left before the message can be re-sent, in seconds. No update is
--   sent when this field changes
[retry_after] :: MessageSendingState -> Maybe Double
instance GHC.Show.Show TD.Data.MessageSendingState.MessageSendingState
instance GHC.Classes.Eq TD.Data.MessageSendingState.MessageSendingState
instance TD.Lib.Internal.ShortShow TD.Data.MessageSendingState.MessageSendingState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageSendingState.MessageSendingState

module TD.Data.EncryptedCredentials
data EncryptedCredentials

-- | Contains encrypted Telegram Passport data credentials
EncryptedCredentials :: Maybe ByteString -> Maybe ByteString -> Maybe ByteString -> EncryptedCredentials

-- | The encrypted credentials
[_data] :: EncryptedCredentials -> Maybe ByteString

-- | The decrypted data hash
[hash] :: EncryptedCredentials -> Maybe ByteString

-- | Secret for data decryption, encrypted with the service's public key
[secret] :: EncryptedCredentials -> Maybe ByteString
instance GHC.Show.Show TD.Data.EncryptedCredentials.EncryptedCredentials
instance GHC.Classes.Eq TD.Data.EncryptedCredentials.EncryptedCredentials
instance TD.Lib.Internal.ShortShow TD.Data.EncryptedCredentials.EncryptedCredentials
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EncryptedCredentials.EncryptedCredentials

module TD.Data.Emojis
data Emojis

-- | Represents a list of emoji
Emojis :: Maybe [Text] -> Emojis

-- | List of emojis
[emojis] :: Emojis -> Maybe [Text]
instance GHC.Show.Show TD.Data.Emojis.Emojis
instance GHC.Classes.Eq TD.Data.Emojis.Emojis
instance TD.Lib.Internal.ShortShow TD.Data.Emojis.Emojis
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Emojis.Emojis

module TD.Data.EmojiStatuses
data EmojiStatuses

-- | Contains a list of custom emoji identifiers for emoji statuses
EmojiStatuses :: Maybe [Int] -> EmojiStatuses

-- | The list of custom emoji identifiers
[custom_emoji_ids] :: EmojiStatuses -> Maybe [Int]
instance GHC.Show.Show TD.Data.EmojiStatuses.EmojiStatuses
instance GHC.Classes.Eq TD.Data.EmojiStatuses.EmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Data.EmojiStatuses.EmojiStatuses
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiStatuses.EmojiStatuses

module TD.Data.EmojiStatus
data EmojiStatus

-- | Describes a custom emoji to be shown instead of the Telegram Premium
--   badge
EmojiStatus :: Maybe Int -> Maybe Int -> EmojiStatus

-- | Identifier of the custom emoji in stickerFormatTgs format
[custom_emoji_id] :: EmojiStatus -> Maybe Int

-- | Point in time (Unix timestamp) when the status will expire; 0 if never
[expiration_date] :: EmojiStatus -> Maybe Int
defaultEmojiStatus :: EmojiStatus
instance GHC.Show.Show TD.Data.EmojiStatus.EmojiStatus
instance GHC.Classes.Eq TD.Data.EmojiStatus.EmojiStatus
instance TD.Lib.Internal.ShortShow TD.Data.EmojiStatus.EmojiStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiStatus.EmojiStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EmojiStatus.EmojiStatus

module TD.Data.User
data User

-- | Represents a user
User :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Usernames -> Maybe Text -> Maybe UserStatus -> Maybe ProfilePhoto -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe EmojiStatus -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe UserType -> Maybe Text -> Maybe Bool -> User

-- | User identifier
[_id] :: User -> Maybe Int

-- | First name of the user
[first_name] :: User -> Maybe Text

-- | Last name of the user
[last_name] :: User -> Maybe Text

-- | Usernames of the user; may be null
[usernames] :: User -> Maybe Usernames

-- | Phone number of the user
[phone_number] :: User -> Maybe Text

-- | Current online status of the user
[status] :: User -> Maybe UserStatus

-- | Profile photo of the user; may be null
[profile_photo] :: User -> Maybe ProfilePhoto

-- | Identifier of the accent color for name, and backgrounds of profile
--   photo, reply header, and link preview. For Telegram Premium users only
[accent_color_id] :: User -> Maybe Int

-- | Identifier of a custom emoji to be shown on the reply header and link
--   preview background; 0 if none. For Telegram Premium users only
[background_custom_emoji_id] :: User -> Maybe Int

-- | Identifier of the accent color for the user's profile; -1 if none. For
--   Telegram Premium users only
[profile_accent_color_id] :: User -> Maybe Int

-- | Identifier of a custom emoji to be shown on the background of the
--   user's profile; 0 if none. For Telegram Premium users only
[profile_background_custom_emoji_id] :: User -> Maybe Int

-- | Emoji status to be shown instead of the default Telegram Premium
--   badge; may be null. For Telegram Premium users only
[emoji_status] :: User -> Maybe EmojiStatus

-- | The user is a contact of the current user
[is_contact] :: User -> Maybe Bool

-- | The user is a contact of the current user and the current user is a
--   contact of the user
[is_mutual_contact] :: User -> Maybe Bool

-- | The user is a close friend of the current user; implies that the user
--   is a contact
[is_close_friend] :: User -> Maybe Bool

-- | True, if the user is verified
[is_verified] :: User -> Maybe Bool

-- | True, if the user is a Telegram Premium user
[is_premium] :: User -> Maybe Bool

-- | True, if the user is Telegram support account
[is_support] :: User -> Maybe Bool

-- | If non-empty, it contains a human-readable description of the reason
--   why access to this user must be restricted
[restriction_reason] :: User -> Maybe Text

-- | True, if many users reported this user as a scam
[is_scam] :: User -> Maybe Bool

-- | True, if many users reported this user as a fake account
[is_fake] :: User -> Maybe Bool

-- | True, if the user has non-expired stories available to the current
--   user
[has_active_stories] :: User -> Maybe Bool

-- | True, if the user has unread non-expired stories available to the
--   current user
[has_unread_active_stories] :: User -> Maybe Bool

-- | True, if the user may restrict new chats with non-contacts. Use
--   canSendMessageToUser to check whether the current user can message the
--   user or try to create a chat with them
[restricts_new_chats] :: User -> Maybe Bool

-- | If false, the user is inaccessible, and the only information known
--   about the user is inside this class. Identifier of the user can't be
--   passed to any method
[have_access] :: User -> Maybe Bool

-- | Type of the user
[_type] :: User -> Maybe UserType

-- | IETF language tag of the user's language; only available to bots
[language_code] :: User -> Maybe Text

-- | True, if the user added the current bot to attachment menu; only
--   available to bots
[added_to_attachment_menu] :: User -> Maybe Bool
instance GHC.Show.Show TD.Data.User.User
instance GHC.Classes.Eq TD.Data.User.User
instance TD.Lib.Internal.ShortShow TD.Data.User.User
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.User.User

module TD.Data.EmojiKeyword
data EmojiKeyword

-- | Represents an emoji with its keyword
EmojiKeyword :: Maybe Text -> Maybe Text -> EmojiKeyword

-- | The emoji
[emoji] :: EmojiKeyword -> Maybe Text

-- | The keyword
[keyword] :: EmojiKeyword -> Maybe Text
instance GHC.Show.Show TD.Data.EmojiKeyword.EmojiKeyword
instance GHC.Classes.Eq TD.Data.EmojiKeyword.EmojiKeyword
instance TD.Lib.Internal.ShortShow TD.Data.EmojiKeyword.EmojiKeyword
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiKeyword.EmojiKeyword

module TD.Data.EmojiKeywords
data EmojiKeywords

-- | Represents a list of emoji with their keywords
EmojiKeywords :: Maybe [EmojiKeyword] -> EmojiKeywords

-- | List of emoji with their keywords
[emoji_keywords] :: EmojiKeywords -> Maybe [EmojiKeyword]
instance GHC.Show.Show TD.Data.EmojiKeywords.EmojiKeywords
instance GHC.Classes.Eq TD.Data.EmojiKeywords.EmojiKeywords
instance TD.Lib.Internal.ShortShow TD.Data.EmojiKeywords.EmojiKeywords
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiKeywords.EmojiKeywords

module TD.Data.EmojiCategoryType

-- | Describes type of emoji category
data EmojiCategoryType

-- | The category must be used by default (e.g., for custom emoji or
--   animation search)
EmojiCategoryTypeDefault :: EmojiCategoryType

-- | The category must be used by default for regular sticker selection. It
--   may contain greeting emoji category and Premium stickers
EmojiCategoryTypeRegularStickers :: EmojiCategoryType

-- | The category must be used for emoji status selection
EmojiCategoryTypeEmojiStatus :: EmojiCategoryType

-- | The category must be used for chat photo emoji selection
EmojiCategoryTypeChatPhoto :: EmojiCategoryType
instance GHC.Show.Show TD.Data.EmojiCategoryType.EmojiCategoryType
instance GHC.Classes.Eq TD.Data.EmojiCategoryType.EmojiCategoryType
instance TD.Lib.Internal.ShortShow TD.Data.EmojiCategoryType.EmojiCategoryType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiCategoryType.EmojiCategoryType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EmojiCategoryType.EmojiCategoryType

module TD.Data.EmojiCategorySource

-- | Describes source of stickers for an emoji category
data EmojiCategorySource

-- | The category contains a list of similar emoji to search for in
--   getStickers and searchStickers for stickers, or getInlineQueryResults
--   with the bot getOption("animation_search_bot_username") for animations
EmojiCategorySourceSearch :: Maybe [Text] -> EmojiCategorySource

-- | List of emojis for search for
[emojis] :: EmojiCategorySource -> Maybe [Text]

-- | The category contains Premium stickers that must be found by
--   getPremiumStickers
EmojiCategorySourcePremium :: EmojiCategorySource
instance GHC.Show.Show TD.Data.EmojiCategorySource.EmojiCategorySource
instance GHC.Classes.Eq TD.Data.EmojiCategorySource.EmojiCategorySource
instance TD.Lib.Internal.ShortShow TD.Data.EmojiCategorySource.EmojiCategorySource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiCategorySource.EmojiCategorySource

module TD.Data.EmailAddressResetState

-- | Describes reset state of an email address
data EmailAddressResetState

-- | Email address can be reset after the given period. Call
--   resetAuthenticationEmailAddress to reset it and allow the user to
--   authorize with a code sent to the user's phone number
EmailAddressResetStateAvailable :: Maybe Int -> EmailAddressResetState

-- | Time required to wait before the email address can be reset; 0 if the
--   user is subscribed to Telegram Premium
[wait_period] :: EmailAddressResetState -> Maybe Int

-- | Email address reset has already been requested. Call
--   resetAuthenticationEmailAddress to check whether immediate reset is
--   possible
EmailAddressResetStatePending :: Maybe Int -> EmailAddressResetState

-- | Left time before the email address will be reset, in seconds.
--   updateAuthorizationState is not sent when this field changes
[reset_in] :: EmailAddressResetState -> Maybe Int
instance GHC.Show.Show TD.Data.EmailAddressResetState.EmailAddressResetState
instance GHC.Classes.Eq TD.Data.EmailAddressResetState.EmailAddressResetState
instance TD.Lib.Internal.ShortShow TD.Data.EmailAddressResetState.EmailAddressResetState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmailAddressResetState.EmailAddressResetState

module TD.Data.EmailAddressAuthenticationCodeInfo
data EmailAddressAuthenticationCodeInfo

-- | Information about the email address authentication code that was sent
EmailAddressAuthenticationCodeInfo :: Maybe Text -> Maybe Int -> EmailAddressAuthenticationCodeInfo

-- | Pattern of the email address to which an authentication code was sent
[email_address_pattern] :: EmailAddressAuthenticationCodeInfo -> Maybe Text

-- | Length of the code; 0 if unknown
[_length] :: EmailAddressAuthenticationCodeInfo -> Maybe Int
instance GHC.Show.Show TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance GHC.Classes.Eq TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance TD.Lib.Internal.ShortShow TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmailAddressAuthenticationCodeInfo.EmailAddressAuthenticationCodeInfo

module TD.Data.PasswordState
data PasswordState

-- | Represents the current state of 2-step verification
PasswordState :: Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe EmailAddressAuthenticationCodeInfo -> Maybe Text -> Maybe Int -> PasswordState

-- | True, if a 2-step verification password is set
[has_password] :: PasswordState -> Maybe Bool

-- | Hint for the password; may be empty
[password_hint] :: PasswordState -> Maybe Text

-- | True, if a recovery email is set
[has_recovery_email_address] :: PasswordState -> Maybe Bool

-- | True, if some Telegram Passport elements were saved
[has_passport_data] :: PasswordState -> Maybe Bool

-- | Information about the recovery email address to which the confirmation
--   email was sent; may be null
[recovery_email_address_code_info] :: PasswordState -> Maybe EmailAddressAuthenticationCodeInfo

-- | Pattern of the email address set up for logging in
[login_email_address_pattern] :: PasswordState -> Maybe Text

-- | If not 0, point in time (Unix timestamp) after which the 2-step
--   verification password can be reset immediately using resetPassword
[pending_reset_date] :: PasswordState -> Maybe Int
instance GHC.Show.Show TD.Data.PasswordState.PasswordState
instance GHC.Classes.Eq TD.Data.PasswordState.PasswordState
instance TD.Lib.Internal.ShortShow TD.Data.PasswordState.PasswordState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PasswordState.PasswordState

module TD.Data.EmailAddressAuthentication

-- | Contains authentication data for an email address
data EmailAddressAuthentication

-- | An authentication code delivered to a user's email address
EmailAddressAuthenticationCode :: Maybe Text -> EmailAddressAuthentication

-- | The code
[code] :: EmailAddressAuthentication -> Maybe Text

-- | An authentication token received through Apple ID
EmailAddressAuthenticationAppleId :: Maybe Text -> EmailAddressAuthentication

-- | The token
[token] :: EmailAddressAuthentication -> Maybe Text

-- | An authentication token received through Google ID
EmailAddressAuthenticationGoogleId :: Maybe Text -> EmailAddressAuthentication

-- | The token
[token] :: EmailAddressAuthentication -> Maybe Text
instance GHC.Show.Show TD.Data.EmailAddressAuthentication.EmailAddressAuthentication
instance GHC.Classes.Eq TD.Data.EmailAddressAuthentication.EmailAddressAuthentication
instance TD.Lib.Internal.ShortShow TD.Data.EmailAddressAuthentication.EmailAddressAuthentication
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmailAddressAuthentication.EmailAddressAuthentication
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.EmailAddressAuthentication.EmailAddressAuthentication

module TD.Data.DownloadedFileCounts
data DownloadedFileCounts

-- | Contains number of being downloaded and recently downloaded files
--   found
DownloadedFileCounts :: Maybe Int -> Maybe Int -> Maybe Int -> DownloadedFileCounts

-- | Number of active file downloads found, including paused
[active_count] :: DownloadedFileCounts -> Maybe Int

-- | Number of paused file downloads found
[paused_count] :: DownloadedFileCounts -> Maybe Int

-- | Number of completed file downloads found
[completed_count] :: DownloadedFileCounts -> Maybe Int
instance GHC.Show.Show TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance GHC.Classes.Eq TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance TD.Lib.Internal.ShortShow TD.Data.DownloadedFileCounts.DownloadedFileCounts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DownloadedFileCounts.DownloadedFileCounts

module TD.Data.Document
data Document

-- | Describes a document of any type
Document :: Maybe Text -> Maybe Text -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe File -> Document

-- | Original name of the file; as defined by the sender
[file_name] :: Document -> Maybe Text

-- | MIME type of the file; as defined by the sender
[mime_type] :: Document -> Maybe Text

-- | Document minithumbnail; may be null
[minithumbnail] :: Document -> Maybe Minithumbnail

-- | Document thumbnail in JPEG or PNG format (PNG will be used only for
--   background patterns); as defined by the sender; may be null
[thumbnail] :: Document -> Maybe Thumbnail

-- | File containing the document
[document] :: Document -> Maybe File
instance GHC.Show.Show TD.Data.Document.Document
instance GHC.Classes.Eq TD.Data.Document.Document
instance TD.Lib.Internal.ShortShow TD.Data.Document.Document
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Document.Document

module TD.Data.RichText

-- | Describes a text object inside an instant-view web page
data RichText

-- | A plain text
RichTextPlain :: Maybe Text -> RichText

-- | Text
[text] :: RichText -> Maybe Text

-- | A bold rich text
RichTextBold :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | An italicized rich text
RichTextItalic :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | An underlined rich text
RichTextUnderline :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A strikethrough rich text
RichTextStrikethrough :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A fixed-width rich text
RichTextFixed :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A rich text URL link
RichTextUrl :: Maybe RichText -> Maybe Text -> Maybe Bool -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | URL
[url] :: RichText -> Maybe Text

-- | True, if the URL has cached instant view server-side
[is_cached] :: RichText -> Maybe Bool

-- | A rich text email link
RichTextEmailAddress :: Maybe RichText -> Maybe Text -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | Email address
[email_address] :: RichText -> Maybe Text

-- | A subscript rich text
RichTextSubscript :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A superscript rich text
RichTextSuperscript :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A marked rich text
RichTextMarked :: Maybe RichText -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | A rich text phone number
RichTextPhoneNumber :: Maybe RichText -> Maybe Text -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | Phone number
[phone_number] :: RichText -> Maybe Text

-- | A small image inside the text
RichTextIcon :: Maybe Document -> Maybe Int -> Maybe Int -> RichText

-- | The image represented as a document. The image can be in GIF, JPEG or
--   PNG format
[document] :: RichText -> Maybe Document

-- | Width of a bounding box in which the image must be shown; 0 if unknown
[width] :: RichText -> Maybe Int

-- | Height of a bounding box in which the image must be shown; 0 if
--   unknown
[height] :: RichText -> Maybe Int

-- | A reference to a richTexts object on the same web page
RichTextReference :: Maybe RichText -> Maybe Text -> Maybe Text -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | The name of a richTextAnchor object, which is the first element of the
--   target richTexts object
[anchor_name] :: RichText -> Maybe Text

-- | URL
[url] :: RichText -> Maybe Text

-- | An anchor
RichTextAnchor :: Maybe Text -> RichText

-- | Anchor name
[name] :: RichText -> Maybe Text

-- | A link to an anchor on the same web page
RichTextAnchorLink :: Maybe RichText -> Maybe Text -> Maybe Text -> RichText

-- | Text
[_text] :: RichText -> Maybe RichText

-- | The name of a richTextAnchor object, which is the first element of the
--   target richTexts object
[anchor_name] :: RichText -> Maybe Text

-- | URL
[url] :: RichText -> Maybe Text

-- | A concatenation of rich texts
RichTexts :: Maybe [RichText] -> RichText

-- | Texts
[texts] :: RichText -> Maybe [RichText]
instance GHC.Show.Show TD.Data.RichText.RichText
instance GHC.Classes.Eq TD.Data.RichText.RichText
instance TD.Lib.Internal.ShortShow TD.Data.RichText.RichText
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RichText.RichText

module TD.Data.PageBlockTableCell
data PageBlockTableCell

-- | Represents a cell of a table
PageBlockTableCell :: Maybe RichText -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe PageBlockHorizontalAlignment -> Maybe PageBlockVerticalAlignment -> PageBlockTableCell

-- | Cell text; may be null. If the text is null, then the cell must be
--   invisible
[text] :: PageBlockTableCell -> Maybe RichText

-- | True, if it is a header cell
[is_header] :: PageBlockTableCell -> Maybe Bool

-- | The number of columns the cell spans
[colspan] :: PageBlockTableCell -> Maybe Int

-- | The number of rows the cell spans
[rowspan] :: PageBlockTableCell -> Maybe Int

-- | Horizontal cell content alignment
[align] :: PageBlockTableCell -> Maybe PageBlockHorizontalAlignment

-- | Vertical cell content alignment
[valign] :: PageBlockTableCell -> Maybe PageBlockVerticalAlignment
instance GHC.Show.Show TD.Data.PageBlockTableCell.PageBlockTableCell
instance GHC.Classes.Eq TD.Data.PageBlockTableCell.PageBlockTableCell
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockTableCell.PageBlockTableCell
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockTableCell.PageBlockTableCell

module TD.Data.PageBlockCaption
data PageBlockCaption

-- | Contains a caption of an instant view web page block, consisting of a
--   text and a trailing credit
PageBlockCaption :: Maybe RichText -> Maybe RichText -> PageBlockCaption

-- | Content of the caption
[text] :: PageBlockCaption -> Maybe RichText

-- | Block credit (like HTML tag <a>cite</a>)
[credit] :: PageBlockCaption -> Maybe RichText
instance GHC.Show.Show TD.Data.PageBlockCaption.PageBlockCaption
instance GHC.Classes.Eq TD.Data.PageBlockCaption.PageBlockCaption
instance TD.Lib.Internal.ShortShow TD.Data.PageBlockCaption.PageBlockCaption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlockCaption.PageBlockCaption

module TD.Data.DeviceToken

-- | Represents a data needed to subscribe for push notifications through
--   registerDevice method. To use specific push notification service, the
--   correct application platform must be specified and a valid server
--   authentication data must be uploaded at <a>https://my.telegram.org</a>
data DeviceToken

-- | A token for Firebase Cloud Messaging
DeviceTokenFirebaseCloudMessaging :: Maybe Text -> Maybe Bool -> DeviceToken

-- | Device registration token; may be empty to deregister a device
[token] :: DeviceToken -> Maybe Text

-- | True, if push notifications must be additionally encrypted
[encrypt] :: DeviceToken -> Maybe Bool

-- | A token for Apple Push Notification service
DeviceTokenApplePush :: Maybe Text -> Maybe Bool -> DeviceToken

-- | Device token; may be empty to deregister a device
[device_token] :: DeviceToken -> Maybe Text

-- | True, if App Sandbox is enabled
[is_app_sandbox] :: DeviceToken -> Maybe Bool

-- | A token for Apple Push Notification service VoIP notifications
DeviceTokenApplePushVoIP :: Maybe Text -> Maybe Bool -> Maybe Bool -> DeviceToken

-- | Device token; may be empty to deregister a device
[device_token] :: DeviceToken -> Maybe Text

-- | True, if App Sandbox is enabled
[is_app_sandbox] :: DeviceToken -> Maybe Bool

-- | True, if push notifications must be additionally encrypted
[encrypt] :: DeviceToken -> Maybe Bool

-- | A token for Windows Push Notification Services
DeviceTokenWindowsPush :: Maybe Text -> DeviceToken

-- | The access token that will be used to send notifications; may be empty
--   to deregister a device
[access_token] :: DeviceToken -> Maybe Text

-- | A token for Microsoft Push Notification Service
DeviceTokenMicrosoftPush :: Maybe Text -> DeviceToken

-- | Push notification channel URI; may be empty to deregister a device
[channel_uri] :: DeviceToken -> Maybe Text

-- | A token for Microsoft Push Notification Service VoIP channel
DeviceTokenMicrosoftPushVoIP :: Maybe Text -> DeviceToken

-- | Push notification channel URI; may be empty to deregister a device
[channel_uri] :: DeviceToken -> Maybe Text

-- | A token for web Push API
DeviceTokenWebPush :: Maybe Text -> Maybe Text -> Maybe Text -> DeviceToken

-- | Absolute URL exposed by the push service where the application server
--   can send push messages; may be empty to deregister a device
[endpoint] :: DeviceToken -> Maybe Text

-- | Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
[p256dh_base64url] :: DeviceToken -> Maybe Text

-- | Base64url-encoded authentication secret
[auth_base64url] :: DeviceToken -> Maybe Text

-- | A token for Simple Push API for Firefox OS
DeviceTokenSimplePush :: Maybe Text -> DeviceToken

-- | Absolute URL exposed by the push service where the application server
--   can send push messages; may be empty to deregister a device
[endpoint] :: DeviceToken -> Maybe Text

-- | A token for Ubuntu Push Client service
DeviceTokenUbuntuPush :: Maybe Text -> DeviceToken

-- | Device registration token; may be empty to deregister a device
[token] :: DeviceToken -> Maybe Text

-- | A token for BlackBerry Push Service
DeviceTokenBlackBerryPush :: Maybe Text -> DeviceToken

-- | Device registration token; may be empty to deregister a device
[token] :: DeviceToken -> Maybe Text

-- | A token for Tizen Push Service
DeviceTokenTizenPush :: Maybe Text -> DeviceToken

-- | Push service registration identifier; may be empty to deregister a
--   device
[reg_id] :: DeviceToken -> Maybe Text

-- | A token for HUAWEI Push Service
DeviceTokenHuaweiPush :: Maybe Text -> Maybe Bool -> DeviceToken

-- | Device registration token; may be empty to deregister a device
[token] :: DeviceToken -> Maybe Text

-- | True, if push notifications must be additionally encrypted
[encrypt] :: DeviceToken -> Maybe Bool
instance GHC.Show.Show TD.Data.DeviceToken.DeviceToken
instance GHC.Classes.Eq TD.Data.DeviceToken.DeviceToken
instance TD.Lib.Internal.ShortShow TD.Data.DeviceToken.DeviceToken
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DeviceToken.DeviceToken
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DeviceToken.DeviceToken

module TD.Data.DeepLinkInfo
data DeepLinkInfo

-- | Contains information about a tg: deep link
DeepLinkInfo :: Maybe FormattedText -> Maybe Bool -> DeepLinkInfo

-- | Text to be shown to the user
[text] :: DeepLinkInfo -> Maybe FormattedText

-- | True, if the user must be asked to update the application
[need_update_application] :: DeepLinkInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.DeepLinkInfo.DeepLinkInfo
instance GHC.Classes.Eq TD.Data.DeepLinkInfo.DeepLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.DeepLinkInfo.DeepLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DeepLinkInfo.DeepLinkInfo

module TD.Data.DatedFile
data DatedFile

-- | File with the date it was uploaded
DatedFile :: Maybe File -> Maybe Int -> DatedFile

-- | The file
[file] :: DatedFile -> Maybe File

-- | Point in time (Unix timestamp) when the file was uploaded
[date] :: DatedFile -> Maybe Int
instance GHC.Show.Show TD.Data.DatedFile.DatedFile
instance GHC.Classes.Eq TD.Data.DatedFile.DatedFile
instance TD.Lib.Internal.ShortShow TD.Data.DatedFile.DatedFile
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DatedFile.DatedFile

module TD.Data.PersonalDocument
data PersonalDocument

-- | A personal document, containing some information about a user
PersonalDocument :: Maybe [DatedFile] -> Maybe [DatedFile] -> PersonalDocument

-- | List of files containing the pages of the document
[files] :: PersonalDocument -> Maybe [DatedFile]

-- | List of files containing a certified English translation of the
--   document
[translation] :: PersonalDocument -> Maybe [DatedFile]
instance GHC.Show.Show TD.Data.PersonalDocument.PersonalDocument
instance GHC.Classes.Eq TD.Data.PersonalDocument.PersonalDocument
instance TD.Lib.Internal.ShortShow TD.Data.PersonalDocument.PersonalDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PersonalDocument.PersonalDocument

module TD.Data.EncryptedPassportElement
data EncryptedPassportElement

-- | Contains information about an encrypted Telegram Passport element; for
--   bots only
EncryptedPassportElement :: Maybe PassportElementType -> Maybe ByteString -> Maybe DatedFile -> Maybe DatedFile -> Maybe DatedFile -> Maybe [DatedFile] -> Maybe [DatedFile] -> Maybe Text -> Maybe Text -> EncryptedPassportElement

-- | Type of Telegram Passport element
[_type] :: EncryptedPassportElement -> Maybe PassportElementType

-- | Encrypted JSON-encoded data about the user
[_data] :: EncryptedPassportElement -> Maybe ByteString

-- | The front side of an identity document
[front_side] :: EncryptedPassportElement -> Maybe DatedFile

-- | The reverse side of an identity document; may be null
[reverse_side] :: EncryptedPassportElement -> Maybe DatedFile

-- | Selfie with the document; may be null
[selfie] :: EncryptedPassportElement -> Maybe DatedFile

-- | List of files containing a certified English translation of the
--   document
[translation] :: EncryptedPassportElement -> Maybe [DatedFile]

-- | List of attached files
[files] :: EncryptedPassportElement -> Maybe [DatedFile]

-- | Unencrypted data, phone number or email address
[value] :: EncryptedPassportElement -> Maybe Text

-- | Hash of the entire element
[hash] :: EncryptedPassportElement -> Maybe Text
instance GHC.Show.Show TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance GHC.Classes.Eq TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance TD.Lib.Internal.ShortShow TD.Data.EncryptedPassportElement.EncryptedPassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EncryptedPassportElement.EncryptedPassportElement

module TD.Data.DateRange
data DateRange

-- | Represents a date range
DateRange :: Maybe Int -> Maybe Int -> DateRange

-- | Point in time (Unix timestamp) at which the date range begins
[start_date] :: DateRange -> Maybe Int

-- | Point in time (Unix timestamp) at which the date range ends
[end_date] :: DateRange -> Maybe Int
instance GHC.Show.Show TD.Data.DateRange.DateRange
instance GHC.Classes.Eq TD.Data.DateRange.DateRange
instance TD.Lib.Internal.ShortShow TD.Data.DateRange.DateRange
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DateRange.DateRange

module TD.Data.Date
data Date

-- | Represents a date according to the Gregorian calendar
Date :: Maybe Int -> Maybe Int -> Maybe Int -> Date

-- | Day of the month; 1-31
[day] :: Date -> Maybe Int

-- | Month; 1-12
[month] :: Date -> Maybe Int

-- | Year; 1-9999
[year] :: Date -> Maybe Int
defaultDate :: Date
instance GHC.Show.Show TD.Data.Date.Date
instance GHC.Classes.Eq TD.Data.Date.Date
instance TD.Lib.Internal.ShortShow TD.Data.Date.Date
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Date.Date
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Date.Date

module TD.Data.PersonalDetails
data PersonalDetails

-- | Contains the user's personal details
PersonalDetails :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Date -> Maybe Text -> Maybe Text -> Maybe Text -> PersonalDetails

-- | First name of the user written in English; 1-255 characters
[first_name] :: PersonalDetails -> Maybe Text

-- | Middle name of the user written in English; 0-255 characters
[middle_name] :: PersonalDetails -> Maybe Text

-- | Last name of the user written in English; 1-255 characters
[last_name] :: PersonalDetails -> Maybe Text

-- | Native first name of the user; 1-255 characters
[native_first_name] :: PersonalDetails -> Maybe Text

-- | Native middle name of the user; 0-255 characters
[native_middle_name] :: PersonalDetails -> Maybe Text

-- | Native last name of the user; 1-255 characters
[native_last_name] :: PersonalDetails -> Maybe Text

-- | Birthdate of the user
[birthdate] :: PersonalDetails -> Maybe Date

-- | Gender of the user, "male" or "female"
[gender] :: PersonalDetails -> Maybe Text

-- | A two-letter ISO 3166-1 alpha-2 country code of the user's country
[country_code] :: PersonalDetails -> Maybe Text

-- | A two-letter ISO 3166-1 alpha-2 country code of the user's residence
--   country
[residence_country_code] :: PersonalDetails -> Maybe Text
defaultPersonalDetails :: PersonalDetails
instance GHC.Show.Show TD.Data.PersonalDetails.PersonalDetails
instance GHC.Classes.Eq TD.Data.PersonalDetails.PersonalDetails
instance TD.Lib.Internal.ShortShow TD.Data.PersonalDetails.PersonalDetails
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PersonalDetails.PersonalDetails
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PersonalDetails.PersonalDetails

module TD.Data.InputIdentityDocument
data InputIdentityDocument

-- | An identity document to be saved to Telegram Passport
InputIdentityDocument :: Maybe Text -> Maybe Date -> Maybe InputFile -> Maybe InputFile -> Maybe InputFile -> Maybe [InputFile] -> InputIdentityDocument

-- | Document number; 1-24 characters
[number] :: InputIdentityDocument -> Maybe Text

-- | Document expiration date; pass null if not applicable
[expiration_date] :: InputIdentityDocument -> Maybe Date

-- | Front side of the document
[front_side] :: InputIdentityDocument -> Maybe InputFile

-- | Reverse side of the document; only for driver license and identity
--   card; pass null otherwise
[reverse_side] :: InputIdentityDocument -> Maybe InputFile

-- | Selfie with the document; pass null if unavailable
[selfie] :: InputIdentityDocument -> Maybe InputFile

-- | List of files containing a certified English translation of the
--   document
[translation] :: InputIdentityDocument -> Maybe [InputFile]
defaultInputIdentityDocument :: InputIdentityDocument
instance GHC.Show.Show TD.Data.InputIdentityDocument.InputIdentityDocument
instance GHC.Classes.Eq TD.Data.InputIdentityDocument.InputIdentityDocument
instance TD.Lib.Internal.ShortShow TD.Data.InputIdentityDocument.InputIdentityDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputIdentityDocument.InputIdentityDocument
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputIdentityDocument.InputIdentityDocument

module TD.Data.IdentityDocument
data IdentityDocument

-- | An identity document
IdentityDocument :: Maybe Text -> Maybe Date -> Maybe DatedFile -> Maybe DatedFile -> Maybe DatedFile -> Maybe [DatedFile] -> IdentityDocument

-- | Document number; 1-24 characters
[number] :: IdentityDocument -> Maybe Text

-- | Document expiration date; may be null if not applicable
[expiration_date] :: IdentityDocument -> Maybe Date

-- | Front side of the document
[front_side] :: IdentityDocument -> Maybe DatedFile

-- | Reverse side of the document; only for driver license and identity
--   card; may be null
[reverse_side] :: IdentityDocument -> Maybe DatedFile

-- | Selfie with the document; may be null
[selfie] :: IdentityDocument -> Maybe DatedFile

-- | List of files containing a certified English translation of the
--   document
[translation] :: IdentityDocument -> Maybe [DatedFile]
instance GHC.Show.Show TD.Data.IdentityDocument.IdentityDocument
instance GHC.Classes.Eq TD.Data.IdentityDocument.IdentityDocument
instance TD.Lib.Internal.ShortShow TD.Data.IdentityDocument.IdentityDocument
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.IdentityDocument.IdentityDocument

module TD.Data.DatabaseStatistics
data DatabaseStatistics

-- | Contains database statistics
DatabaseStatistics :: Maybe Text -> DatabaseStatistics

-- | Database statistics in an unspecified human-readable format
[statistics] :: DatabaseStatistics -> Maybe Text
instance GHC.Show.Show TD.Data.DatabaseStatistics.DatabaseStatistics
instance GHC.Classes.Eq TD.Data.DatabaseStatistics.DatabaseStatistics
instance TD.Lib.Internal.ShortShow TD.Data.DatabaseStatistics.DatabaseStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DatabaseStatistics.DatabaseStatistics

module TD.Data.CustomRequestResult
data CustomRequestResult

-- | Contains the result of a custom request
CustomRequestResult :: Maybe Text -> CustomRequestResult

-- | A JSON-serialized result
[result] :: CustomRequestResult -> Maybe Text
instance GHC.Show.Show TD.Data.CustomRequestResult.CustomRequestResult
instance GHC.Classes.Eq TD.Data.CustomRequestResult.CustomRequestResult
instance TD.Lib.Internal.ShortShow TD.Data.CustomRequestResult.CustomRequestResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CustomRequestResult.CustomRequestResult

module TD.Data.CreatedBasicGroupChat
data CreatedBasicGroupChat

-- | Contains information about a newly created basic group chat
CreatedBasicGroupChat :: Maybe Int -> Maybe FailedToAddMembers -> CreatedBasicGroupChat

-- | Chat identifier
[chat_id] :: CreatedBasicGroupChat -> Maybe Int

-- | Information about failed to add members
[failed_to_add_members] :: CreatedBasicGroupChat -> Maybe FailedToAddMembers
instance GHC.Show.Show TD.Data.CreatedBasicGroupChat.CreatedBasicGroupChat
instance GHC.Classes.Eq TD.Data.CreatedBasicGroupChat.CreatedBasicGroupChat
instance TD.Lib.Internal.ShortShow TD.Data.CreatedBasicGroupChat.CreatedBasicGroupChat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CreatedBasicGroupChat.CreatedBasicGroupChat

module TD.Data.CountryInfo
data CountryInfo

-- | Contains information about a country
CountryInfo :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe [Text] -> CountryInfo

-- | A two-letter ISO 3166-1 alpha-2 country code
[country_code] :: CountryInfo -> Maybe Text

-- | Native name of the country
[name] :: CountryInfo -> Maybe Text

-- | English name of the country
[english_name] :: CountryInfo -> Maybe Text

-- | True, if the country must be hidden from the list of all countries
[is_hidden] :: CountryInfo -> Maybe Bool

-- | List of country calling codes
[calling_codes] :: CountryInfo -> Maybe [Text]
instance GHC.Show.Show TD.Data.CountryInfo.CountryInfo
instance GHC.Classes.Eq TD.Data.CountryInfo.CountryInfo
instance TD.Lib.Internal.ShortShow TD.Data.CountryInfo.CountryInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CountryInfo.CountryInfo

module TD.Data.PhoneNumberInfo
data PhoneNumberInfo

-- | Contains information about a phone number
PhoneNumberInfo :: Maybe CountryInfo -> Maybe Text -> Maybe Text -> Maybe Bool -> PhoneNumberInfo

-- | Information about the country to which the phone number belongs; may
--   be null
[country] :: PhoneNumberInfo -> Maybe CountryInfo

-- | The part of the phone number denoting country calling code or its part
[country_calling_code] :: PhoneNumberInfo -> Maybe Text

-- | The phone number without country calling code formatted accordingly to
--   local rules. Expected digits are returned as <a>-</a>, but even more
--   digits might be entered by the user
[formatted_phone_number] :: PhoneNumberInfo -> Maybe Text

-- | True, if the phone number was bought at <a>https://fragment.com</a>
--   and isn't tied to a SIM card. Information about the phone number can
--   be received using getCollectibleItemInfo
[is_anonymous] :: PhoneNumberInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance GHC.Classes.Eq TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance TD.Lib.Internal.ShortShow TD.Data.PhoneNumberInfo.PhoneNumberInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PhoneNumberInfo.PhoneNumberInfo

module TD.Data.Countries
data Countries

-- | Contains information about countries
Countries :: Maybe [CountryInfo] -> Countries

-- | The list of countries
[countries] :: Countries -> Maybe [CountryInfo]
instance GHC.Show.Show TD.Data.Countries.Countries
instance GHC.Classes.Eq TD.Data.Countries.Countries
instance TD.Lib.Internal.ShortShow TD.Data.Countries.Countries
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Countries.Countries

module TD.Data.Count
data Count

-- | Contains a counter
Count :: Maybe Int -> Count

-- | Count
[count] :: Count -> Maybe Int
instance GHC.Show.Show TD.Data.Count.Count
instance GHC.Classes.Eq TD.Data.Count.Count
instance TD.Lib.Internal.ShortShow TD.Data.Count.Count
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Count.Count

module TD.Data.Contact
data Contact

-- | Describes a user contact
Contact :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Contact

-- | Phone number of the user
[phone_number] :: Contact -> Maybe Text

-- | First name of the user; 1-255 characters in length
[first_name] :: Contact -> Maybe Text

-- | Last name of the user
[last_name] :: Contact -> Maybe Text

-- | Additional data about the user in a form of vCard; 0-2048 bytes in
--   length
[vcard] :: Contact -> Maybe Text

-- | Identifier of the user, if known; 0 otherwise
[user_id] :: Contact -> Maybe Int
defaultContact :: Contact
instance GHC.Show.Show TD.Data.Contact.Contact
instance GHC.Classes.Eq TD.Data.Contact.Contact
instance TD.Lib.Internal.ShortShow TD.Data.Contact.Contact
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Contact.Contact
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Contact.Contact

module TD.Data.InputMessageContent

-- | The content of a message to send
data InputMessageContent

-- | A text message
InputMessageText :: Maybe FormattedText -> Maybe LinkPreviewOptions -> Maybe Bool -> InputMessageContent

-- | Formatted text to be sent; 0-getOption("message_text_length_max")
--   characters. Only Bold, Italic, Underline, Strikethrough, Spoiler,
--   CustomEmoji, BlockQuote, Code, Pre, PreCode, TextUrl and MentionName
--   entities are allowed to be specified manually
[text] :: InputMessageContent -> Maybe FormattedText

-- | Options to be used for generation of a link preview; may be null if
--   none; pass null to use default link preview options
[link_preview_options] :: InputMessageContent -> Maybe LinkPreviewOptions

-- | True, if a chat message draft must be deleted
[clear_draft] :: InputMessageContent -> Maybe Bool

-- | An animation message (GIF-style).
InputMessageAnimation :: Maybe InputFile -> Maybe InputThumbnail -> Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe FormattedText -> Maybe Bool -> InputMessageContent

-- | Animation file to be sent
[animation] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | File identifiers of the stickers added to the animation, if applicable
[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

-- | Duration of the animation, in seconds
[duration] :: InputMessageContent -> Maybe Int

-- | Width of the animation; may be replaced by the server
[width] :: InputMessageContent -> Maybe Int

-- | Height of the animation; may be replaced by the server
[height] :: InputMessageContent -> Maybe Int

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | True, if the animation preview must be covered by a spoiler animation;
--   not supported in secret chats
[has_spoiler] :: InputMessageContent -> Maybe Bool

-- | An audio message
InputMessageAudio :: Maybe InputFile -> Maybe InputThumbnail -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe FormattedText -> InputMessageContent

-- | Audio file to be sent
[audio] :: InputMessageContent -> Maybe InputFile

-- | Thumbnail of the cover for the album; pass null to skip thumbnail
--   uploading
[album_cover_thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | Duration of the animation, in seconds
[duration] :: InputMessageContent -> Maybe Int

-- | Title of the audio; 0-64 characters; may be replaced by the server
[title] :: InputMessageContent -> Maybe Text

-- | Performer of the audio; 0-64 characters, may be replaced by the server
[performer] :: InputMessageContent -> Maybe Text

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | A document message (general file)
InputMessageDocument :: Maybe InputFile -> Maybe InputThumbnail -> Maybe Bool -> Maybe FormattedText -> InputMessageContent

-- | Document to be sent
[document] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | Pass true to disable automatic file type detection and send the
--   document as a file. Always true for files sent to secret chats
[disable_content_type_detection] :: InputMessageContent -> Maybe Bool

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | A photo message
InputMessagePhoto :: Maybe InputFile -> Maybe InputThumbnail -> Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe FormattedText -> Maybe MessageSelfDestructType -> Maybe Bool -> InputMessageContent

-- | Photo to send. The photo must be at most 10 MB in size. The photo's
--   width and height must not exceed 10000 in total. Width and height
--   ratio must be at most 20
[photo] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | File identifiers of the stickers added to the animation, if applicable
[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

-- | Width of the animation; may be replaced by the server
[width] :: InputMessageContent -> Maybe Int

-- | Height of the animation; may be replaced by the server
[height] :: InputMessageContent -> Maybe Int

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | Photo self-destruct type; pass null if none; private chats only
[self_destruct_type] :: InputMessageContent -> Maybe MessageSelfDestructType

-- | True, if the animation preview must be covered by a spoiler animation;
--   not supported in secret chats
[has_spoiler] :: InputMessageContent -> Maybe Bool

-- | A sticker message
InputMessageSticker :: Maybe InputFile -> Maybe InputThumbnail -> Maybe Int -> Maybe Int -> Maybe Text -> InputMessageContent

-- | Sticker to be sent
[sticker] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | Width of the animation; may be replaced by the server
[width] :: InputMessageContent -> Maybe Int

-- | Height of the animation; may be replaced by the server
[height] :: InputMessageContent -> Maybe Int

-- | Emoji used to choose the sticker
[emoji] :: InputMessageContent -> Maybe Text

-- | A video message
InputMessageVideo :: Maybe InputFile -> Maybe InputThumbnail -> Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe FormattedText -> Maybe MessageSelfDestructType -> Maybe Bool -> InputMessageContent

-- | Video to be sent
[video] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | File identifiers of the stickers added to the animation, if applicable
[added_sticker_file_ids] :: InputMessageContent -> Maybe [Int]

-- | Duration of the animation, in seconds
[duration] :: InputMessageContent -> Maybe Int

-- | Width of the animation; may be replaced by the server
[width] :: InputMessageContent -> Maybe Int

-- | Height of the animation; may be replaced by the server
[height] :: InputMessageContent -> Maybe Int

-- | True, if the video is supposed to be streamed
[supports_streaming] :: InputMessageContent -> Maybe Bool

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | Photo self-destruct type; pass null if none; private chats only
[self_destruct_type] :: InputMessageContent -> Maybe MessageSelfDestructType

-- | True, if the animation preview must be covered by a spoiler animation;
--   not supported in secret chats
[has_spoiler] :: InputMessageContent -> Maybe Bool

-- | A video note message
InputMessageVideoNote :: Maybe InputFile -> Maybe InputThumbnail -> Maybe Int -> Maybe Int -> Maybe MessageSelfDestructType -> InputMessageContent

-- | Video note to be sent
[video_note] :: InputMessageContent -> Maybe InputFile

-- | Animation thumbnail; pass null to skip thumbnail uploading
[thumbnail] :: InputMessageContent -> Maybe InputThumbnail

-- | Duration of the animation, in seconds
[duration] :: InputMessageContent -> Maybe Int

-- | Video width and height; must be positive and not greater than 640
[_length] :: InputMessageContent -> Maybe Int

-- | Photo self-destruct type; pass null if none; private chats only
[self_destruct_type] :: InputMessageContent -> Maybe MessageSelfDestructType

-- | A voice note message
InputMessageVoiceNote :: Maybe InputFile -> Maybe Int -> Maybe ByteString -> Maybe FormattedText -> Maybe MessageSelfDestructType -> InputMessageContent

-- | Voice note to be sent. The voice note must be encoded with the Opus
--   codec and stored inside an OGG container with a single audio channel,
--   or be in MP3 or M4A format as regular audio
[voice_note] :: InputMessageContent -> Maybe InputFile

-- | Duration of the animation, in seconds
[duration] :: InputMessageContent -> Maybe Int

-- | Waveform representation of the voice note in 5-bit format
[waveform] :: InputMessageContent -> Maybe ByteString

-- | Animation caption; pass null to use an empty caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: InputMessageContent -> Maybe FormattedText

-- | Photo self-destruct type; pass null if none; private chats only
[self_destruct_type] :: InputMessageContent -> Maybe MessageSelfDestructType

-- | A message with a location
InputMessageLocation :: Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> InputMessageContent

-- | Location to be sent
[location] :: InputMessageContent -> Maybe Location

-- | Period for which the location can be updated, in seconds; must be
--   between 60 and 86400 for a temporary live location, 0x7FFFFFFF for
--   permanent live location, and 0 otherwise
[live_period] :: InputMessageContent -> Maybe Int

-- | For live locations, a direction in which the location moves, in
--   degrees; 1-360. Pass 0 if unknown
[heading] :: InputMessageContent -> Maybe Int

-- | For live locations, a maximum distance to another chat member for
--   proximity alerts, in meters (0-100000). Pass 0 if the notification is
--   disabled. Can't be enabled in channels and Saved Messages
[proximity_alert_radius] :: InputMessageContent -> Maybe Int

-- | A message with information about a venue
InputMessageVenue :: Maybe Venue -> InputMessageContent

-- | Venue to send
[venue] :: InputMessageContent -> Maybe Venue

-- | A message containing a user contact
InputMessageContact :: Maybe Contact -> InputMessageContent

-- | Contact to send
[contact] :: InputMessageContent -> Maybe Contact

-- | A dice message
InputMessageDice :: Maybe Text -> Maybe Bool -> InputMessageContent

-- | Emoji used to choose the sticker
[emoji] :: InputMessageContent -> Maybe Text

-- | True, if a chat message draft must be deleted
[clear_draft] :: InputMessageContent -> Maybe Bool

-- | A message with a game; not supported for channels or secret chats
InputMessageGame :: Maybe Int -> Maybe Text -> InputMessageContent

-- | User identifier of the bot that owns the game
[bot_user_id] :: InputMessageContent -> Maybe Int

-- | Short name of the game
[game_short_name] :: InputMessageContent -> Maybe Text

-- | A message with an invoice; can be used only by bots
InputMessageInvoice :: Maybe Invoice -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ByteString -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe InputMessageContent -> InputMessageContent

-- | Invoice
[invoice] :: InputMessageContent -> Maybe Invoice

-- | Title of the audio; 0-64 characters; may be replaced by the server
[title] :: InputMessageContent -> Maybe Text
[description] :: InputMessageContent -> Maybe Text

-- | Product photo URL; optional
[photo_url] :: InputMessageContent -> Maybe Text

-- | Product photo size
[photo_size] :: InputMessageContent -> Maybe Int

-- | Product photo width
[photo_width] :: InputMessageContent -> Maybe Int

-- | Product photo height
[photo_height] :: InputMessageContent -> Maybe Int

-- | The invoice payload
[payload] :: InputMessageContent -> Maybe ByteString

-- | Payment provider token
[provider_token] :: InputMessageContent -> Maybe Text

-- | JSON-encoded data about the invoice, which will be shared with the
--   payment provider
[provider_data] :: InputMessageContent -> Maybe Text

-- | Unique invoice bot deep link parameter for the generation of this
--   invoice. If empty, it would be possible to pay directly from forwards
--   of the invoice message
[start_parameter] :: InputMessageContent -> Maybe Text

-- | The content of extended media attached to the invoice. The content of
--   the message to be sent. Must be one of the following types:
--   inputMessagePhoto, inputMessageVideo
[extended_media_content] :: InputMessageContent -> Maybe InputMessageContent

-- | A message with a poll. Polls can't be sent to secret chats. Polls can
--   be sent only to a private chat with a bot
InputMessagePoll :: Maybe FormattedText -> Maybe [FormattedText] -> Maybe Bool -> Maybe PollType -> Maybe Int -> Maybe Int -> Maybe Bool -> InputMessageContent

-- | Poll question; 1-255 characters (up to 300 characters for bots). Only
--   custom emoji entities are allowed to be added and only by Premium
--   users
[question] :: InputMessageContent -> Maybe FormattedText

-- | List of poll answer options, 2-10 strings 1-100 characters each. Only
--   custom emoji entities are allowed to be added and only by Premium
--   users
[options] :: InputMessageContent -> Maybe [FormattedText]

-- | True, if the poll voters are anonymous. Non-anonymous polls can't be
--   sent or forwarded to channels
[is_anonymous] :: InputMessageContent -> Maybe Bool

-- | Type of the poll
[_type] :: InputMessageContent -> Maybe PollType

-- | Amount of time the poll will be active after creation, in seconds; for
--   bots only
[open_period] :: InputMessageContent -> Maybe Int

-- | Point in time (Unix timestamp) when the poll will automatically be
--   closed; for bots only
[close_date] :: InputMessageContent -> Maybe Int

-- | True, if the poll needs to be sent already closed; for bots only
[is_closed] :: InputMessageContent -> Maybe Bool

-- | A message with a forwarded story. Stories can't be sent to secret
--   chats. A story can be forwarded only if story.can_be_forwarded
InputMessageStory :: Maybe Int -> Maybe Int -> InputMessageContent

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: InputMessageContent -> Maybe Int

-- | Story identifier
[story_id] :: InputMessageContent -> Maybe Int

-- | A forwarded message
InputMessageForwarded :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe MessageCopyOptions -> InputMessageContent

-- | Identifier for the chat this forwarded message came from
[from_chat_id] :: InputMessageContent -> Maybe Int

-- | Identifier of the message to forward. A message can be forwarded only
--   if message.can_be_forwarded
[message_id] :: InputMessageContent -> Maybe Int

-- | True, if a game message is being shared from a launched game; applies
--   only to game messages
[in_game_share] :: InputMessageContent -> Maybe Bool

-- | Options to be used to copy content of the message without reference to
--   the original sender; pass null to forward the message as usual
[copy_options] :: InputMessageContent -> Maybe MessageCopyOptions
instance GHC.Show.Show TD.Data.InputMessageContent.InputMessageContent
instance GHC.Classes.Eq TD.Data.InputMessageContent.InputMessageContent
instance TD.Lib.Internal.ShortShow TD.Data.InputMessageContent.InputMessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputMessageContent.InputMessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputMessageContent.InputMessageContent

module TD.Data.DraftMessage
data DraftMessage

-- | Contains information about a message draft
DraftMessage :: Maybe InputMessageReplyTo -> Maybe Int -> Maybe InputMessageContent -> DraftMessage

-- | Information about the message to be replied; must be of the type
--   inputMessageReplyToMessage; may be null if none
[reply_to] :: DraftMessage -> Maybe InputMessageReplyTo

-- | Point in time (Unix timestamp) when the draft was created
[date] :: DraftMessage -> Maybe Int

-- | Content of the message draft; must be of the type inputMessageText,
--   inputMessageVideoNote, or inputMessageVoiceNote
[input_message_text] :: DraftMessage -> Maybe InputMessageContent
defaultDraftMessage :: DraftMessage
instance GHC.Show.Show TD.Data.DraftMessage.DraftMessage
instance GHC.Classes.Eq TD.Data.DraftMessage.DraftMessage
instance TD.Lib.Internal.ShortShow TD.Data.DraftMessage.DraftMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DraftMessage.DraftMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.DraftMessage.DraftMessage

module TD.Data.ConnectionState

-- | Describes the current state of the connection to Telegram servers
data ConnectionState

-- | Waiting for the network to become available. Use setNetworkType to
--   change the available network type
ConnectionStateWaitingForNetwork :: ConnectionState

-- | Establishing a connection with a proxy server
ConnectionStateConnectingToProxy :: ConnectionState

-- | Establishing a connection to the Telegram servers
ConnectionStateConnecting :: ConnectionState

-- | Downloading data supposed to be received while the application was
--   offline
ConnectionStateUpdating :: ConnectionState

-- | There is a working connection to the Telegram servers
ConnectionStateReady :: ConnectionState
instance GHC.Show.Show TD.Data.ConnectionState.ConnectionState
instance GHC.Classes.Eq TD.Data.ConnectionState.ConnectionState
instance TD.Lib.Internal.ShortShow TD.Data.ConnectionState.ConnectionState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectionState.ConnectionState

module TD.Data.ConnectedWebsite
data ConnectedWebsite

-- | Contains information about one website the current user is logged in
--   with Telegram
ConnectedWebsite :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> ConnectedWebsite

-- | Website identifier
[_id] :: ConnectedWebsite -> Maybe Int

-- | The domain name of the website
[domain_name] :: ConnectedWebsite -> Maybe Text

-- | User identifier of a bot linked with the website
[bot_user_id] :: ConnectedWebsite -> Maybe Int

-- | The version of a browser used to log in
[browser] :: ConnectedWebsite -> Maybe Text

-- | Operating system the browser is running on
[platform] :: ConnectedWebsite -> Maybe Text

-- | Point in time (Unix timestamp) when the user was logged in
[log_in_date] :: ConnectedWebsite -> Maybe Int

-- | Point in time (Unix timestamp) when obtained authorization was last
--   used
[last_active_date] :: ConnectedWebsite -> Maybe Int

-- | IP address from which the user was logged in, in human-readable format
[ip_address] :: ConnectedWebsite -> Maybe Text

-- | Human-readable description of a country and a region from which the
--   user was logged in, based on the IP address
[location] :: ConnectedWebsite -> Maybe Text
instance GHC.Show.Show TD.Data.ConnectedWebsite.ConnectedWebsite
instance GHC.Classes.Eq TD.Data.ConnectedWebsite.ConnectedWebsite
instance TD.Lib.Internal.ShortShow TD.Data.ConnectedWebsite.ConnectedWebsite
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectedWebsite.ConnectedWebsite

module TD.Data.ConnectedWebsites
data ConnectedWebsites

-- | Contains a list of websites the current user is logged in with
--   Telegram
ConnectedWebsites :: Maybe [ConnectedWebsite] -> ConnectedWebsites

-- | List of connected websites
[websites] :: ConnectedWebsites -> Maybe [ConnectedWebsite]
instance GHC.Show.Show TD.Data.ConnectedWebsites.ConnectedWebsites
instance GHC.Classes.Eq TD.Data.ConnectedWebsites.ConnectedWebsites
instance TD.Lib.Internal.ShortShow TD.Data.ConnectedWebsites.ConnectedWebsites
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ConnectedWebsites.ConnectedWebsites

module TD.Data.CollectibleItemType

-- | Describes a collectible item that can be purchased at
--   <a>https://fragment.com</a>
data CollectibleItemType

-- | A username
CollectibleItemTypeUsername :: Maybe Text -> CollectibleItemType

-- | The username
[username] :: CollectibleItemType -> Maybe Text

-- | A phone number
CollectibleItemTypePhoneNumber :: Maybe Text -> CollectibleItemType

-- | The phone number
[phone_number] :: CollectibleItemType -> Maybe Text
instance GHC.Show.Show TD.Data.CollectibleItemType.CollectibleItemType
instance GHC.Classes.Eq TD.Data.CollectibleItemType.CollectibleItemType
instance TD.Lib.Internal.ShortShow TD.Data.CollectibleItemType.CollectibleItemType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CollectibleItemType.CollectibleItemType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CollectibleItemType.CollectibleItemType

module TD.Data.CollectibleItemInfo
data CollectibleItemInfo

-- | Contains information about a collectible item and its last purchase
CollectibleItemInfo :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> CollectibleItemInfo

-- | Point in time (Unix timestamp) when the item was purchased
[purchase_date] :: CollectibleItemInfo -> Maybe Int

-- | Currency for the paid amount
[currency] :: CollectibleItemInfo -> Maybe Text

-- | The paid amount, in the smallest units of the currency
[amount] :: CollectibleItemInfo -> Maybe Int

-- | Cryptocurrency used to pay for the item
[cryptocurrency] :: CollectibleItemInfo -> Maybe Text

-- | The paid amount, in the smallest units of the cryptocurrency
[cryptocurrency_amount] :: CollectibleItemInfo -> Maybe Int

-- | Individual URL for the item on <a>https://fragment.com</a>
[url] :: CollectibleItemInfo -> Maybe Text
instance GHC.Show.Show TD.Data.CollectibleItemInfo.CollectibleItemInfo
instance GHC.Classes.Eq TD.Data.CollectibleItemInfo.CollectibleItemInfo
instance TD.Lib.Internal.ShortShow TD.Data.CollectibleItemInfo.CollectibleItemInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CollectibleItemInfo.CollectibleItemInfo

module TD.Data.ClosedVectorPath
data ClosedVectorPath

-- | Represents a closed vector path. The path begins at the end point of
--   the last command
ClosedVectorPath :: Maybe [VectorPathCommand] -> ClosedVectorPath

-- | List of vector path commands
[commands] :: ClosedVectorPath -> Maybe [VectorPathCommand]
instance GHC.Show.Show TD.Data.ClosedVectorPath.ClosedVectorPath
instance GHC.Classes.Eq TD.Data.ClosedVectorPath.ClosedVectorPath
instance TD.Lib.Internal.ShortShow TD.Data.ClosedVectorPath.ClosedVectorPath
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ClosedVectorPath.ClosedVectorPath

module TD.Data.Sticker
data Sticker

-- | Describes a sticker
Sticker :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe StickerFormat -> Maybe StickerFullType -> Maybe [ClosedVectorPath] -> Maybe Thumbnail -> Maybe File -> Sticker

-- | Unique sticker identifier within the set; 0 if none
[_id] :: Sticker -> Maybe Int

-- | Identifier of the sticker set to which the sticker belongs; 0 if none
[set_id] :: Sticker -> Maybe Int

-- | Sticker width; as defined by the sender
[width] :: Sticker -> Maybe Int

-- | Sticker height; as defined by the sender
[height] :: Sticker -> Maybe Int

-- | Emoji corresponding to the sticker
[emoji] :: Sticker -> Maybe Text

-- | Sticker format
[format] :: Sticker -> Maybe StickerFormat

-- | Sticker's full type
[full_type] :: Sticker -> Maybe StickerFullType

-- | Sticker's outline represented as a list of closed vector paths; may be
--   empty. The coordinate system origin is in the upper-left corner
[outline] :: Sticker -> Maybe [ClosedVectorPath]

-- | Sticker thumbnail in WEBP or JPEG format; may be null
[thumbnail] :: Sticker -> Maybe Thumbnail

-- | File containing the sticker
[sticker] :: Sticker -> Maybe File
instance GHC.Show.Show TD.Data.Sticker.Sticker
instance GHC.Classes.Eq TD.Data.Sticker.Sticker
instance TD.Lib.Internal.ShortShow TD.Data.Sticker.Sticker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Sticker.Sticker

module TD.Data.Stickers
data Stickers

-- | Represents a list of stickers
Stickers :: Maybe [Sticker] -> Stickers

-- | List of stickers
[stickers] :: Stickers -> Maybe [Sticker]
instance GHC.Show.Show TD.Data.Stickers.Stickers
instance GHC.Classes.Eq TD.Data.Stickers.Stickers
instance TD.Lib.Internal.ShortShow TD.Data.Stickers.Stickers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Stickers.Stickers

module TD.Data.StickerSetInfo
data StickerSetInfo

-- | Represents short information about a sticker set
StickerSetInfo :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Thumbnail -> Maybe [ClosedVectorPath] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe StickerType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe [Sticker] -> StickerSetInfo

-- | Identifier of the sticker set
[_id] :: StickerSetInfo -> Maybe Int

-- | Title of the sticker set
[title] :: StickerSetInfo -> Maybe Text

-- | Name of the sticker set
[name] :: StickerSetInfo -> Maybe Text

-- | Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
--   height 100; may be null. The file can be downloaded only before the
--   thumbnail is changed
[thumbnail] :: StickerSetInfo -> Maybe Thumbnail

-- | Sticker set thumbnail's outline represented as a list of closed vector
--   paths; may be empty. The coordinate system origin is in the upper-left
--   corner
[thumbnail_outline] :: StickerSetInfo -> Maybe [ClosedVectorPath]

-- | True, if the sticker set is owned by the current user
[is_owned] :: StickerSetInfo -> Maybe Bool

-- | True, if the sticker set has been installed by the current user
[is_installed] :: StickerSetInfo -> Maybe Bool

-- | True, if the sticker set has been archived. A sticker set can't be
--   installed and archived simultaneously
[is_archived] :: StickerSetInfo -> Maybe Bool

-- | True, if the sticker set is official
[is_official] :: StickerSetInfo -> Maybe Bool

-- | Type of the stickers in the set
[sticker_type] :: StickerSetInfo -> Maybe StickerType

-- | True, if stickers in the sticker set are custom emoji that must be
--   repainted; for custom emoji sticker sets only
[needs_repainting] :: StickerSetInfo -> Maybe Bool

-- | True, if stickers in the sticker set are custom emoji that can be used
--   as chat emoji status; for custom emoji sticker sets only
[is_allowed_as_chat_emoji_status] :: StickerSetInfo -> Maybe Bool

-- | True for already viewed trending sticker sets
[is_viewed] :: StickerSetInfo -> Maybe Bool

-- | Total number of stickers in the set
[size] :: StickerSetInfo -> Maybe Int

-- | Up to the first 5 stickers from the set, depending on the context. If
--   the application needs more stickers the full sticker set needs to be
--   requested
[covers] :: StickerSetInfo -> Maybe [Sticker]
instance GHC.Show.Show TD.Data.StickerSetInfo.StickerSetInfo
instance GHC.Classes.Eq TD.Data.StickerSetInfo.StickerSetInfo
instance TD.Lib.Internal.ShortShow TD.Data.StickerSetInfo.StickerSetInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSetInfo.StickerSetInfo

module TD.Data.TrendingStickerSets
data TrendingStickerSets

-- | Represents a list of trending sticker sets
TrendingStickerSets :: Maybe Int -> Maybe [StickerSetInfo] -> Maybe Bool -> TrendingStickerSets

-- | Approximate total number of trending sticker sets
[total_count] :: TrendingStickerSets -> Maybe Int

-- | List of trending sticker sets
[sets] :: TrendingStickerSets -> Maybe [StickerSetInfo]

-- | True, if the list contains sticker sets with premium stickers
[is_premium] :: TrendingStickerSets -> Maybe Bool
instance GHC.Show.Show TD.Data.TrendingStickerSets.TrendingStickerSets
instance GHC.Classes.Eq TD.Data.TrendingStickerSets.TrendingStickerSets
instance TD.Lib.Internal.ShortShow TD.Data.TrendingStickerSets.TrendingStickerSets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TrendingStickerSets.TrendingStickerSets

module TD.Data.StickerSets
data StickerSets

-- | Represents a list of sticker sets
StickerSets :: Maybe Int -> Maybe [StickerSetInfo] -> StickerSets

-- | Approximate total number of sticker sets found
[total_count] :: StickerSets -> Maybe Int

-- | List of sticker sets
[sets] :: StickerSets -> Maybe [StickerSetInfo]
instance GHC.Show.Show TD.Data.StickerSets.StickerSets
instance GHC.Classes.Eq TD.Data.StickerSets.StickerSets
instance TD.Lib.Internal.ShortShow TD.Data.StickerSets.StickerSets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSets.StickerSets

module TD.Data.StickerSet
data StickerSet

-- | Represents a sticker set
StickerSet :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Thumbnail -> Maybe [ClosedVectorPath] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe StickerType -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [Sticker] -> Maybe [Emojis] -> StickerSet

-- | Identifier of the sticker set
[_id] :: StickerSet -> Maybe Int

-- | Title of the sticker set
[title] :: StickerSet -> Maybe Text

-- | Name of the sticker set
[name] :: StickerSet -> Maybe Text

-- | Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
--   height 100; may be null. The file can be downloaded only before the
--   thumbnail is changed
[thumbnail] :: StickerSet -> Maybe Thumbnail

-- | Sticker set thumbnail's outline represented as a list of closed vector
--   paths; may be empty. The coordinate system origin is in the upper-left
--   corner
[thumbnail_outline] :: StickerSet -> Maybe [ClosedVectorPath]

-- | True, if the sticker set is owned by the current user
[is_owned] :: StickerSet -> Maybe Bool

-- | True, if the sticker set has been installed by the current user
[is_installed] :: StickerSet -> Maybe Bool

-- | True, if the sticker set has been archived. A sticker set can't be
--   installed and archived simultaneously
[is_archived] :: StickerSet -> Maybe Bool

-- | True, if the sticker set is official
[is_official] :: StickerSet -> Maybe Bool

-- | Type of the stickers in the set
[sticker_type] :: StickerSet -> Maybe StickerType

-- | True, if stickers in the sticker set are custom emoji that must be
--   repainted; for custom emoji sticker sets only
[needs_repainting] :: StickerSet -> Maybe Bool

-- | True, if stickers in the sticker set are custom emoji that can be used
--   as chat emoji status; for custom emoji sticker sets only
[is_allowed_as_chat_emoji_status] :: StickerSet -> Maybe Bool

-- | True for already viewed trending sticker sets
[is_viewed] :: StickerSet -> Maybe Bool

-- | List of stickers in this set
[stickers] :: StickerSet -> Maybe [Sticker]

-- | A list of emoji corresponding to the stickers in the same order. The
--   list is only for informational purposes, because a sticker is always
--   sent with a fixed emoji from the corresponding Sticker object
[emojis] :: StickerSet -> Maybe [Emojis]
instance GHC.Show.Show TD.Data.StickerSet.StickerSet
instance GHC.Classes.Eq TD.Data.StickerSet.StickerSet
instance TD.Lib.Internal.ShortShow TD.Data.StickerSet.StickerSet
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StickerSet.StickerSet

module TD.Data.EmojiReaction
data EmojiReaction

-- | Contains information about an emoji reaction
EmojiReaction :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> EmojiReaction

-- | Text representation of the reaction
[emoji] :: EmojiReaction -> Maybe Text

-- | Reaction title
[title] :: EmojiReaction -> Maybe Text

-- | True, if the reaction can be added to new messages and enabled in
--   chats
[is_active] :: EmojiReaction -> Maybe Bool

-- | Static icon for the reaction
[static_icon] :: EmojiReaction -> Maybe Sticker

-- | Appear animation for the reaction
[appear_animation] :: EmojiReaction -> Maybe Sticker

-- | Select animation for the reaction
[select_animation] :: EmojiReaction -> Maybe Sticker

-- | Activate animation for the reaction
[activate_animation] :: EmojiReaction -> Maybe Sticker

-- | Effect animation for the reaction
[effect_animation] :: EmojiReaction -> Maybe Sticker

-- | Around animation for the reaction; may be null
[around_animation] :: EmojiReaction -> Maybe Sticker

-- | Center animation for the reaction; may be null
[center_animation] :: EmojiReaction -> Maybe Sticker
instance GHC.Show.Show TD.Data.EmojiReaction.EmojiReaction
instance GHC.Classes.Eq TD.Data.EmojiReaction.EmojiReaction
instance TD.Lib.Internal.ShortShow TD.Data.EmojiReaction.EmojiReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiReaction.EmojiReaction

module TD.Data.EmojiCategory
data EmojiCategory

-- | Describes an emoji category
EmojiCategory :: Maybe Text -> Maybe Sticker -> Maybe EmojiCategorySource -> Maybe Bool -> EmojiCategory

-- | Name of the category
[name] :: EmojiCategory -> Maybe Text

-- | Custom emoji sticker, which represents icon of the category
[icon] :: EmojiCategory -> Maybe Sticker

-- | Source of stickers for the emoji category
[source] :: EmojiCategory -> Maybe EmojiCategorySource

-- | True, if the category must be shown first when choosing a sticker for
--   the start page
[is_greeting] :: EmojiCategory -> Maybe Bool
instance GHC.Show.Show TD.Data.EmojiCategory.EmojiCategory
instance GHC.Classes.Eq TD.Data.EmojiCategory.EmojiCategory
instance TD.Lib.Internal.ShortShow TD.Data.EmojiCategory.EmojiCategory
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiCategory.EmojiCategory

module TD.Data.EmojiCategories
data EmojiCategories

-- | Represents a list of emoji categories
EmojiCategories :: Maybe [EmojiCategory] -> EmojiCategories

-- | List of categories
[categories] :: EmojiCategories -> Maybe [EmojiCategory]
instance GHC.Show.Show TD.Data.EmojiCategories.EmojiCategories
instance GHC.Classes.Eq TD.Data.EmojiCategories.EmojiCategories
instance TD.Lib.Internal.ShortShow TD.Data.EmojiCategories.EmojiCategories
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.EmojiCategories.EmojiCategories

module TD.Data.DiceStickers

-- | Contains animated stickers which must be used for dice animation
--   rendering
data DiceStickers

-- | A regular animated sticker
DiceStickersRegular :: Maybe Sticker -> DiceStickers

-- | The animated sticker with the dice animation
[sticker] :: DiceStickers -> Maybe Sticker

-- | Animated stickers to be combined into a slot machine
DiceStickersSlotMachine :: Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> Maybe Sticker -> DiceStickers

-- | The animated sticker with the slot machine background. The background
--   animation must start playing after all reel animations finish
[background] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the lever animation. The lever animation
--   must play once in the initial dice state
[lever] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the left reel
[left_reel] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the center reel
[center_reel] :: DiceStickers -> Maybe Sticker

-- | The animated sticker with the right reel
[right_reel] :: DiceStickers -> Maybe Sticker
instance GHC.Show.Show TD.Data.DiceStickers.DiceStickers
instance GHC.Classes.Eq TD.Data.DiceStickers.DiceStickers
instance TD.Lib.Internal.ShortShow TD.Data.DiceStickers.DiceStickers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.DiceStickers.DiceStickers

module TD.Data.CheckStickerSetNameResult

-- | Represents result of checking whether a name can be used for a new
--   sticker set
data CheckStickerSetNameResult

-- | The name can be set
CheckStickerSetNameResultOk :: CheckStickerSetNameResult

-- | The name is invalid
CheckStickerSetNameResultNameInvalid :: CheckStickerSetNameResult

-- | The name is occupied
CheckStickerSetNameResultNameOccupied :: CheckStickerSetNameResult
instance GHC.Show.Show TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance GHC.Classes.Eq TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance TD.Lib.Internal.ShortShow TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CheckStickerSetNameResult.CheckStickerSetNameResult

module TD.Data.CheckChatUsernameResult

-- | Represents result of checking whether a username can be set for a chat
data CheckChatUsernameResult

-- | The username can be set
CheckChatUsernameResultOk :: CheckChatUsernameResult

-- | The username is invalid
CheckChatUsernameResultUsernameInvalid :: CheckChatUsernameResult

-- | The username is occupied
CheckChatUsernameResultUsernameOccupied :: CheckChatUsernameResult

-- | The username can be purchased at <a>https://fragment.com</a>.
--   Information about the username can be received using
--   getCollectibleItemInfo
CheckChatUsernameResultUsernamePurchasable :: CheckChatUsernameResult

-- | The user has too many chats with username, one of them must be made
--   private first
CheckChatUsernameResultPublicChatsTooMany :: CheckChatUsernameResult

-- | The user can't be a member of a public supergroup
CheckChatUsernameResultPublicGroupsUnavailable :: CheckChatUsernameResult
instance GHC.Show.Show TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance GHC.Classes.Eq TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance TD.Lib.Internal.ShortShow TD.Data.CheckChatUsernameResult.CheckChatUsernameResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CheckChatUsernameResult.CheckChatUsernameResult

module TD.Data.Chats
data Chats

-- | Represents a list of chats
Chats :: Maybe Int -> Maybe [Int] -> Chats

-- | Approximate total number of chats found
[total_count] :: Chats -> Maybe Int

-- | List of chat identifiers
[chat_ids] :: Chats -> Maybe [Int]
instance GHC.Show.Show TD.Data.Chats.Chats
instance GHC.Classes.Eq TD.Data.Chats.Chats
instance TD.Lib.Internal.ShortShow TD.Data.Chats.Chats
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Chats.Chats

module TD.Data.ChatType

-- | Describes the type of chat
data ChatType

-- | An ordinary chat with a user
ChatTypePrivate :: Maybe Int -> ChatType

-- | User identifier
[user_id] :: ChatType -> Maybe Int

-- | A basic group (a chat with 0-200 other users)
ChatTypeBasicGroup :: Maybe Int -> ChatType

-- | Basic group identifier
[basic_group_id] :: ChatType -> Maybe Int

-- | A supergroup or channel (with unlimited members)
ChatTypeSupergroup :: Maybe Int -> Maybe Bool -> ChatType

-- | Supergroup or channel identifier
[supergroup_id] :: ChatType -> Maybe Int

-- | True, if the supergroup is a channel
[is_channel] :: ChatType -> Maybe Bool

-- | A secret chat with a user
ChatTypeSecret :: Maybe Int -> Maybe Int -> ChatType

-- | Secret chat identifier
[secret_chat_id] :: ChatType -> Maybe Int

-- | User identifier
[user_id] :: ChatType -> Maybe Int
instance GHC.Show.Show TD.Data.ChatType.ChatType
instance GHC.Classes.Eq TD.Data.ChatType.ChatType
instance TD.Lib.Internal.ShortShow TD.Data.ChatType.ChatType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatType.ChatType

module TD.Data.ChatStatisticsObjectType

-- | Describes type of object, for which statistics are provided
data ChatStatisticsObjectType

-- | Describes a message sent in the chat
ChatStatisticsObjectTypeMessage :: Maybe Int -> ChatStatisticsObjectType

-- | Message identifier
[message_id] :: ChatStatisticsObjectType -> Maybe Int

-- | Describes a story sent by the chat
ChatStatisticsObjectTypeStory :: Maybe Int -> ChatStatisticsObjectType

-- | Story identifier
[story_id] :: ChatStatisticsObjectType -> Maybe Int
instance GHC.Show.Show TD.Data.ChatStatisticsObjectType.ChatStatisticsObjectType
instance GHC.Classes.Eq TD.Data.ChatStatisticsObjectType.ChatStatisticsObjectType
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatisticsObjectType.ChatStatisticsObjectType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsObjectType.ChatStatisticsObjectType

module TD.Data.ChatStatisticsMessageSenderInfo
data ChatStatisticsMessageSenderInfo

-- | Contains statistics about messages sent by a user
ChatStatisticsMessageSenderInfo :: Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsMessageSenderInfo

-- | User identifier
[user_id] :: ChatStatisticsMessageSenderInfo -> Maybe Int

-- | Number of sent messages
[sent_message_count] :: ChatStatisticsMessageSenderInfo -> Maybe Int

-- | Average number of characters in sent messages; 0 if unknown
[average_character_count] :: ChatStatisticsMessageSenderInfo -> Maybe Int
instance GHC.Show.Show TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance GHC.Classes.Eq TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsMessageSenderInfo.ChatStatisticsMessageSenderInfo

module TD.Data.ChatStatisticsInviterInfo
data ChatStatisticsInviterInfo

-- | Contains statistics about number of new members invited by a user
ChatStatisticsInviterInfo :: Maybe Int -> Maybe Int -> ChatStatisticsInviterInfo

-- | User identifier
[user_id] :: ChatStatisticsInviterInfo -> Maybe Int

-- | Number of new members invited by the user
[added_member_count] :: ChatStatisticsInviterInfo -> Maybe Int
instance GHC.Show.Show TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance GHC.Classes.Eq TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsInviterInfo.ChatStatisticsInviterInfo

module TD.Data.ChatStatisticsInteractionInfo
data ChatStatisticsInteractionInfo

-- | Contains statistics about interactions with a message sent in the chat
--   or a story sent by the chat
ChatStatisticsInteractionInfo :: Maybe ChatStatisticsObjectType -> Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsInteractionInfo

-- | Type of the object
[object_type] :: ChatStatisticsInteractionInfo -> Maybe ChatStatisticsObjectType

-- | Number of times the object was viewed
[view_count] :: ChatStatisticsInteractionInfo -> Maybe Int

-- | Number of times the object was forwarded
[forward_count] :: ChatStatisticsInteractionInfo -> Maybe Int

-- | Number of times reactions were added to the object
[reaction_count] :: ChatStatisticsInteractionInfo -> Maybe Int
instance GHC.Show.Show TD.Data.ChatStatisticsInteractionInfo.ChatStatisticsInteractionInfo
instance GHC.Classes.Eq TD.Data.ChatStatisticsInteractionInfo.ChatStatisticsInteractionInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatisticsInteractionInfo.ChatStatisticsInteractionInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsInteractionInfo.ChatStatisticsInteractionInfo

module TD.Data.ChatStatisticsAdministratorActionsInfo
data ChatStatisticsAdministratorActionsInfo

-- | Contains statistics about administrator actions done by a user
ChatStatisticsAdministratorActionsInfo :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatStatisticsAdministratorActionsInfo

-- | Administrator user identifier
[user_id] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Number of messages deleted by the administrator
[deleted_message_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Number of users banned by the administrator
[banned_user_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int

-- | Number of users restricted by the administrator
[restricted_user_count] :: ChatStatisticsAdministratorActionsInfo -> Maybe Int
instance GHC.Show.Show TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance GHC.Classes.Eq TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatisticsAdministratorActionsInfo.ChatStatisticsAdministratorActionsInfo

module TD.Data.ChatStatistics

-- | Contains a detailed statistics about a chat
data ChatStatistics

-- | A detailed statistics about a supergroup chat
ChatStatisticsSupergroup :: Maybe DateRange -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe [ChatStatisticsMessageSenderInfo] -> Maybe [ChatStatisticsAdministratorActionsInfo] -> Maybe [ChatStatisticsInviterInfo] -> ChatStatistics

-- | A period to which the statistics applies
[period] :: ChatStatistics -> Maybe DateRange

-- | Number of members in the chat
[member_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of messages sent to the chat
[message_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of users who viewed messages in the chat
[viewer_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Number of users who sent messages to the chat
[sender_count] :: ChatStatistics -> Maybe StatisticalValue

-- | A graph containing number of members in the chat
[member_count_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members joined and left the chat
[join_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of new member joins per source
[join_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of active users per language
[language_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of sent messages by content type
[message_content_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of different actions in the chat
[action_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of message views per hour
[day_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of message views per day of week
[week_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | List of users sent most messages in the last week
[top_senders] :: ChatStatistics -> Maybe [ChatStatisticsMessageSenderInfo]

-- | List of most active administrators in the last week
[top_administrators] :: ChatStatistics -> Maybe [ChatStatisticsAdministratorActionsInfo]

-- | List of most active inviters of new members in the last week
[top_inviters] :: ChatStatistics -> Maybe [ChatStatisticsInviterInfo]

-- | A detailed statistics about a channel chat
ChatStatisticsChannel :: Maybe DateRange -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe StatisticalValue -> Maybe Double -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe [ChatStatisticsInteractionInfo] -> ChatStatistics

-- | A period to which the statistics applies
[period] :: ChatStatistics -> Maybe DateRange

-- | Number of members in the chat
[member_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times the recently sent messages were viewed
[mean_message_view_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times the recently sent messages were shared
[mean_message_share_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times reactions were added to the recently sent
--   messages
[mean_message_reaction_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times the recently sent stories were viewed
[mean_story_view_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times the recently sent stories were shared
[mean_story_share_count] :: ChatStatistics -> Maybe StatisticalValue

-- | Mean number of times reactions were added to the recently sent stories
[mean_story_reaction_count] :: ChatStatistics -> Maybe StatisticalValue

-- | A percentage of users with enabled notifications for the chat; 0-100
[enabled_notifications_percentage] :: ChatStatistics -> Maybe Double

-- | A graph containing number of members in the chat
[member_count_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members joined and left the chat
[join_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of members muted and unmuted the chat
[mute_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of message views in a given hour in the last
--   two weeks
[view_count_by_hour_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of message views per source
[view_count_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of new member joins per source
[join_by_source_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing distribution of active users per language
[language_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of chat message views and shares
[message_interaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of reactions on messages
[message_reaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of story views and shares
[story_interaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of reactions on stories
[story_reaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | A graph containing number of views of associated with the chat instant
--   views
[instant_view_interaction_graph] :: ChatStatistics -> Maybe StatisticalGraph

-- | Detailed statistics about number of views and shares of recently sent
--   messages and stories
[recent_interactions] :: ChatStatistics -> Maybe [ChatStatisticsInteractionInfo]
instance GHC.Show.Show TD.Data.ChatStatistics.ChatStatistics
instance GHC.Classes.Eq TD.Data.ChatStatistics.ChatStatistics
instance TD.Lib.Internal.ShortShow TD.Data.ChatStatistics.ChatStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatStatistics.ChatStatistics

module TD.Data.ChatSource

-- | Describes a reason why an external chat is shown in a chat list
data ChatSource

-- | The chat is sponsored by the user's MTProxy server
ChatSourceMtprotoProxy :: ChatSource

-- | The chat contains a public service announcement
ChatSourcePublicServiceAnnouncement :: Maybe Text -> Maybe Text -> ChatSource

-- | The type of the announcement
[_type] :: ChatSource -> Maybe Text

-- | The text of the announcement
[text] :: ChatSource -> Maybe Text
instance GHC.Show.Show TD.Data.ChatSource.ChatSource
instance GHC.Classes.Eq TD.Data.ChatSource.ChatSource
instance TD.Lib.Internal.ShortShow TD.Data.ChatSource.ChatSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatSource.ChatSource

module TD.Data.ChatRevenueWithdrawalState

-- | Describes state of a chat revenue withdrawal
data ChatRevenueWithdrawalState

-- | Withdrawal is pending
ChatRevenueWithdrawalStatePending :: ChatRevenueWithdrawalState

-- | Withdrawal was completed
ChatRevenueWithdrawalStateCompleted :: Maybe Int -> Maybe Text -> ChatRevenueWithdrawalState

-- | Point in time (Unix timestamp) when the withdrawal was completed
[date] :: ChatRevenueWithdrawalState -> Maybe Int

-- | The URL where the withdrawal transaction can be viewed
[url] :: ChatRevenueWithdrawalState -> Maybe Text

-- | Withdrawal has_failed
ChatRevenueWithdrawalStateFailed :: ChatRevenueWithdrawalState
instance GHC.Show.Show TD.Data.ChatRevenueWithdrawalState.ChatRevenueWithdrawalState
instance GHC.Classes.Eq TD.Data.ChatRevenueWithdrawalState.ChatRevenueWithdrawalState
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueWithdrawalState.ChatRevenueWithdrawalState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueWithdrawalState.ChatRevenueWithdrawalState

module TD.Data.ChatRevenueTransactionType

-- | Describes type of transaction for revenue earned from sponsored
--   messages in a chat
data ChatRevenueTransactionType

-- | Describes earnings from sponsored messages in a chat in some time
--   frame
ChatRevenueTransactionTypeEarnings :: Maybe Int -> Maybe Int -> ChatRevenueTransactionType

-- | Point in time (Unix timestamp) when the earnings started
[start_date] :: ChatRevenueTransactionType -> Maybe Int

-- | Point in time (Unix timestamp) when the earnings ended
[end_date] :: ChatRevenueTransactionType -> Maybe Int

-- | Describes a withdrawal of earnings
ChatRevenueTransactionTypeWithdrawal :: Maybe Int -> Maybe Text -> Maybe ChatRevenueWithdrawalState -> ChatRevenueTransactionType

-- | Point in time (Unix timestamp) when the earnings withdrawal started
[withdrawal_date] :: ChatRevenueTransactionType -> Maybe Int

-- | Name of the payment provider
[provider] :: ChatRevenueTransactionType -> Maybe Text

-- | State of the withdrawal
[state] :: ChatRevenueTransactionType -> Maybe ChatRevenueWithdrawalState

-- | Describes a refund for failed withdrawal of earnings
ChatRevenueTransactionTypeRefund :: Maybe Int -> Maybe Text -> ChatRevenueTransactionType

-- | Point in time (Unix timestamp) when the transaction was refunded
[refund_date] :: ChatRevenueTransactionType -> Maybe Int

-- | Name of the payment provider
[provider] :: ChatRevenueTransactionType -> Maybe Text
instance GHC.Show.Show TD.Data.ChatRevenueTransactionType.ChatRevenueTransactionType
instance GHC.Classes.Eq TD.Data.ChatRevenueTransactionType.ChatRevenueTransactionType
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueTransactionType.ChatRevenueTransactionType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueTransactionType.ChatRevenueTransactionType

module TD.Data.ChatRevenueTransaction
data ChatRevenueTransaction

-- | Contains a chat revenue transactions
ChatRevenueTransaction :: Maybe Text -> Maybe Int -> Maybe ChatRevenueTransactionType -> ChatRevenueTransaction

-- | Cryptocurrency in which revenue is calculated
[cryptocurrency] :: ChatRevenueTransaction -> Maybe Text

-- | The withdrawn amount, in the smallest units of the cryptocurrency
[cryptocurrency_amount] :: ChatRevenueTransaction -> Maybe Int

-- | Type of the transaction
[_type] :: ChatRevenueTransaction -> Maybe ChatRevenueTransactionType
instance GHC.Show.Show TD.Data.ChatRevenueTransaction.ChatRevenueTransaction
instance GHC.Classes.Eq TD.Data.ChatRevenueTransaction.ChatRevenueTransaction
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueTransaction.ChatRevenueTransaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueTransaction.ChatRevenueTransaction

module TD.Data.ChatRevenueTransactions
data ChatRevenueTransactions

-- | Contains a list of chat revenue transactions
ChatRevenueTransactions :: Maybe Int -> Maybe [ChatRevenueTransaction] -> ChatRevenueTransactions

-- | Total number of transactions
[total_count] :: ChatRevenueTransactions -> Maybe Int

-- | List of transactions
[transactions] :: ChatRevenueTransactions -> Maybe [ChatRevenueTransaction]
instance GHC.Show.Show TD.Data.ChatRevenueTransactions.ChatRevenueTransactions
instance GHC.Classes.Eq TD.Data.ChatRevenueTransactions.ChatRevenueTransactions
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueTransactions.ChatRevenueTransactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueTransactions.ChatRevenueTransactions

module TD.Data.ChatRevenueAmount
data ChatRevenueAmount

-- | Contains information about revenue earned from sponsored messages in a
--   chat
ChatRevenueAmount :: Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> ChatRevenueAmount

-- | Cryptocurrency in which revenue is calculated
[cryptocurrency] :: ChatRevenueAmount -> Maybe Text

-- | Total amount of the cryptocurrency earned, in the smallest units of
--   the cryptocurrency
[total_amount] :: ChatRevenueAmount -> Maybe Int

-- | Amount of the cryptocurrency that isn't withdrawn yet, in the smallest
--   units of the cryptocurrency
[balance_amount] :: ChatRevenueAmount -> Maybe Int

-- | Amount of the cryptocurrency available for withdrawal, in the smallest
--   units of the cryptocurrency
[available_amount] :: ChatRevenueAmount -> Maybe Int
instance GHC.Show.Show TD.Data.ChatRevenueAmount.ChatRevenueAmount
instance GHC.Classes.Eq TD.Data.ChatRevenueAmount.ChatRevenueAmount
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueAmount.ChatRevenueAmount
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueAmount.ChatRevenueAmount

module TD.Data.ChatRevenueStatistics
data ChatRevenueStatistics

-- | A detailed statistics about revenue earned from sponsored messages in
--   a chat
ChatRevenueStatistics :: Maybe StatisticalGraph -> Maybe StatisticalGraph -> Maybe ChatRevenueAmount -> Maybe Double -> ChatRevenueStatistics

-- | A graph containing amount of revenue in a given hour
[revenue_by_hour_graph] :: ChatRevenueStatistics -> Maybe StatisticalGraph

-- | A graph containing amount of revenue
[revenue_graph] :: ChatRevenueStatistics -> Maybe StatisticalGraph

-- | Amount of earned revenue
[revenue_amount] :: ChatRevenueStatistics -> Maybe ChatRevenueAmount

-- | Current conversion rate of the cryptocurrency in which revenue is
--   calculated to USD
[usd_rate] :: ChatRevenueStatistics -> Maybe Double
instance GHC.Show.Show TD.Data.ChatRevenueStatistics.ChatRevenueStatistics
instance GHC.Classes.Eq TD.Data.ChatRevenueStatistics.ChatRevenueStatistics
instance TD.Lib.Internal.ShortShow TD.Data.ChatRevenueStatistics.ChatRevenueStatistics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatRevenueStatistics.ChatRevenueStatistics

module TD.Data.ChatPhotoStickerType

-- | Describes type of sticker, which was used to create a chat photo
data ChatPhotoStickerType

-- | Information about the sticker, which was used to create the chat photo
ChatPhotoStickerTypeRegularOrMask :: Maybe Int -> Maybe Int -> ChatPhotoStickerType

-- | Sticker set identifier
[sticker_set_id] :: ChatPhotoStickerType -> Maybe Int

-- | Identifier of the sticker in the set
[sticker_id] :: ChatPhotoStickerType -> Maybe Int

-- | Information about the custom emoji, which was used to create the chat
--   photo
ChatPhotoStickerTypeCustomEmoji :: Maybe Int -> ChatPhotoStickerType

-- | Identifier of the custom emoji
[custom_emoji_id] :: ChatPhotoStickerType -> Maybe Int
instance GHC.Show.Show TD.Data.ChatPhotoStickerType.ChatPhotoStickerType
instance GHC.Classes.Eq TD.Data.ChatPhotoStickerType.ChatPhotoStickerType
instance TD.Lib.Internal.ShortShow TD.Data.ChatPhotoStickerType.ChatPhotoStickerType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotoStickerType.ChatPhotoStickerType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPhotoStickerType.ChatPhotoStickerType

module TD.Data.ChatPhotoInfo
data ChatPhotoInfo

-- | Contains basic information about the photo of a chat
ChatPhotoInfo :: Maybe File -> Maybe File -> Maybe Minithumbnail -> Maybe Bool -> Maybe Bool -> ChatPhotoInfo

-- | A small (160x160) chat photo variant in JPEG format. The file can be
--   downloaded only before the photo is changed
[small] :: ChatPhotoInfo -> Maybe File

-- | A big (640x640) chat photo variant in JPEG format. The file can be
--   downloaded only before the photo is changed
[big] :: ChatPhotoInfo -> Maybe File

-- | Chat photo minithumbnail; may be null
[minithumbnail] :: ChatPhotoInfo -> Maybe Minithumbnail

-- | True, if the photo has animated variant
[has_animation] :: ChatPhotoInfo -> Maybe Bool

-- | True, if the photo is visible only for the current user
[is_personal] :: ChatPhotoInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance GHC.Classes.Eq TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatPhotoInfo.ChatPhotoInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotoInfo.ChatPhotoInfo

module TD.Data.ChatPermissions
data ChatPermissions

-- | Describes actions that a user is allowed to take in a chat
ChatPermissions :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatPermissions

-- | True, if the user can send text messages, contacts, giveaways,
--   giveaway winners, invoices, locations, and venues
[can_send_basic_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send music files
[can_send_audios] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send documents
[can_send_documents] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send photos
[can_send_photos] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send videos
[can_send_videos] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send video notes
[can_send_video_notes] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send voice notes
[can_send_voice_notes] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send polls
[can_send_polls] :: ChatPermissions -> Maybe Bool

-- | True, if the user can send animations, games, stickers, and dice and
--   use inline bots
[can_send_other_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user may add a web page preview to their messages
[can_add_web_page_previews] :: ChatPermissions -> Maybe Bool

-- | True, if the user can change the chat title, photo, and other settings
[can_change_info] :: ChatPermissions -> Maybe Bool

-- | True, if the user can invite new users to the chat
[can_invite_users] :: ChatPermissions -> Maybe Bool

-- | True, if the user can pin messages
[can_pin_messages] :: ChatPermissions -> Maybe Bool

-- | True, if the user can create topics
[can_create_topics] :: ChatPermissions -> Maybe Bool
defaultChatPermissions :: ChatPermissions
instance GHC.Show.Show TD.Data.ChatPermissions.ChatPermissions
instance GHC.Classes.Eq TD.Data.ChatPermissions.ChatPermissions
instance TD.Lib.Internal.ShortShow TD.Data.ChatPermissions.ChatPermissions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPermissions.ChatPermissions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPermissions.ChatPermissions

module TD.Data.ChatNotificationSettings
data ChatNotificationSettings

-- | Contains information about notification settings for a chat or a forum
--   topic
ChatNotificationSettings :: Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatNotificationSettings

-- | If true, the value for the relevant type of chat or the forum chat is
--   used instead of mute_for
[use_default_mute_for] :: ChatNotificationSettings -> Maybe Bool

-- | Time left before notifications will be unmuted, in seconds
[mute_for] :: ChatNotificationSettings -> Maybe Int

-- | If true, the value for the relevant type of chat or the forum chat is
--   used instead of sound_id
[use_default_sound] :: ChatNotificationSettings -> Maybe Bool

-- | Identifier of the notification sound to be played for messages; 0 if
--   sound is disabled
[sound_id] :: ChatNotificationSettings -> Maybe Int

-- | If true, the value for the relevant type of chat or the forum chat is
--   used instead of show_preview
[use_default_show_preview] :: ChatNotificationSettings -> Maybe Bool

-- | True, if message content must be displayed in notifications
[show_preview] :: ChatNotificationSettings -> Maybe Bool

-- | If true, the value for the relevant type of chat is used instead of
--   mute_stories
[use_default_mute_stories] :: ChatNotificationSettings -> Maybe Bool

-- | True, if story notifications are disabled for the chat
[mute_stories] :: ChatNotificationSettings -> Maybe Bool

-- | If true, the value for the relevant type of chat is used instead of
--   story_sound_id
[use_default_story_sound] :: ChatNotificationSettings -> Maybe Bool

-- | Identifier of the notification sound to be played for stories; 0 if
--   sound is disabled
[story_sound_id] :: ChatNotificationSettings -> Maybe Int

-- | If true, the value for the relevant type of chat is used instead of
--   show_story_sender
[use_default_show_story_sender] :: ChatNotificationSettings -> Maybe Bool

-- | True, if the sender of stories must be displayed in notifications
[show_story_sender] :: ChatNotificationSettings -> Maybe Bool

-- | If true, the value for the relevant type of chat or the forum chat is
--   used instead of disable_pinned_message_notifications
[use_default_disable_pinned_message_notifications] :: ChatNotificationSettings -> Maybe Bool

-- | If true, notifications for incoming pinned messages will be created as
--   for an ordinary unread message
[disable_pinned_message_notifications] :: ChatNotificationSettings -> Maybe Bool

-- | If true, the value for the relevant type of chat or the forum chat is
--   used instead of disable_mention_notifications
[use_default_disable_mention_notifications] :: ChatNotificationSettings -> Maybe Bool

-- | If true, notifications for messages with mentions will be created as
--   for an ordinary unread message
[disable_mention_notifications] :: ChatNotificationSettings -> Maybe Bool
defaultChatNotificationSettings :: ChatNotificationSettings
instance GHC.Show.Show TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance GHC.Classes.Eq TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatNotificationSettings.ChatNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatNotificationSettings.ChatNotificationSettings

module TD.Data.ChatNearby
data ChatNearby

-- | Describes a chat located nearby
ChatNearby :: Maybe Int -> Maybe Int -> ChatNearby

-- | Chat identifier
[chat_id] :: ChatNearby -> Maybe Int

-- | Distance to the chat location, in meters
[distance] :: ChatNearby -> Maybe Int
instance GHC.Show.Show TD.Data.ChatNearby.ChatNearby
instance GHC.Classes.Eq TD.Data.ChatNearby.ChatNearby
instance TD.Lib.Internal.ShortShow TD.Data.ChatNearby.ChatNearby
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatNearby.ChatNearby

module TD.Data.ChatsNearby
data ChatsNearby

-- | Represents a list of chats located nearby
ChatsNearby :: Maybe [ChatNearby] -> Maybe [ChatNearby] -> ChatsNearby

-- | List of users nearby
[users_nearby] :: ChatsNearby -> Maybe [ChatNearby]

-- | List of location-based supergroups nearby
[supergroups_nearby] :: ChatsNearby -> Maybe [ChatNearby]
instance GHC.Show.Show TD.Data.ChatsNearby.ChatsNearby
instance GHC.Classes.Eq TD.Data.ChatsNearby.ChatsNearby
instance TD.Lib.Internal.ShortShow TD.Data.ChatsNearby.ChatsNearby
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatsNearby.ChatsNearby

module TD.Data.ChatMessageSender
data ChatMessageSender

-- | Represents a message sender, which can be used to send messages in a
--   chat
ChatMessageSender :: Maybe MessageSender -> Maybe Bool -> ChatMessageSender

-- | The message sender
[sender] :: ChatMessageSender -> Maybe MessageSender

-- | True, if Telegram Premium is needed to use the message sender
[needs_premium] :: ChatMessageSender -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatMessageSender.ChatMessageSender
instance GHC.Classes.Eq TD.Data.ChatMessageSender.ChatMessageSender
instance TD.Lib.Internal.ShortShow TD.Data.ChatMessageSender.ChatMessageSender
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMessageSender.ChatMessageSender

module TD.Data.ChatMessageSenders
data ChatMessageSenders

-- | Represents a list of message senders, which can be used to send
--   messages in a chat
ChatMessageSenders :: Maybe [ChatMessageSender] -> ChatMessageSenders

-- | List of available message senders
[senders] :: ChatMessageSenders -> Maybe [ChatMessageSender]
instance GHC.Show.Show TD.Data.ChatMessageSenders.ChatMessageSenders
instance GHC.Classes.Eq TD.Data.ChatMessageSenders.ChatMessageSenders
instance TD.Lib.Internal.ShortShow TD.Data.ChatMessageSenders.ChatMessageSenders
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMessageSenders.ChatMessageSenders

module TD.Data.ChatMembersFilter

-- | Specifies the kind of chat members to return in searchChatMembers
data ChatMembersFilter

-- | Returns contacts of the user
ChatMembersFilterContacts :: ChatMembersFilter

-- | Returns the owner and administrators
ChatMembersFilterAdministrators :: ChatMembersFilter

-- | Returns all chat members, including restricted chat members
ChatMembersFilterMembers :: ChatMembersFilter

-- | Returns users which can be mentioned in the chat
ChatMembersFilterMention :: Maybe Int -> ChatMembersFilter

-- | If non-zero, the identifier of the current message thread
[message_thread_id] :: ChatMembersFilter -> Maybe Int

-- | Returns users under certain restrictions in the chat; can be used only
--   by administrators in a supergroup
ChatMembersFilterRestricted :: ChatMembersFilter

-- | Returns users banned from the chat; can be used only by administrators
--   in a supergroup or in a channel
ChatMembersFilterBanned :: ChatMembersFilter

-- | Returns bot members of the chat
ChatMembersFilterBots :: ChatMembersFilter
instance GHC.Show.Show TD.Data.ChatMembersFilter.ChatMembersFilter
instance GHC.Classes.Eq TD.Data.ChatMembersFilter.ChatMembersFilter
instance TD.Lib.Internal.ShortShow TD.Data.ChatMembersFilter.ChatMembersFilter
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMembersFilter.ChatMembersFilter
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMembersFilter.ChatMembersFilter

module TD.Data.ChatLocation
data ChatLocation

-- | Represents a location to which a chat is connected
ChatLocation :: Maybe Location -> Maybe Text -> ChatLocation

-- | The location
[location] :: ChatLocation -> Maybe Location

-- | Location address; 1-64 characters, as defined by the chat owner
[address] :: ChatLocation -> Maybe Text
defaultChatLocation :: ChatLocation
instance GHC.Show.Show TD.Data.ChatLocation.ChatLocation
instance GHC.Classes.Eq TD.Data.ChatLocation.ChatLocation
instance TD.Lib.Internal.ShortShow TD.Data.ChatLocation.ChatLocation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatLocation.ChatLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatLocation.ChatLocation

module TD.Data.ChatList

-- | Describes a list of chats
data ChatList

-- | A main list of chats
ChatListMain :: ChatList

-- | A list of chats usually located at the top of the main chat list.
--   Unmuted chats are automatically moved from the Archive to the Main
--   chat list when a new message arrives
ChatListArchive :: ChatList

-- | A list of chats added to a chat folder
ChatListFolder :: Maybe Int -> ChatList

-- | Chat folder identifier
[chat_folder_id] :: ChatList -> Maybe Int
instance GHC.Show.Show TD.Data.ChatList.ChatList
instance GHC.Classes.Eq TD.Data.ChatList.ChatList
instance TD.Lib.Internal.ShortShow TD.Data.ChatList.ChatList
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatList.ChatList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatList.ChatList

module TD.Data.ChatPosition
data ChatPosition

-- | Describes a position of a chat in a chat list
ChatPosition :: Maybe ChatList -> Maybe Int -> Maybe Bool -> Maybe ChatSource -> ChatPosition

-- | The chat list
[list] :: ChatPosition -> Maybe ChatList

-- | A parameter used to determine order of the chat in the chat list.
--   Chats must be sorted by the pair (order, chat.id) in descending order
[order] :: ChatPosition -> Maybe Int

-- | True, if the chat is pinned in the chat list
[is_pinned] :: ChatPosition -> Maybe Bool

-- | Source of the chat in the chat list; may be null
[source] :: ChatPosition -> Maybe ChatSource
instance GHC.Show.Show TD.Data.ChatPosition.ChatPosition
instance GHC.Classes.Eq TD.Data.ChatPosition.ChatPosition
instance TD.Lib.Internal.ShortShow TD.Data.ChatPosition.ChatPosition
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPosition.ChatPosition

module TD.Data.ChatLists
data ChatLists

-- | Contains a list of chat lists
ChatLists :: Maybe [ChatList] -> ChatLists

-- | List of chat lists
[chat_lists] :: ChatLists -> Maybe [ChatList]
instance GHC.Show.Show TD.Data.ChatLists.ChatLists
instance GHC.Classes.Eq TD.Data.ChatLists.ChatLists
instance TD.Lib.Internal.ShortShow TD.Data.ChatLists.ChatLists
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatLists.ChatLists

module TD.Data.ChatJoinRequestsInfo
data ChatJoinRequestsInfo

-- | Contains information about pending join requests for a chat
ChatJoinRequestsInfo :: Maybe Int -> Maybe [Int] -> ChatJoinRequestsInfo

-- | Total number of pending join requests
[total_count] :: ChatJoinRequestsInfo -> Maybe Int

-- | Identifiers of at most 3 users sent the newest pending join requests
[user_ids] :: ChatJoinRequestsInfo -> Maybe [Int]
instance GHC.Show.Show TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance GHC.Classes.Eq TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequestsInfo.ChatJoinRequestsInfo

module TD.Data.ChatJoinRequest
data ChatJoinRequest

-- | Describes a user that sent a join request and waits for administrator
--   approval
ChatJoinRequest :: Maybe Int -> Maybe Int -> Maybe Text -> ChatJoinRequest

-- | User identifier
[user_id] :: ChatJoinRequest -> Maybe Int

-- | Point in time (Unix timestamp) when the user sent the join request
[date] :: ChatJoinRequest -> Maybe Int

-- | A short bio of the user
[bio] :: ChatJoinRequest -> Maybe Text
defaultChatJoinRequest :: ChatJoinRequest
instance GHC.Show.Show TD.Data.ChatJoinRequest.ChatJoinRequest
instance GHC.Classes.Eq TD.Data.ChatJoinRequest.ChatJoinRequest
instance TD.Lib.Internal.ShortShow TD.Data.ChatJoinRequest.ChatJoinRequest
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequest.ChatJoinRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatJoinRequest.ChatJoinRequest

module TD.Data.ChatJoinRequests
data ChatJoinRequests

-- | Contains a list of requests to join a chat
ChatJoinRequests :: Maybe Int -> Maybe [ChatJoinRequest] -> ChatJoinRequests

-- | Approximate total number of requests found
[total_count] :: ChatJoinRequests -> Maybe Int

-- | List of the requests
[requests] :: ChatJoinRequests -> Maybe [ChatJoinRequest]
instance GHC.Show.Show TD.Data.ChatJoinRequests.ChatJoinRequests
instance GHC.Classes.Eq TD.Data.ChatJoinRequests.ChatJoinRequests
instance TD.Lib.Internal.ShortShow TD.Data.ChatJoinRequests.ChatJoinRequests
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatJoinRequests.ChatJoinRequests

module TD.Data.ChatInviteLinkMember
data ChatInviteLinkMember

-- | Describes a chat member joined a chat via an invite link
ChatInviteLinkMember :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> ChatInviteLinkMember

-- | User identifier
[user_id] :: ChatInviteLinkMember -> Maybe Int

-- | Point in time (Unix timestamp) when the user joined the chat
[joined_chat_date] :: ChatInviteLinkMember -> Maybe Int

-- | True, if the user has joined the chat using an invite link for a chat
--   folder
[via_chat_folder_invite_link] :: ChatInviteLinkMember -> Maybe Bool

-- | User identifier of the chat administrator, approved user join request
[approver_user_id] :: ChatInviteLinkMember -> Maybe Int
defaultChatInviteLinkMember :: ChatInviteLinkMember
instance GHC.Show.Show TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance GHC.Classes.Eq TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkMember.ChatInviteLinkMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatInviteLinkMember.ChatInviteLinkMember

module TD.Data.ChatInviteLinkMembers
data ChatInviteLinkMembers

-- | Contains a list of chat members joined a chat via an invite link
ChatInviteLinkMembers :: Maybe Int -> Maybe [ChatInviteLinkMember] -> ChatInviteLinkMembers

-- | Approximate total number of chat members found
[total_count] :: ChatInviteLinkMembers -> Maybe Int

-- | List of chat members, joined a chat via an invite link
[members] :: ChatInviteLinkMembers -> Maybe [ChatInviteLinkMember]
instance GHC.Show.Show TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance GHC.Classes.Eq TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkMembers.ChatInviteLinkMembers

module TD.Data.ChatInviteLinkInfo
data ChatInviteLinkInfo

-- | Contains information about a chat invite link
ChatInviteLinkInfo :: Maybe Int -> Maybe Int -> Maybe InviteLinkChatType -> Maybe Text -> Maybe ChatPhotoInfo -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatInviteLinkInfo

-- | Chat identifier of the invite link; 0 if the user has no access to the
--   chat before joining
[chat_id] :: ChatInviteLinkInfo -> Maybe Int

-- | If non-zero, the amount of time for which read access to the chat will
--   remain available, in seconds
[accessible_for] :: ChatInviteLinkInfo -> Maybe Int

-- | Type of the chat
[_type] :: ChatInviteLinkInfo -> Maybe InviteLinkChatType

-- | Title of the chat
[title] :: ChatInviteLinkInfo -> Maybe Text

-- | Chat photo; may be null
[photo] :: ChatInviteLinkInfo -> Maybe ChatPhotoInfo

-- | Identifier of the accent color for chat title and background of chat
--   photo
[accent_color_id] :: ChatInviteLinkInfo -> Maybe Int
[description] :: ChatInviteLinkInfo -> Maybe Text

-- | Number of members in the chat
[member_count] :: ChatInviteLinkInfo -> Maybe Int

-- | User identifiers of some chat members that may be known to the current
--   user
[member_user_ids] :: ChatInviteLinkInfo -> Maybe [Int]

-- | True, if the link only creates join request
[creates_join_request] :: ChatInviteLinkInfo -> Maybe Bool

-- | True, if the chat is a public supergroup or channel, i.e. it has a
--   username or it is a location-based supergroup
[is_public] :: ChatInviteLinkInfo -> Maybe Bool

-- | True, if the chat is verified
[is_verified] :: ChatInviteLinkInfo -> Maybe Bool

-- | True, if many users reported this chat as a scam
[is_scam] :: ChatInviteLinkInfo -> Maybe Bool

-- | True, if many users reported this chat as a fake account
[is_fake] :: ChatInviteLinkInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance GHC.Classes.Eq TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkInfo.ChatInviteLinkInfo

module TD.Data.TMeUrlType

-- | Describes the type of URL linking to an internal Telegram entity
data TMeUrlType

-- | A URL linking to a user
TMeUrlTypeUser :: Maybe Int -> TMeUrlType

-- | Identifier of the user
[user_id] :: TMeUrlType -> Maybe Int

-- | A URL linking to a public supergroup or channel
TMeUrlTypeSupergroup :: Maybe Int -> TMeUrlType

-- | Identifier of the supergroup or channel
[supergroup_id] :: TMeUrlType -> Maybe Int

-- | A chat invite link
TMeUrlTypeChatInvite :: Maybe ChatInviteLinkInfo -> TMeUrlType

-- | Information about the chat invite link
[info] :: TMeUrlType -> Maybe ChatInviteLinkInfo

-- | A URL linking to a sticker set
TMeUrlTypeStickerSet :: Maybe Int -> TMeUrlType

-- | Identifier of the sticker set
[sticker_set_id] :: TMeUrlType -> Maybe Int
instance GHC.Show.Show TD.Data.TMeUrlType.TMeUrlType
instance GHC.Classes.Eq TD.Data.TMeUrlType.TMeUrlType
instance TD.Lib.Internal.ShortShow TD.Data.TMeUrlType.TMeUrlType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrlType.TMeUrlType

module TD.Data.TMeUrl
data TMeUrl

-- | Represents a URL linking to an internal Telegram entity
TMeUrl :: Maybe Text -> Maybe TMeUrlType -> TMeUrl

-- | URL
[url] :: TMeUrl -> Maybe Text

-- | Type of the URL
[_type] :: TMeUrl -> Maybe TMeUrlType
instance GHC.Show.Show TD.Data.TMeUrl.TMeUrl
instance GHC.Classes.Eq TD.Data.TMeUrl.TMeUrl
instance TD.Lib.Internal.ShortShow TD.Data.TMeUrl.TMeUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrl.TMeUrl

module TD.Data.TMeUrls
data TMeUrls

-- | Contains a list of t.me URLs
TMeUrls :: Maybe [TMeUrl] -> TMeUrls

-- | List of URLs
[urls] :: TMeUrls -> Maybe [TMeUrl]
instance GHC.Show.Show TD.Data.TMeUrls.TMeUrls
instance GHC.Classes.Eq TD.Data.TMeUrls.TMeUrls
instance TD.Lib.Internal.ShortShow TD.Data.TMeUrls.TMeUrls
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.TMeUrls.TMeUrls

module TD.Data.ChatInviteLinkCount
data ChatInviteLinkCount

-- | Describes a chat administrator with a number of active and revoked
--   chat invite links
ChatInviteLinkCount :: Maybe Int -> Maybe Int -> Maybe Int -> ChatInviteLinkCount

-- | Administrator's user identifier
[user_id] :: ChatInviteLinkCount -> Maybe Int

-- | Number of active invite links
[invite_link_count] :: ChatInviteLinkCount -> Maybe Int

-- | Number of revoked invite links
[revoked_invite_link_count] :: ChatInviteLinkCount -> Maybe Int
instance GHC.Show.Show TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance GHC.Classes.Eq TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinkCount.ChatInviteLinkCount
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkCount.ChatInviteLinkCount

module TD.Data.ChatInviteLinkCounts
data ChatInviteLinkCounts

-- | Contains a list of chat invite link counts
ChatInviteLinkCounts :: Maybe [ChatInviteLinkCount] -> ChatInviteLinkCounts

-- | List of invite link counts
[invite_link_counts] :: ChatInviteLinkCounts -> Maybe [ChatInviteLinkCount]
instance GHC.Show.Show TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance GHC.Classes.Eq TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinkCounts.ChatInviteLinkCounts

module TD.Data.ChatInviteLink
data ChatInviteLink

-- | Contains a chat invite link
ChatInviteLink :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatInviteLink

-- | Chat invite link
[invite_link] :: ChatInviteLink -> Maybe Text

-- | Name of the link
[name] :: ChatInviteLink -> Maybe Text

-- | User identifier of an administrator created the link
[creator_user_id] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link was created
[date] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link was last edited; 0 if
--   never or unknown
[edit_date] :: ChatInviteLink -> Maybe Int

-- | Point in time (Unix timestamp) when the link will expire; 0 if never
[expiration_date] :: ChatInviteLink -> Maybe Int

-- | The maximum number of members, which can join the chat using the link
--   simultaneously; 0 if not limited. Always 0 if the link requires
--   approval
[member_limit] :: ChatInviteLink -> Maybe Int

-- | Number of chat members, which joined the chat using the link
[member_count] :: ChatInviteLink -> Maybe Int

-- | Number of pending join requests created using this link
[pending_join_request_count] :: ChatInviteLink -> Maybe Int

-- | True, if the link only creates join request. If true, total number of
--   joining members will be unlimited
[creates_join_request] :: ChatInviteLink -> Maybe Bool

-- | True, if the link is primary. Primary invite link can't have name,
--   expiration date, or usage limit. There is exactly one primary invite
--   link for each administrator with can_invite_users right at a given
--   time
[is_primary] :: ChatInviteLink -> Maybe Bool

-- | True, if the link was revoked
[is_revoked] :: ChatInviteLink -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatInviteLink.ChatInviteLink
instance GHC.Classes.Eq TD.Data.ChatInviteLink.ChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLink.ChatInviteLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLink.ChatInviteLink

module TD.Data.ChatInviteLinks
data ChatInviteLinks

-- | Contains a list of chat invite links
ChatInviteLinks :: Maybe Int -> Maybe [ChatInviteLink] -> ChatInviteLinks

-- | Approximate total number of chat invite links found
[total_count] :: ChatInviteLinks -> Maybe Int

-- | List of invite links
[invite_links] :: ChatInviteLinks -> Maybe [ChatInviteLink]
instance GHC.Show.Show TD.Data.ChatInviteLinks.ChatInviteLinks
instance GHC.Classes.Eq TD.Data.ChatInviteLinks.ChatInviteLinks
instance TD.Lib.Internal.ShortShow TD.Data.ChatInviteLinks.ChatInviteLinks
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatInviteLinks.ChatInviteLinks

module TD.Data.ChatFolderInviteLink
data ChatFolderInviteLink

-- | Contains a chat folder invite link
ChatFolderInviteLink :: Maybe Text -> Maybe Text -> Maybe [Int] -> ChatFolderInviteLink

-- | The chat folder invite link
[invite_link] :: ChatFolderInviteLink -> Maybe Text

-- | Name of the link
[name] :: ChatFolderInviteLink -> Maybe Text

-- | Identifiers of chats, included in the link
[chat_ids] :: ChatFolderInviteLink -> Maybe [Int]
instance GHC.Show.Show TD.Data.ChatFolderInviteLink.ChatFolderInviteLink
instance GHC.Classes.Eq TD.Data.ChatFolderInviteLink.ChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolderInviteLink.ChatFolderInviteLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolderInviteLink.ChatFolderInviteLink

module TD.Data.ChatFolderInviteLinks
data ChatFolderInviteLinks

-- | Represents a list of chat folder invite links
ChatFolderInviteLinks :: Maybe [ChatFolderInviteLink] -> ChatFolderInviteLinks

-- | List of the invite links
[invite_links] :: ChatFolderInviteLinks -> Maybe [ChatFolderInviteLink]
instance GHC.Show.Show TD.Data.ChatFolderInviteLinks.ChatFolderInviteLinks
instance GHC.Classes.Eq TD.Data.ChatFolderInviteLinks.ChatFolderInviteLinks
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolderInviteLinks.ChatFolderInviteLinks
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolderInviteLinks.ChatFolderInviteLinks

module TD.Data.ChatFolderIcon
data ChatFolderIcon

-- | Represents an icon for a chat folder
ChatFolderIcon :: Maybe Text -> ChatFolderIcon

-- | The chosen icon name for short folder representation; one of
--   <a>All</a>, <a>Unread</a>, <a>Unmuted</a>, <a>Bots</a>,
--   <a>Channels</a>, <a>Groups</a>, <a>Private</a>, <a>Custom</a>,
--   <a>Setup</a>, <a>Cat</a>, <a>Crown</a>, <a>Favorite</a>,
--   <a>Flower</a>, <a>Game</a>, <a>Home</a>, <a>Love</a>, <a>Mask</a>,
--   <a>Party</a>, <a>Sport</a>, <a>Study</a>, <a>Trade</a>, <a>Travel</a>,
--   <a>Work</a>, <a>Airplane</a>, <a>Book</a>, <a>Light</a>, <a>Like</a>,
--   <a>Money</a>, <a>Note</a>, <a>Palette</a>
[name] :: ChatFolderIcon -> Maybe Text
defaultChatFolderIcon :: ChatFolderIcon
instance GHC.Show.Show TD.Data.ChatFolderIcon.ChatFolderIcon
instance GHC.Classes.Eq TD.Data.ChatFolderIcon.ChatFolderIcon
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolderIcon.ChatFolderIcon
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolderIcon.ChatFolderIcon
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatFolderIcon.ChatFolderIcon

module TD.Data.ChatFolderInfo
data ChatFolderInfo

-- | Contains basic information about a chat folder
ChatFolderInfo :: Maybe Int -> Maybe Text -> Maybe ChatFolderIcon -> Maybe Int -> Maybe Bool -> Maybe Bool -> ChatFolderInfo

-- | Unique chat folder identifier
[_id] :: ChatFolderInfo -> Maybe Int

-- | The title of the folder; 1-12 characters without line feeds
[title] :: ChatFolderInfo -> Maybe Text

-- | The chosen or default icon for the chat folder
[icon] :: ChatFolderInfo -> Maybe ChatFolderIcon

-- | The identifier of the chosen color for the chat folder icon; from -1
--   to 6. If -1, then color is disabled
[color_id] :: ChatFolderInfo -> Maybe Int

-- | True, if at least one link has been created for the folder
[is_shareable] :: ChatFolderInfo -> Maybe Bool

-- | True, if the chat folder has invite links created by the current user
[has_my_invite_links] :: ChatFolderInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatFolderInfo.ChatFolderInfo
instance GHC.Classes.Eq TD.Data.ChatFolderInfo.ChatFolderInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolderInfo.ChatFolderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolderInfo.ChatFolderInfo

module TD.Data.ChatFolderInviteLinkInfo
data ChatFolderInviteLinkInfo

-- | Contains information about an invite link to a chat folder
ChatFolderInviteLinkInfo :: Maybe ChatFolderInfo -> Maybe [Int] -> Maybe [Int] -> ChatFolderInviteLinkInfo

-- | Basic information about the chat folder; chat folder identifier will
--   be 0 if the user didn't have the chat folder yet
[chat_folder_info] :: ChatFolderInviteLinkInfo -> Maybe ChatFolderInfo

-- | Identifiers of the chats from the link, which aren't added to the
--   folder yet
[missing_chat_ids] :: ChatFolderInviteLinkInfo -> Maybe [Int]

-- | Identifiers of the chats from the link, which are added to the folder
--   already
[added_chat_ids] :: ChatFolderInviteLinkInfo -> Maybe [Int]
instance GHC.Show.Show TD.Data.ChatFolderInviteLinkInfo.ChatFolderInviteLinkInfo
instance GHC.Classes.Eq TD.Data.ChatFolderInviteLinkInfo.ChatFolderInviteLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolderInviteLinkInfo.ChatFolderInviteLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolderInviteLinkInfo.ChatFolderInviteLinkInfo

module TD.Data.ChatFolder
data ChatFolder

-- | Represents a folder for user chats
ChatFolder :: Maybe Text -> Maybe ChatFolderIcon -> Maybe Int -> Maybe Bool -> Maybe [Int] -> Maybe [Int] -> Maybe [Int] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatFolder

-- | The title of the folder; 1-12 characters without line feeds
[title] :: ChatFolder -> Maybe Text

-- | The chosen icon for the chat folder; may be null. If null, use
--   getChatFolderDefaultIconName to get default icon name for the folder
[icon] :: ChatFolder -> Maybe ChatFolderIcon

-- | The identifier of the chosen color for the chat folder icon; from -1
--   to 6. If -1, then color is disabled. Can't be changed if folder tags
--   are disabled or the current user doesn't have Telegram Premium
--   subscription
[color_id] :: ChatFolder -> Maybe Int

-- | True, if at least one link has been created for the folder
[is_shareable] :: ChatFolder -> Maybe Bool

-- | The chat identifiers of pinned chats in the folder. There can be up to
--   getOption("chat_folder_chosen_chat_count_max") pinned and always
--   included non-secret chats and the same number of secret chats, but the
--   limit can be increased with Telegram Premium
[pinned_chat_ids] :: ChatFolder -> Maybe [Int]

-- | The chat identifiers of always included chats in the folder. There can
--   be up to getOption("chat_folder_chosen_chat_count_max") pinned and
--   always included non-secret chats and the same number of secret chats,
--   but the limit can be increased with Telegram Premium
[included_chat_ids] :: ChatFolder -> Maybe [Int]

-- | The chat identifiers of always excluded chats in the folder. There can
--   be up to getOption("chat_folder_chosen_chat_count_max") always
--   excluded non-secret chats and the same number of secret chats, but the
--   limit can be increased with Telegram Premium
[excluded_chat_ids] :: ChatFolder -> Maybe [Int]

-- | True, if muted chats need to be excluded
[exclude_muted] :: ChatFolder -> Maybe Bool

-- | True, if read chats need to be excluded
[exclude_read] :: ChatFolder -> Maybe Bool

-- | True, if archived chats need to be excluded
[exclude_archived] :: ChatFolder -> Maybe Bool

-- | True, if contacts need to be included
[include_contacts] :: ChatFolder -> Maybe Bool

-- | True, if non-contact users need to be included
[include_non_contacts] :: ChatFolder -> Maybe Bool

-- | True, if bots need to be included
[include_bots] :: ChatFolder -> Maybe Bool

-- | True, if basic groups and supergroups need to be included
[include_groups] :: ChatFolder -> Maybe Bool

-- | True, if channels need to be included
[include_channels] :: ChatFolder -> Maybe Bool
defaultChatFolder :: ChatFolder
instance GHC.Show.Show TD.Data.ChatFolder.ChatFolder
instance GHC.Classes.Eq TD.Data.ChatFolder.ChatFolder
instance TD.Lib.Internal.ShortShow TD.Data.ChatFolder.ChatFolder
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatFolder.ChatFolder
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatFolder.ChatFolder

module TD.Data.RecommendedChatFolder
data RecommendedChatFolder

-- | Describes a recommended chat folder
RecommendedChatFolder :: Maybe ChatFolder -> Maybe Text -> RecommendedChatFolder

-- | The chat folder
[folder] :: RecommendedChatFolder -> Maybe ChatFolder
[description] :: RecommendedChatFolder -> Maybe Text
instance GHC.Show.Show TD.Data.RecommendedChatFolder.RecommendedChatFolder
instance GHC.Classes.Eq TD.Data.RecommendedChatFolder.RecommendedChatFolder
instance TD.Lib.Internal.ShortShow TD.Data.RecommendedChatFolder.RecommendedChatFolder
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecommendedChatFolder.RecommendedChatFolder

module TD.Data.RecommendedChatFolders
data RecommendedChatFolders

-- | Contains a list of recommended chat folders
RecommendedChatFolders :: Maybe [RecommendedChatFolder] -> RecommendedChatFolders

-- | List of recommended chat folders
[chat_folders] :: RecommendedChatFolders -> Maybe [RecommendedChatFolder]
instance GHC.Show.Show TD.Data.RecommendedChatFolders.RecommendedChatFolders
instance GHC.Classes.Eq TD.Data.RecommendedChatFolders.RecommendedChatFolders
instance TD.Lib.Internal.ShortShow TD.Data.RecommendedChatFolders.RecommendedChatFolders
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.RecommendedChatFolders.RecommendedChatFolders

module TD.Data.ChatEventLogFilters
data ChatEventLogFilters

-- | Represents a set of filters used to obtain a chat event log
ChatEventLogFilters :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatEventLogFilters

-- | True, if message edits need to be returned
[message_edits] :: ChatEventLogFilters -> Maybe Bool

-- | True, if message deletions need to be returned
[message_deletions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if pin/unpin events need to be returned
[message_pins] :: ChatEventLogFilters -> Maybe Bool

-- | True, if members joining events need to be returned
[member_joins] :: ChatEventLogFilters -> Maybe Bool

-- | True, if members leaving events need to be returned
[member_leaves] :: ChatEventLogFilters -> Maybe Bool

-- | True, if invited member events need to be returned
[member_invites] :: ChatEventLogFilters -> Maybe Bool

-- | True, if member promotion/demotion events need to be returned
[member_promotions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if member restricted<i>unrestricted</i>banned/unbanned events
--   need to be returned
[member_restrictions] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes in chat information need to be returned
[info_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes in chat settings need to be returned
[setting_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if changes to invite links need to be returned
[invite_link_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if video chat actions need to be returned
[video_chat_changes] :: ChatEventLogFilters -> Maybe Bool

-- | True, if forum-related actions need to be returned
[forum_changes] :: ChatEventLogFilters -> Maybe Bool
defaultChatEventLogFilters :: ChatEventLogFilters
instance GHC.Show.Show TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance GHC.Classes.Eq TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance TD.Lib.Internal.ShortShow TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEventLogFilters.ChatEventLogFilters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatEventLogFilters.ChatEventLogFilters

module TD.Data.ChatBoostStatus
data ChatBoostStatus

-- | Describes current boost status of a chat
ChatBoostStatus :: Maybe Text -> Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Double -> Maybe [PrepaidPremiumGiveaway] -> ChatBoostStatus

-- | An HTTP URL, which can be used to boost the chat
[boost_url] :: ChatBoostStatus -> Maybe Text

-- | Identifiers of boost slots of the current user applied to the chat
[applied_slot_ids] :: ChatBoostStatus -> Maybe [Int]

-- | Current boost level of the chat
[level] :: ChatBoostStatus -> Maybe Int

-- | The number of boosts received by the chat from created Telegram
--   Premium gift codes and giveaways; always 0 if the current user isn't
--   an administrator in the chat
[gift_code_boost_count] :: ChatBoostStatus -> Maybe Int

-- | The number of boosts received by the chat
[boost_count] :: ChatBoostStatus -> Maybe Int

-- | The number of boosts added to reach the current level
[current_level_boost_count] :: ChatBoostStatus -> Maybe Int

-- | The number of boosts needed to reach the next level; 0 if the next
--   level isn't available
[next_level_boost_count] :: ChatBoostStatus -> Maybe Int

-- | Approximate number of Telegram Premium subscribers joined the chat;
--   always 0 if the current user isn't an administrator in the chat
[premium_member_count] :: ChatBoostStatus -> Maybe Int

-- | A percentage of Telegram Premium subscribers joined the chat; always 0
--   if the current user isn't an administrator in the chat
[premium_member_percentage] :: ChatBoostStatus -> Maybe Double

-- | The list of prepaid giveaways available for the chat; only for chat
--   administrators
[prepaid_giveaways] :: ChatBoostStatus -> Maybe [PrepaidPremiumGiveaway]
instance GHC.Show.Show TD.Data.ChatBoostStatus.ChatBoostStatus
instance GHC.Classes.Eq TD.Data.ChatBoostStatus.ChatBoostStatus
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostStatus.ChatBoostStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostStatus.ChatBoostStatus

module TD.Data.ChatBoostSource

-- | Describes source of a chat boost
data ChatBoostSource

-- | The chat created a Telegram Premium gift code for a user
ChatBoostSourceGiftCode :: Maybe Int -> Maybe Text -> ChatBoostSource

-- | Identifier of a user, for which the gift code was created
[user_id] :: ChatBoostSource -> Maybe Int

-- | The created Telegram Premium gift code, which is known only if this is
--   a gift code for the current user, or it has already been claimed
[gift_code] :: ChatBoostSource -> Maybe Text

-- | The chat created a Telegram Premium giveaway
ChatBoostSourceGiveaway :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Bool -> ChatBoostSource

-- | Identifier of a user, for which the gift code was created
[user_id] :: ChatBoostSource -> Maybe Int

-- | The created Telegram Premium gift code, which is known only if this is
--   a gift code for the current user, or it has already been claimed
[gift_code] :: ChatBoostSource -> Maybe Text

-- | Identifier of the corresponding giveaway message; can be an identifier
--   of a deleted message
[giveaway_message_id] :: ChatBoostSource -> Maybe Int

-- | True, if the winner for the corresponding Telegram Premium
--   subscription wasn't chosen, because there were not enough participants
[is_unclaimed] :: ChatBoostSource -> Maybe Bool

-- | A user with Telegram Premium subscription or gifted Telegram Premium
--   boosted the chat
ChatBoostSourcePremium :: Maybe Int -> ChatBoostSource

-- | Identifier of a user, for which the gift code was created
[user_id] :: ChatBoostSource -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBoostSource.ChatBoostSource
instance GHC.Classes.Eq TD.Data.ChatBoostSource.ChatBoostSource
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostSource.ChatBoostSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostSource.ChatBoostSource

module TD.Data.ChatBoostSlot
data ChatBoostSlot

-- | Describes a slot for chat boost
ChatBoostSlot :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatBoostSlot

-- | Unique identifier of the slot
[slot_id] :: ChatBoostSlot -> Maybe Int

-- | Identifier of the currently boosted chat; 0 if none
[currently_boosted_chat_id] :: ChatBoostSlot -> Maybe Int

-- | Point in time (Unix timestamp) when the chat was boosted; 0 if none
[start_date] :: ChatBoostSlot -> Maybe Int

-- | Point in time (Unix timestamp) when the boost will expire
[expiration_date] :: ChatBoostSlot -> Maybe Int

-- | Point in time (Unix timestamp) after which the boost can be used for
--   another chat
[cooldown_until_date] :: ChatBoostSlot -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBoostSlot.ChatBoostSlot
instance GHC.Classes.Eq TD.Data.ChatBoostSlot.ChatBoostSlot
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostSlot.ChatBoostSlot
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostSlot.ChatBoostSlot

module TD.Data.ChatBoostSlots
data ChatBoostSlots

-- | Contains a list of chat boost slots
ChatBoostSlots :: Maybe [ChatBoostSlot] -> ChatBoostSlots

-- | List of boost slots
[slots] :: ChatBoostSlots -> Maybe [ChatBoostSlot]
instance GHC.Show.Show TD.Data.ChatBoostSlots.ChatBoostSlots
instance GHC.Classes.Eq TD.Data.ChatBoostSlots.ChatBoostSlots
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostSlots.ChatBoostSlots
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostSlots.ChatBoostSlots

module TD.Data.ChatBoostLinkInfo
data ChatBoostLinkInfo

-- | Contains information about a link to boost a chat
ChatBoostLinkInfo :: Maybe Bool -> Maybe Int -> ChatBoostLinkInfo

-- | True, if the link will work for non-members of the chat
[is_public] :: ChatBoostLinkInfo -> Maybe Bool

-- | Identifier of the chat to which the link points; 0 if the chat isn't
--   found
[chat_id] :: ChatBoostLinkInfo -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBoostLinkInfo.ChatBoostLinkInfo
instance GHC.Classes.Eq TD.Data.ChatBoostLinkInfo.ChatBoostLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostLinkInfo.ChatBoostLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostLinkInfo.ChatBoostLinkInfo

module TD.Data.ChatBoostLink
data ChatBoostLink

-- | Contains an HTTPS link to boost a chat
ChatBoostLink :: Maybe Text -> Maybe Bool -> ChatBoostLink

-- | The link
[link] :: ChatBoostLink -> Maybe Text

-- | True, if the link will work for non-members of the chat
[is_public] :: ChatBoostLink -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatBoostLink.ChatBoostLink
instance GHC.Classes.Eq TD.Data.ChatBoostLink.ChatBoostLink
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostLink.ChatBoostLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostLink.ChatBoostLink

module TD.Data.ChatBoostLevelFeatures
data ChatBoostLevelFeatures

-- | Contains a list of features available on a specific chat boost level
ChatBoostLevelFeatures :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatBoostLevelFeatures

-- | Target chat boost level
[level] :: ChatBoostLevelFeatures -> Maybe Int

-- | Number of stories that the chat can publish daily
[story_per_day_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | Number of custom emoji reactions that can be added to the list of
--   available reactions
[custom_emoji_reaction_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | Number of custom colors for chat title
[title_color_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | Number of custom colors for profile photo background
[profile_accent_color_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | True, if custom emoji for profile background can be set
[can_set_profile_background_custom_emoji] :: ChatBoostLevelFeatures -> Maybe Bool

-- | Number of custom colors for background of empty chat photo, replies to
--   messages and link previews
[accent_color_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | True, if custom emoji for reply header and link preview background can
--   be set
[can_set_background_custom_emoji] :: ChatBoostLevelFeatures -> Maybe Bool

-- | True, if emoji status can be set
[can_set_emoji_status] :: ChatBoostLevelFeatures -> Maybe Bool

-- | Number of chat theme backgrounds that can be set as chat background
[chat_theme_background_count] :: ChatBoostLevelFeatures -> Maybe Int

-- | True, if custom background can be set in the chat for all users
[can_set_custom_background] :: ChatBoostLevelFeatures -> Maybe Bool

-- | True, if custom emoji sticker set can be set for the chat
[can_set_custom_emoji_sticker_set] :: ChatBoostLevelFeatures -> Maybe Bool

-- | True, if speech recognition can be used for video note and voice note
--   messages by all users
[can_recognize_speech] :: ChatBoostLevelFeatures -> Maybe Bool

-- | True, if sponsored messages can be disabled in the chat
[can_disable_sponsored_messages] :: ChatBoostLevelFeatures -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatBoostLevelFeatures.ChatBoostLevelFeatures
instance GHC.Classes.Eq TD.Data.ChatBoostLevelFeatures.ChatBoostLevelFeatures
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostLevelFeatures.ChatBoostLevelFeatures
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostLevelFeatures.ChatBoostLevelFeatures

module TD.Data.ChatBoostFeatures
data ChatBoostFeatures

-- | Contains a list of features available on the first chat boost levels
ChatBoostFeatures :: Maybe [ChatBoostLevelFeatures] -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatBoostFeatures

-- | The list of features
[features] :: ChatBoostFeatures -> Maybe [ChatBoostLevelFeatures]

-- | The minimum boost level required to set custom emoji for profile
--   background
[min_profile_background_custom_emoji_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level required to set custom emoji for reply header
--   and link preview background; for channel chats only
[min_background_custom_emoji_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level required to set emoji status
[min_emoji_status_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level required to set a chat theme background as
--   chat background
[min_chat_theme_background_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level required to set custom chat background
[min_custom_background_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level required to set custom emoji sticker set for
--   the chat; for supergroup chats only
[min_custom_emoji_sticker_set_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level allowing to recognize speech in video note and
--   voice note messages for non-Premium users; for supergroup chats only
[min_speech_recognition_boost_level] :: ChatBoostFeatures -> Maybe Int

-- | The minimum boost level allowing to disable sponsored messages in the
--   chat; for channel chats only
[min_sponsored_message_disable_boost_level] :: ChatBoostFeatures -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBoostFeatures.ChatBoostFeatures
instance GHC.Classes.Eq TD.Data.ChatBoostFeatures.ChatBoostFeatures
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoostFeatures.ChatBoostFeatures
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoostFeatures.ChatBoostFeatures

module TD.Data.ChatBoost
data ChatBoost

-- | Describes a boost applied to a chat
ChatBoost :: Maybe Text -> Maybe Int -> Maybe ChatBoostSource -> Maybe Int -> Maybe Int -> ChatBoost

-- | Unique identifier of the boost
[_id] :: ChatBoost -> Maybe Text

-- | The number of identical boosts applied
[count] :: ChatBoost -> Maybe Int

-- | Source of the boost
[source] :: ChatBoost -> Maybe ChatBoostSource

-- | Point in time (Unix timestamp) when the chat was boosted
[start_date] :: ChatBoost -> Maybe Int

-- | Point in time (Unix timestamp) when the boost will expire
[expiration_date] :: ChatBoost -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBoost.ChatBoost
instance GHC.Classes.Eq TD.Data.ChatBoost.ChatBoost
instance TD.Lib.Internal.ShortShow TD.Data.ChatBoost.ChatBoost
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBoost.ChatBoost

module TD.Data.FoundChatBoosts
data FoundChatBoosts

-- | Contains a list of boosts applied to a chat
FoundChatBoosts :: Maybe Int -> Maybe [ChatBoost] -> Maybe Text -> FoundChatBoosts

-- | Total number of boosts applied to the chat
[total_count] :: FoundChatBoosts -> Maybe Int

-- | List of boosts
[boosts] :: FoundChatBoosts -> Maybe [ChatBoost]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: FoundChatBoosts -> Maybe Text
instance GHC.Show.Show TD.Data.FoundChatBoosts.FoundChatBoosts
instance GHC.Classes.Eq TD.Data.FoundChatBoosts.FoundChatBoosts
instance TD.Lib.Internal.ShortShow TD.Data.FoundChatBoosts.FoundChatBoosts
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundChatBoosts.FoundChatBoosts

module TD.Data.ChatAvailableReactions

-- | Describes reactions available in the chat
data ChatAvailableReactions

-- | All reactions are available in the chat
ChatAvailableReactionsAll :: Maybe Int -> ChatAvailableReactions

-- | The maximum allowed number of reactions per message; 1-11
[max_reaction_count] :: ChatAvailableReactions -> Maybe Int

-- | Only specific reactions are available in the chat
ChatAvailableReactionsSome :: Maybe [ReactionType] -> Maybe Int -> ChatAvailableReactions

-- | The list of reactions
[reactions] :: ChatAvailableReactions -> Maybe [ReactionType]

-- | The maximum allowed number of reactions per message; 1-11
[max_reaction_count] :: ChatAvailableReactions -> Maybe Int
instance GHC.Show.Show TD.Data.ChatAvailableReactions.ChatAvailableReactions
instance GHC.Classes.Eq TD.Data.ChatAvailableReactions.ChatAvailableReactions
instance TD.Lib.Internal.ShortShow TD.Data.ChatAvailableReactions.ChatAvailableReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAvailableReactions.ChatAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAvailableReactions.ChatAvailableReactions

module TD.Data.ChatAdministratorRights
data ChatAdministratorRights

-- | Describes rights of the administrator
ChatAdministratorRights :: Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> ChatAdministratorRights

-- | True, if the administrator can access the chat event log, get boost
--   list, see hidden supergroup and channel members, report supergroup
--   spam messages and ignore slow mode. Implied by any other privilege;
--   applicable to supergroups and channels only
[can_manage_chat] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can change the chat title, photo, and other
--   settings
[can_change_info] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can create channel posts or view channel
--   statistics; applicable to channels only
[can_post_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can edit messages of other users and pin
--   messages; applicable to channels only
[can_edit_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can delete messages of other users
[can_delete_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can invite new users to the chat
[can_invite_users] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can restrict, ban, or unban chat members or
--   view supergroup statistics; always true for channels
[can_restrict_members] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can pin messages; applicable to basic
--   groups and supergroups only
[can_pin_messages] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can create, rename, close, reopen, hide,
--   and unhide forum topics; applicable to forum supergroups only
[can_manage_topics] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can add new administrators with a subset of
--   their own privileges or demote administrators that were directly or
--   indirectly promoted by them
[can_promote_members] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can manage video chats
[can_manage_video_chats] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can create new chat stories, or edit and
--   delete posted stories; applicable to supergroups and channels only
[can_post_stories] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can edit stories posted by other users,
--   post stories to the chat page, pin chat stories, and access story
--   archive; applicable to supergroups and channels only
[can_edit_stories] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator can delete stories posted by other users;
--   applicable to supergroups and channels only
[can_delete_stories] :: ChatAdministratorRights -> Maybe Bool

-- | True, if the administrator isn't shown in the chat member list and
--   sends messages anonymously; applicable to supergroups only
[is_anonymous] :: ChatAdministratorRights -> Maybe Bool
defaultChatAdministratorRights :: ChatAdministratorRights
instance GHC.Show.Show TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance GHC.Classes.Eq TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance TD.Lib.Internal.ShortShow TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministratorRights.ChatAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAdministratorRights.ChatAdministratorRights

module TD.Data.KeyboardButtonType

-- | Describes a keyboard button type
data KeyboardButtonType

-- | A simple button, with text that must be sent when the button is
--   pressed
KeyboardButtonTypeText :: KeyboardButtonType

-- | A button that sends the user's phone number when pressed; available
--   only in private chats
KeyboardButtonTypeRequestPhoneNumber :: KeyboardButtonType

-- | A button that sends the user's location when pressed; available only
--   in private chats
KeyboardButtonTypeRequestLocation :: KeyboardButtonType

-- | A button that allows the user to create and send a poll when pressed;
--   available only in private chats
KeyboardButtonTypeRequestPoll :: Maybe Bool -> Maybe Bool -> KeyboardButtonType

-- | If true, only regular polls must be allowed to create
[force_regular] :: KeyboardButtonType -> Maybe Bool

-- | If true, only polls in quiz mode must be allowed to create
[force_quiz] :: KeyboardButtonType -> Maybe Bool

-- | A button that requests users to be shared by the current user;
--   available only in private chats. Use the method shareUsersWithBot to
--   complete the request
KeyboardButtonTypeRequestUsers :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> KeyboardButtonType

-- | Unique button identifier
[_id] :: KeyboardButtonType -> Maybe Int

-- | True, if the shared users must or must not be bots
[restrict_user_is_bot] :: KeyboardButtonType -> Maybe Bool

-- | True, if the shared users must be bots; otherwise, the shared users
--   must not be bots. Ignored if restrict_user_is_bot is false
[user_is_bot] :: KeyboardButtonType -> Maybe Bool

-- | True, if the shared users must or must not be Telegram Premium users
[restrict_user_is_premium] :: KeyboardButtonType -> Maybe Bool

-- | True, if the shared users must be Telegram Premium users; otherwise,
--   the shared users must not be Telegram Premium users. Ignored if
--   restrict_user_is_premium is false
[user_is_premium] :: KeyboardButtonType -> Maybe Bool

-- | The maximum number of users to share
[max_quantity] :: KeyboardButtonType -> Maybe Int

-- | Pass true to request name of the users; bots only
[request_name] :: KeyboardButtonType -> Maybe Bool

-- | Pass true to request username of the users; bots only
[request_username] :: KeyboardButtonType -> Maybe Bool

-- | Pass true to request photo of the users; bots only
[request_photo] :: KeyboardButtonType -> Maybe Bool

-- | A button that requests a chat to be shared by the current user;
--   available only in private chats. Use the method shareChatWithBot to
--   complete the request
KeyboardButtonTypeRequestChat :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe ChatAdministratorRights -> Maybe ChatAdministratorRights -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> KeyboardButtonType

-- | Unique button identifier
[_id] :: KeyboardButtonType -> Maybe Int

-- | True, if the chat must be a channel; otherwise, a basic group or a
--   supergroup chat is shared
[chat_is_channel] :: KeyboardButtonType -> Maybe Bool

-- | True, if the chat must or must not be a forum supergroup
[restrict_chat_is_forum] :: KeyboardButtonType -> Maybe Bool

-- | True, if the chat must be a forum supergroup; otherwise, the chat must
--   not be a forum supergroup. Ignored if restrict_chat_is_forum is false
[chat_is_forum] :: KeyboardButtonType -> Maybe Bool

-- | True, if the chat must or must not have a username
[restrict_chat_has_username] :: KeyboardButtonType -> Maybe Bool

-- | True, if the chat must have a username; otherwise, the chat must not
--   have a username. Ignored if restrict_chat_has_username is false
[chat_has_username] :: KeyboardButtonType -> Maybe Bool

-- | True, if the chat must be created by the current user
[chat_is_created] :: KeyboardButtonType -> Maybe Bool

-- | Expected user administrator rights in the chat; may be null if they
--   aren't restricted
[user_administrator_rights] :: KeyboardButtonType -> Maybe ChatAdministratorRights

-- | Expected bot administrator rights in the chat; may be null if they
--   aren't restricted
[bot_administrator_rights] :: KeyboardButtonType -> Maybe ChatAdministratorRights

-- | True, if the bot must be a member of the chat; for basic group and
--   supergroup chats only
[bot_is_member] :: KeyboardButtonType -> Maybe Bool

-- | Pass true to request title of the chat; bots only
[request_title] :: KeyboardButtonType -> Maybe Bool

-- | Pass true to request username of the users; bots only
[request_username] :: KeyboardButtonType -> Maybe Bool

-- | Pass true to request photo of the users; bots only
[request_photo] :: KeyboardButtonType -> Maybe Bool

-- | A button that opens a Web App by calling getWebAppUrl
KeyboardButtonTypeWebApp :: Maybe Text -> KeyboardButtonType

-- | An HTTP URL to pass to getWebAppUrl
[url] :: KeyboardButtonType -> Maybe Text
instance GHC.Show.Show TD.Data.KeyboardButtonType.KeyboardButtonType
instance GHC.Classes.Eq TD.Data.KeyboardButtonType.KeyboardButtonType
instance TD.Lib.Internal.ShortShow TD.Data.KeyboardButtonType.KeyboardButtonType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.KeyboardButtonType.KeyboardButtonType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.KeyboardButtonType.KeyboardButtonType

module TD.Data.KeyboardButton
data KeyboardButton

-- | Represents a single button in a bot keyboard
KeyboardButton :: Maybe Text -> Maybe KeyboardButtonType -> KeyboardButton

-- | Text of the button
[text] :: KeyboardButton -> Maybe Text

-- | Type of the button
[_type] :: KeyboardButton -> Maybe KeyboardButtonType
defaultKeyboardButton :: KeyboardButton
instance GHC.Show.Show TD.Data.KeyboardButton.KeyboardButton
instance GHC.Classes.Eq TD.Data.KeyboardButton.KeyboardButton
instance TD.Lib.Internal.ShortShow TD.Data.KeyboardButton.KeyboardButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.KeyboardButton.KeyboardButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.KeyboardButton.KeyboardButton

module TD.Data.ReplyMarkup

-- | Contains a description of a custom keyboard and actions that can be
--   done with it to quickly reply to bots
data ReplyMarkup

-- | Instructs application to remove the keyboard once this message has
--   been received. This kind of keyboard can't be received in an incoming
--   message; instead, updateChatReplyMarkup with message_id == 0 will be
--   sent
ReplyMarkupRemoveKeyboard :: Maybe Bool -> ReplyMarkup

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | Instructs application to force a reply to this message
ReplyMarkupForceReply :: Maybe Bool -> Maybe Text -> ReplyMarkup

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | If non-empty, the placeholder to be shown in the input field when the
--   reply is active; 0-64 characters
[input_field_placeholder] :: ReplyMarkup -> Maybe Text

-- | Contains a custom keyboard layout to quickly reply to bots
ReplyMarkupShowKeyboard :: Maybe [[KeyboardButton]] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> ReplyMarkup

-- | A list of rows of bot keyboard buttons
[rows] :: ReplyMarkup -> Maybe [[KeyboardButton]]

-- | True, if the keyboard is supposed to always be shown when the ordinary
--   keyboard is hidden
[is_persistent] :: ReplyMarkup -> Maybe Bool

-- | True, if the application needs to resize the keyboard vertically
[resize_keyboard] :: ReplyMarkup -> Maybe Bool

-- | True, if the application needs to hide the keyboard after use
[one_time] :: ReplyMarkup -> Maybe Bool

-- | True, if the keyboard is removed only for the mentioned users or the
--   target user of a reply
[is_personal] :: ReplyMarkup -> Maybe Bool

-- | If non-empty, the placeholder to be shown in the input field when the
--   reply is active; 0-64 characters
[input_field_placeholder] :: ReplyMarkup -> Maybe Text

-- | Contains an inline keyboard layout
ReplyMarkupInlineKeyboard :: Maybe [[InlineKeyboardButton]] -> ReplyMarkup

-- | A list of rows of inline keyboard buttons
[_rows] :: ReplyMarkup -> Maybe [[InlineKeyboardButton]]
instance GHC.Show.Show TD.Data.ReplyMarkup.ReplyMarkup
instance GHC.Classes.Eq TD.Data.ReplyMarkup.ReplyMarkup
instance TD.Lib.Internal.ShortShow TD.Data.ReplyMarkup.ReplyMarkup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ReplyMarkup.ReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ReplyMarkup.ReplyMarkup

module TD.Data.InputInlineQueryResult

-- | Represents a single result of an inline query; for bots only
data InputInlineQueryResult

-- | Represents a link to an animated GIF or an animated (i.e., without
--   sound) H.264/MPEG-4 AVC video
InputInlineQueryResultAnimation :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | MIME type of the video thumbnail. If non-empty, must be one of
--   "image<i>jpeg", "image</i>gif" and "video/mp4"
[thumbnail_mime_type] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the video file (file size must not exceed 1MB)
[video_url] :: InputInlineQueryResult -> Maybe Text

-- | MIME type of the video file. Must be one of "image<i>gif" and
--   "video</i>mp4"
[video_mime_type] :: InputInlineQueryResult -> Maybe Text

-- | Duration of the video, in seconds
[video_duration] :: InputInlineQueryResult -> Maybe Int

-- | Width of the video
[video_width] :: InputInlineQueryResult -> Maybe Int

-- | Height of the video
[video_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to an article or web page
InputInlineQueryResultArticle :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result, if it exists
[url] :: InputInlineQueryResult -> Maybe Text

-- | True, if the URL must be not shown
[hide_url] :: InputInlineQueryResult -> Maybe Bool

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text
[description] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | Thumbnail width, if known
[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | Thumbnail height, if known
[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to an MP3 audio file
InputInlineQueryResultAudio :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text

-- | Performer of the audio file
[performer] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the audio file
[audio_url] :: InputInlineQueryResult -> Maybe Text

-- | Audio file duration, in seconds
[audio_duration] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a user contact
InputInlineQueryResultContact :: Maybe Text -> Maybe Contact -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | User contact
[contact] :: InputInlineQueryResult -> Maybe Contact

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | Thumbnail width, if known
[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | Thumbnail height, if known
[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to a file
InputInlineQueryResultDocument :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text
[description] :: InputInlineQueryResult -> Maybe Text

-- | URL of the file
[document_url] :: InputInlineQueryResult -> Maybe Text

-- | MIME type of the file content; only "application<i>pdf" and
--   "application</i>zip" are currently allowed
[mime_type] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | Thumbnail width, if known
[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | Thumbnail height, if known
[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a game
InputInlineQueryResultGame :: Maybe Text -> Maybe Text -> Maybe ReplyMarkup -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Short name of the game
[game_short_name] :: InputInlineQueryResult -> Maybe Text

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | Represents a point on the map
InputInlineQueryResultLocation :: Maybe Text -> Maybe Location -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Location result
[location] :: InputInlineQueryResult -> Maybe Location

-- | Amount of time relative to the message sent time until the location
--   can be updated, in seconds
[live_period] :: InputInlineQueryResult -> Maybe Int

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | Thumbnail width, if known
[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | Thumbnail height, if known
[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents link to a JPEG image
InputInlineQueryResultPhoto :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text
[description] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the JPEG photo (photo size must not exceed 5MB)
[photo_url] :: InputInlineQueryResult -> Maybe Text

-- | Width of the photo
[photo_width] :: InputInlineQueryResult -> Maybe Int

-- | Height of the photo
[photo_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to a WEBP, TGS, or WEBM sticker
InputInlineQueryResultSticker :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not
--   exceed 5MB)
[sticker_url] :: InputInlineQueryResult -> Maybe Text

-- | Width of the sticker
[sticker_width] :: InputInlineQueryResult -> Maybe Int

-- | Height of the sticker
[sticker_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents information about a venue
InputInlineQueryResultVenue :: Maybe Text -> Maybe Venue -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Venue result
[venue] :: InputInlineQueryResult -> Maybe Venue

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | Thumbnail width, if known
[thumbnail_width] :: InputInlineQueryResult -> Maybe Int

-- | Thumbnail height, if known
[thumbnail_height] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to a page containing an embedded video player or a
--   video file
InputInlineQueryResultVideo :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text
[description] :: InputInlineQueryResult -> Maybe Text

-- | URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
[thumbnail_url] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the video file (file size must not exceed 1MB)
[video_url] :: InputInlineQueryResult -> Maybe Text

-- | MIME type of the file content; only "application<i>pdf" and
--   "application</i>zip" are currently allowed
[mime_type] :: InputInlineQueryResult -> Maybe Text

-- | Width of the video
[video_width] :: InputInlineQueryResult -> Maybe Int

-- | Height of the video
[video_height] :: InputInlineQueryResult -> Maybe Int

-- | Duration of the video, in seconds
[video_duration] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent

-- | Represents a link to an opus-encoded audio file within an OGG
--   container, single channel audio
InputInlineQueryResultVoiceNote :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> InputInlineQueryResult

-- | Unique identifier of the query result
[_id] :: InputInlineQueryResult -> Maybe Text

-- | Title of the query result
[title] :: InputInlineQueryResult -> Maybe Text

-- | The URL of the voice note file
[voice_note_url] :: InputInlineQueryResult -> Maybe Text

-- | Duration of the voice note, in seconds
[voice_note_duration] :: InputInlineQueryResult -> Maybe Int

-- | The message reply markup; pass null if none. Must be of type
--   replyMarkupInlineKeyboard or null
[reply_markup] :: InputInlineQueryResult -> Maybe ReplyMarkup

-- | The content of the message to be sent. Must be one of the following
--   types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
--   inputMessageLocation, inputMessageVenue or inputMessageContact
[input_message_content] :: InputInlineQueryResult -> Maybe InputMessageContent
instance GHC.Show.Show TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance GHC.Classes.Eq TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance TD.Lib.Internal.ShortShow TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputInlineQueryResult.InputInlineQueryResult
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputInlineQueryResult.InputInlineQueryResult

module TD.Data.InternalLinkType

-- | Describes an internal <a>https://t.me</a> or tg: link, which must be
--   processed by the application in a special way
data InternalLinkType

-- | The link is a link to the Devices section of the application. Use
--   getActiveSessions to get the list of active sessions and show them to
--   the user
InternalLinkTypeActiveSessions :: InternalLinkType

-- | The link is a link to an attachment menu bot to be opened in the
--   specified or a chosen chat. Process given target_chat to open the
--   chat. Then, call searchPublicChat with the given bot username, check
--   that the user is a bot and can be added to attachment menu. Then, use
--   getAttachmentMenuBot to receive information about the bot. If the bot
--   isn't added to attachment menu, then show a disclaimer about Mini Apps
--   being a third-party apps, ask the user to accept their Terms of
--   service and confirm adding the bot to side and attachment menu. If the
--   user accept the terms and confirms adding, then use
--   toggleBotIsAddedToAttachmentMenu to add the bot. If the attachment
--   menu bot can't be used in the opened chat, show an error to the user.
--   If the bot is added to attachment menu and can be used in the chat,
--   then use openWebApp with the given URL
InternalLinkTypeAttachmentMenuBot :: Maybe TargetChat -> Maybe Text -> Maybe Text -> InternalLinkType

-- | Target chat to be opened
[target_chat] :: InternalLinkType -> Maybe TargetChat

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | URL to be passed to openWebApp
[url] :: InternalLinkType -> Maybe Text

-- | The link contains an authentication code. Call checkAuthenticationCode
--   with the code if the current authorization state is
--   authorizationStateWaitCode
InternalLinkTypeAuthenticationCode :: Maybe Text -> InternalLinkType

-- | The authentication code
[code] :: InternalLinkType -> Maybe Text

-- | The link is a link to a background. Call searchBackground with the
--   given background name to process the link If background is found and
--   the user wants to apply it, then call setDefaultBackground
InternalLinkTypeBackground :: Maybe Text -> InternalLinkType

-- | Name of the background
[background_name] :: InternalLinkType -> Maybe Text

-- | The link is a link to a Telegram bot, which is supposed to be added to
--   a channel chat as an administrator. Call searchPublicChat with the
--   given bot username and check that the user is a bot, ask the current
--   user to select a channel chat to add the bot to as an administrator.
--   Then, call getChatMember to receive the current bot rights in the chat
--   and if the bot already is an administrator, check that the current
--   user can edit its administrator rights and combine received rights
--   with the requested administrator rights. Then, show confirmation box
--   to the user, and call setChatMemberStatus with the chosen chat and
--   confirmed rights
InternalLinkTypeBotAddToChannel :: Maybe Text -> Maybe ChatAdministratorRights -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | Expected administrator rights for the bot
[administrator_rights] :: InternalLinkType -> Maybe ChatAdministratorRights

-- | The link is a link to a chat with a Telegram bot. Call
--   searchPublicChat with the given bot username, check that the user is a
--   bot, show START button in the chat with the bot, and then call
--   sendBotStartMessage with the given start parameter after the button is
--   pressed
InternalLinkTypeBotStart :: Maybe Text -> Maybe Text -> Maybe Bool -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | The parameter to be passed to sendBotStartMessage
[start_parameter] :: InternalLinkType -> Maybe Text

-- | True, if sendBotStartMessage must be called automatically without
--   showing the START button
[autostart] :: InternalLinkType -> Maybe Bool

-- | The link is a link to a Telegram bot, which is supposed to be added to
--   a group chat. Call searchPublicChat with the given bot username, check
--   that the user is a bot and can be added to groups, ask the current
--   user to select a basic group or a supergroup chat to add the bot to,
--   taking into account that bots can be added to a public supergroup only
--   by administrators of the supergroup. If administrator rights are
--   provided by the link, call getChatMember to receive the current bot
--   rights in the chat and if the bot already is an administrator, check
--   that the current user can edit its administrator rights, combine
--   received rights with the requested administrator rights, show
--   confirmation box to the user, and call setChatMemberStatus with the
--   chosen chat and confirmed administrator rights. Before call to
--   setChatMemberStatus it may be required to upgrade the chosen basic
--   group chat to a supergroup chat. Then, if start_parameter isn't empty,
--   call sendBotStartMessage with the given start parameter and the chosen
--   chat; otherwise, just send /start message with bot's username added to
--   the chat.
InternalLinkTypeBotStartInGroup :: Maybe Text -> Maybe Text -> Maybe ChatAdministratorRights -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | The parameter to be passed to sendBotStartMessage
[start_parameter] :: InternalLinkType -> Maybe Text

-- | Expected administrator rights for the bot
[administrator_rights] :: InternalLinkType -> Maybe ChatAdministratorRights

-- | The link is a link to a business chat. Use getBusinessChatLinkInfo
--   with the provided link name to get information about the link, then
--   open received private chat and replace chat draft with the provided
--   text
InternalLinkTypeBusinessChat :: Maybe Text -> InternalLinkType

-- | Name of the link
[link_name] :: InternalLinkType -> Maybe Text

-- | The link is a link to the change phone number section of the app
InternalLinkTypeChangePhoneNumber :: InternalLinkType

-- | The link is a link to boost a Telegram chat. Call getChatBoostLinkInfo
--   with the given URL to process the link. If the chat is found, then
--   call getChatBoostStatus and getAvailableChatBoostSlots to get the
--   current boost status and check whether the chat can be boosted. If the
--   user wants to boost the chat and the chat can be boosted, then call
--   boostChat
InternalLinkTypeChatBoost :: Maybe Text -> InternalLinkType

-- | URL to be passed to openWebApp
[url] :: InternalLinkType -> Maybe Text

-- | The link is an invite link to a chat folder. Call
--   checkChatFolderInviteLink with the given invite link to process the
--   link. If the link is valid and the user wants to join the chat folder,
--   then call addChatFolderByInviteLink
InternalLinkTypeChatFolderInvite :: Maybe Text -> InternalLinkType

-- | Internal representation of the invite link
[invite_link] :: InternalLinkType -> Maybe Text

-- | The link is a link to the folder section of the app settings
InternalLinkTypeChatFolderSettings :: InternalLinkType

-- | The link is a chat invite link. Call checkChatInviteLink with the
--   given invite link to process the link. If the link is valid and the
--   user wants to join the chat, then call joinChatByInviteLink
InternalLinkTypeChatInvite :: Maybe Text -> InternalLinkType

-- | Internal representation of the invite link
[invite_link] :: InternalLinkType -> Maybe Text

-- | The link is a link to the default message auto-delete timer settings
--   section of the app settings
InternalLinkTypeDefaultMessageAutoDeleteTimerSettings :: InternalLinkType

-- | The link is a link to the edit profile section of the app settings
InternalLinkTypeEditProfileSettings :: InternalLinkType

-- | The link is a link to a game. Call searchPublicChat with the given bot
--   username, check that the user is a bot, ask the current user to select
--   a chat to send the game, and then call sendMessage with
--   inputMessageGame
InternalLinkTypeGame :: Maybe Text -> Maybe Text -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | Short name of the game
[game_short_name] :: InternalLinkType -> Maybe Text

-- | The link must be opened in an Instant View. Call getWebPageInstantView
--   with the given URL to process the link. If Instant View is found, then
--   show it, otherwise, open the fallback URL in an external browser
InternalLinkTypeInstantView :: Maybe Text -> Maybe Text -> InternalLinkType

-- | URL to be passed to openWebApp
[url] :: InternalLinkType -> Maybe Text

-- | An URL to open if getWebPageInstantView fails
[fallback_url] :: InternalLinkType -> Maybe Text

-- | The link is a link to an invoice. Call getPaymentForm with the given
--   invoice name to process the link
InternalLinkTypeInvoice :: Maybe Text -> InternalLinkType

-- | Name of the invoice
[invoice_name] :: InternalLinkType -> Maybe Text

-- | The link is a link to a language pack. Call getLanguagePackInfo with
--   the given language pack identifier to process the link. If the
--   language pack is found and the user wants to apply it, then call
--   setOption for the option "language_pack_id"
InternalLinkTypeLanguagePack :: Maybe Text -> InternalLinkType

-- | Language pack identifier
[language_pack_id] :: InternalLinkType -> Maybe Text

-- | The link is a link to the language section of the app settings
InternalLinkTypeLanguageSettings :: InternalLinkType

-- | The link is a link to a Telegram message or a forum topic. Call
--   getMessageLinkInfo with the given URL to process the link, and then
--   open received forum topic or chat and show the message there
InternalLinkTypeMessage :: Maybe Text -> InternalLinkType

-- | URL to be passed to openWebApp
[url] :: InternalLinkType -> Maybe Text

-- | The link contains a message draft text. A share screen needs to be
--   shown to the user, then the chosen chat must be opened and the text is
--   added to the input field
InternalLinkTypeMessageDraft :: Maybe FormattedText -> Maybe Bool -> InternalLinkType

-- | Message draft text
[text] :: InternalLinkType -> Maybe FormattedText

-- | True, if the first line of the text contains a link. If true, the
--   input field needs to be focused and the text after the link must be
--   selected
[contains_link] :: InternalLinkType -> Maybe Bool

-- | The link contains a request of Telegram passport data. Call
--   getPassportAuthorizationForm with the given parameters to process the
--   link if the link was received from outside of the application;
--   otherwise, ignore it
InternalLinkTypePassportDataRequest :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> InternalLinkType

-- | User identifier of the service's bot; the corresponding user may be
--   unknown yet
[bot_user_id] :: InternalLinkType -> Maybe Int

-- | Telegram Passport element types requested by the service
[scope] :: InternalLinkType -> Maybe Text

-- | Service's public key
[public_key] :: InternalLinkType -> Maybe Text

-- | Unique request identifier provided by the service
[nonce] :: InternalLinkType -> Maybe Text

-- | An HTTP URL to open once the request is finished, canceled, or failed
--   with the parameters tg_passport=success, tg_passport=cancel, or
--   tg_passport=error&amp;error=... respectively. If empty, then
--   onActivityResult method must be used to return response on Android, or
--   the link tgbot{bot_user_id}:/<i>passport</i>success or
--   tgbot{bot_user_id}:/<i>passport</i>cancel must be opened otherwise
[callback_url] :: InternalLinkType -> Maybe Text

-- | The link can be used to confirm ownership of a phone number to prevent
--   account deletion. Call sendPhoneNumberCode with the given phone number
--   and with phoneNumberCodeTypeConfirmOwnership with the given hash to
--   process the link. If succeeded, call checkPhoneNumberCode to check
--   entered by the user code, or resendPhoneNumberCode to resend it
InternalLinkTypePhoneNumberConfirmation :: Maybe Text -> Maybe Text -> InternalLinkType

-- | Hash value from the link
[hash] :: InternalLinkType -> Maybe Text

-- | Phone number value from the link
[phone_number] :: InternalLinkType -> Maybe Text

-- | The link is a link to the Premium features screen of the application
--   from which the user can subscribe to Telegram Premium. Call
--   getPremiumFeatures with the given referrer to process the link
InternalLinkTypePremiumFeatures :: Maybe Text -> InternalLinkType

-- | Referrer specified in the link
[referrer] :: InternalLinkType -> Maybe Text

-- | The link is a link to the screen for gifting Telegram Premium
--   subscriptions to friends via inputInvoiceTelegram payments or in-store
--   purchases
InternalLinkTypePremiumGift :: Maybe Text -> InternalLinkType

-- | Referrer specified in the link
[referrer] :: InternalLinkType -> Maybe Text

-- | The link is a link with a Telegram Premium gift code. Call
--   checkPremiumGiftCode with the given code to process the link. If the
--   code is valid and the user wants to apply it, then call
--   applyPremiumGiftCode
InternalLinkTypePremiumGiftCode :: Maybe Text -> InternalLinkType

-- | The authentication code
[code] :: InternalLinkType -> Maybe Text

-- | The link is a link to the privacy and security section of the app
--   settings
InternalLinkTypePrivacyAndSecuritySettings :: InternalLinkType

-- | The link is a link to a proxy. Call addProxy with the given parameters
--   to process the link and add the proxy
InternalLinkTypeProxy :: Maybe Text -> Maybe Int -> Maybe ProxyType -> InternalLinkType

-- | Proxy server domain or IP address
[server] :: InternalLinkType -> Maybe Text

-- | Proxy server port
[port] :: InternalLinkType -> Maybe Int

-- | Type of the proxy
[_type] :: InternalLinkType -> Maybe ProxyType

-- | The link is a link to a chat by its username. Call searchPublicChat
--   with the given chat username to process the link If the chat is found,
--   open its profile information screen or the chat itself. If draft text
--   isn't empty and the chat is a private chat, then put the draft text in
--   the input field
InternalLinkTypePublicChat :: Maybe Text -> Maybe Text -> InternalLinkType

-- | Username of the chat
[chat_username] :: InternalLinkType -> Maybe Text

-- | Draft text for message to send in the chat
[draft_text] :: InternalLinkType -> Maybe Text

-- | The link can be used to login the current user on another device, but
--   it must be scanned from QR-code using in-app camera. An alert similar
--   to "This code can be used to allow someone to log in to your Telegram
--   account. To confirm Telegram login, please go to Settings &gt; Devices
--   &gt; Scan QR and scan the code" needs to be shown
InternalLinkTypeQrCodeAuthentication :: InternalLinkType

-- | The link forces restore of App Store purchases when opened. For
--   official iOS application only
InternalLinkTypeRestorePurchases :: InternalLinkType

-- | The link is a link to application settings
InternalLinkTypeSettings :: InternalLinkType

-- | The link is a link to a bot, which can be installed to the side menu.
--   Call searchPublicChat with the given bot username, check that the user
--   is a bot and can be added to attachment menu. Then, use
--   getAttachmentMenuBot to receive information about the bot. If the bot
--   isn't added to side menu, then show a disclaimer about Mini Apps being
--   a third-party apps, ask the user to accept their Terms of service and
--   confirm adding the bot to side and attachment menu. If the user accept
--   the terms and confirms adding, then use
--   toggleBotIsAddedToAttachmentMenu to add the bot. If the bot is added
--   to side menu, then use getWebAppUrl with the given URL and open the
--   returned URL as a Web App
InternalLinkTypeSideMenuBot :: Maybe Text -> Maybe Text -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | URL to be passed to openWebApp
[url] :: InternalLinkType -> Maybe Text

-- | The link is a link to a sticker set. Call searchStickerSet with the
--   given sticker set name to process the link and show the sticker set.
--   If the sticker set is found and the user wants to add it, then call
--   changeStickerSet
InternalLinkTypeStickerSet :: Maybe Text -> Maybe Bool -> InternalLinkType

-- | Name of the sticker set
[sticker_set_name] :: InternalLinkType -> Maybe Text

-- | True, if the sticker set is expected to contain custom emoji
[expect_custom_emoji] :: InternalLinkType -> Maybe Bool

-- | The link is a link to a story. Call searchPublicChat with the given
--   sender username, then call getStory with the received chat identifier
--   and the given story identifier, then show the story if received
InternalLinkTypeStory :: Maybe Text -> Maybe Int -> InternalLinkType

-- | Username of the sender of the story
[story_sender_username] :: InternalLinkType -> Maybe Text

-- | Story identifier
[story_id] :: InternalLinkType -> Maybe Int

-- | The link is a link to a theme. TDLib has no theme support yet
InternalLinkTypeTheme :: Maybe Text -> InternalLinkType

-- | Name of the theme
[theme_name] :: InternalLinkType -> Maybe Text

-- | The link is a link to the theme section of the app settings
InternalLinkTypeThemeSettings :: InternalLinkType

-- | The link is an unknown tg: link. Call getDeepLinkInfo to process the
--   link
InternalLinkTypeUnknownDeepLink :: Maybe Text -> InternalLinkType

-- | Link to be passed to getDeepLinkInfo
[link] :: InternalLinkType -> Maybe Text

-- | The link is a link to an unsupported proxy. An alert can be shown to
--   the user
InternalLinkTypeUnsupportedProxy :: InternalLinkType

-- | The link is a link to a user by its phone number. Call
--   searchUserByPhoneNumber with the given phone number to process the
--   link. If the user is found, then call createPrivateChat and open the
--   chat. If draft text isn't empty, then put the draft text in the input
--   field
InternalLinkTypeUserPhoneNumber :: Maybe Text -> Maybe Text -> InternalLinkType

-- | Phone number value from the link
[phone_number] :: InternalLinkType -> Maybe Text

-- | Draft text for message to send in the chat
[draft_text] :: InternalLinkType -> Maybe Text

-- | The link is a link to a user by a temporary token. Call
--   searchUserByToken with the given token to process the link. If the
--   user is found, then call createPrivateChat and open the chat
InternalLinkTypeUserToken :: Maybe Text -> InternalLinkType

-- | The token
[token] :: InternalLinkType -> Maybe Text

-- | The link is a link to a video chat. Call searchPublicChat with the
--   given chat username, and then joinGroupCall with the given invite hash
--   to process the link
InternalLinkTypeVideoChat :: Maybe Text -> Maybe Text -> Maybe Bool -> InternalLinkType

-- | Username of the chat
[chat_username] :: InternalLinkType -> Maybe Text

-- | If non-empty, invite hash to be used to join the video chat without
--   being muted by administrators
[invite_hash] :: InternalLinkType -> Maybe Text

-- | True, if the video chat is expected to be a live stream in a channel
--   or a broadcast group
[is_live_stream] :: InternalLinkType -> Maybe Bool

-- | The link is a link to a Web App. Call searchPublicChat with the given
--   bot username, check that the user is a bot, then call searchWebApp
--   with the received bot and the given web_app_short_name. Process
--   received foundWebApp by showing a confirmation dialog if needed. If
--   the bot can be added to attachment or side menu, but isn't added yet,
--   then show a disclaimer about Mini Apps being a third-party apps
--   instead of the dialog and ask the user to accept their Terms of
--   service. If the user accept the terms and confirms adding, then use
--   toggleBotIsAddedToAttachmentMenu to add the bot. Then, call
--   getWebAppLinkUrl and open the returned URL as a Web App
InternalLinkTypeWebApp :: Maybe Text -> Maybe Text -> Maybe Text -> InternalLinkType

-- | Username of the bot
[bot_username] :: InternalLinkType -> Maybe Text

-- | Short name of the Web App
[web_app_short_name] :: InternalLinkType -> Maybe Text

-- | The parameter to be passed to sendBotStartMessage
[start_parameter] :: InternalLinkType -> Maybe Text
instance GHC.Show.Show TD.Data.InternalLinkType.InternalLinkType
instance GHC.Classes.Eq TD.Data.InternalLinkType.InternalLinkType
instance TD.Lib.Internal.ShortShow TD.Data.InternalLinkType.InternalLinkType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InternalLinkType.InternalLinkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InternalLinkType.InternalLinkType

module TD.Data.PremiumPaymentOption
data PremiumPaymentOption

-- | Describes an option for buying Telegram Premium to a user
PremiumPaymentOption :: Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe InternalLinkType -> PremiumPaymentOption

-- | ISO 4217 currency code for Telegram Premium subscription payment
[currency] :: PremiumPaymentOption -> Maybe Text

-- | The amount to pay, in the smallest units of the currency
[amount] :: PremiumPaymentOption -> Maybe Int

-- | The discount associated with this option, as a percentage
[discount_percentage] :: PremiumPaymentOption -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: PremiumPaymentOption -> Maybe Int

-- | Identifier of the store product associated with the option
[store_product_id] :: PremiumPaymentOption -> Maybe Text

-- | An internal link to be opened for buying Telegram Premium to the user
--   if store payment isn't possible; may be null if direct payment isn't
--   available
[payment_link] :: PremiumPaymentOption -> Maybe InternalLinkType
instance GHC.Show.Show TD.Data.PremiumPaymentOption.PremiumPaymentOption
instance GHC.Classes.Eq TD.Data.PremiumPaymentOption.PremiumPaymentOption
instance TD.Lib.Internal.ShortShow TD.Data.PremiumPaymentOption.PremiumPaymentOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumPaymentOption.PremiumPaymentOption

module TD.Data.PremiumStatePaymentOption
data PremiumStatePaymentOption

-- | Describes an option for buying or upgrading Telegram Premium for self
PremiumStatePaymentOption :: Maybe PremiumPaymentOption -> Maybe Bool -> Maybe Bool -> Maybe Text -> PremiumStatePaymentOption

-- | Information about the payment option
[payment_option] :: PremiumStatePaymentOption -> Maybe PremiumPaymentOption

-- | True, if this is the currently used Telegram Premium subscription
--   option
[is_current] :: PremiumStatePaymentOption -> Maybe Bool

-- | True, if the payment option can be used to upgrade the existing
--   Telegram Premium subscription
[is_upgrade] :: PremiumStatePaymentOption -> Maybe Bool

-- | Identifier of the last in-store transaction for the currently used
--   option
[last_transaction_id] :: PremiumStatePaymentOption -> Maybe Text
instance GHC.Show.Show TD.Data.PremiumStatePaymentOption.PremiumStatePaymentOption
instance GHC.Classes.Eq TD.Data.PremiumStatePaymentOption.PremiumStatePaymentOption
instance TD.Lib.Internal.ShortShow TD.Data.PremiumStatePaymentOption.PremiumStatePaymentOption
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumStatePaymentOption.PremiumStatePaymentOption

module TD.Data.PremiumFeatures
data PremiumFeatures

-- | Contains information about features, available to Premium users
PremiumFeatures :: Maybe [PremiumFeature] -> Maybe [PremiumLimit] -> Maybe InternalLinkType -> PremiumFeatures

-- | The list of available features
[features] :: PremiumFeatures -> Maybe [PremiumFeature]

-- | The list of limits, increased for Premium users
[limits] :: PremiumFeatures -> Maybe [PremiumLimit]

-- | An internal link to be opened to pay for Telegram Premium if store
--   payment isn't possible; may be null if direct payment isn't available
[payment_link] :: PremiumFeatures -> Maybe InternalLinkType
instance GHC.Show.Show TD.Data.PremiumFeatures.PremiumFeatures
instance GHC.Classes.Eq TD.Data.PremiumFeatures.PremiumFeatures
instance TD.Lib.Internal.ShortShow TD.Data.PremiumFeatures.PremiumFeatures
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeatures.PremiumFeatures

module TD.Data.ChatMemberStatus

-- | Provides information about the status of a member in a chat
data ChatMemberStatus

-- | The user is the owner of the chat and has all the administrator
--   privileges
ChatMemberStatusCreator :: Maybe Text -> Maybe Bool -> Maybe Bool -> ChatMemberStatus

-- | A custom title of the owner; 0-16 characters without emojis;
--   applicable to supergroups only
[custom_title] :: ChatMemberStatus -> Maybe Text

-- | True, if the creator isn't shown in the chat member list and sends
--   messages anonymously; applicable to supergroups only
[is_anonymous] :: ChatMemberStatus -> Maybe Bool

-- | True, if the user is a member of the chat
[is_member] :: ChatMemberStatus -> Maybe Bool

-- | The user is a member of the chat and has some additional privileges.
--   In basic groups, administrators can edit and delete messages sent by
--   others, add new members, ban unprivileged members, and manage video
--   chats. In supergroups and channels, there are more detailed options
--   for administrator privileges
ChatMemberStatusAdministrator :: Maybe Text -> Maybe Bool -> Maybe ChatAdministratorRights -> ChatMemberStatus

-- | A custom title of the owner; 0-16 characters without emojis;
--   applicable to supergroups only
[custom_title] :: ChatMemberStatus -> Maybe Text

-- | True, if the current user can edit the administrator privileges for
--   the called user
[can_be_edited] :: ChatMemberStatus -> Maybe Bool

-- | Rights of the administrator
[rights] :: ChatMemberStatus -> Maybe ChatAdministratorRights

-- | The user is a member of the chat, without any additional privileges or
--   restrictions
ChatMemberStatusMember :: ChatMemberStatus

-- | The user is under certain restrictions in the chat. Not supported in
--   basic groups and channels
ChatMemberStatusRestricted :: Maybe Bool -> Maybe Int -> Maybe ChatPermissions -> ChatMemberStatus

-- | True, if the user is a member of the chat
[is_member] :: ChatMemberStatus -> Maybe Bool

-- | Point in time (Unix timestamp) when restrictions will be lifted from
--   the user; 0 if never. If the user is restricted for more than 366 days
--   or for less than 30 seconds from the current time, the user is
--   considered to be restricted forever
[restricted_until_date] :: ChatMemberStatus -> Maybe Int

-- | User permissions in the chat
[permissions] :: ChatMemberStatus -> Maybe ChatPermissions

-- | The user or the chat is not a chat member
ChatMemberStatusLeft :: ChatMemberStatus

-- | The user or the chat was banned (and hence is not a member of the
--   chat). Implies the user can't return to the chat, view messages, or be
--   used as a participant identifier to join a video chat of the chat
ChatMemberStatusBanned :: Maybe Int -> ChatMemberStatus

-- | Point in time (Unix timestamp) when the user will be unbanned; 0 if
--   never. If the user is banned for more than 366 days or for less than
--   30 seconds from the current time, the user is considered to be banned
--   forever. Always 0 in basic groups
[banned_until_date] :: ChatMemberStatus -> Maybe Int
instance GHC.Show.Show TD.Data.ChatMemberStatus.ChatMemberStatus
instance GHC.Classes.Eq TD.Data.ChatMemberStatus.ChatMemberStatus
instance TD.Lib.Internal.ShortShow TD.Data.ChatMemberStatus.ChatMemberStatus
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMemberStatus.ChatMemberStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatMemberStatus.ChatMemberStatus

module TD.Data.Supergroup
data Supergroup

-- | Represents a supergroup or channel with zero or more members
--   (subscribers in the case of channels). From the point of view of the
--   system, a channel is a special kind of a supergroup: only
--   administrators can post and see the list of members, and posts from
--   all administrators use the name and photo of the channel instead of
--   individual names and profile photos. Unlike supergroups, channels can
--   have an unlimited number of subscribers
Supergroup :: Maybe Int -> Maybe Usernames -> Maybe Int -> Maybe ChatMemberStatus -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Supergroup

-- | Supergroup or channel identifier
[_id] :: Supergroup -> Maybe Int

-- | Usernames of the supergroup or channel; may be null
[usernames] :: Supergroup -> Maybe Usernames

-- | Point in time (Unix timestamp) when the current user joined, or the
--   point in time when the supergroup or channel was created, in case the
--   user is not a member
[date] :: Supergroup -> Maybe Int

-- | Status of the current user in the supergroup or channel; custom title
--   will always be empty
[status] :: Supergroup -> Maybe ChatMemberStatus

-- | Number of members in the supergroup or channel; 0 if unknown.
--   Currently, it is guaranteed to be known only if the supergroup or
--   channel was received through getChatSimilarChats,
--   getChatsToSendStories, getCreatedPublicChats, getGroupsInCommon,
--   getInactiveSupergroupChats, getRecommendedChats,
--   getSuitableDiscussionChats, getUserPrivacySettingRules,
--   getVideoChatAvailableParticipants, searchChatsNearby,
--   searchPublicChats, or in chatFolderInviteLinkInfo.missing_chat_ids, or
--   in userFullInfo.personal_chat_id, or for chats with messages or
--   stories from publicForwards
[member_count] :: Supergroup -> Maybe Int

-- | Approximate boost level for the chat
[boost_level] :: Supergroup -> Maybe Int

-- | True, if the channel has a discussion group, or the supergroup is the
--   designated discussion group for a channel
[has_linked_chat] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is connected to a location, i.e. the
--   supergroup is a location-based supergroup
[has_location] :: Supergroup -> Maybe Bool

-- | True, if messages sent to the channel need to contain information
--   about the sender. This field is only applicable to channels
[sign_messages] :: Supergroup -> Maybe Bool

-- | True, if users need to join the supergroup before they can send
--   messages. Always true for channels and non-discussion supergroups
[join_to_send_messages] :: Supergroup -> Maybe Bool

-- | True, if all users directly joining the supergroup need to be approved
--   by supergroup administrators. Always false for channels and
--   supergroups without username, location, or a linked chat
[join_by_request] :: Supergroup -> Maybe Bool

-- | True, if the slow mode is enabled in the supergroup
[is_slow_mode_enabled] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is a channel
[is_channel] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is a broadcast group, i.e. only administrators
--   can send messages and there is no limit on the number of members
[is_broadcast_group] :: Supergroup -> Maybe Bool

-- | True, if the supergroup is a forum with topics
[is_forum] :: Supergroup -> Maybe Bool

-- | True, if the supergroup or channel is verified
[is_verified] :: Supergroup -> Maybe Bool

-- | If non-empty, contains a human-readable description of the reason why
--   access to this supergroup or channel must be restricted
[restriction_reason] :: Supergroup -> Maybe Text

-- | True, if many users reported this supergroup or channel as a scam
[is_scam] :: Supergroup -> Maybe Bool

-- | True, if many users reported this supergroup or channel as a fake
--   account
[is_fake] :: Supergroup -> Maybe Bool

-- | True, if the supergroup or channel has non-expired stories available
--   to the current user
[has_active_stories] :: Supergroup -> Maybe Bool

-- | True, if the supergroup or channel has unread non-expired stories
--   available to the current user
[has_unread_active_stories] :: Supergroup -> Maybe Bool
instance GHC.Show.Show TD.Data.Supergroup.Supergroup
instance GHC.Classes.Eq TD.Data.Supergroup.Supergroup
instance TD.Lib.Internal.ShortShow TD.Data.Supergroup.Supergroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Supergroup.Supergroup

module TD.Data.ChatMember
data ChatMember

-- | Describes a user or a chat as a member of another chat
ChatMember :: Maybe MessageSender -> Maybe Int -> Maybe Int -> Maybe ChatMemberStatus -> ChatMember

-- | Identifier of the chat member. Currently, other chats can be only Left
--   or Banned. Only supergroups and channels can have other chats as Left
--   or Banned members and these chats must be supergroups or channels
[member_id] :: ChatMember -> Maybe MessageSender

-- | Identifier of a user that invited<i>promoted</i>banned this member in
--   the chat; 0 if unknown
[inviter_user_id] :: ChatMember -> Maybe Int

-- | Point in time (Unix timestamp) when the user joined<i>was
--   promoted</i>was banned in the chat
[joined_chat_date] :: ChatMember -> Maybe Int

-- | Status of the member in the chat
[status] :: ChatMember -> Maybe ChatMemberStatus
instance GHC.Show.Show TD.Data.ChatMember.ChatMember
instance GHC.Classes.Eq TD.Data.ChatMember.ChatMember
instance TD.Lib.Internal.ShortShow TD.Data.ChatMember.ChatMember
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMember.ChatMember

module TD.Data.ChatMembers
data ChatMembers

-- | Contains a list of chat members
ChatMembers :: Maybe Int -> Maybe [ChatMember] -> ChatMembers

-- | Approximate total number of chat members found
[total_count] :: ChatMembers -> Maybe Int

-- | A list of chat members
[members] :: ChatMembers -> Maybe [ChatMember]
instance GHC.Show.Show TD.Data.ChatMembers.ChatMembers
instance GHC.Classes.Eq TD.Data.ChatMembers.ChatMembers
instance TD.Lib.Internal.ShortShow TD.Data.ChatMembers.ChatMembers
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatMembers.ChatMembers

module TD.Data.ChatAdministrator
data ChatAdministrator

-- | Contains information about a chat administrator
ChatAdministrator :: Maybe Int -> Maybe Text -> Maybe Bool -> ChatAdministrator

-- | User identifier of the administrator
[user_id] :: ChatAdministrator -> Maybe Int

-- | Custom title of the administrator
[custom_title] :: ChatAdministrator -> Maybe Text

-- | True, if the user is the owner of the chat
[is_owner] :: ChatAdministrator -> Maybe Bool
instance GHC.Show.Show TD.Data.ChatAdministrator.ChatAdministrator
instance GHC.Classes.Eq TD.Data.ChatAdministrator.ChatAdministrator
instance TD.Lib.Internal.ShortShow TD.Data.ChatAdministrator.ChatAdministrator
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministrator.ChatAdministrator

module TD.Data.ChatAdministrators
data ChatAdministrators

-- | Represents a list of chat administrators
ChatAdministrators :: Maybe [ChatAdministrator] -> ChatAdministrators

-- | A list of chat administrators
[administrators] :: ChatAdministrators -> Maybe [ChatAdministrator]
instance GHC.Show.Show TD.Data.ChatAdministrators.ChatAdministrators
instance GHC.Classes.Eq TD.Data.ChatAdministrators.ChatAdministrators
instance TD.Lib.Internal.ShortShow TD.Data.ChatAdministrators.ChatAdministrators
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAdministrators.ChatAdministrators

module TD.Data.ChatActiveStories
data ChatActiveStories

-- | Describes active stories posted by a chat
ChatActiveStories :: Maybe Int -> Maybe StoryList -> Maybe Int -> Maybe Int -> Maybe [StoryInfo] -> ChatActiveStories

-- | Identifier of the chat that posted the stories
[chat_id] :: ChatActiveStories -> Maybe Int

-- | Identifier of the story list in which the stories are shown; may be
--   null if the stories aren't shown in a story list
[list] :: ChatActiveStories -> Maybe StoryList

-- | A parameter used to determine order of the stories in the story list;
--   0 if the stories doesn't need to be shown in the story list. Stories
--   must be sorted by the pair (order, story_sender_chat_id) in descending
--   order
[order] :: ChatActiveStories -> Maybe Int

-- | Identifier of the last read active story
[max_read_story_id] :: ChatActiveStories -> Maybe Int

-- | Basic information about the stories; use getStory to get full
--   information about the stories. The stories are in a chronological
--   order (i.e., in order of increasing story identifiers)
[stories] :: ChatActiveStories -> Maybe [StoryInfo]
instance GHC.Show.Show TD.Data.ChatActiveStories.ChatActiveStories
instance GHC.Classes.Eq TD.Data.ChatActiveStories.ChatActiveStories
instance TD.Lib.Internal.ShortShow TD.Data.ChatActiveStories.ChatActiveStories
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatActiveStories.ChatActiveStories

module TD.Data.ChatActionBar

-- | Describes actions which must be possible to do through a chat action
--   bar
data ChatActionBar

-- | The chat can be reported as spam using the method reportChat with the
--   reason reportReasonSpam. If the chat is a private chat with a user
--   with an emoji status, then a notice about emoji status usage must be
--   shown
ChatActionBarReportSpam :: Maybe Bool -> ChatActionBar

-- | If true, the chat was automatically archived and can be moved back to
--   the main chat list using addChatToList simultaneously with setting
--   chat notification settings to default using
--   setChatNotificationSettings
[can_unarchive] :: ChatActionBar -> Maybe Bool

-- | The chat is a location-based supergroup, which can be reported as
--   having unrelated location using the method reportChat with the reason
--   reportReasonUnrelatedLocation
ChatActionBarReportUnrelatedLocation :: ChatActionBar

-- | The chat is a recently created group chat to which new members can be
--   invited
ChatActionBarInviteMembers :: ChatActionBar

-- | The chat is a private or secret chat, which can be reported using the
--   method reportChat, or the other user can be blocked using the method
--   setMessageSenderBlockList, or the other user can be added to the
--   contact list using the method addContact. If the chat is a private
--   chat with a user with an emoji status, then a notice about emoji
--   status usage must be shown
ChatActionBarReportAddBlock :: Maybe Bool -> Maybe Int -> ChatActionBar

-- | If true, the chat was automatically archived and can be moved back to
--   the main chat list using addChatToList simultaneously with setting
--   chat notification settings to default using
--   setChatNotificationSettings
[can_unarchive] :: ChatActionBar -> Maybe Bool

-- | If non-negative, the current user was found by the other user through
--   searchChatsNearby and this is the distance between the users
[distance] :: ChatActionBar -> Maybe Int

-- | The chat is a private or secret chat and the other user can be added
--   to the contact list using the method addContact
ChatActionBarAddContact :: ChatActionBar

-- | The chat is a private or secret chat with a mutual contact and the
--   user's phone number can be shared with the other user using the method
--   sharePhoneNumber
ChatActionBarSharePhoneNumber :: ChatActionBar

-- | The chat is a private chat with an administrator of a chat to which
--   the user sent join request
ChatActionBarJoinRequest :: Maybe Text -> Maybe Bool -> Maybe Int -> ChatActionBar

-- | Title of the chat to which the join request was sent
[title] :: ChatActionBar -> Maybe Text

-- | True, if the join request was sent to a channel chat
[is_channel] :: ChatActionBar -> Maybe Bool

-- | Point in time (Unix timestamp) when the join request was sent
[request_date] :: ChatActionBar -> Maybe Int
instance GHC.Show.Show TD.Data.ChatActionBar.ChatActionBar
instance GHC.Classes.Eq TD.Data.ChatActionBar.ChatActionBar
instance TD.Lib.Internal.ShortShow TD.Data.ChatActionBar.ChatActionBar
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatActionBar.ChatActionBar

module TD.Data.ChatAction

-- | Describes the different types of activity in a chat
data ChatAction

-- | The user is typing a message
ChatActionTyping :: ChatAction

-- | The user is recording a video
ChatActionRecordingVideo :: ChatAction

-- | The user is uploading a video
ChatActionUploadingVideo :: Maybe Int -> ChatAction

-- | Upload progress, as a percentage
[progress] :: ChatAction -> Maybe Int

-- | The user is recording a voice note
ChatActionRecordingVoiceNote :: ChatAction

-- | The user is uploading a voice note
ChatActionUploadingVoiceNote :: Maybe Int -> ChatAction

-- | Upload progress, as a percentage
[progress] :: ChatAction -> Maybe Int

-- | The user is uploading a photo
ChatActionUploadingPhoto :: Maybe Int -> ChatAction

-- | Upload progress, as a percentage
[progress] :: ChatAction -> Maybe Int

-- | The user is uploading a document
ChatActionUploadingDocument :: Maybe Int -> ChatAction

-- | Upload progress, as a percentage
[progress] :: ChatAction -> Maybe Int

-- | The user is picking a sticker to send
ChatActionChoosingSticker :: ChatAction

-- | The user is picking a location or venue to send
ChatActionChoosingLocation :: ChatAction

-- | The user is picking a contact to send
ChatActionChoosingContact :: ChatAction

-- | The user has started to play a game
ChatActionStartPlayingGame :: ChatAction

-- | The user is recording a video note
ChatActionRecordingVideoNote :: ChatAction

-- | The user is uploading a video note
ChatActionUploadingVideoNote :: Maybe Int -> ChatAction

-- | Upload progress, as a percentage
[progress] :: ChatAction -> Maybe Int

-- | The user is watching animations sent by the other party by clicking on
--   an animated emoji
ChatActionWatchingAnimations :: Maybe Text -> ChatAction

-- | The animated emoji
[emoji] :: ChatAction -> Maybe Text

-- | The user has canceled the previous action
ChatActionCancel :: ChatAction
instance GHC.Show.Show TD.Data.ChatAction.ChatAction
instance GHC.Classes.Eq TD.Data.ChatAction.ChatAction
instance TD.Lib.Internal.ShortShow TD.Data.ChatAction.ChatAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatAction.ChatAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatAction.ChatAction

module TD.Data.CanTransferOwnershipResult

-- | Represents result of checking whether the current session can be used
--   to transfer a chat ownership to another user
data CanTransferOwnershipResult

-- | The session can be used
CanTransferOwnershipResultOk :: CanTransferOwnershipResult

-- | The 2-step verification needs to be enabled first
CanTransferOwnershipResultPasswordNeeded :: CanTransferOwnershipResult

-- | The 2-step verification was enabled recently, user needs to wait
CanTransferOwnershipResultPasswordTooFresh :: Maybe Int -> CanTransferOwnershipResult

-- | Time left before the session can be used to transfer ownership of a
--   chat, in seconds
[retry_after] :: CanTransferOwnershipResult -> Maybe Int

-- | The session was created recently, user needs to wait
CanTransferOwnershipResultSessionTooFresh :: Maybe Int -> CanTransferOwnershipResult

-- | Time left before the session can be used to transfer ownership of a
--   chat, in seconds
[retry_after] :: CanTransferOwnershipResult -> Maybe Int
instance GHC.Show.Show TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance GHC.Classes.Eq TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance TD.Lib.Internal.ShortShow TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CanTransferOwnershipResult.CanTransferOwnershipResult

module TD.Data.CanSendStoryResult

-- | Represents result of checking whether the current user can send a
--   story in the specific chat
data CanSendStoryResult

-- | A story can be sent
CanSendStoryResultOk :: CanSendStoryResult

-- | The user must subscribe to Telegram Premium to be able to post stories
CanSendStoryResultPremiumNeeded :: CanSendStoryResult

-- | The chat must be boosted first by Telegram Premium subscribers to post
--   more stories. Call getChatBoostStatus to get current boost status of
--   the chat
CanSendStoryResultBoostNeeded :: CanSendStoryResult

-- | The limit for the number of active stories exceeded. The user can buy
--   Telegram Premium, delete an active story, or wait for the oldest story
--   to expire
CanSendStoryResultActiveStoryLimitExceeded :: CanSendStoryResult

-- | The weekly limit for the number of posted stories exceeded. The user
--   needs to buy Telegram Premium or wait specified time
CanSendStoryResultWeeklyLimitExceeded :: Maybe Int -> CanSendStoryResult

-- | Time left before the user can send the next story
[retry_after] :: CanSendStoryResult -> Maybe Int

-- | The monthly limit for the number of posted stories exceeded. The user
--   needs to buy Telegram Premium or wait specified time
CanSendStoryResultMonthlyLimitExceeded :: Maybe Int -> CanSendStoryResult

-- | Time left before the user can send the next story
[retry_after] :: CanSendStoryResult -> Maybe Int
instance GHC.Show.Show TD.Data.CanSendStoryResult.CanSendStoryResult
instance GHC.Classes.Eq TD.Data.CanSendStoryResult.CanSendStoryResult
instance TD.Lib.Internal.ShortShow TD.Data.CanSendStoryResult.CanSendStoryResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CanSendStoryResult.CanSendStoryResult

module TD.Data.CanSendMessageToUserResult

-- | Describes result of canSendMessageToUser
data CanSendMessageToUserResult

-- | The user can be messaged
CanSendMessageToUserResultOk :: CanSendMessageToUserResult

-- | The user can't be messaged, because they are deleted or unknown
CanSendMessageToUserResultUserIsDeleted :: CanSendMessageToUserResult

-- | The user can't be messaged, because they restrict new chats with
--   non-contacts
CanSendMessageToUserResultUserRestrictsNewChats :: CanSendMessageToUserResult
instance GHC.Show.Show TD.Data.CanSendMessageToUserResult.CanSendMessageToUserResult
instance GHC.Classes.Eq TD.Data.CanSendMessageToUserResult.CanSendMessageToUserResult
instance TD.Lib.Internal.ShortShow TD.Data.CanSendMessageToUserResult.CanSendMessageToUserResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CanSendMessageToUserResult.CanSendMessageToUserResult

module TD.Data.CallbackQueryPayload

-- | Represents a payload of a callback query
data CallbackQueryPayload

-- | The payload for a general callback button
CallbackQueryPayloadData :: Maybe ByteString -> CallbackQueryPayload

-- | Data that was attached to the callback button
[_data] :: CallbackQueryPayload -> Maybe ByteString

-- | The payload for a callback button requiring password
CallbackQueryPayloadDataWithPassword :: Maybe Text -> Maybe ByteString -> CallbackQueryPayload

-- | The 2-step verification password for the current user
[password] :: CallbackQueryPayload -> Maybe Text

-- | Data that was attached to the callback button
[_data] :: CallbackQueryPayload -> Maybe ByteString

-- | The payload for a game callback button
CallbackQueryPayloadGame :: Maybe Text -> CallbackQueryPayload

-- | A short name of the game that was attached to the callback button
[game_short_name] :: CallbackQueryPayload -> Maybe Text
instance GHC.Show.Show TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance GHC.Classes.Eq TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance TD.Lib.Internal.ShortShow TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallbackQueryPayload.CallbackQueryPayload
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallbackQueryPayload.CallbackQueryPayload

module TD.Data.CallbackQueryAnswer
data CallbackQueryAnswer

-- | Contains a bot's answer to a callback query
CallbackQueryAnswer :: Maybe Text -> Maybe Bool -> Maybe Text -> CallbackQueryAnswer

-- | Text of the answer
[text] :: CallbackQueryAnswer -> Maybe Text

-- | True, if an alert must be shown to the user instead of a toast
--   notification
[show_alert] :: CallbackQueryAnswer -> Maybe Bool

-- | URL to be opened
[url] :: CallbackQueryAnswer -> Maybe Text
instance GHC.Show.Show TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance GHC.Classes.Eq TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance TD.Lib.Internal.ShortShow TD.Data.CallbackQueryAnswer.CallbackQueryAnswer
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallbackQueryAnswer.CallbackQueryAnswer

module TD.Data.CallServerType

-- | Describes the type of call server
data CallServerType

-- | A Telegram call reflector
CallServerTypeTelegramReflector :: Maybe ByteString -> Maybe Bool -> CallServerType

-- | A peer tag to be used with the reflector
[peer_tag] :: CallServerType -> Maybe ByteString

-- | True, if the server uses TCP instead of UDP
[is_tcp] :: CallServerType -> Maybe Bool

-- | A WebRTC server
CallServerTypeWebrtc :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> CallServerType

-- | Username to be used for authentication
[username] :: CallServerType -> Maybe Text

-- | Authentication password
[password] :: CallServerType -> Maybe Text

-- | True, if the server supports TURN
[supports_turn] :: CallServerType -> Maybe Bool

-- | True, if the server supports STUN
[supports_stun] :: CallServerType -> Maybe Bool
instance GHC.Show.Show TD.Data.CallServerType.CallServerType
instance GHC.Classes.Eq TD.Data.CallServerType.CallServerType
instance TD.Lib.Internal.ShortShow TD.Data.CallServerType.CallServerType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallServerType.CallServerType

module TD.Data.CallServer
data CallServer

-- | Describes a server for relaying call data
CallServer :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe CallServerType -> CallServer

-- | Server identifier
[_id] :: CallServer -> Maybe Int

-- | Server IPv4 address
[ip_address] :: CallServer -> Maybe Text

-- | Server IPv6 address
[ipv6_address] :: CallServer -> Maybe Text

-- | Server port number
[port] :: CallServer -> Maybe Int

-- | Server type
[_type] :: CallServer -> Maybe CallServerType
instance GHC.Show.Show TD.Data.CallServer.CallServer
instance GHC.Classes.Eq TD.Data.CallServer.CallServer
instance TD.Lib.Internal.ShortShow TD.Data.CallServer.CallServer
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallServer.CallServer

module TD.Data.CallProtocol
data CallProtocol

-- | Specifies the supported call protocols
CallProtocol :: Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe [Text] -> CallProtocol

-- | True, if UDP peer-to-peer connections are supported
[udp_p2p] :: CallProtocol -> Maybe Bool

-- | True, if connection through UDP reflectors is supported
[udp_reflector] :: CallProtocol -> Maybe Bool

-- | The minimum supported API layer; use 65
[min_layer] :: CallProtocol -> Maybe Int

-- | The maximum supported API layer; use 92
[max_layer] :: CallProtocol -> Maybe Int

-- | List of supported tgcalls versions
[library_versions] :: CallProtocol -> Maybe [Text]
defaultCallProtocol :: CallProtocol
instance GHC.Show.Show TD.Data.CallProtocol.CallProtocol
instance GHC.Classes.Eq TD.Data.CallProtocol.CallProtocol
instance TD.Lib.Internal.ShortShow TD.Data.CallProtocol.CallProtocol
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallProtocol.CallProtocol
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallProtocol.CallProtocol

module TD.Data.CallProblem

-- | Describes the exact type of problem with a call
data CallProblem

-- | The user heard their own voice
CallProblemEcho :: CallProblem

-- | The user heard background noise
CallProblemNoise :: CallProblem

-- | The other side kept disappearing
CallProblemInterruptions :: CallProblem

-- | The speech was distorted
CallProblemDistortedSpeech :: CallProblem

-- | The user couldn't hear the other side
CallProblemSilentLocal :: CallProblem

-- | The other side couldn't hear the user
CallProblemSilentRemote :: CallProblem

-- | The call ended unexpectedly
CallProblemDropped :: CallProblem

-- | The video was distorted
CallProblemDistortedVideo :: CallProblem

-- | The video was pixelated
CallProblemPixelatedVideo :: CallProblem
instance GHC.Show.Show TD.Data.CallProblem.CallProblem
instance GHC.Classes.Eq TD.Data.CallProblem.CallProblem
instance TD.Lib.Internal.ShortShow TD.Data.CallProblem.CallProblem
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallProblem.CallProblem
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.CallProblem.CallProblem

module TD.Data.CallId
data CallId

-- | Contains the call identifier
CallId :: Maybe Int -> CallId

-- | Call identifier
[_id] :: CallId -> Maybe Int
instance GHC.Show.Show TD.Data.CallId.CallId
instance GHC.Classes.Eq TD.Data.CallId.CallId
instance TD.Lib.Internal.ShortShow TD.Data.CallId.CallId
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallId.CallId

module TD.Data.CallDiscardReason

-- | Describes the reason why a call was discarded
data CallDiscardReason

-- | The call wasn't discarded, or the reason is unknown
CallDiscardReasonEmpty :: CallDiscardReason

-- | The call was ended before the conversation started. It was canceled by
--   the caller or missed by the other party
CallDiscardReasonMissed :: CallDiscardReason

-- | The call was ended before the conversation started. It was declined by
--   the other party
CallDiscardReasonDeclined :: CallDiscardReason

-- | The call was ended during the conversation because the users were
--   disconnected
CallDiscardReasonDisconnected :: CallDiscardReason

-- | The call was ended because one of the parties hung up
CallDiscardReasonHungUp :: CallDiscardReason
instance GHC.Show.Show TD.Data.CallDiscardReason.CallDiscardReason
instance GHC.Classes.Eq TD.Data.CallDiscardReason.CallDiscardReason
instance TD.Lib.Internal.ShortShow TD.Data.CallDiscardReason.CallDiscardReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallDiscardReason.CallDiscardReason

module TD.Data.CallState

-- | Describes the current call state
data CallState

-- | The call is pending, waiting to be accepted by a user
CallStatePending :: Maybe Bool -> Maybe Bool -> CallState

-- | True, if the call has already been created by the server
[is_created] :: CallState -> Maybe Bool

-- | True, if the call has already been received by the other party
[is_received] :: CallState -> Maybe Bool

-- | The call has been answered and encryption keys are being exchanged
CallStateExchangingKeys :: CallState

-- | The call is ready to use
CallStateReady :: Maybe CallProtocol -> Maybe [CallServer] -> Maybe Text -> Maybe ByteString -> Maybe [Text] -> Maybe Bool -> Maybe Text -> CallState

-- | Call protocols supported by the other call participant
[protocol] :: CallState -> Maybe CallProtocol

-- | List of available call servers
[servers] :: CallState -> Maybe [CallServer]

-- | A JSON-encoded call config
[config] :: CallState -> Maybe Text

-- | Call encryption key
[encryption_key] :: CallState -> Maybe ByteString

-- | Encryption key emojis fingerprint
[emojis] :: CallState -> Maybe [Text]

-- | True, if peer-to-peer connection is allowed by users privacy settings
[allow_p2p] :: CallState -> Maybe Bool

-- | Custom JSON-encoded call parameters to be passed to tgcalls
[custom_parameters] :: CallState -> Maybe Text

-- | The call is hanging up after discardCall has been called
CallStateHangingUp :: CallState

-- | The call has ended successfully
CallStateDiscarded :: Maybe CallDiscardReason -> Maybe Bool -> Maybe Bool -> Maybe Bool -> CallState

-- | The reason why the call has ended
[reason] :: CallState -> Maybe CallDiscardReason

-- | True, if the call rating must be sent to the server
[need_rating] :: CallState -> Maybe Bool

-- | True, if the call debug information must be sent to the server
[need_debug_information] :: CallState -> Maybe Bool

-- | True, if the call log must be sent to the server
[need_log] :: CallState -> Maybe Bool

-- | The call has ended with an error
CallStateError :: Maybe Error -> CallState

-- | Error. An error with the code 4005000 will be returned if an outgoing
--   call is missed because of an expired timeout
[_error] :: CallState -> Maybe Error
instance GHC.Show.Show TD.Data.CallState.CallState
instance GHC.Classes.Eq TD.Data.CallState.CallState
instance TD.Lib.Internal.ShortShow TD.Data.CallState.CallState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CallState.CallState

module TD.Data.Call
data Call

-- | Describes a call
Call :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe CallState -> Call

-- | Call identifier, not persistent
[_id] :: Call -> Maybe Int

-- | User identifier of the other call participant
[user_id] :: Call -> Maybe Int

-- | True, if the call is outgoing
[is_outgoing] :: Call -> Maybe Bool

-- | True, if the call is a video call
[is_video] :: Call -> Maybe Bool

-- | Call state
[state] :: Call -> Maybe CallState
instance GHC.Show.Show TD.Data.Call.Call
instance GHC.Classes.Eq TD.Data.Call.Call
instance TD.Lib.Internal.ShortShow TD.Data.Call.Call
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Call.Call

module TD.Data.BusinessStartPage
data BusinessStartPage

-- | Describes settings for a business account start page
BusinessStartPage :: Maybe Text -> Maybe Text -> Maybe Sticker -> BusinessStartPage

-- | Title text of the start page
[title] :: BusinessStartPage -> Maybe Text

-- | Message text of the start page
[message] :: BusinessStartPage -> Maybe Text

-- | Greeting sticker of the start page; may be null if none
[sticker] :: BusinessStartPage -> Maybe Sticker
instance GHC.Show.Show TD.Data.BusinessStartPage.BusinessStartPage
instance GHC.Classes.Eq TD.Data.BusinessStartPage.BusinessStartPage
instance TD.Lib.Internal.ShortShow TD.Data.BusinessStartPage.BusinessStartPage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessStartPage.BusinessStartPage

module TD.Data.BusinessRecipients
data BusinessRecipients

-- | Describes private chats chosen for automatic interaction with a
--   business
BusinessRecipients :: Maybe [Int] -> Maybe [Int] -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> BusinessRecipients

-- | Identifiers of selected private chats
[chat_ids] :: BusinessRecipients -> Maybe [Int]

-- | Identifiers of private chats that are always excluded; for
--   businessConnectedBot only
[excluded_chat_ids] :: BusinessRecipients -> Maybe [Int]

-- | True, if all existing private chats are selected
[select_existing_chats] :: BusinessRecipients -> Maybe Bool

-- | True, if all new private chats are selected
[select_new_chats] :: BusinessRecipients -> Maybe Bool

-- | True, if all private chats with contacts are selected
[select_contacts] :: BusinessRecipients -> Maybe Bool

-- | True, if all private chats with non-contacts are selected
[select_non_contacts] :: BusinessRecipients -> Maybe Bool

-- | If true, then all private chats except the selected are chosen.
--   Otherwise, only the selected chats are chosen
[exclude_selected] :: BusinessRecipients -> Maybe Bool
defaultBusinessRecipients :: BusinessRecipients
instance GHC.Show.Show TD.Data.BusinessRecipients.BusinessRecipients
instance GHC.Classes.Eq TD.Data.BusinessRecipients.BusinessRecipients
instance TD.Lib.Internal.ShortShow TD.Data.BusinessRecipients.BusinessRecipients
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessRecipients.BusinessRecipients
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessRecipients.BusinessRecipients

module TD.Data.BusinessOpeningHoursInterval
data BusinessOpeningHoursInterval

-- | Describes an interval of time when the business is open
BusinessOpeningHoursInterval :: Maybe Int -> Maybe Int -> BusinessOpeningHoursInterval

-- | The minute's sequence number in a week, starting on Monday, marking
--   the start of the time interval during which the business is open;
--   0-7*24*60
[start_minute] :: BusinessOpeningHoursInterval -> Maybe Int

-- | The minute's sequence number in a week, starting on Monday, marking
--   the end of the time interval during which the business is open;
--   1-8*24*60
[end_minute] :: BusinessOpeningHoursInterval -> Maybe Int
defaultBusinessOpeningHoursInterval :: BusinessOpeningHoursInterval
instance GHC.Show.Show TD.Data.BusinessOpeningHoursInterval.BusinessOpeningHoursInterval
instance GHC.Classes.Eq TD.Data.BusinessOpeningHoursInterval.BusinessOpeningHoursInterval
instance TD.Lib.Internal.ShortShow TD.Data.BusinessOpeningHoursInterval.BusinessOpeningHoursInterval
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessOpeningHoursInterval.BusinessOpeningHoursInterval
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessOpeningHoursInterval.BusinessOpeningHoursInterval

module TD.Data.BusinessOpeningHours
data BusinessOpeningHours

-- | Describes opening hours of a business
BusinessOpeningHours :: Maybe Text -> Maybe [BusinessOpeningHoursInterval] -> BusinessOpeningHours

-- | Unique time zone identifier
[time_zone_id] :: BusinessOpeningHours -> Maybe Text

-- | Intervals of the time when the business is open
[opening_hours] :: BusinessOpeningHours -> Maybe [BusinessOpeningHoursInterval]
defaultBusinessOpeningHours :: BusinessOpeningHours
instance GHC.Show.Show TD.Data.BusinessOpeningHours.BusinessOpeningHours
instance GHC.Classes.Eq TD.Data.BusinessOpeningHours.BusinessOpeningHours
instance TD.Lib.Internal.ShortShow TD.Data.BusinessOpeningHours.BusinessOpeningHours
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessOpeningHours.BusinessOpeningHours
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessOpeningHours.BusinessOpeningHours

module TD.Data.BusinessLocation
data BusinessLocation

-- | Represents a location of a business
BusinessLocation :: Maybe Location -> Maybe Text -> BusinessLocation

-- | The location; may be null if not specified
[location] :: BusinessLocation -> Maybe Location

-- | Location address; 1-96 characters
[address] :: BusinessLocation -> Maybe Text
defaultBusinessLocation :: BusinessLocation
instance GHC.Show.Show TD.Data.BusinessLocation.BusinessLocation
instance GHC.Classes.Eq TD.Data.BusinessLocation.BusinessLocation
instance TD.Lib.Internal.ShortShow TD.Data.BusinessLocation.BusinessLocation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessLocation.BusinessLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessLocation.BusinessLocation

module TD.Data.BusinessGreetingMessageSettings
data BusinessGreetingMessageSettings

-- | Describes settings for greeting messages that are automatically sent
--   by a Telegram Business account as response to incoming messages in an
--   inactive private chat
BusinessGreetingMessageSettings :: Maybe Int -> Maybe BusinessRecipients -> Maybe Int -> BusinessGreetingMessageSettings

-- | Unique quick reply shortcut identifier for the greeting messages
[shortcut_id] :: BusinessGreetingMessageSettings -> Maybe Int

-- | Chosen recipients of the greeting messages
[recipients] :: BusinessGreetingMessageSettings -> Maybe BusinessRecipients

-- | The number of days after which a chat will be considered as inactive;
--   currently, must be on of 7, 14, 21, or 28
[inactivity_days] :: BusinessGreetingMessageSettings -> Maybe Int
defaultBusinessGreetingMessageSettings :: BusinessGreetingMessageSettings
instance GHC.Show.Show TD.Data.BusinessGreetingMessageSettings.BusinessGreetingMessageSettings
instance GHC.Classes.Eq TD.Data.BusinessGreetingMessageSettings.BusinessGreetingMessageSettings
instance TD.Lib.Internal.ShortShow TD.Data.BusinessGreetingMessageSettings.BusinessGreetingMessageSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessGreetingMessageSettings.BusinessGreetingMessageSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessGreetingMessageSettings.BusinessGreetingMessageSettings

module TD.Data.BusinessFeature

-- | Describes a feature available to Business user accounts
data BusinessFeature

-- | The ability to set location
BusinessFeatureLocation :: BusinessFeature

-- | The ability to set opening hours
BusinessFeatureOpeningHours :: BusinessFeature

-- | The ability to use quick replies
BusinessFeatureQuickReplies :: BusinessFeature

-- | The ability to set up a greeting message
BusinessFeatureGreetingMessage :: BusinessFeature

-- | The ability to set up an away message
BusinessFeatureAwayMessage :: BusinessFeature

-- | The ability to create links to the business account with predefined
--   message text
BusinessFeatureAccountLinks :: BusinessFeature

-- | The ability to customize start page
BusinessFeatureStartPage :: BusinessFeature

-- | The ability to connect a bot to the account
BusinessFeatureBots :: BusinessFeature

-- | The ability to show an emoji status along with the business name
BusinessFeatureEmojiStatus :: BusinessFeature

-- | The ability to display folder names for each chat in the chat list
BusinessFeatureChatFolderTags :: BusinessFeature

-- | Allowed to use many additional features for stories
BusinessFeatureUpgradedStories :: BusinessFeature
instance GHC.Show.Show TD.Data.BusinessFeature.BusinessFeature
instance GHC.Classes.Eq TD.Data.BusinessFeature.BusinessFeature
instance TD.Lib.Internal.ShortShow TD.Data.BusinessFeature.BusinessFeature
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessFeature.BusinessFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessFeature.BusinessFeature

module TD.Data.PremiumSource

-- | Describes a source from which the Premium features screen is opened
data PremiumSource

-- | A limit was exceeded
PremiumSourceLimitExceeded :: Maybe PremiumLimitType -> PremiumSource

-- | Type of the exceeded limit
[limit_type] :: PremiumSource -> Maybe PremiumLimitType

-- | A user tried to use a Premium feature
PremiumSourceFeature :: Maybe PremiumFeature -> PremiumSource

-- | The used feature
[feature] :: PremiumSource -> Maybe PremiumFeature

-- | A user tried to use a Business feature
PremiumSourceBusinessFeature :: Maybe BusinessFeature -> PremiumSource

-- | The used feature; pass null if none specific feature was used
[_feature] :: PremiumSource -> Maybe BusinessFeature

-- | A user tried to use a Premium story feature
PremiumSourceStoryFeature :: Maybe PremiumStoryFeature -> PremiumSource

-- | The used feature
[__feature] :: PremiumSource -> Maybe PremiumStoryFeature

-- | A user opened an internal link of the type
--   internalLinkTypePremiumFeatures
PremiumSourceLink :: Maybe Text -> PremiumSource

-- | The referrer from the link
[referrer] :: PremiumSource -> Maybe Text

-- | A user opened the Premium features screen from settings
PremiumSourceSettings :: PremiumSource
instance GHC.Show.Show TD.Data.PremiumSource.PremiumSource
instance GHC.Classes.Eq TD.Data.PremiumSource.PremiumSource
instance TD.Lib.Internal.ShortShow TD.Data.PremiumSource.PremiumSource
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumSource.PremiumSource
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.PremiumSource.PremiumSource

module TD.Data.BusinessFeatures
data BusinessFeatures

-- | Contains information about features, available to Business user
--   accounts
BusinessFeatures :: Maybe [BusinessFeature] -> BusinessFeatures

-- | The list of available business features
[features] :: BusinessFeatures -> Maybe [BusinessFeature]
instance GHC.Show.Show TD.Data.BusinessFeatures.BusinessFeatures
instance GHC.Classes.Eq TD.Data.BusinessFeatures.BusinessFeatures
instance TD.Lib.Internal.ShortShow TD.Data.BusinessFeatures.BusinessFeatures
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessFeatures.BusinessFeatures

module TD.Data.BusinessConnection
data BusinessConnection

-- | Describes a connection of the bot with a business account
BusinessConnection :: Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> BusinessConnection

-- | Unique identifier of the connection
[_id] :: BusinessConnection -> Maybe Text

-- | Identifier of the business user that created the connection
[user_id] :: BusinessConnection -> Maybe Int

-- | Chat identifier of the private chat with the user
[user_chat_id] :: BusinessConnection -> Maybe Int

-- | Point in time (Unix timestamp) when the connection was established
[date] :: BusinessConnection -> Maybe Int

-- | True, if the bot can send messages to the connected user; false
--   otherwise
[can_reply] :: BusinessConnection -> Maybe Bool

-- | True, if the connection is enabled; false otherwise
[is_enabled] :: BusinessConnection -> Maybe Bool
instance GHC.Show.Show TD.Data.BusinessConnection.BusinessConnection
instance GHC.Classes.Eq TD.Data.BusinessConnection.BusinessConnection
instance TD.Lib.Internal.ShortShow TD.Data.BusinessConnection.BusinessConnection
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessConnection.BusinessConnection

module TD.Data.BusinessConnectedBot
data BusinessConnectedBot

-- | Describes a bot connected to a business account
BusinessConnectedBot :: Maybe Int -> Maybe BusinessRecipients -> Maybe Bool -> BusinessConnectedBot

-- | User identifier of the bot
[bot_user_id] :: BusinessConnectedBot -> Maybe Int

-- | Private chats that will be accessible to the bot
[recipients] :: BusinessConnectedBot -> Maybe BusinessRecipients

-- | True, if the bot can send messages to the private chats; false
--   otherwise
[can_reply] :: BusinessConnectedBot -> Maybe Bool
defaultBusinessConnectedBot :: BusinessConnectedBot
instance GHC.Show.Show TD.Data.BusinessConnectedBot.BusinessConnectedBot
instance GHC.Classes.Eq TD.Data.BusinessConnectedBot.BusinessConnectedBot
instance TD.Lib.Internal.ShortShow TD.Data.BusinessConnectedBot.BusinessConnectedBot
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessConnectedBot.BusinessConnectedBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessConnectedBot.BusinessConnectedBot

module TD.Data.BusinessChatLinkInfo
data BusinessChatLinkInfo

-- | Contains information about a business chat link
BusinessChatLinkInfo :: Maybe Int -> Maybe FormattedText -> BusinessChatLinkInfo

-- | Identifier of the private chat that created the link
[chat_id] :: BusinessChatLinkInfo -> Maybe Int

-- | Message draft text that must be added to the input field
[text] :: BusinessChatLinkInfo -> Maybe FormattedText
instance GHC.Show.Show TD.Data.BusinessChatLinkInfo.BusinessChatLinkInfo
instance GHC.Classes.Eq TD.Data.BusinessChatLinkInfo.BusinessChatLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.BusinessChatLinkInfo.BusinessChatLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessChatLinkInfo.BusinessChatLinkInfo

module TD.Data.BusinessChatLink
data BusinessChatLink

-- | Contains information about a business chat link
BusinessChatLink :: Maybe Text -> Maybe FormattedText -> Maybe Text -> Maybe Int -> BusinessChatLink

-- | The HTTPS link
[link] :: BusinessChatLink -> Maybe Text

-- | Message draft text that will be added to the input field
[text] :: BusinessChatLink -> Maybe FormattedText

-- | Link title
[title] :: BusinessChatLink -> Maybe Text

-- | Number of times the link was used
[view_count] :: BusinessChatLink -> Maybe Int
instance GHC.Show.Show TD.Data.BusinessChatLink.BusinessChatLink
instance GHC.Classes.Eq TD.Data.BusinessChatLink.BusinessChatLink
instance TD.Lib.Internal.ShortShow TD.Data.BusinessChatLink.BusinessChatLink
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessChatLink.BusinessChatLink

module TD.Data.BusinessChatLinks
data BusinessChatLinks

-- | Contains a list of business chat links created by the user
BusinessChatLinks :: Maybe [BusinessChatLink] -> BusinessChatLinks

-- | List of links
[links] :: BusinessChatLinks -> Maybe [BusinessChatLink]
instance GHC.Show.Show TD.Data.BusinessChatLinks.BusinessChatLinks
instance GHC.Classes.Eq TD.Data.BusinessChatLinks.BusinessChatLinks
instance TD.Lib.Internal.ShortShow TD.Data.BusinessChatLinks.BusinessChatLinks
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessChatLinks.BusinessChatLinks

module TD.Data.BusinessBotManageBar
data BusinessBotManageBar

-- | Contains information about a business bot that manages the chat
BusinessBotManageBar :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> BusinessBotManageBar

-- | User identifier of the bot
[bot_user_id] :: BusinessBotManageBar -> Maybe Int

-- | URL to be opened to manage the bot
[manage_url] :: BusinessBotManageBar -> Maybe Text

-- | True, if the bot is paused. Use toggleBusinessConnectedBotChatIsPaused
--   to change the value of the field
[is_bot_paused] :: BusinessBotManageBar -> Maybe Bool

-- | True, if the bot can reply
[can_bot_reply] :: BusinessBotManageBar -> Maybe Bool
instance GHC.Show.Show TD.Data.BusinessBotManageBar.BusinessBotManageBar
instance GHC.Classes.Eq TD.Data.BusinessBotManageBar.BusinessBotManageBar
instance TD.Lib.Internal.ShortShow TD.Data.BusinessBotManageBar.BusinessBotManageBar
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessBotManageBar.BusinessBotManageBar

module TD.Data.BusinessAwayMessageSchedule

-- | Describes conditions for sending of away messages by a Telegram
--   Business account
data BusinessAwayMessageSchedule

-- | Send away messages always
BusinessAwayMessageScheduleAlways :: BusinessAwayMessageSchedule

-- | Send away messages outside of the business opening hours
BusinessAwayMessageScheduleOutsideOfOpeningHours :: BusinessAwayMessageSchedule

-- | Send away messages only in the specified time span
BusinessAwayMessageScheduleCustom :: Maybe Int -> Maybe Int -> BusinessAwayMessageSchedule

-- | Point in time (Unix timestamp) when the away messages will start to be
--   sent
[start_date] :: BusinessAwayMessageSchedule -> Maybe Int

-- | Point in time (Unix timestamp) when the away messages will stop to be
--   sent
[end_date] :: BusinessAwayMessageSchedule -> Maybe Int
instance GHC.Show.Show TD.Data.BusinessAwayMessageSchedule.BusinessAwayMessageSchedule
instance GHC.Classes.Eq TD.Data.BusinessAwayMessageSchedule.BusinessAwayMessageSchedule
instance TD.Lib.Internal.ShortShow TD.Data.BusinessAwayMessageSchedule.BusinessAwayMessageSchedule
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessAwayMessageSchedule.BusinessAwayMessageSchedule
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessAwayMessageSchedule.BusinessAwayMessageSchedule

module TD.Data.BusinessAwayMessageSettings
data BusinessAwayMessageSettings

-- | Describes settings for messages that are automatically sent by a
--   Telegram Business account when it is away
BusinessAwayMessageSettings :: Maybe Int -> Maybe BusinessRecipients -> Maybe BusinessAwayMessageSchedule -> Maybe Bool -> BusinessAwayMessageSettings

-- | Unique quick reply shortcut identifier for the away messages
[shortcut_id] :: BusinessAwayMessageSettings -> Maybe Int

-- | Chosen recipients of the away messages
[recipients] :: BusinessAwayMessageSettings -> Maybe BusinessRecipients

-- | Settings used to check whether the current user is away
[schedule] :: BusinessAwayMessageSettings -> Maybe BusinessAwayMessageSchedule

-- | True, if the messages must not be sent if the account was online in
--   the last 10 minutes
[offline_only] :: BusinessAwayMessageSettings -> Maybe Bool
defaultBusinessAwayMessageSettings :: BusinessAwayMessageSettings
instance GHC.Show.Show TD.Data.BusinessAwayMessageSettings.BusinessAwayMessageSettings
instance GHC.Classes.Eq TD.Data.BusinessAwayMessageSettings.BusinessAwayMessageSettings
instance TD.Lib.Internal.ShortShow TD.Data.BusinessAwayMessageSettings.BusinessAwayMessageSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessAwayMessageSettings.BusinessAwayMessageSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BusinessAwayMessageSettings.BusinessAwayMessageSettings

module TD.Data.BusinessInfo
data BusinessInfo

-- | Contains information about a Telegram Business account
BusinessInfo :: Maybe BusinessLocation -> Maybe BusinessOpeningHours -> Maybe BusinessOpeningHours -> Maybe Int -> Maybe Int -> Maybe BusinessGreetingMessageSettings -> Maybe BusinessAwayMessageSettings -> Maybe BusinessStartPage -> BusinessInfo

-- | Location of the business; may be null if none
[location] :: BusinessInfo -> Maybe BusinessLocation

-- | Opening hours of the business; may be null if none. The hours are
--   guaranteed to be valid and has already been split by week days
[opening_hours] :: BusinessInfo -> Maybe BusinessOpeningHours

-- | Opening hours of the business in the local time; may be null if none.
--   The hours are guaranteed to be valid and has already been split by
--   week days. Local time zone identifier will be empty. An
--   updateUserFullInfo update is not triggered when value of this field
--   changes
[local_opening_hours] :: BusinessInfo -> Maybe BusinessOpeningHours

-- | Time left before the business will open the next time, in seconds; 0
--   if unknown. An updateUserFullInfo update is not triggered when value
--   of this field changes
[next_open_in] :: BusinessInfo -> Maybe Int

-- | Time left before the business will close the next time, in seconds; 0
--   if unknown. An updateUserFullInfo update is not triggered when value
--   of this field changes
[next_close_in] :: BusinessInfo -> Maybe Int

-- | The greeting message; may be null if none or the Business account is
--   not of the current user
[greeting_message_settings] :: BusinessInfo -> Maybe BusinessGreetingMessageSettings

-- | The away message; may be null if none or the Business account is not
--   of the current user
[away_message_settings] :: BusinessInfo -> Maybe BusinessAwayMessageSettings

-- | Information about start page of the account; may be null if none
[start_page] :: BusinessInfo -> Maybe BusinessStartPage
instance GHC.Show.Show TD.Data.BusinessInfo.BusinessInfo
instance GHC.Classes.Eq TD.Data.BusinessInfo.BusinessInfo
instance TD.Lib.Internal.ShortShow TD.Data.BusinessInfo.BusinessInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessInfo.BusinessInfo

module TD.Data.BotMenuButton
data BotMenuButton

-- | Describes a button to be shown instead of bot commands menu button
BotMenuButton :: Maybe Text -> Maybe Text -> BotMenuButton

-- | Text of the button
[text] :: BotMenuButton -> Maybe Text

-- | URL to be passed to openWebApp
[url] :: BotMenuButton -> Maybe Text
defaultBotMenuButton :: BotMenuButton
instance GHC.Show.Show TD.Data.BotMenuButton.BotMenuButton
instance GHC.Classes.Eq TD.Data.BotMenuButton.BotMenuButton
instance TD.Lib.Internal.ShortShow TD.Data.BotMenuButton.BotMenuButton
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotMenuButton.BotMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotMenuButton.BotMenuButton

module TD.Data.BotCommandScope

-- | Represents the scope to which bot commands are relevant
data BotCommandScope

-- | A scope covering all users
BotCommandScopeDefault :: BotCommandScope

-- | A scope covering all private chats
BotCommandScopeAllPrivateChats :: BotCommandScope

-- | A scope covering all group and supergroup chats
BotCommandScopeAllGroupChats :: BotCommandScope

-- | A scope covering all group and supergroup chat administrators
BotCommandScopeAllChatAdministrators :: BotCommandScope

-- | A scope covering all members of a chat
BotCommandScopeChat :: Maybe Int -> BotCommandScope

-- | Chat identifier
[chat_id] :: BotCommandScope -> Maybe Int

-- | A scope covering all administrators of a chat
BotCommandScopeChatAdministrators :: Maybe Int -> BotCommandScope

-- | Chat identifier
[chat_id] :: BotCommandScope -> Maybe Int

-- | A scope covering a member of a chat
BotCommandScopeChatMember :: Maybe Int -> Maybe Int -> BotCommandScope

-- | Chat identifier
[chat_id] :: BotCommandScope -> Maybe Int

-- | User identifier
[user_id] :: BotCommandScope -> Maybe Int
instance GHC.Show.Show TD.Data.BotCommandScope.BotCommandScope
instance GHC.Classes.Eq TD.Data.BotCommandScope.BotCommandScope
instance TD.Lib.Internal.ShortShow TD.Data.BotCommandScope.BotCommandScope
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommandScope.BotCommandScope
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotCommandScope.BotCommandScope

module TD.Data.BotCommand
data BotCommand

-- | Represents a command supported by a bot
BotCommand :: Maybe Text -> Maybe Text -> BotCommand

-- | Text of the bot command
[command] :: BotCommand -> Maybe Text
[description] :: BotCommand -> Maybe Text
defaultBotCommand :: BotCommand
instance GHC.Show.Show TD.Data.BotCommand.BotCommand
instance GHC.Classes.Eq TD.Data.BotCommand.BotCommand
instance TD.Lib.Internal.ShortShow TD.Data.BotCommand.BotCommand
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommand.BotCommand
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BotCommand.BotCommand

module TD.Data.BotCommands
data BotCommands

-- | Contains a list of bot commands
BotCommands :: Maybe Int -> Maybe [BotCommand] -> BotCommands

-- | Bot's user identifier
[bot_user_id] :: BotCommands -> Maybe Int

-- | List of bot commands
[commands] :: BotCommands -> Maybe [BotCommand]
instance GHC.Show.Show TD.Data.BotCommands.BotCommands
instance GHC.Classes.Eq TD.Data.BotCommands.BotCommands
instance TD.Lib.Internal.ShortShow TD.Data.BotCommands.BotCommands
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotCommands.BotCommands

module TD.Data.BlockList

-- | Describes a type of block list
data BlockList

-- | The main block list that disallows writing messages to the current
--   user, receiving their status and photo, viewing of stories, and some
--   other actions
BlockListMain :: BlockList

-- | The block list that disallows viewing of stories of the current user
BlockListStories :: BlockList
instance GHC.Show.Show TD.Data.BlockList.BlockList
instance GHC.Classes.Eq TD.Data.BlockList.BlockList
instance TD.Lib.Internal.ShortShow TD.Data.BlockList.BlockList
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BlockList.BlockList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BlockList.BlockList

module TD.Data.Birthdate
data Birthdate

-- | Represents a birthdate of a user
Birthdate :: Maybe Int -> Maybe Int -> Maybe Int -> Birthdate

-- | Day of the month; 1-31
[day] :: Birthdate -> Maybe Int

-- | Month of the year; 1-12
[month] :: Birthdate -> Maybe Int

-- | Birth year; 0 if unknown
[year] :: Birthdate -> Maybe Int
defaultBirthdate :: Birthdate
instance GHC.Show.Show TD.Data.Birthdate.Birthdate
instance GHC.Classes.Eq TD.Data.Birthdate.Birthdate
instance TD.Lib.Internal.ShortShow TD.Data.Birthdate.Birthdate
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Birthdate.Birthdate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Birthdate.Birthdate

module TD.Data.CloseBirthdayUser
data CloseBirthdayUser

-- | Describes a user that had or will have a birthday soon
CloseBirthdayUser :: Maybe Int -> Maybe Birthdate -> CloseBirthdayUser

-- | User identifier
[user_id] :: CloseBirthdayUser -> Maybe Int

-- | Birthdate of the user
[birthdate] :: CloseBirthdayUser -> Maybe Birthdate
instance GHC.Show.Show TD.Data.CloseBirthdayUser.CloseBirthdayUser
instance GHC.Classes.Eq TD.Data.CloseBirthdayUser.CloseBirthdayUser
instance TD.Lib.Internal.ShortShow TD.Data.CloseBirthdayUser.CloseBirthdayUser
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.CloseBirthdayUser.CloseBirthdayUser

module TD.Data.BasicGroup
data BasicGroup

-- | Represents a basic group of 0-200 users (must be upgraded to a
--   supergroup to accommodate more than 200 users)
BasicGroup :: Maybe Int -> Maybe Int -> Maybe ChatMemberStatus -> Maybe Bool -> Maybe Int -> BasicGroup

-- | Group identifier
[_id] :: BasicGroup -> Maybe Int

-- | Number of members in the group
[member_count] :: BasicGroup -> Maybe Int

-- | Status of the current user in the group
[status] :: BasicGroup -> Maybe ChatMemberStatus

-- | True, if the group is active
[is_active] :: BasicGroup -> Maybe Bool

-- | Identifier of the supergroup to which this group was upgraded; 0 if
--   none
[upgraded_to_supergroup_id] :: BasicGroup -> Maybe Int
instance GHC.Show.Show TD.Data.BasicGroup.BasicGroup
instance GHC.Classes.Eq TD.Data.BasicGroup.BasicGroup
instance TD.Lib.Internal.ShortShow TD.Data.BasicGroup.BasicGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BasicGroup.BasicGroup

module TD.Data.BankCardActionOpenUrl
data BankCardActionOpenUrl

-- | Describes an action associated with a bank card number
BankCardActionOpenUrl :: Maybe Text -> Maybe Text -> BankCardActionOpenUrl

-- | Action text
[text] :: BankCardActionOpenUrl -> Maybe Text

-- | The URL to be opened
[url] :: BankCardActionOpenUrl -> Maybe Text
instance GHC.Show.Show TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance GHC.Classes.Eq TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance TD.Lib.Internal.ShortShow TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BankCardActionOpenUrl.BankCardActionOpenUrl

module TD.Data.BankCardInfo
data BankCardInfo

-- | Information about a bank card
BankCardInfo :: Maybe Text -> Maybe [BankCardActionOpenUrl] -> BankCardInfo

-- | Title of the bank card description
[title] :: BankCardInfo -> Maybe Text

-- | Actions that can be done with the bank card number
[actions] :: BankCardInfo -> Maybe [BankCardActionOpenUrl]
instance GHC.Show.Show TD.Data.BankCardInfo.BankCardInfo
instance GHC.Classes.Eq TD.Data.BankCardInfo.BankCardInfo
instance TD.Lib.Internal.ShortShow TD.Data.BankCardInfo.BankCardInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BankCardInfo.BankCardInfo

module TD.Data.BackgroundFill

-- | Describes a fill of a background
data BackgroundFill

-- | Describes a solid fill of a background
BackgroundFillSolid :: Maybe Int -> BackgroundFill

-- | A color of the background in the RGB24 format
[color] :: BackgroundFill -> Maybe Int

-- | Describes a gradient fill of a background
BackgroundFillGradient :: Maybe Int -> Maybe Int -> Maybe Int -> BackgroundFill

-- | A top color of the background in the RGB24 format
[top_color] :: BackgroundFill -> Maybe Int

-- | A bottom color of the background in the RGB24 format
[bottom_color] :: BackgroundFill -> Maybe Int

-- | Clockwise rotation angle of the gradient, in degrees; 0-359. Must
--   always be divisible by 45
[rotation_angle] :: BackgroundFill -> Maybe Int

-- | Describes a freeform gradient fill of a background
BackgroundFillFreeformGradient :: Maybe [Int] -> BackgroundFill

-- | A list of 3 or 4 colors of the freeform gradient in the RGB24 format
[colors] :: BackgroundFill -> Maybe [Int]
instance GHC.Show.Show TD.Data.BackgroundFill.BackgroundFill
instance GHC.Classes.Eq TD.Data.BackgroundFill.BackgroundFill
instance TD.Lib.Internal.ShortShow TD.Data.BackgroundFill.BackgroundFill
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BackgroundFill.BackgroundFill
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BackgroundFill.BackgroundFill

module TD.Data.ChatPhotoSticker
data ChatPhotoSticker

-- | Information about the sticker, which was used to create the chat
--   photo. The sticker is shown at the center of the photo and occupies at
--   most 67% of it
ChatPhotoSticker :: Maybe ChatPhotoStickerType -> Maybe BackgroundFill -> ChatPhotoSticker

-- | Type of the sticker
[_type] :: ChatPhotoSticker -> Maybe ChatPhotoStickerType

-- | The fill to be used as background for the sticker; rotation angle in
--   backgroundFillGradient isn't supported
[background_fill] :: ChatPhotoSticker -> Maybe BackgroundFill
defaultChatPhotoSticker :: ChatPhotoSticker
instance GHC.Show.Show TD.Data.ChatPhotoSticker.ChatPhotoSticker
instance GHC.Classes.Eq TD.Data.ChatPhotoSticker.ChatPhotoSticker
instance TD.Lib.Internal.ShortShow TD.Data.ChatPhotoSticker.ChatPhotoSticker
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotoSticker.ChatPhotoSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ChatPhotoSticker.ChatPhotoSticker

module TD.Data.InputChatPhoto

-- | Describes a photo to be set as a user profile or chat photo
data InputChatPhoto

-- | A previously used profile photo of the current user
InputChatPhotoPrevious :: Maybe Int -> InputChatPhoto

-- | Identifier of the current user's profile photo to reuse
[chat_photo_id] :: InputChatPhoto -> Maybe Int

-- | A static photo in JPEG format
InputChatPhotoStatic :: Maybe InputFile -> InputChatPhoto

-- | Photo to be set as profile photo. Only inputFileLocal and
--   inputFileGenerated are allowed
[photo] :: InputChatPhoto -> Maybe InputFile

-- | An animation in MPEG4 format; must be square, at most 10 seconds long,
--   have width between 160 and 1280 and be at most 2MB in size
InputChatPhotoAnimation :: Maybe InputFile -> Maybe Double -> InputChatPhoto

-- | Animation to be set as profile photo. Only inputFileLocal and
--   inputFileGenerated are allowed
[animation] :: InputChatPhoto -> Maybe InputFile

-- | Timestamp of the frame, which will be used as static chat photo
[main_frame_timestamp] :: InputChatPhoto -> Maybe Double

-- | A sticker on a custom background
InputChatPhotoSticker :: Maybe ChatPhotoSticker -> InputChatPhoto

-- | Information about the sticker
[sticker] :: InputChatPhoto -> Maybe ChatPhotoSticker
instance GHC.Show.Show TD.Data.InputChatPhoto.InputChatPhoto
instance GHC.Classes.Eq TD.Data.InputChatPhoto.InputChatPhoto
instance TD.Lib.Internal.ShortShow TD.Data.InputChatPhoto.InputChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputChatPhoto.InputChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputChatPhoto.InputChatPhoto

module TD.Data.BackgroundType

-- | Describes the type of background
data BackgroundType

-- | A wallpaper in JPEG format
BackgroundTypeWallpaper :: Maybe Bool -> Maybe Bool -> BackgroundType

-- | True, if the wallpaper must be downscaled to fit in 450x450 square and
--   then box-blurred with radius 12
[is_blurred] :: BackgroundType -> Maybe Bool

-- | True, if the background needs to be slightly moved when device is
--   tilted
[is_moving] :: BackgroundType -> Maybe Bool

-- | A PNG or TGV (gzipped subset of SVG with MIME type
--   "application/x-tgwallpattern") pattern to be combined with the
--   background fill chosen by the user
BackgroundTypePattern :: Maybe BackgroundFill -> Maybe Int -> Maybe Bool -> Maybe Bool -> BackgroundType

-- | Fill of the background
[fill] :: BackgroundType -> Maybe BackgroundFill

-- | Intensity of the pattern when it is shown above the filled background;
--   0-100.
[intensity] :: BackgroundType -> Maybe Int

-- | True, if the background fill must be applied only to the pattern
--   itself. All other pixels are black in this case. For dark themes only
[is_inverted] :: BackgroundType -> Maybe Bool

-- | True, if the background needs to be slightly moved when device is
--   tilted
[is_moving] :: BackgroundType -> Maybe Bool

-- | A filled background
BackgroundTypeFill :: Maybe BackgroundFill -> BackgroundType

-- | Fill of the background
[fill] :: BackgroundType -> Maybe BackgroundFill

-- | A background from a chat theme; can be used only as a chat background
--   in channels
BackgroundTypeChatTheme :: Maybe Text -> BackgroundType

-- | Name of the chat theme
[theme_name] :: BackgroundType -> Maybe Text
instance GHC.Show.Show TD.Data.BackgroundType.BackgroundType
instance GHC.Classes.Eq TD.Data.BackgroundType.BackgroundType
instance TD.Lib.Internal.ShortShow TD.Data.BackgroundType.BackgroundType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BackgroundType.BackgroundType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.BackgroundType.BackgroundType

module TD.Data.Background
data Background

-- | Describes a chat background
Background :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Document -> Maybe BackgroundType -> Background

-- | Unique background identifier
[_id] :: Background -> Maybe Int

-- | True, if this is one of default backgrounds
[is_default] :: Background -> Maybe Bool

-- | True, if the background is dark and is recommended to be used with
--   dark theme
[is_dark] :: Background -> Maybe Bool

-- | Unique background name
[name] :: Background -> Maybe Text

-- | Document with the background; may be null. Null only for filled and
--   chat theme backgrounds
[document] :: Background -> Maybe Document

-- | Type of the background
[_type] :: Background -> Maybe BackgroundType
instance GHC.Show.Show TD.Data.Background.Background
instance GHC.Classes.Eq TD.Data.Background.Background
instance TD.Lib.Internal.ShortShow TD.Data.Background.Background
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Background.Background

module TD.Data.ThemeSettings
data ThemeSettings

-- | Describes theme settings
ThemeSettings :: Maybe Int -> Maybe Background -> Maybe BackgroundFill -> Maybe Bool -> Maybe Int -> ThemeSettings

-- | Theme accent color in ARGB format
[accent_color] :: ThemeSettings -> Maybe Int

-- | The background to be used in chats; may be null
[background] :: ThemeSettings -> Maybe Background

-- | The fill to be used as a background for outgoing messages
[outgoing_message_fill] :: ThemeSettings -> Maybe BackgroundFill

-- | If true, the freeform gradient fill needs to be animated on every sent
--   message
[animate_outgoing_message_fill] :: ThemeSettings -> Maybe Bool

-- | Accent color of outgoing messages in ARGB format
[outgoing_message_accent_color] :: ThemeSettings -> Maybe Int
instance GHC.Show.Show TD.Data.ThemeSettings.ThemeSettings
instance GHC.Classes.Eq TD.Data.ThemeSettings.ThemeSettings
instance TD.Lib.Internal.ShortShow TD.Data.ThemeSettings.ThemeSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ThemeSettings.ThemeSettings

module TD.Data.ChatTheme
data ChatTheme

-- | Describes a chat theme
ChatTheme :: Maybe Text -> Maybe ThemeSettings -> Maybe ThemeSettings -> ChatTheme

-- | Theme name
[name] :: ChatTheme -> Maybe Text

-- | Theme settings for a light chat theme
[light_settings] :: ChatTheme -> Maybe ThemeSettings

-- | Theme settings for a dark chat theme
[dark_settings] :: ChatTheme -> Maybe ThemeSettings
instance GHC.Show.Show TD.Data.ChatTheme.ChatTheme
instance GHC.Classes.Eq TD.Data.ChatTheme.ChatTheme
instance TD.Lib.Internal.ShortShow TD.Data.ChatTheme.ChatTheme
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatTheme.ChatTheme

module TD.Data.ChatBackground
data ChatBackground

-- | Describes a background set for a specific chat
ChatBackground :: Maybe Background -> Maybe Int -> ChatBackground

-- | The background
[background] :: ChatBackground -> Maybe Background

-- | Dimming of the background in dark themes, as a percentage; 0-100.
--   Applied only to Wallpaper and Fill types of background
[dark_theme_dimming] :: ChatBackground -> Maybe Int
instance GHC.Show.Show TD.Data.ChatBackground.ChatBackground
instance GHC.Classes.Eq TD.Data.ChatBackground.ChatBackground
instance TD.Lib.Internal.ShortShow TD.Data.ChatBackground.ChatBackground
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatBackground.ChatBackground

module TD.Data.Backgrounds
data Backgrounds

-- | Contains a list of backgrounds
Backgrounds :: Maybe [Background] -> Backgrounds

-- | A list of backgrounds
[backgrounds] :: Backgrounds -> Maybe [Background]
instance GHC.Show.Show TD.Data.Backgrounds.Backgrounds
instance GHC.Classes.Eq TD.Data.Backgrounds.Backgrounds
instance TD.Lib.Internal.ShortShow TD.Data.Backgrounds.Backgrounds
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Backgrounds.Backgrounds

module TD.Data.AvailableReaction
data AvailableReaction

-- | Represents an available reaction
AvailableReaction :: Maybe ReactionType -> Maybe Bool -> AvailableReaction

-- | Type of the reaction
[_type] :: AvailableReaction -> Maybe ReactionType

-- | True, if Telegram Premium is needed to send the reaction
[needs_premium] :: AvailableReaction -> Maybe Bool
instance GHC.Show.Show TD.Data.AvailableReaction.AvailableReaction
instance GHC.Classes.Eq TD.Data.AvailableReaction.AvailableReaction
instance TD.Lib.Internal.ShortShow TD.Data.AvailableReaction.AvailableReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AvailableReaction.AvailableReaction

module TD.Data.AvailableReactions
data AvailableReactions

-- | Represents a list of reactions that can be added to a message
AvailableReactions :: Maybe [AvailableReaction] -> Maybe [AvailableReaction] -> Maybe [AvailableReaction] -> Maybe Bool -> Maybe Bool -> Maybe ReactionUnavailabilityReason -> AvailableReactions

-- | List of reactions to be shown at the top
[top_reactions] :: AvailableReactions -> Maybe [AvailableReaction]

-- | List of recently used reactions
[recent_reactions] :: AvailableReactions -> Maybe [AvailableReaction]

-- | List of popular reactions
[popular_reactions] :: AvailableReactions -> Maybe [AvailableReaction]

-- | True, if any custom emoji reaction can be added by Telegram Premium
--   subscribers
[allow_custom_emoji] :: AvailableReactions -> Maybe Bool

-- | True, if the reactions will be tags and the message can be found by
--   them
[are_tags] :: AvailableReactions -> Maybe Bool

-- | The reason why the current user can't add reactions to the message,
--   despite some other users can; may be null if none
[unavailability_reason] :: AvailableReactions -> Maybe ReactionUnavailabilityReason
instance GHC.Show.Show TD.Data.AvailableReactions.AvailableReactions
instance GHC.Classes.Eq TD.Data.AvailableReactions.AvailableReactions
instance TD.Lib.Internal.ShortShow TD.Data.AvailableReactions.AvailableReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AvailableReactions.AvailableReactions

module TD.Data.AutosaveSettingsScope

-- | Describes scope of autosave settings
data AutosaveSettingsScope

-- | Autosave settings applied to all private chats without chat-specific
--   settings
AutosaveSettingsScopePrivateChats :: AutosaveSettingsScope

-- | Autosave settings applied to all basic group and supergroup chats
--   without chat-specific settings
AutosaveSettingsScopeGroupChats :: AutosaveSettingsScope

-- | Autosave settings applied to all channel chats without chat-specific
--   settings
AutosaveSettingsScopeChannelChats :: AutosaveSettingsScope

-- | Autosave settings applied to a chat
AutosaveSettingsScopeChat :: Maybe Int -> AutosaveSettingsScope

-- | Chat identifier
[chat_id] :: AutosaveSettingsScope -> Maybe Int
instance GHC.Show.Show TD.Data.AutosaveSettingsScope.AutosaveSettingsScope
instance GHC.Classes.Eq TD.Data.AutosaveSettingsScope.AutosaveSettingsScope
instance TD.Lib.Internal.ShortShow TD.Data.AutosaveSettingsScope.AutosaveSettingsScope
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutosaveSettingsScope.AutosaveSettingsScope
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AutosaveSettingsScope.AutosaveSettingsScope

module TD.Data.AutosaveSettingsException
data AutosaveSettingsException

-- | Contains autosave settings for a chat, which overrides default
--   settings for the corresponding scope
AutosaveSettingsException :: Maybe Int -> Maybe ScopeAutosaveSettings -> AutosaveSettingsException

-- | Chat identifier
[chat_id] :: AutosaveSettingsException -> Maybe Int

-- | Autosave settings for the chat
[settings] :: AutosaveSettingsException -> Maybe ScopeAutosaveSettings
instance GHC.Show.Show TD.Data.AutosaveSettingsException.AutosaveSettingsException
instance GHC.Classes.Eq TD.Data.AutosaveSettingsException.AutosaveSettingsException
instance TD.Lib.Internal.ShortShow TD.Data.AutosaveSettingsException.AutosaveSettingsException
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutosaveSettingsException.AutosaveSettingsException

module TD.Data.AutosaveSettings
data AutosaveSettings

-- | Describes autosave settings
AutosaveSettings :: Maybe ScopeAutosaveSettings -> Maybe ScopeAutosaveSettings -> Maybe ScopeAutosaveSettings -> Maybe [AutosaveSettingsException] -> AutosaveSettings

-- | Default autosave settings for private chats
[private_chat_settings] :: AutosaveSettings -> Maybe ScopeAutosaveSettings

-- | Default autosave settings for basic group and supergroup chats
[group_settings] :: AutosaveSettings -> Maybe ScopeAutosaveSettings

-- | Default autosave settings for channel chats
[channel_settings] :: AutosaveSettings -> Maybe ScopeAutosaveSettings

-- | Autosave settings for specific chats
[exceptions] :: AutosaveSettings -> Maybe [AutosaveSettingsException]
instance GHC.Show.Show TD.Data.AutosaveSettings.AutosaveSettings
instance GHC.Classes.Eq TD.Data.AutosaveSettings.AutosaveSettings
instance TD.Lib.Internal.ShortShow TD.Data.AutosaveSettings.AutosaveSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutosaveSettings.AutosaveSettings

module TD.Data.AutoDownloadSettings
data AutoDownloadSettings

-- | Contains auto-download settings
AutoDownloadSettings :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> AutoDownloadSettings

-- | True, if the auto-download is enabled
[is_auto_download_enabled] :: AutoDownloadSettings -> Maybe Bool

-- | The maximum size of a photo file to be auto-downloaded, in bytes
[max_photo_file_size] :: AutoDownloadSettings -> Maybe Int

-- | The maximum size of a video file to be auto-downloaded, in bytes
[max_video_file_size] :: AutoDownloadSettings -> Maybe Int

-- | The maximum size of other file types to be auto-downloaded, in bytes
[max_other_file_size] :: AutoDownloadSettings -> Maybe Int

-- | The maximum suggested bitrate for uploaded videos, in kbit/s
[video_upload_bitrate] :: AutoDownloadSettings -> Maybe Int

-- | True, if the beginning of video files needs to be preloaded for
--   instant playback
[preload_large_videos] :: AutoDownloadSettings -> Maybe Bool

-- | True, if the next audio track needs to be preloaded while the user is
--   listening to an audio file
[preload_next_audio] :: AutoDownloadSettings -> Maybe Bool

-- | True, if stories needs to be preloaded
[preload_stories] :: AutoDownloadSettings -> Maybe Bool

-- | True, if "use less data for calls" option needs to be enabled
[use_less_data_for_calls] :: AutoDownloadSettings -> Maybe Bool
defaultAutoDownloadSettings :: AutoDownloadSettings
instance GHC.Show.Show TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance GHC.Classes.Eq TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance TD.Lib.Internal.ShortShow TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutoDownloadSettings.AutoDownloadSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AutoDownloadSettings.AutoDownloadSettings

module TD.Data.AutoDownloadSettingsPresets
data AutoDownloadSettingsPresets

-- | Contains auto-download settings presets for the current user
AutoDownloadSettingsPresets :: Maybe AutoDownloadSettings -> Maybe AutoDownloadSettings -> Maybe AutoDownloadSettings -> AutoDownloadSettingsPresets

-- | Preset with lowest settings; supposed to be used by default when
--   roaming
[low] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings

-- | Preset with medium settings; supposed to be used by default when using
--   mobile data
[medium] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings

-- | Preset with highest settings; supposed to be used by default when
--   connected on Wi-Fi
[high] :: AutoDownloadSettingsPresets -> Maybe AutoDownloadSettings
instance GHC.Show.Show TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance GHC.Classes.Eq TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance TD.Lib.Internal.ShortShow TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AutoDownloadSettingsPresets.AutoDownloadSettingsPresets

module TD.Data.AuthenticationCodeType

-- | Provides information about the method by which an authentication code
--   is delivered to the user
data AuthenticationCodeType

-- | A digit-only authentication code is delivered via a private Telegram
--   message, which can be viewed from another active session
AuthenticationCodeTypeTelegramMessage :: Maybe Int -> AuthenticationCodeType

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | A digit-only authentication code is delivered via an SMS message to
--   the specified phone number; non-official applications may not receive
--   this type of code
AuthenticationCodeTypeSms :: Maybe Int -> AuthenticationCodeType

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | An authentication code is a word delivered via an SMS message to the
--   specified phone number; non-official applications may not receive this
--   type of code
AuthenticationCodeTypeSmsWord :: Maybe Text -> AuthenticationCodeType

-- | The first letters of the word if known
[first_letter] :: AuthenticationCodeType -> Maybe Text

-- | An authentication code is a phrase from multiple words delivered via
--   an SMS message to the specified phone number; non-official
--   applications may not receive this type of code
AuthenticationCodeTypeSmsPhrase :: Maybe Text -> AuthenticationCodeType

-- | The first word of the phrase if known
[first_word] :: AuthenticationCodeType -> Maybe Text

-- | A digit-only authentication code is delivered via a phone call to the
--   specified phone number
AuthenticationCodeTypeCall :: Maybe Int -> AuthenticationCodeType

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | An authentication code is delivered by an immediately canceled call to
--   the specified phone number. The phone number that calls is the code
--   that must be entered automatically
AuthenticationCodeTypeFlashCall :: Maybe Text -> AuthenticationCodeType

-- | Pattern of the phone number from which the call will be made
[pattern] :: AuthenticationCodeType -> Maybe Text

-- | An authentication code is delivered by an immediately canceled call to
--   the specified phone number. The last digits of the phone number that
--   calls are the code that must be entered manually by the user
AuthenticationCodeTypeMissedCall :: Maybe Text -> Maybe Int -> AuthenticationCodeType

-- | Prefix of the phone number from which the call will be made
[phone_number_prefix] :: AuthenticationCodeType -> Maybe Text

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | A digit-only authentication code is delivered to
--   <a>https://fragment.com</a>. The user must be logged in there via a
--   wallet owning the phone number's NFT
AuthenticationCodeTypeFragment :: Maybe Text -> Maybe Int -> AuthenticationCodeType

-- | URL to open to receive the code
[url] :: AuthenticationCodeType -> Maybe Text

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | A digit-only authentication code is delivered via Firebase
--   Authentication to the official Android application
AuthenticationCodeTypeFirebaseAndroid :: Maybe ByteString -> Maybe Int -> AuthenticationCodeType

-- | Nonce to pass to the SafetyNet Attestation API
[nonce] :: AuthenticationCodeType -> Maybe ByteString

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int

-- | A digit-only authentication code is delivered via Firebase
--   Authentication to the official iOS application
AuthenticationCodeTypeFirebaseIos :: Maybe Text -> Maybe Int -> Maybe Int -> AuthenticationCodeType

-- | Receipt of successful application token validation to compare with
--   receipt from push notification
[receipt] :: AuthenticationCodeType -> Maybe Text

-- | Time after the next authentication method is supposed to be used if
--   verification push notification isn't received, in seconds
[push_timeout] :: AuthenticationCodeType -> Maybe Int

-- | Length of the code
[_length] :: AuthenticationCodeType -> Maybe Int
instance GHC.Show.Show TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance GHC.Classes.Eq TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance TD.Lib.Internal.ShortShow TD.Data.AuthenticationCodeType.AuthenticationCodeType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthenticationCodeType.AuthenticationCodeType

module TD.Data.AuthenticationCodeInfo
data AuthenticationCodeInfo

-- | Information about the authentication code that was sent
AuthenticationCodeInfo :: Maybe Text -> Maybe AuthenticationCodeType -> Maybe AuthenticationCodeType -> Maybe Int -> AuthenticationCodeInfo

-- | A phone number that is being authenticated
[phone_number] :: AuthenticationCodeInfo -> Maybe Text

-- | The way the code was sent to the user
[_type] :: AuthenticationCodeInfo -> Maybe AuthenticationCodeType

-- | The way the next code will be sent to the user; may be null
[next_type] :: AuthenticationCodeInfo -> Maybe AuthenticationCodeType

-- | Timeout before the code can be re-sent, in seconds
[timeout] :: AuthenticationCodeInfo -> Maybe Int
instance GHC.Show.Show TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance GHC.Classes.Eq TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance TD.Lib.Internal.ShortShow TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthenticationCodeInfo.AuthenticationCodeInfo

module TD.Data.AuthorizationState

-- | Represents the current authorization state of the TDLib client
data AuthorizationState

-- | Initialization parameters are needed. Call setTdlibParameters to
--   provide them
AuthorizationStateWaitTdlibParameters :: AuthorizationState

-- | TDLib needs the user's phone number to authorize. Call
--   setAuthenticationPhoneNumber to provide the phone number, or use
--   requestQrCodeAuthentication or checkAuthenticationBotToken for other
--   authentication options
AuthorizationStateWaitPhoneNumber :: AuthorizationState

-- | TDLib needs the user's email address to authorize. Call
--   setAuthenticationEmailAddress to provide the email address, or
--   directly call checkAuthenticationEmailCode with Apple ID/Google ID
--   token if allowed
AuthorizationStateWaitEmailAddress :: Maybe Bool -> Maybe Bool -> AuthorizationState

-- | True, if authorization through Apple ID is allowed
[allow_apple_id] :: AuthorizationState -> Maybe Bool

-- | True, if authorization through Google ID is allowed
[allow_google_id] :: AuthorizationState -> Maybe Bool

-- | TDLib needs the user's authentication code sent to an email address to
--   authorize. Call checkAuthenticationEmailCode to provide the code
AuthorizationStateWaitEmailCode :: Maybe Bool -> Maybe Bool -> Maybe EmailAddressAuthenticationCodeInfo -> Maybe EmailAddressResetState -> AuthorizationState

-- | True, if authorization through Apple ID is allowed
[allow_apple_id] :: AuthorizationState -> Maybe Bool

-- | True, if authorization through Google ID is allowed
[allow_google_id] :: AuthorizationState -> Maybe Bool

-- | Information about the sent authentication code
[code_info] :: AuthorizationState -> Maybe EmailAddressAuthenticationCodeInfo

-- | Reset state of the email address; may be null if the email address
--   can't be reset
[email_address_reset_state] :: AuthorizationState -> Maybe EmailAddressResetState

-- | TDLib needs the user's authentication code to authorize. Call
--   checkAuthenticationCode to check the code
AuthorizationStateWaitCode :: Maybe AuthenticationCodeInfo -> AuthorizationState

-- | Information about the authorization code that was sent
[_code_info] :: AuthorizationState -> Maybe AuthenticationCodeInfo

-- | The user needs to confirm authorization on another logged in device by
--   scanning a QR code with the provided link
AuthorizationStateWaitOtherDeviceConfirmation :: Maybe Text -> AuthorizationState

-- | A tg:// URL for the QR code. The link will be updated frequently
[link] :: AuthorizationState -> Maybe Text

-- | The user is unregistered and need to accept terms of service and enter
--   their first name and last name to finish registration. Call
--   registerUser to accept the terms of service and provide the data
AuthorizationStateWaitRegistration :: Maybe TermsOfService -> AuthorizationState

-- | Telegram terms of service
[terms_of_service] :: AuthorizationState -> Maybe TermsOfService

-- | The user has been authorized, but needs to enter a 2-step verification
--   password to start using the application. Call
--   checkAuthenticationPassword to provide the password, or
--   requestAuthenticationPasswordRecovery to recover the password, or
--   deleteAccount to delete the account after a week
AuthorizationStateWaitPassword :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> AuthorizationState

-- | Hint for the password; may be empty
[password_hint] :: AuthorizationState -> Maybe Text

-- | True, if a recovery email address has been set up
[has_recovery_email_address] :: AuthorizationState -> Maybe Bool

-- | True, if some Telegram Passport elements were saved
[has_passport_data] :: AuthorizationState -> Maybe Bool

-- | Pattern of the email address to which the recovery email was sent;
--   empty until a recovery email has been sent
[recovery_email_address_pattern] :: AuthorizationState -> Maybe Text

-- | The user has been successfully authorized. TDLib is now ready to
--   answer general requests
AuthorizationStateReady :: AuthorizationState

-- | The user is currently logging out
AuthorizationStateLoggingOut :: AuthorizationState

-- | TDLib is closing, all subsequent queries will be answered with the
--   error 500. Note that closing TDLib can take a while. All resources
--   will be freed only after authorizationStateClosed has been received
AuthorizationStateClosing :: AuthorizationState

-- | TDLib client is in its final state. All databases are closed and all
--   resources are released. No other updates will be received after this.
--   All queries will be responded to with error code 500. To continue
--   working, one must create a new instance of the TDLib client
AuthorizationStateClosed :: AuthorizationState
instance GHC.Show.Show TD.Data.AuthorizationState.AuthorizationState
instance GHC.Classes.Eq TD.Data.AuthorizationState.AuthorizationState
instance TD.Lib.Internal.ShortShow TD.Data.AuthorizationState.AuthorizationState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AuthorizationState.AuthorizationState

module TD.Data.Audio
data Audio

-- | Describes an audio file. Audio is usually in MP3 or M4A format
Audio :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe [Thumbnail] -> Maybe File -> Audio

-- | Duration of the audio, in seconds; as defined by the sender
[duration] :: Audio -> Maybe Int

-- | Title of the audio; as defined by the sender
[title] :: Audio -> Maybe Text

-- | Performer of the audio; as defined by the sender
[performer] :: Audio -> Maybe Text

-- | Original name of the file; as defined by the sender
[file_name] :: Audio -> Maybe Text

-- | The MIME type of the file; as defined by the sender
[mime_type] :: Audio -> Maybe Text

-- | The minithumbnail of the album cover; may be null
[album_cover_minithumbnail] :: Audio -> Maybe Minithumbnail

-- | The thumbnail of the album cover in JPEG format; as defined by the
--   sender. The full size thumbnail is supposed to be extracted from the
--   downloaded audio file; may be null
[album_cover_thumbnail] :: Audio -> Maybe Thumbnail

-- | Album cover variants to use if the downloaded audio file contains no
--   album cover. Provided thumbnail dimensions are approximate
[external_album_covers] :: Audio -> Maybe [Thumbnail]

-- | File containing the audio
[audio] :: Audio -> Maybe File
instance GHC.Show.Show TD.Data.Audio.Audio
instance GHC.Classes.Eq TD.Data.Audio.Audio
instance TD.Lib.Internal.ShortShow TD.Data.Audio.Audio
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Audio.Audio

module TD.Data.AttachmentMenuBotColor
data AttachmentMenuBotColor

-- | Describes a color to highlight a bot added to attachment menu
AttachmentMenuBotColor :: Maybe Int -> Maybe Int -> AttachmentMenuBotColor

-- | Color in the RGB24 format for light themes
[light_color] :: AttachmentMenuBotColor -> Maybe Int

-- | Color in the RGB24 format for dark themes
[dark_color] :: AttachmentMenuBotColor -> Maybe Int
instance GHC.Show.Show TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance GHC.Classes.Eq TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance TD.Lib.Internal.ShortShow TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AttachmentMenuBotColor.AttachmentMenuBotColor

module TD.Data.AttachmentMenuBot
data AttachmentMenuBot

-- | Represents a bot, which can be added to attachment or side menu
AttachmentMenuBot :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe AttachmentMenuBotColor -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe File -> Maybe AttachmentMenuBotColor -> Maybe File -> AttachmentMenuBot

-- | User identifier of the bot
[bot_user_id] :: AttachmentMenuBot -> Maybe Int

-- | True, if the bot supports opening from attachment menu in the chat
--   with the bot
[supports_self_chat] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in private
--   chats with ordinary users
[supports_user_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in private
--   chats with other bots
[supports_bot_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in basic group
--   and supergroup chats
[supports_group_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot supports opening from attachment menu in channel
--   chats
[supports_channel_chats] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the user must be asked for the permission to send messages to
--   the bot
[request_write_access] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot was explicitly added by the user. If the bot isn't
--   added, then on the first bot launch toggleBotIsAddedToAttachmentMenu
--   must be called and the bot must be added or removed
[is_added] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot must be shown in the attachment menu
[show_in_attachment_menu] :: AttachmentMenuBot -> Maybe Bool

-- | True, if the bot must be shown in the side menu
[show_in_side_menu] :: AttachmentMenuBot -> Maybe Bool

-- | True, if a disclaimer, why the bot is shown in the side menu, is
--   needed
[show_disclaimer_in_side_menu] :: AttachmentMenuBot -> Maybe Bool

-- | Name for the bot in attachment menu
[name] :: AttachmentMenuBot -> Maybe Text

-- | Color to highlight selected name of the bot if appropriate; may be
--   null
[name_color] :: AttachmentMenuBot -> Maybe AttachmentMenuBotColor

-- | Default icon for the bot in SVG format; may be null
[default_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in SVG format for the official iOS app; may be null
[ios_static_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in TGS format for the official iOS app; may be null
[ios_animated_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in PNG format for the official iOS app side menu; may
--   be null
[ios_side_menu_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in TGS format for the official Android app; may be
--   null
[android_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in SVG format for the official Android app side menu;
--   may be null
[android_side_menu_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in TGS format for the official native macOS app; may
--   be null
[macos_icon] :: AttachmentMenuBot -> Maybe File

-- | Icon for the bot in PNG format for the official macOS app side menu;
--   may be null
[macos_side_menu_icon] :: AttachmentMenuBot -> Maybe File

-- | Color to highlight selected icon of the bot if appropriate; may be
--   null
[icon_color] :: AttachmentMenuBot -> Maybe AttachmentMenuBotColor

-- | Default placeholder for opened Web Apps in SVG format; may be null
[web_app_placeholder] :: AttachmentMenuBot -> Maybe File
instance GHC.Show.Show TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance GHC.Classes.Eq TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance TD.Lib.Internal.ShortShow TD.Data.AttachmentMenuBot.AttachmentMenuBot
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AttachmentMenuBot.AttachmentMenuBot

module TD.Data.ArchiveChatListSettings
data ArchiveChatListSettings

-- | Contains settings for automatic moving of chats to and from the
--   Archive chat lists
ArchiveChatListSettings :: Maybe Bool -> Maybe Bool -> Maybe Bool -> ArchiveChatListSettings

-- | True, if new chats from non-contacts will be automatically archived
--   and muted. Can be set to true only if the option
--   "can_archive_and_mute_new_chats_from_unknown_users" is true
[archive_and_mute_new_chats_from_unknown_users] :: ArchiveChatListSettings -> Maybe Bool

-- | True, if unmuted chats will be kept in the Archive chat list when they
--   get a new message
[keep_unmuted_chats_archived] :: ArchiveChatListSettings -> Maybe Bool

-- | True, if unmuted chats, that are always included or pinned in a
--   folder, will be kept in the Archive chat list when they get a new
--   message. Ignored if keep_unmuted_chats_archived == true
[keep_chats_from_folders_archived] :: ArchiveChatListSettings -> Maybe Bool
defaultArchiveChatListSettings :: ArchiveChatListSettings
instance GHC.Show.Show TD.Data.ArchiveChatListSettings.ArchiveChatListSettings
instance GHC.Classes.Eq TD.Data.ArchiveChatListSettings.ArchiveChatListSettings
instance TD.Lib.Internal.ShortShow TD.Data.ArchiveChatListSettings.ArchiveChatListSettings
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ArchiveChatListSettings.ArchiveChatListSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.ArchiveChatListSettings.ArchiveChatListSettings

module TD.Data.Animation
data Animation

-- | Describes an animation file. The animation must be encoded in GIF or
--   MPEG4 format
Animation :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Minithumbnail -> Maybe Thumbnail -> Maybe File -> Animation

-- | Duration of the animation, in seconds; as defined by the sender
[duration] :: Animation -> Maybe Int

-- | Width of the animation
[width] :: Animation -> Maybe Int

-- | Height of the animation
[height] :: Animation -> Maybe Int

-- | Original name of the file; as defined by the sender
[file_name] :: Animation -> Maybe Text

-- | MIME type of the file, usually "image<i>gif" or "video</i>mp4"
[mime_type] :: Animation -> Maybe Text

-- | True, if stickers were added to the animation. The list of
--   corresponding sticker set can be received using getAttachedStickerSets
[has_stickers] :: Animation -> Maybe Bool

-- | Animation minithumbnail; may be null
[minithumbnail] :: Animation -> Maybe Minithumbnail

-- | Animation thumbnail in JPEG or MPEG4 format; may be null
[thumbnail] :: Animation -> Maybe Thumbnail

-- | File containing the animation
[animation] :: Animation -> Maybe File
instance GHC.Show.Show TD.Data.Animation.Animation
instance GHC.Classes.Eq TD.Data.Animation.Animation
instance TD.Lib.Internal.ShortShow TD.Data.Animation.Animation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Animation.Animation

module TD.Data.WebPage
data WebPage

-- | Describes a link preview
WebPage :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe FormattedText -> Maybe Photo -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Animation -> Maybe Audio -> Maybe Document -> Maybe Sticker -> Maybe Video -> Maybe VideoNote -> Maybe VoiceNote -> Maybe Int -> Maybe Int -> Maybe [Sticker] -> Maybe Int -> WebPage

-- | Original URL of the link
[url] :: WebPage -> Maybe Text

-- | URL to display
[display_url] :: WebPage -> Maybe Text

-- | Type of the web page. Can be: article, photo, audio, video, document,
--   profile, app, or something else
[_type] :: WebPage -> Maybe Text

-- | Short name of the site (e.g., Google Docs, App Store)
[site_name] :: WebPage -> Maybe Text

-- | Title of the content
[title] :: WebPage -> Maybe Text
[description] :: WebPage -> Maybe FormattedText

-- | Image representing the content; may be null
[photo] :: WebPage -> Maybe Photo

-- | URL to show in the embedded preview
[embed_url] :: WebPage -> Maybe Text

-- | MIME type of the embedded preview, (e.g., text<i>html or video</i>mp4)
[embed_type] :: WebPage -> Maybe Text

-- | Width of the embedded preview
[embed_width] :: WebPage -> Maybe Int

-- | Height of the embedded preview
[embed_height] :: WebPage -> Maybe Int

-- | Duration of the content, in seconds
[duration] :: WebPage -> Maybe Int

-- | Author of the content
[author] :: WebPage -> Maybe Text

-- | True, if size of media in the preview can be changed
[has_large_media] :: WebPage -> Maybe Bool

-- | True, if large media preview must be shown; otherwise, the media
--   preview must be shown small and only the first frame must be shown for
--   videos
[show_large_media] :: WebPage -> Maybe Bool

-- | True, if there is no need to show an ordinary open URL confirmation,
--   when opening the URL from the preview, because the URL is shown in the
--   message text in clear
[skip_confirmation] :: WebPage -> Maybe Bool

-- | True, if the link preview must be shown above message text; otherwise,
--   the link preview must be shown below the message text
[show_above_text] :: WebPage -> Maybe Bool

-- | Preview of the content as an animation, if available; may be null
[animation] :: WebPage -> Maybe Animation

-- | Preview of the content as an audio file, if available; may be null
[audio] :: WebPage -> Maybe Audio

-- | Preview of the content as a document, if available; may be null
[document] :: WebPage -> Maybe Document

-- | Preview of the content as a sticker for small WEBP files, if
--   available; may be null
[sticker] :: WebPage -> Maybe Sticker

-- | Preview of the content as a video, if available; may be null
[video] :: WebPage -> Maybe Video

-- | Preview of the content as a video note, if available; may be null
[video_note] :: WebPage -> Maybe VideoNote

-- | Preview of the content as a voice note, if available; may be null
[voice_note] :: WebPage -> Maybe VoiceNote

-- | The identifier of the sender of the previewed story; 0 if none
[story_sender_chat_id] :: WebPage -> Maybe Int

-- | The identifier of the previewed story; 0 if none
[story_id] :: WebPage -> Maybe Int

-- | Up to 4 stickers from the sticker set available via the link
[stickers] :: WebPage -> Maybe [Sticker]

-- | Version of web page instant view (currently, can be 1 or 2); 0 if none
[instant_view_version] :: WebPage -> Maybe Int
instance GHC.Show.Show TD.Data.WebPage.WebPage
instance GHC.Classes.Eq TD.Data.WebPage.WebPage
instance TD.Lib.Internal.ShortShow TD.Data.WebPage.WebPage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebPage.WebPage

module TD.Data.WebApp
data WebApp

-- | Describes a Web App. Use getInternalLink with internalLinkTypeWebApp
--   to share the Web App
WebApp :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Photo -> Maybe Animation -> WebApp

-- | Web App short name
[short_name] :: WebApp -> Maybe Text

-- | Web App title
[title] :: WebApp -> Maybe Text
[description] :: WebApp -> Maybe Text

-- | Web App photo
[photo] :: WebApp -> Maybe Photo

-- | Web App animation; may be null
[animation] :: WebApp -> Maybe Animation
instance GHC.Show.Show TD.Data.WebApp.WebApp
instance GHC.Classes.Eq TD.Data.WebApp.WebApp
instance TD.Lib.Internal.ShortShow TD.Data.WebApp.WebApp
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebApp.WebApp

module TD.Data.FoundWebApp
data FoundWebApp

-- | Contains information about a Web App found by its short name
FoundWebApp :: Maybe WebApp -> Maybe Bool -> Maybe Bool -> FoundWebApp

-- | The Web App
[web_app] :: FoundWebApp -> Maybe WebApp

-- | True, if the user must be asked for the permission to the bot to send
--   them messages
[request_write_access] :: FoundWebApp -> Maybe Bool

-- | True, if there is no need to show an ordinary open URL confirmation
--   before opening the Web App. The field must be ignored and confirmation
--   must be shown anyway if the Web App link was hidden
[skip_confirmation] :: FoundWebApp -> Maybe Bool
instance GHC.Show.Show TD.Data.FoundWebApp.FoundWebApp
instance GHC.Classes.Eq TD.Data.FoundWebApp.FoundWebApp
instance TD.Lib.Internal.ShortShow TD.Data.FoundWebApp.FoundWebApp
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundWebApp.FoundWebApp

module TD.Data.BotWriteAccessAllowReason

-- | Describes a reason why a bot was allowed to write messages to the
--   current user
data BotWriteAccessAllowReason

-- | The user connected a website by logging in using Telegram Login Widget
--   on it
BotWriteAccessAllowReasonConnectedWebsite :: Maybe Text -> BotWriteAccessAllowReason

-- | Domain name of the connected website
[domain_name] :: BotWriteAccessAllowReason -> Maybe Text

-- | The user added the bot to attachment or side menu using
--   toggleBotIsAddedToAttachmentMenu
BotWriteAccessAllowReasonAddedToAttachmentMenu :: BotWriteAccessAllowReason

-- | The user launched a Web App using getWebAppLinkUrl
BotWriteAccessAllowReasonLaunchedWebApp :: Maybe WebApp -> BotWriteAccessAllowReason

-- | Information about the Web App
[web_app] :: BotWriteAccessAllowReason -> Maybe WebApp

-- | The user accepted bot's request to send messages with
--   allowBotToSendMessages
BotWriteAccessAllowReasonAcceptedRequest :: BotWriteAccessAllowReason
instance GHC.Show.Show TD.Data.BotWriteAccessAllowReason.BotWriteAccessAllowReason
instance GHC.Classes.Eq TD.Data.BotWriteAccessAllowReason.BotWriteAccessAllowReason
instance TD.Lib.Internal.ShortShow TD.Data.BotWriteAccessAllowReason.BotWriteAccessAllowReason
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotWriteAccessAllowReason.BotWriteAccessAllowReason

module TD.Data.PushMessageContent

-- | Contains content of a push message notification
data PushMessageContent

-- | A general message with hidden content
PushMessageContentHidden :: Maybe Bool -> PushMessageContent

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | An animation message (GIF-style).
PushMessageContentAnimation :: Maybe Animation -> Maybe Text -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[animation] :: PushMessageContent -> Maybe Animation

-- | Animation caption
[caption] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | An audio message
PushMessageContentAudio :: Maybe Audio -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[audio] :: PushMessageContent -> Maybe Audio

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a user contact
PushMessageContentContact :: Maybe Text -> Maybe Bool -> PushMessageContent

-- | Contact's name
[name] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A contact has registered with Telegram
PushMessageContentContactRegistered :: PushMessageContent

-- | A document message (a general file)
PushMessageContentDocument :: Maybe Document -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[document] :: PushMessageContent -> Maybe Document

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a game
PushMessageContentGame :: Maybe Text -> Maybe Bool -> PushMessageContent

-- | Game title, empty for pinned game message
[title] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A new high score was achieved in a game
PushMessageContentGameScore :: Maybe Text -> Maybe Int -> Maybe Bool -> PushMessageContent

-- | Game title, empty for pinned game message
[title] :: PushMessageContent -> Maybe Text

-- | New score, 0 for pinned message
[score] :: PushMessageContent -> Maybe Int

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with an invoice from a bot
PushMessageContentInvoice :: Maybe Text -> Maybe Bool -> PushMessageContent

-- | Product price
[price] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a location
PushMessageContentLocation :: Maybe Bool -> Maybe Bool -> PushMessageContent

-- | True, if the location is live
[is_live] :: PushMessageContent -> Maybe Bool

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A photo message
PushMessageContentPhoto :: Maybe Photo -> Maybe Text -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[photo] :: PushMessageContent -> Maybe Photo

-- | Animation caption
[caption] :: PushMessageContent -> Maybe Text

-- | True, if the photo is secret
[is_secret] :: PushMessageContent -> Maybe Bool

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a poll
PushMessageContentPoll :: Maybe Text -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Poll question
[question] :: PushMessageContent -> Maybe Text

-- | True, if the poll is regular and not in quiz mode
[is_regular] :: PushMessageContent -> Maybe Bool

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a Telegram Premium gift code created for the user
PushMessageContentPremiumGiftCode :: Maybe Int -> PushMessageContent

-- | Number of months the Telegram Premium subscription will be active
--   after code activation
[month_count] :: PushMessageContent -> Maybe Int

-- | A message with a Telegram Premium giveaway
PushMessageContentPremiumGiveaway :: Maybe Int -> Maybe Int -> Maybe Bool -> PushMessageContent

-- | Number of users which will receive Telegram Premium subscription gift
--   codes; 0 for pinned message
[winner_count] :: PushMessageContent -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
--   after code activation
[month_count] :: PushMessageContent -> Maybe Int

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A screenshot of a message in the chat has been taken
PushMessageContentScreenshotTaken :: PushMessageContent

-- | A message with a sticker
PushMessageContentSticker :: Maybe Sticker -> Maybe Text -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[sticker] :: PushMessageContent -> Maybe Sticker

-- | Emoji corresponding to the sticker; may be empty
[emoji] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A message with a story
PushMessageContentStory :: Maybe Bool -> PushMessageContent

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A text message
PushMessageContentText :: Maybe Text -> Maybe Bool -> PushMessageContent

-- | Message text
[text] :: PushMessageContent -> Maybe Text

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A video message
PushMessageContentVideo :: Maybe Video -> Maybe Text -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[video] :: PushMessageContent -> Maybe Video

-- | Animation caption
[caption] :: PushMessageContent -> Maybe Text

-- | True, if the photo is secret
[is_secret] :: PushMessageContent -> Maybe Bool

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A video note message
PushMessageContentVideoNote :: Maybe VideoNote -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[video_note] :: PushMessageContent -> Maybe VideoNote

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A voice note message
PushMessageContentVoiceNote :: Maybe VoiceNote -> Maybe Bool -> PushMessageContent

-- | Message content; may be null
[voice_note] :: PushMessageContent -> Maybe VoiceNote

-- | True, if the message is a pinned message with the specified content
[is_pinned] :: PushMessageContent -> Maybe Bool

-- | A newly created basic group
PushMessageContentBasicGroupChatCreate :: PushMessageContent

-- | New chat members were invited to a group
PushMessageContentChatAddMembers :: Maybe Text -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Name of the added member
[member_name] :: PushMessageContent -> Maybe Text

-- | True, if the current user was added to the group
[is_current_user] :: PushMessageContent -> Maybe Bool

-- | True, if the user has returned to the group themselves
[is_returned] :: PushMessageContent -> Maybe Bool

-- | A chat photo was edited
PushMessageContentChatChangePhoto :: PushMessageContent

-- | A chat title was edited
PushMessageContentChatChangeTitle :: Maybe Text -> PushMessageContent

-- | Game title, empty for pinned game message
[title] :: PushMessageContent -> Maybe Text

-- | A chat background was edited
PushMessageContentChatSetBackground :: Maybe Bool -> PushMessageContent

-- | True, if the set background is the same as the background of the
--   current user
[is_same] :: PushMessageContent -> Maybe Bool

-- | A chat theme was edited
PushMessageContentChatSetTheme :: Maybe Text -> PushMessageContent

-- | If non-empty, name of a new theme, set for the chat. Otherwise, the
--   chat theme was reset to the default one
[theme_name] :: PushMessageContent -> Maybe Text

-- | A chat member was deleted
PushMessageContentChatDeleteMember :: Maybe Text -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Name of the added member
[member_name] :: PushMessageContent -> Maybe Text

-- | True, if the current user was added to the group
[is_current_user] :: PushMessageContent -> Maybe Bool

-- | True, if the user has left the group themselves
[is_left] :: PushMessageContent -> Maybe Bool

-- | A new member joined the chat via an invite link
PushMessageContentChatJoinByLink :: PushMessageContent

-- | A new member was accepted to the chat by an administrator
PushMessageContentChatJoinByRequest :: PushMessageContent

-- | A new recurring payment was made by the current user
PushMessageContentRecurringPayment :: Maybe Text -> PushMessageContent

-- | The paid amount
[amount] :: PushMessageContent -> Maybe Text

-- | A profile photo was suggested to the user
PushMessageContentSuggestProfilePhoto :: PushMessageContent

-- | A forwarded messages
PushMessageContentMessageForwards :: Maybe Int -> PushMessageContent

-- | Number of forwarded messages
[total_count] :: PushMessageContent -> Maybe Int

-- | A media album
PushMessageContentMediaAlbum :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> PushMessageContent

-- | Number of forwarded messages
[total_count] :: PushMessageContent -> Maybe Int

-- | True, if the album has at least one photo
[has_photos] :: PushMessageContent -> Maybe Bool

-- | True, if the album has at least one video file
[has_videos] :: PushMessageContent -> Maybe Bool

-- | True, if the album has at least one audio file
[has_audios] :: PushMessageContent -> Maybe Bool

-- | True, if the album has at least one document
[has_documents] :: PushMessageContent -> Maybe Bool
instance GHC.Show.Show TD.Data.PushMessageContent.PushMessageContent
instance GHC.Classes.Eq TD.Data.PushMessageContent.PushMessageContent
instance TD.Lib.Internal.ShortShow TD.Data.PushMessageContent.PushMessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PushMessageContent.PushMessageContent

module TD.Data.PremiumFeaturePromotionAnimation
data PremiumFeaturePromotionAnimation

-- | Describes a promotion animation for a Premium feature
PremiumFeaturePromotionAnimation :: Maybe PremiumFeature -> Maybe Animation -> PremiumFeaturePromotionAnimation

-- | Premium feature
[feature] :: PremiumFeaturePromotionAnimation -> Maybe PremiumFeature

-- | Promotion animation for the feature
[animation] :: PremiumFeaturePromotionAnimation -> Maybe Animation
instance GHC.Show.Show TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance GHC.Classes.Eq TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance TD.Lib.Internal.ShortShow TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumFeaturePromotionAnimation.PremiumFeaturePromotionAnimation

module TD.Data.PageBlock

-- | Describes a block of an instant view web page
data PageBlock

-- | The title of a page
PageBlockTitle :: Maybe RichText -> PageBlock

-- | Title
[title] :: PageBlock -> Maybe RichText

-- | The subtitle of a page
PageBlockSubtitle :: Maybe RichText -> PageBlock

-- | Subtitle
[subtitle] :: PageBlock -> Maybe RichText

-- | The author and publishing date of a page
PageBlockAuthorDate :: Maybe RichText -> Maybe Int -> PageBlock

-- | Author
[author] :: PageBlock -> Maybe RichText

-- | Point in time (Unix timestamp) when the article was published; 0 if
--   unknown
[publish_date] :: PageBlock -> Maybe Int

-- | A header
PageBlockHeader :: Maybe RichText -> PageBlock

-- | Header
[header] :: PageBlock -> Maybe RichText

-- | A subheader
PageBlockSubheader :: Maybe RichText -> PageBlock

-- | Subheader
[subheader] :: PageBlock -> Maybe RichText

-- | A kicker
PageBlockKicker :: Maybe RichText -> PageBlock

-- | Kicker
[kicker] :: PageBlock -> Maybe RichText

-- | A text paragraph
PageBlockParagraph :: Maybe RichText -> PageBlock

-- | Paragraph text
[text] :: PageBlock -> Maybe RichText

-- | A preformatted text paragraph
PageBlockPreformatted :: Maybe RichText -> Maybe Text -> PageBlock

-- | Paragraph text
[text] :: PageBlock -> Maybe RichText

-- | Programming language for which the text needs to be formatted
[language] :: PageBlock -> Maybe Text

-- | The footer of a page
PageBlockFooter :: Maybe RichText -> PageBlock

-- | Footer
[footer] :: PageBlock -> Maybe RichText

-- | An empty block separating a page
PageBlockDivider :: PageBlock

-- | An invisible anchor on a page, which can be used in a URL to open the
--   page from the specified anchor
PageBlockAnchor :: Maybe Text -> PageBlock

-- | Name of the anchor
[name] :: PageBlock -> Maybe Text

-- | A list of data blocks
PageBlockList :: Maybe [PageBlockListItem] -> PageBlock

-- | The items of the list
[items] :: PageBlock -> Maybe [PageBlockListItem]

-- | A block quote
PageBlockBlockQuote :: Maybe RichText -> Maybe RichText -> PageBlock

-- | Paragraph text
[text] :: PageBlock -> Maybe RichText

-- | Quote credit
[credit] :: PageBlock -> Maybe RichText

-- | A pull quote
PageBlockPullQuote :: Maybe RichText -> Maybe RichText -> PageBlock

-- | Paragraph text
[text] :: PageBlock -> Maybe RichText

-- | Quote credit
[credit] :: PageBlock -> Maybe RichText

-- | An animation
PageBlockAnimation :: Maybe Animation -> Maybe PageBlockCaption -> Maybe Bool -> PageBlock

-- | Animation file; may be null
[animation] :: PageBlock -> Maybe Animation

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | True, if the animation must be played automatically
[need_autoplay] :: PageBlock -> Maybe Bool

-- | An audio file
PageBlockAudio :: Maybe Audio -> Maybe PageBlockCaption -> PageBlock

-- | Audio file; may be null
[audio] :: PageBlock -> Maybe Audio

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | A photo
PageBlockPhoto :: Maybe Photo -> Maybe PageBlockCaption -> Maybe Text -> PageBlock

-- | Photo file; may be null
[photo] :: PageBlock -> Maybe Photo

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | URL that needs to be opened when the photo is clicked
[url] :: PageBlock -> Maybe Text

-- | A video
PageBlockVideo :: Maybe Video -> Maybe PageBlockCaption -> Maybe Bool -> Maybe Bool -> PageBlock

-- | Video file; may be null
[video] :: PageBlock -> Maybe Video

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | True, if the animation must be played automatically
[need_autoplay] :: PageBlock -> Maybe Bool

-- | True, if the video must be looped
[is_looped] :: PageBlock -> Maybe Bool

-- | A voice note
PageBlockVoiceNote :: Maybe VoiceNote -> Maybe PageBlockCaption -> PageBlock

-- | Voice note; may be null
[voice_note] :: PageBlock -> Maybe VoiceNote

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | A page cover
PageBlockCover :: Maybe PageBlock -> PageBlock

-- | Cover
[cover] :: PageBlock -> Maybe PageBlock

-- | An embedded web page
PageBlockEmbedded :: Maybe Text -> Maybe Text -> Maybe Photo -> Maybe Int -> Maybe Int -> Maybe PageBlockCaption -> Maybe Bool -> Maybe Bool -> PageBlock

-- | URL that needs to be opened when the photo is clicked
[url] :: PageBlock -> Maybe Text

-- | HTML-markup of the embedded page
[html] :: PageBlock -> Maybe Text

-- | Poster photo, if available; may be null
[poster_photo] :: PageBlock -> Maybe Photo

-- | Block width; 0 if unknown
[width] :: PageBlock -> Maybe Int

-- | Block height; 0 if unknown
[height] :: PageBlock -> Maybe Int

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | True, if the block must be full width
[is_full_width] :: PageBlock -> Maybe Bool

-- | True, if scrolling needs to be allowed
[allow_scrolling] :: PageBlock -> Maybe Bool

-- | An embedded post
PageBlockEmbeddedPost :: Maybe Text -> Maybe Text -> Maybe Photo -> Maybe Int -> Maybe [PageBlock] -> Maybe PageBlockCaption -> PageBlock

-- | URL that needs to be opened when the photo is clicked
[url] :: PageBlock -> Maybe Text

-- | Post author
[_author] :: PageBlock -> Maybe Text

-- | Post author photo; may be null
[author_photo] :: PageBlock -> Maybe Photo

-- | Point in time (Unix timestamp) when the post was created; 0 if unknown
[date] :: PageBlock -> Maybe Int

-- | Post content
[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | A collage
PageBlockCollage :: Maybe [PageBlock] -> Maybe PageBlockCaption -> PageBlock

-- | Post content
[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | A slideshow
PageBlockSlideshow :: Maybe [PageBlock] -> Maybe PageBlockCaption -> PageBlock

-- | Post content
[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption

-- | A link to a chat
PageBlockChatLink :: Maybe Text -> Maybe ChatPhotoInfo -> Maybe Int -> Maybe Text -> PageBlock

-- | Chat title
[_title] :: PageBlock -> Maybe Text

-- | Chat photo; may be null
[_photo] :: PageBlock -> Maybe ChatPhotoInfo

-- | Identifier of the accent color for chat title and background of chat
--   photo
[accent_color_id] :: PageBlock -> Maybe Int

-- | Chat username by which all other information about the chat can be
--   resolved
[username] :: PageBlock -> Maybe Text

-- | A table
PageBlockTable :: Maybe RichText -> Maybe [[PageBlockTableCell]] -> Maybe Bool -> Maybe Bool -> PageBlock

-- | Table caption
[_caption] :: PageBlock -> Maybe RichText

-- | Table cells
[cells] :: PageBlock -> Maybe [[PageBlockTableCell]]

-- | True, if the table is bordered
[is_bordered] :: PageBlock -> Maybe Bool

-- | True, if the table is striped
[is_striped] :: PageBlock -> Maybe Bool

-- | A collapsible block
PageBlockDetails :: Maybe RichText -> Maybe [PageBlock] -> Maybe Bool -> PageBlock

-- | Header
[header] :: PageBlock -> Maybe RichText

-- | Post content
[page_blocks] :: PageBlock -> Maybe [PageBlock]

-- | True, if the block is open by default
[is_open] :: PageBlock -> Maybe Bool

-- | Related articles
PageBlockRelatedArticles :: Maybe RichText -> Maybe [PageBlockRelatedArticle] -> PageBlock

-- | Header
[header] :: PageBlock -> Maybe RichText

-- | List of related articles
[articles] :: PageBlock -> Maybe [PageBlockRelatedArticle]

-- | A map
PageBlockMap :: Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe PageBlockCaption -> PageBlock

-- | Location of the map center
[location] :: PageBlock -> Maybe Location

-- | Map zoom level
[zoom] :: PageBlock -> Maybe Int

-- | Block width; 0 if unknown
[width] :: PageBlock -> Maybe Int

-- | Block height; 0 if unknown
[height] :: PageBlock -> Maybe Int

-- | Animation caption
[caption] :: PageBlock -> Maybe PageBlockCaption
instance GHC.Show.Show TD.Data.PageBlock.PageBlock
instance GHC.Classes.Eq TD.Data.PageBlock.PageBlock
instance TD.Lib.Internal.ShortShow TD.Data.PageBlock.PageBlock
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PageBlock.PageBlock

module TD.Data.WebPageInstantView
data WebPageInstantView

-- | Describes an instant view page for a web page
WebPageInstantView :: Maybe [PageBlock] -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe InternalLinkType -> WebPageInstantView

-- | Content of the web page
[page_blocks] :: WebPageInstantView -> Maybe [PageBlock]

-- | Number of the instant view views; 0 if unknown
[view_count] :: WebPageInstantView -> Maybe Int

-- | Version of the instant view; currently, can be 1 or 2
[version] :: WebPageInstantView -> Maybe Int

-- | True, if the instant view must be shown from right to left
[is_rtl] :: WebPageInstantView -> Maybe Bool

-- | True, if the instant view contains the full page. A network request
--   might be needed to get the full web page instant view
[is_full] :: WebPageInstantView -> Maybe Bool

-- | An internal link to be opened to leave feedback about the instant view
[feedback_link] :: WebPageInstantView -> Maybe InternalLinkType
instance GHC.Show.Show TD.Data.WebPageInstantView.WebPageInstantView
instance GHC.Classes.Eq TD.Data.WebPageInstantView.WebPageInstantView
instance TD.Lib.Internal.ShortShow TD.Data.WebPageInstantView.WebPageInstantView
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.WebPageInstantView.WebPageInstantView

module TD.Data.Game
data Game

-- | Describes a game. Use getInternalLink with internalLinkTypeGame to
--   share the game
Game :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe FormattedText -> Maybe Text -> Maybe Photo -> Maybe Animation -> Game

-- | Unique game identifier
[_id] :: Game -> Maybe Int

-- | Game short name
[short_name] :: Game -> Maybe Text

-- | Game title
[title] :: Game -> Maybe Text

-- | Game text, usually containing scoreboards for a game
[text] :: Game -> Maybe FormattedText
[description] :: Game -> Maybe Text

-- | Game photo
[photo] :: Game -> Maybe Photo

-- | Game animation; may be null
[animation] :: Game -> Maybe Animation
instance GHC.Show.Show TD.Data.Game.Game
instance GHC.Classes.Eq TD.Data.Game.Game
instance TD.Lib.Internal.ShortShow TD.Data.Game.Game
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Game.Game

module TD.Data.InlineQueryResult

-- | Represents a single result of an inline query
data InlineQueryResult

-- | Represents a link to an article or web page
InlineQueryResultArticle :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Thumbnail -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | URL of the result, if it exists
[url] :: InlineQueryResult -> Maybe Text

-- | True, if the URL must be not shown
[hide_url] :: InlineQueryResult -> Maybe Bool

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text
[description] :: InlineQueryResult -> Maybe Text

-- | Result thumbnail in JPEG format; may be null
[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

-- | Represents a user contact
InlineQueryResultContact :: Maybe Text -> Maybe Contact -> Maybe Thumbnail -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | A user contact
[contact] :: InlineQueryResult -> Maybe Contact

-- | Result thumbnail in JPEG format; may be null
[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

-- | Represents a point on the map
InlineQueryResultLocation :: Maybe Text -> Maybe Location -> Maybe Text -> Maybe Thumbnail -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Location result
[location] :: InlineQueryResult -> Maybe Location

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text

-- | Result thumbnail in JPEG format; may be null
[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

-- | Represents information about a venue
InlineQueryResultVenue :: Maybe Text -> Maybe Venue -> Maybe Thumbnail -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Venue result
[venue] :: InlineQueryResult -> Maybe Venue

-- | Result thumbnail in JPEG format; may be null
[thumbnail] :: InlineQueryResult -> Maybe Thumbnail

-- | Represents information about a game
InlineQueryResultGame :: Maybe Text -> Maybe Game -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Game result
[game] :: InlineQueryResult -> Maybe Game

-- | Represents an animation file
InlineQueryResultAnimation :: Maybe Text -> Maybe Animation -> Maybe Text -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Animation file
[animation] :: InlineQueryResult -> Maybe Animation

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text

-- | Represents an audio file
InlineQueryResultAudio :: Maybe Text -> Maybe Audio -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Audio file
[audio] :: InlineQueryResult -> Maybe Audio

-- | Represents a document
InlineQueryResultDocument :: Maybe Text -> Maybe Document -> Maybe Text -> Maybe Text -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Document
[document] :: InlineQueryResult -> Maybe Document

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text
[description] :: InlineQueryResult -> Maybe Text

-- | Represents a photo
InlineQueryResultPhoto :: Maybe Text -> Maybe Photo -> Maybe Text -> Maybe Text -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Photo
[photo] :: InlineQueryResult -> Maybe Photo

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text
[description] :: InlineQueryResult -> Maybe Text

-- | Represents a sticker
InlineQueryResultSticker :: Maybe Text -> Maybe Sticker -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Sticker
[sticker] :: InlineQueryResult -> Maybe Sticker

-- | Represents a video
InlineQueryResultVideo :: Maybe Text -> Maybe Video -> Maybe Text -> Maybe Text -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Video
[video] :: InlineQueryResult -> Maybe Video

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text
[description] :: InlineQueryResult -> Maybe Text

-- | Represents a voice note
InlineQueryResultVoiceNote :: Maybe Text -> Maybe VoiceNote -> Maybe Text -> InlineQueryResult

-- | Unique identifier of the query result
[_id] :: InlineQueryResult -> Maybe Text

-- | Voice note
[voice_note] :: InlineQueryResult -> Maybe VoiceNote

-- | Title of the result
[title] :: InlineQueryResult -> Maybe Text
instance GHC.Show.Show TD.Data.InlineQueryResult.InlineQueryResult
instance GHC.Classes.Eq TD.Data.InlineQueryResult.InlineQueryResult
instance TD.Lib.Internal.ShortShow TD.Data.InlineQueryResult.InlineQueryResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResult.InlineQueryResult

module TD.Data.InlineQueryResults
data InlineQueryResults

-- | Represents the results of the inline query. Use
--   sendInlineQueryResultMessage to send the result of the query
InlineQueryResults :: Maybe Int -> Maybe InlineQueryResultsButton -> Maybe [InlineQueryResult] -> Maybe Text -> InlineQueryResults

-- | Unique identifier of the inline query
[inline_query_id] :: InlineQueryResults -> Maybe Int

-- | Button to be shown above inline query results; may be null
[button] :: InlineQueryResults -> Maybe InlineQueryResultsButton

-- | Results of the query
[results] :: InlineQueryResults -> Maybe [InlineQueryResult]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: InlineQueryResults -> Maybe Text
instance GHC.Show.Show TD.Data.InlineQueryResults.InlineQueryResults
instance GHC.Classes.Eq TD.Data.InlineQueryResults.InlineQueryResults
instance TD.Lib.Internal.ShortShow TD.Data.InlineQueryResults.InlineQueryResults
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InlineQueryResults.InlineQueryResults

module TD.Data.BusinessFeaturePromotionAnimation
data BusinessFeaturePromotionAnimation

-- | Describes a promotion animation for a Business feature
BusinessFeaturePromotionAnimation :: Maybe BusinessFeature -> Maybe Animation -> BusinessFeaturePromotionAnimation

-- | Business feature
[feature] :: BusinessFeaturePromotionAnimation -> Maybe BusinessFeature

-- | Promotion animation for the feature
[animation] :: BusinessFeaturePromotionAnimation -> Maybe Animation
instance GHC.Show.Show TD.Data.BusinessFeaturePromotionAnimation.BusinessFeaturePromotionAnimation
instance GHC.Classes.Eq TD.Data.BusinessFeaturePromotionAnimation.BusinessFeaturePromotionAnimation
instance TD.Lib.Internal.ShortShow TD.Data.BusinessFeaturePromotionAnimation.BusinessFeaturePromotionAnimation
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessFeaturePromotionAnimation.BusinessFeaturePromotionAnimation

module TD.Data.PremiumState
data PremiumState

-- | Contains state of Telegram Premium subscription and promotion videos
--   for Premium features
PremiumState :: Maybe FormattedText -> Maybe [PremiumStatePaymentOption] -> Maybe [PremiumFeaturePromotionAnimation] -> Maybe [BusinessFeaturePromotionAnimation] -> PremiumState

-- | Text description of the state of the current Premium subscription; may
--   be empty if the current user has no Telegram Premium subscription
[state] :: PremiumState -> Maybe FormattedText

-- | The list of available options for buying Telegram Premium
[payment_options] :: PremiumState -> Maybe [PremiumStatePaymentOption]

-- | The list of available promotion animations for Premium features
[animations] :: PremiumState -> Maybe [PremiumFeaturePromotionAnimation]

-- | The list of available promotion animations for Business features
[business_animations] :: PremiumState -> Maybe [BusinessFeaturePromotionAnimation]
instance GHC.Show.Show TD.Data.PremiumState.PremiumState
instance GHC.Classes.Eq TD.Data.PremiumState.PremiumState
instance TD.Lib.Internal.ShortShow TD.Data.PremiumState.PremiumState
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PremiumState.PremiumState

module TD.Data.BotInfo
data BotInfo

-- | Contains information about a bot
BotInfo :: Maybe Text -> Maybe Text -> Maybe Photo -> Maybe Animation -> Maybe BotMenuButton -> Maybe [BotCommand] -> Maybe ChatAdministratorRights -> Maybe ChatAdministratorRights -> Maybe InternalLinkType -> Maybe InternalLinkType -> Maybe InternalLinkType -> Maybe InternalLinkType -> BotInfo

-- | The text that is shown on the bot's profile page and is sent together
--   with the link when users share the bot
[short_description] :: BotInfo -> Maybe Text
[description] :: BotInfo -> Maybe Text

-- | Photo shown in the chat with the bot if the chat is empty; may be null
[photo] :: BotInfo -> Maybe Photo

-- | Animation shown in the chat with the bot if the chat is empty; may be
--   null
[animation] :: BotInfo -> Maybe Animation

-- | Information about a button to show instead of the bot commands menu
--   button; may be null if ordinary bot commands menu must be shown
[menu_button] :: BotInfo -> Maybe BotMenuButton

-- | List of the bot commands
[commands] :: BotInfo -> Maybe [BotCommand]

-- | Default administrator rights for adding the bot to basic group and
--   supergroup chats; may be null
[default_group_administrator_rights] :: BotInfo -> Maybe ChatAdministratorRights

-- | Default administrator rights for adding the bot to channels; may be
--   null
[default_channel_administrator_rights] :: BotInfo -> Maybe ChatAdministratorRights

-- | The internal link, which can be used to edit bot commands; may be null
[edit_commands_link] :: BotInfo -> Maybe InternalLinkType

-- | The internal link, which can be used to edit bot description; may be
--   null
[edit_description_link] :: BotInfo -> Maybe InternalLinkType

-- | The internal link, which can be used to edit the photo or animation
--   shown in the chat with the bot if the chat is empty; may be null
[edit_description_media_link] :: BotInfo -> Maybe InternalLinkType

-- | The internal link, which can be used to edit bot settings; may be null
[edit_settings_link] :: BotInfo -> Maybe InternalLinkType
instance GHC.Show.Show TD.Data.BotInfo.BotInfo
instance GHC.Classes.Eq TD.Data.BotInfo.BotInfo
instance TD.Lib.Internal.ShortShow TD.Data.BotInfo.BotInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BotInfo.BotInfo

module TD.Data.Animations
data Animations

-- | Represents a list of animations
Animations :: Maybe [Animation] -> Animations

-- | List of animations
[animations] :: Animations -> Maybe [Animation]
instance GHC.Show.Show TD.Data.Animations.Animations
instance GHC.Classes.Eq TD.Data.Animations.Animations
instance TD.Lib.Internal.ShortShow TD.Data.Animations.Animations
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Animations.Animations

module TD.Data.AnimatedEmoji
data AnimatedEmoji

-- | Describes an animated or custom representation of an emoji
AnimatedEmoji :: Maybe Sticker -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe File -> AnimatedEmoji

-- | Sticker for the emoji; may be null if yet unknown for a custom emoji.
--   If the sticker is a custom emoji, then it can have arbitrary format
[sticker] :: AnimatedEmoji -> Maybe Sticker

-- | Expected width of the sticker, which can be used if the sticker is
--   null
[sticker_width] :: AnimatedEmoji -> Maybe Int

-- | Expected height of the sticker, which can be used if the sticker is
--   null
[sticker_height] :: AnimatedEmoji -> Maybe Int

-- | Emoji modifier fitzpatrick type; 0-6; 0 if none
[fitzpatrick_type] :: AnimatedEmoji -> Maybe Int

-- | File containing the sound to be played when the sticker is clicked;
--   may be null. The sound is encoded with the Opus codec, and stored
--   inside an OGG container
[sound] :: AnimatedEmoji -> Maybe File
instance GHC.Show.Show TD.Data.AnimatedEmoji.AnimatedEmoji
instance GHC.Classes.Eq TD.Data.AnimatedEmoji.AnimatedEmoji
instance TD.Lib.Internal.ShortShow TD.Data.AnimatedEmoji.AnimatedEmoji
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AnimatedEmoji.AnimatedEmoji

module TD.Data.AnimatedChatPhoto
data AnimatedChatPhoto

-- | Animated variant of a chat photo in MPEG4 format
AnimatedChatPhoto :: Maybe Int -> Maybe File -> Maybe Double -> AnimatedChatPhoto

-- | Animation width and height
[_length] :: AnimatedChatPhoto -> Maybe Int

-- | Information about the animation file
[file] :: AnimatedChatPhoto -> Maybe File

-- | Timestamp of the frame, used as a static chat photo
[main_frame_timestamp] :: AnimatedChatPhoto -> Maybe Double
instance GHC.Show.Show TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance GHC.Classes.Eq TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance TD.Lib.Internal.ShortShow TD.Data.AnimatedChatPhoto.AnimatedChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AnimatedChatPhoto.AnimatedChatPhoto

module TD.Data.ChatPhoto
data ChatPhoto

-- | Describes a chat or user profile photo
ChatPhoto :: Maybe Int -> Maybe Int -> Maybe Minithumbnail -> Maybe [PhotoSize] -> Maybe AnimatedChatPhoto -> Maybe AnimatedChatPhoto -> Maybe ChatPhotoSticker -> ChatPhoto

-- | Unique photo identifier
[_id] :: ChatPhoto -> Maybe Int

-- | Point in time (Unix timestamp) when the photo has been added
[added_date] :: ChatPhoto -> Maybe Int

-- | Photo minithumbnail; may be null
[minithumbnail] :: ChatPhoto -> Maybe Minithumbnail

-- | Available variants of the photo in JPEG format, in different size
[sizes] :: ChatPhoto -> Maybe [PhotoSize]

-- | A big (up to 1280x1280) animated variant of the photo in MPEG4 format;
--   may be null
[animation] :: ChatPhoto -> Maybe AnimatedChatPhoto

-- | A small (160x160) animated variant of the photo in MPEG4 format; may
--   be null even the big animation is available
[small_animation] :: ChatPhoto -> Maybe AnimatedChatPhoto

-- | Sticker-based version of the chat photo; may be null
[sticker] :: ChatPhoto -> Maybe ChatPhotoSticker
instance GHC.Show.Show TD.Data.ChatPhoto.ChatPhoto
instance GHC.Classes.Eq TD.Data.ChatPhoto.ChatPhoto
instance TD.Lib.Internal.ShortShow TD.Data.ChatPhoto.ChatPhoto
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhoto.ChatPhoto

module TD.Data.UserFullInfo
data UserFullInfo

-- | Contains full information about a user
UserFullInfo :: Maybe ChatPhoto -> Maybe ChatPhoto -> Maybe ChatPhoto -> Maybe BlockList -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe FormattedText -> Maybe Birthdate -> Maybe Int -> Maybe [PremiumPaymentOption] -> Maybe Int -> Maybe BusinessInfo -> Maybe BotInfo -> UserFullInfo

-- | User profile photo set by the current user for the contact; may be
--   null. If null and user.profile_photo is null, then the photo is empty;
--   otherwise, it is unknown. If non-null, then it is the same photo as in
--   user.profile_photo and chat.photo. This photo isn't returned in the
--   list of user photos
[personal_photo] :: UserFullInfo -> Maybe ChatPhoto

-- | User profile photo; may be null. If null and user.profile_photo is
--   null, then the photo is empty; otherwise, it is unknown. If non-null
--   and personal_photo is null, then it is the same photo as in
--   user.profile_photo and chat.photo
[photo] :: UserFullInfo -> Maybe ChatPhoto

-- | User profile photo visible if the main photo is hidden by privacy
--   settings; may be null. If null and user.profile_photo is null, then
--   the photo is empty; otherwise, it is unknown. If non-null and both
--   photo and personal_photo are null, then it is the same photo as in
--   user.profile_photo and chat.photo. This photo isn't returned in the
--   list of user photos
[public_photo] :: UserFullInfo -> Maybe ChatPhoto

-- | Block list to which the user is added; may be null if none
[block_list] :: UserFullInfo -> Maybe BlockList

-- | True, if the user can be called
[can_be_called] :: UserFullInfo -> Maybe Bool

-- | True, if a video call can be created with the user
[supports_video_calls] :: UserFullInfo -> Maybe Bool

-- | True, if the user can't be called due to their privacy settings
[has_private_calls] :: UserFullInfo -> Maybe Bool

-- | True, if the user can't be linked in forwarded messages due to their
--   privacy settings
[has_private_forwards] :: UserFullInfo -> Maybe Bool

-- | True, if voice and video notes can't be sent or forwarded to the user
[has_restricted_voice_and_video_note_messages] :: UserFullInfo -> Maybe Bool

-- | True, if the user has posted to profile stories
[has_posted_to_profile_stories] :: UserFullInfo -> Maybe Bool

-- | True, if the user always enabled sponsored messages; known only for
--   the current user
[has_sponsored_messages_enabled] :: UserFullInfo -> Maybe Bool

-- | True, if the current user needs to explicitly allow to share their
--   phone number with the user when the method addContact is used
[need_phone_number_privacy_exception] :: UserFullInfo -> Maybe Bool

-- | True, if the user set chat background for both chat users and it
--   wasn't reverted yet
[set_chat_background] :: UserFullInfo -> Maybe Bool

-- | A short user bio; may be null for bots
[bio] :: UserFullInfo -> Maybe FormattedText

-- | Birthdate of the user; may be null if unknown
[birthdate] :: UserFullInfo -> Maybe Birthdate

-- | Identifier of the personal chat of the user; 0 if none
[personal_chat_id] :: UserFullInfo -> Maybe Int

-- | The list of available options for gifting Telegram Premium to the user
[premium_gift_options] :: UserFullInfo -> Maybe [PremiumPaymentOption]

-- | Number of group chats where both the other user and the current user
--   are a member; 0 for the current user
[group_in_common_count] :: UserFullInfo -> Maybe Int

-- | Information about business settings for Telegram Business accounts;
--   may be null if none
[business_info] :: UserFullInfo -> Maybe BusinessInfo

-- | For bots, information about the bot; may be null if the user isn't a
--   bot
[bot_info] :: UserFullInfo -> Maybe BotInfo
instance GHC.Show.Show TD.Data.UserFullInfo.UserFullInfo
instance GHC.Classes.Eq TD.Data.UserFullInfo.UserFullInfo
instance TD.Lib.Internal.ShortShow TD.Data.UserFullInfo.UserFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.UserFullInfo.UserFullInfo

module TD.Data.SupergroupFullInfo
data SupergroupFullInfo

-- | Contains full information about a supergroup or channel
SupergroupFullInfo :: Maybe ChatPhoto -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Double -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatLocation -> Maybe ChatInviteLink -> Maybe [BotCommands] -> Maybe Int -> Maybe Int -> SupergroupFullInfo

-- | Chat photo; may be null if empty or unknown. If non-null, then it is
--   the same photo as in chat.photo
[photo] :: SupergroupFullInfo -> Maybe ChatPhoto
[description] :: SupergroupFullInfo -> Maybe Text

-- | Number of members in the supergroup or channel; 0 if unknown
[member_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of privileged users in the supergroup or channel; 0 if unknown
[administrator_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of restricted users in the supergroup; 0 if unknown
[restricted_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of users banned from chat; 0 if unknown
[banned_count] :: SupergroupFullInfo -> Maybe Int

-- | Chat identifier of a discussion group for the channel, or a channel,
--   for which the supergroup is the designated discussion group; 0 if none
--   or unknown
[linked_chat_id] :: SupergroupFullInfo -> Maybe Int

-- | Delay between consecutive sent messages for non-administrator
--   supergroup members, in seconds
[slow_mode_delay] :: SupergroupFullInfo -> Maybe Int

-- | Time left before next message can be sent in the supergroup, in
--   seconds. An updateSupergroupFullInfo update is not triggered when
--   value of this field changes, but both new and old values are non-zero
[slow_mode_delay_expires_in] :: SupergroupFullInfo -> Maybe Double

-- | True, if members of the chat can be retrieved via getSupergroupMembers
--   or searchChatMembers
[can_get_members] :: SupergroupFullInfo -> Maybe Bool

-- | True, if non-administrators can receive only administrators and bots
--   using getSupergroupMembers or searchChatMembers
[has_hidden_members] :: SupergroupFullInfo -> Maybe Bool

-- | True, if non-administrators and non-bots can be hidden in responses to
--   getSupergroupMembers and searchChatMembers for non-administrators
[can_hide_members] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup sticker set can be changed
[can_set_sticker_set] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup location can be changed
[can_set_location] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup or channel statistics are available
[can_get_statistics] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup or channel revenue statistics are available
[can_get_revenue_statistics] :: SupergroupFullInfo -> Maybe Bool

-- | True, if aggressive anti-spam checks can be enabled or disabled in the
--   supergroup
[can_toggle_aggressive_anti_spam] :: SupergroupFullInfo -> Maybe Bool

-- | True, if new chat members will have access to old messages. In public,
--   discussion, of forum groups and all channels, old messages are always
--   available, so this option affects only private non-forum supergroups
--   without a linked chat. The value of this field is only available to
--   chat administrators
[is_all_history_available] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the chat can have sponsored messages. The value of this field
--   is only available to the owner of the chat
[can_have_sponsored_messages] :: SupergroupFullInfo -> Maybe Bool

-- | True, if aggressive anti-spam checks are enabled in the supergroup.
--   The value of this field is only available to chat administrators
[has_aggressive_anti_spam_enabled] :: SupergroupFullInfo -> Maybe Bool

-- | True, if the supergroup or channel has pinned stories
[has_pinned_stories] :: SupergroupFullInfo -> Maybe Bool

-- | Number of times the current user boosted the supergroup or channel
[my_boost_count] :: SupergroupFullInfo -> Maybe Int

-- | Number of times the supergroup must be boosted by a user to ignore
--   slow mode and chat permission restrictions; 0 if unspecified
[unrestrict_boost_count] :: SupergroupFullInfo -> Maybe Int

-- | Identifier of the supergroup sticker set that must be shown before
--   user sticker sets; 0 if none
[sticker_set_id] :: SupergroupFullInfo -> Maybe Int

-- | Identifier of the custom emoji sticker set that can be used in the
--   supergroup without Telegram Premium subscription; 0 if none
[custom_emoji_sticker_set_id] :: SupergroupFullInfo -> Maybe Int

-- | Location to which the supergroup is connected; may be null if none
[location] :: SupergroupFullInfo -> Maybe ChatLocation

-- | Primary invite link for the chat; may be null. For chat administrators
--   with can_invite_users right only
[invite_link] :: SupergroupFullInfo -> Maybe ChatInviteLink

-- | List of commands of bots in the group
[bot_commands] :: SupergroupFullInfo -> Maybe [BotCommands]

-- | Identifier of the basic group from which supergroup was upgraded; 0 if
--   none
[upgraded_from_basic_group_id] :: SupergroupFullInfo -> Maybe Int

-- | Identifier of the last message in the basic group from which
--   supergroup was upgraded; 0 if none
[upgraded_from_max_message_id] :: SupergroupFullInfo -> Maybe Int
instance GHC.Show.Show TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance GHC.Classes.Eq TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance TD.Lib.Internal.ShortShow TD.Data.SupergroupFullInfo.SupergroupFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SupergroupFullInfo.SupergroupFullInfo

module TD.Data.ChatPhotos
data ChatPhotos

-- | Contains a list of chat or user profile photos
ChatPhotos :: Maybe Int -> Maybe [ChatPhoto] -> ChatPhotos

-- | Total number of photos
[total_count] :: ChatPhotos -> Maybe Int

-- | List of photos
[photos] :: ChatPhotos -> Maybe [ChatPhoto]
instance GHC.Show.Show TD.Data.ChatPhotos.ChatPhotos
instance GHC.Classes.Eq TD.Data.ChatPhotos.ChatPhotos
instance TD.Lib.Internal.ShortShow TD.Data.ChatPhotos.ChatPhotos
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatPhotos.ChatPhotos

module TD.Data.BasicGroupFullInfo
data BasicGroupFullInfo

-- | Contains full information about a basic group
BasicGroupFullInfo :: Maybe ChatPhoto -> Maybe Text -> Maybe Int -> Maybe [ChatMember] -> Maybe Bool -> Maybe Bool -> Maybe ChatInviteLink -> Maybe [BotCommands] -> BasicGroupFullInfo

-- | Chat photo; may be null if empty or unknown. If non-null, then it is
--   the same photo as in chat.photo
[photo] :: BasicGroupFullInfo -> Maybe ChatPhoto
[description] :: BasicGroupFullInfo -> Maybe Text

-- | User identifier of the creator of the group; 0 if unknown
[creator_user_id] :: BasicGroupFullInfo -> Maybe Int

-- | Group members
[members] :: BasicGroupFullInfo -> Maybe [ChatMember]

-- | True, if non-administrators and non-bots can be hidden in responses to
--   getSupergroupMembers and searchChatMembers for non-administrators
--   after upgrading the basic group to a supergroup
[can_hide_members] :: BasicGroupFullInfo -> Maybe Bool

-- | True, if aggressive anti-spam checks can be enabled or disabled in the
--   supergroup after upgrading the basic group to a supergroup
[can_toggle_aggressive_anti_spam] :: BasicGroupFullInfo -> Maybe Bool

-- | Primary invite link for this group; may be null. For chat
--   administrators with can_invite_users right only. Updated only after
--   the basic group is opened
[invite_link] :: BasicGroupFullInfo -> Maybe ChatInviteLink

-- | List of commands of bots in the group
[bot_commands] :: BasicGroupFullInfo -> Maybe [BotCommands]
instance GHC.Show.Show TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance GHC.Classes.Eq TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance TD.Lib.Internal.ShortShow TD.Data.BasicGroupFullInfo.BasicGroupFullInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BasicGroupFullInfo.BasicGroupFullInfo

module TD.Data.Address
data Address

-- | Describes an address
Address :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Address

-- | A two-letter ISO 3166-1 alpha-2 country code
[country_code] :: Address -> Maybe Text

-- | State, if applicable
[state] :: Address -> Maybe Text

-- | City
[city] :: Address -> Maybe Text

-- | First line of the address
[street_line1] :: Address -> Maybe Text

-- | Second line of the address
[street_line2] :: Address -> Maybe Text

-- | Address postal code
[postal_code] :: Address -> Maybe Text
defaultAddress :: Address
instance GHC.Show.Show TD.Data.Address.Address
instance GHC.Classes.Eq TD.Data.Address.Address
instance TD.Lib.Internal.ShortShow TD.Data.Address.Address
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Address.Address
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.Address.Address

module TD.Data.PassportElement

-- | Contains information about a Telegram Passport element
data PassportElement

-- | A Telegram Passport element containing the user's personal details
PassportElementPersonalDetails :: Maybe PersonalDetails -> PassportElement

-- | Personal details of the user
[personal_details] :: PassportElement -> Maybe PersonalDetails

-- | A Telegram Passport element containing the user's passport
PassportElementPassport :: Maybe IdentityDocument -> PassportElement

-- | Passport
[passport] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's driver license
PassportElementDriverLicense :: Maybe IdentityDocument -> PassportElement

-- | Driver license
[driver_license] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's identity card
PassportElementIdentityCard :: Maybe IdentityDocument -> PassportElement

-- | Identity card
[identity_card] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's internal passport
PassportElementInternalPassport :: Maybe IdentityDocument -> PassportElement

-- | Internal passport
[internal_passport] :: PassportElement -> Maybe IdentityDocument

-- | A Telegram Passport element containing the user's address
PassportElementAddress :: Maybe Address -> PassportElement

-- | Address
[address] :: PassportElement -> Maybe Address

-- | A Telegram Passport element containing the user's utility bill
PassportElementUtilityBill :: Maybe PersonalDocument -> PassportElement

-- | Utility bill
[utility_bill] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's bank statement
PassportElementBankStatement :: Maybe PersonalDocument -> PassportElement

-- | Bank statement
[bank_statement] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's rental agreement
PassportElementRentalAgreement :: Maybe PersonalDocument -> PassportElement

-- | Rental agreement
[rental_agreement] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's passport
--   registration pages
PassportElementPassportRegistration :: Maybe PersonalDocument -> PassportElement

-- | Passport registration pages
[passport_registration] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's temporary
--   registration
PassportElementTemporaryRegistration :: Maybe PersonalDocument -> PassportElement

-- | Temporary registration
[temporary_registration] :: PassportElement -> Maybe PersonalDocument

-- | A Telegram Passport element containing the user's phone number
PassportElementPhoneNumber :: Maybe Text -> PassportElement

-- | Phone number
[phone_number] :: PassportElement -> Maybe Text

-- | A Telegram Passport element containing the user's email address
PassportElementEmailAddress :: Maybe Text -> PassportElement

-- | Email address
[email_address] :: PassportElement -> Maybe Text
instance GHC.Show.Show TD.Data.PassportElement.PassportElement
instance GHC.Classes.Eq TD.Data.PassportElement.PassportElement
instance TD.Lib.Internal.ShortShow TD.Data.PassportElement.PassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElement.PassportElement

module TD.Data.PassportElementsWithErrors
data PassportElementsWithErrors

-- | Contains information about a Telegram Passport elements and
--   corresponding errors
PassportElementsWithErrors :: Maybe [PassportElement] -> Maybe [PassportElementError] -> PassportElementsWithErrors

-- | Telegram Passport elements
[elements] :: PassportElementsWithErrors -> Maybe [PassportElement]

-- | Errors in the elements that are already available
[errors] :: PassportElementsWithErrors -> Maybe [PassportElementError]
instance GHC.Show.Show TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance GHC.Classes.Eq TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance TD.Lib.Internal.ShortShow TD.Data.PassportElementsWithErrors.PassportElementsWithErrors
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElementsWithErrors.PassportElementsWithErrors

module TD.Data.PassportElements
data PassportElements

-- | Contains information about saved Telegram Passport elements
PassportElements :: Maybe [PassportElement] -> PassportElements

-- | Telegram Passport elements
[elements] :: PassportElements -> Maybe [PassportElement]
instance GHC.Show.Show TD.Data.PassportElements.PassportElements
instance GHC.Classes.Eq TD.Data.PassportElements.PassportElements
instance TD.Lib.Internal.ShortShow TD.Data.PassportElements.PassportElements
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PassportElements.PassportElements

module TD.Data.OrderInfo
data OrderInfo

-- | Order information
OrderInfo :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Address -> OrderInfo

-- | Name of the user
[name] :: OrderInfo -> Maybe Text

-- | Phone number of the user
[phone_number] :: OrderInfo -> Maybe Text

-- | Email address of the user
[email_address] :: OrderInfo -> Maybe Text

-- | Shipping address for this order; may be null
[shipping_address] :: OrderInfo -> Maybe Address
defaultOrderInfo :: OrderInfo
instance GHC.Show.Show TD.Data.OrderInfo.OrderInfo
instance GHC.Classes.Eq TD.Data.OrderInfo.OrderInfo
instance TD.Lib.Internal.ShortShow TD.Data.OrderInfo.OrderInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.OrderInfo.OrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.OrderInfo.OrderInfo

module TD.Data.PaymentReceipt
data PaymentReceipt

-- | Contains information about a successful payment
PaymentReceipt :: Maybe Text -> Maybe FormattedText -> Maybe Photo -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Invoice -> Maybe OrderInfo -> Maybe ShippingOption -> Maybe Text -> Maybe Int -> PaymentReceipt

-- | Product title
[title] :: PaymentReceipt -> Maybe Text
[description] :: PaymentReceipt -> Maybe FormattedText

-- | Product photo; may be null
[photo] :: PaymentReceipt -> Maybe Photo

-- | Point in time (Unix timestamp) when the payment was made
[date] :: PaymentReceipt -> Maybe Int

-- | User identifier of the seller bot
[seller_bot_user_id] :: PaymentReceipt -> Maybe Int

-- | User identifier of the payment provider bot
[payment_provider_user_id] :: PaymentReceipt -> Maybe Int

-- | Information about the invoice
[invoice] :: PaymentReceipt -> Maybe Invoice

-- | Order information; may be null
[order_info] :: PaymentReceipt -> Maybe OrderInfo

-- | Chosen shipping option; may be null
[shipping_option] :: PaymentReceipt -> Maybe ShippingOption

-- | Title of the saved credentials chosen by the buyer
[credentials_title] :: PaymentReceipt -> Maybe Text

-- | The amount of tip chosen by the buyer in the smallest units of the
--   currency
[tip_amount] :: PaymentReceipt -> Maybe Int
instance GHC.Show.Show TD.Data.PaymentReceipt.PaymentReceipt
instance GHC.Classes.Eq TD.Data.PaymentReceipt.PaymentReceipt
instance TD.Lib.Internal.ShortShow TD.Data.PaymentReceipt.PaymentReceipt
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentReceipt.PaymentReceipt

module TD.Data.PaymentForm
data PaymentForm

-- | Contains information about an invoice payment form
PaymentForm :: Maybe Int -> Maybe Invoice -> Maybe Int -> Maybe Int -> Maybe PaymentProvider -> Maybe [PaymentOption] -> Maybe OrderInfo -> Maybe [SavedCredentials] -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe FormattedText -> Maybe Photo -> PaymentForm

-- | The payment form identifier
[_id] :: PaymentForm -> Maybe Int

-- | Full information about the invoice
[invoice] :: PaymentForm -> Maybe Invoice

-- | User identifier of the seller bot
[seller_bot_user_id] :: PaymentForm -> Maybe Int

-- | User identifier of the payment provider bot
[payment_provider_user_id] :: PaymentForm -> Maybe Int

-- | Information about the payment provider
[payment_provider] :: PaymentForm -> Maybe PaymentProvider

-- | The list of additional payment options
[additional_payment_options] :: PaymentForm -> Maybe [PaymentOption]

-- | Saved server-side order information; may be null
[saved_order_info] :: PaymentForm -> Maybe OrderInfo

-- | The list of saved payment credentials
[saved_credentials] :: PaymentForm -> Maybe [SavedCredentials]

-- | True, if the user can choose to save credentials
[can_save_credentials] :: PaymentForm -> Maybe Bool

-- | True, if the user will be able to save credentials, if sets up a
--   2-step verification password
[need_password] :: PaymentForm -> Maybe Bool

-- | Product title
[product_title] :: PaymentForm -> Maybe Text

-- | Product description
[product_description] :: PaymentForm -> Maybe FormattedText

-- | Product photo; may be null
[product_photo] :: PaymentForm -> Maybe Photo
instance GHC.Show.Show TD.Data.PaymentForm.PaymentForm
instance GHC.Classes.Eq TD.Data.PaymentForm.PaymentForm
instance TD.Lib.Internal.ShortShow TD.Data.PaymentForm.PaymentForm
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PaymentForm.PaymentForm

module TD.Data.MessageContent

-- | Contains the content of a message
data MessageContent

-- | A text message
MessageText :: Maybe FormattedText -> Maybe WebPage -> Maybe LinkPreviewOptions -> MessageContent

-- | Text of the message
[text] :: MessageContent -> Maybe FormattedText

-- | A link preview attached to the message; may be null
[web_page] :: MessageContent -> Maybe WebPage

-- | Options which were used for generation of the link preview; may be
--   null if default options were used
[link_preview_options] :: MessageContent -> Maybe LinkPreviewOptions

-- | An animation message (GIF-style).
MessageAnimation :: Maybe Animation -> Maybe FormattedText -> Maybe Bool -> Maybe Bool -> MessageContent

-- | The animation description
[animation] :: MessageContent -> Maybe Animation

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | True, if the animation preview must be covered by a spoiler animation
[has_spoiler] :: MessageContent -> Maybe Bool

-- | True, if the animation thumbnail must be blurred and the animation
--   must be shown only while tapped
[is_secret] :: MessageContent -> Maybe Bool

-- | An audio message
MessageAudio :: Maybe Audio -> Maybe FormattedText -> MessageContent

-- | The audio description
[audio] :: MessageContent -> Maybe Audio

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | A document message (general file)
MessageDocument :: Maybe Document -> Maybe FormattedText -> MessageContent

-- | The document description
[document] :: MessageContent -> Maybe Document

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | A photo message
MessagePhoto :: Maybe Photo -> Maybe FormattedText -> Maybe Bool -> Maybe Bool -> MessageContent

-- | The photo
[photo] :: MessageContent -> Maybe Photo

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | True, if the animation preview must be covered by a spoiler animation
[has_spoiler] :: MessageContent -> Maybe Bool

-- | True, if the animation thumbnail must be blurred and the animation
--   must be shown only while tapped
[is_secret] :: MessageContent -> Maybe Bool

-- | A sticker message
MessageSticker :: Maybe Sticker -> Maybe Bool -> MessageContent

-- | The sticker description
[sticker] :: MessageContent -> Maybe Sticker

-- | True, if premium animation of the sticker must be played
[is_premium] :: MessageContent -> Maybe Bool

-- | A video message
MessageVideo :: Maybe Video -> Maybe FormattedText -> Maybe Bool -> Maybe Bool -> MessageContent

-- | The video description
[video] :: MessageContent -> Maybe Video

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | True, if the animation preview must be covered by a spoiler animation
[has_spoiler] :: MessageContent -> Maybe Bool

-- | True, if the animation thumbnail must be blurred and the animation
--   must be shown only while tapped
[is_secret] :: MessageContent -> Maybe Bool

-- | A video note message
MessageVideoNote :: Maybe VideoNote -> Maybe Bool -> Maybe Bool -> MessageContent

-- | The video note description
[video_note] :: MessageContent -> Maybe VideoNote

-- | True, if at least one of the recipients has viewed the video note
[is_viewed] :: MessageContent -> Maybe Bool

-- | True, if the animation thumbnail must be blurred and the animation
--   must be shown only while tapped
[is_secret] :: MessageContent -> Maybe Bool

-- | A voice note message
MessageVoiceNote :: Maybe VoiceNote -> Maybe FormattedText -> Maybe Bool -> MessageContent

-- | The voice note description
[voice_note] :: MessageContent -> Maybe VoiceNote

-- | Animation caption
[caption] :: MessageContent -> Maybe FormattedText

-- | True, if at least one of the recipients has listened to the voice note
[is_listened] :: MessageContent -> Maybe Bool

-- | A self-destructed photo message
MessageExpiredPhoto :: MessageContent

-- | A self-destructed video message
MessageExpiredVideo :: MessageContent

-- | A self-destructed video note message
MessageExpiredVideoNote :: MessageContent

-- | A self-destructed voice note message
MessageExpiredVoiceNote :: MessageContent

-- | A message with a location
MessageLocation :: Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> MessageContent

-- | The location description
[location] :: MessageContent -> Maybe Location

-- | Time relative to the message send date, for which the location can be
--   updated, in seconds; if 0x7FFFFFFF, then location can be updated
--   forever
[live_period] :: MessageContent -> Maybe Int

-- | Left time for which the location can be updated, in seconds. If 0,
--   then the location can't be updated anymore. The update
--   updateMessageContent is not sent when this field changes
[expires_in] :: MessageContent -> Maybe Int

-- | For live locations, a direction in which the location moves, in
--   degrees; 1-360. If 0 the direction is unknown
[heading] :: MessageContent -> Maybe Int

-- | For live locations, a maximum distance to another chat member for
--   proximity alerts, in meters (0-100000). 0 if the notification is
--   disabled. Available only to the message sender
[proximity_alert_radius] :: MessageContent -> Maybe Int

-- | A message with information about a venue
MessageVenue :: Maybe Venue -> MessageContent

-- | The venue description
[venue] :: MessageContent -> Maybe Venue

-- | A message with a user contact
MessageContact :: Maybe Contact -> MessageContent

-- | The contact description
[contact] :: MessageContent -> Maybe Contact

-- | A message with an animated emoji
MessageAnimatedEmoji :: Maybe AnimatedEmoji -> Maybe Text -> MessageContent

-- | The animated emoji
[animated_emoji] :: MessageContent -> Maybe AnimatedEmoji

-- | The corresponding emoji
[emoji] :: MessageContent -> Maybe Text

-- | A dice message. The dice value is randomly generated by the server
MessageDice :: Maybe DiceStickers -> Maybe DiceStickers -> Maybe Text -> Maybe Int -> Maybe Int -> MessageContent

-- | The animated stickers with the initial dice animation; may be null if
--   unknown. The update updateMessageContent will be sent when the sticker
--   became known
[initial_state] :: MessageContent -> Maybe DiceStickers

-- | The animated stickers with the final dice animation; may be null if
--   unknown. The update updateMessageContent will be sent when the sticker
--   became known
[final_state] :: MessageContent -> Maybe DiceStickers

-- | The corresponding emoji
[emoji] :: MessageContent -> Maybe Text

-- | The dice value. If the value is 0, the dice don't have final state yet
[value] :: MessageContent -> Maybe Int

-- | Number of frame after which a success animation like a shower of
--   confetti needs to be shown on updateMessageSendSucceeded
[success_animation_frame_number] :: MessageContent -> Maybe Int

-- | A message with a game
MessageGame :: Maybe Game -> MessageContent

-- | The game description
[game] :: MessageContent -> Maybe Game

-- | A message with a poll
MessagePoll :: Maybe Poll -> MessageContent

-- | The poll description
[poll] :: MessageContent -> Maybe Poll

-- | A message with a forwarded story
MessageStory :: Maybe Int -> Maybe Int -> Maybe Bool -> MessageContent

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: MessageContent -> Maybe Int

-- | Story identifier
[story_id] :: MessageContent -> Maybe Int

-- | True, if the story was automatically forwarded because of a mention of
--   the user
[via_mention] :: MessageContent -> Maybe Bool

-- | A message with an invoice from a bot. Use getInternalLink with
--   internalLinkTypeBotStart to share the invoice
MessageInvoice :: Maybe Text -> Maybe FormattedText -> Maybe Photo -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe MessageExtendedMedia -> MessageContent

-- | Product title
[title] :: MessageContent -> Maybe Text
[description] :: MessageContent -> Maybe FormattedText

-- | The photo
[photo] :: MessageContent -> Maybe Photo

-- | Currency for the product price
[currency] :: MessageContent -> Maybe Text

-- | Product total price in the smallest units of the currency
[total_amount] :: MessageContent -> Maybe Int

-- | Unique invoice bot start_parameter to be passed to getInternalLink
[start_parameter] :: MessageContent -> Maybe Text

-- | True, if the invoice is a test invoice
[is_test] :: MessageContent -> Maybe Bool

-- | True, if the shipping address must be specified
[need_shipping_address] :: MessageContent -> Maybe Bool

-- | The identifier of the message with the receipt, after the product has
--   been purchased
[receipt_message_id] :: MessageContent -> Maybe Int

-- | Extended media attached to the invoice; may be null
[extended_media] :: MessageContent -> Maybe MessageExtendedMedia

-- | A message with information about an ended call
MessageCall :: Maybe Bool -> Maybe CallDiscardReason -> Maybe Int -> MessageContent

-- | True, if the call was a video call
[is_video] :: MessageContent -> Maybe Bool

-- | Reason why the call was discarded
[discard_reason] :: MessageContent -> Maybe CallDiscardReason

-- | Call duration, in seconds
[duration] :: MessageContent -> Maybe Int

-- | A new video chat was scheduled
MessageVideoChatScheduled :: Maybe Int -> Maybe Int -> MessageContent

-- | Identifier of the video chat. The video chat can be received through
--   the method getGroupCall
[group_call_id] :: MessageContent -> Maybe Int

-- | Point in time (Unix timestamp) when the group call is supposed to be
--   started by an administrator
[start_date] :: MessageContent -> Maybe Int

-- | A newly created video chat
MessageVideoChatStarted :: Maybe Int -> MessageContent

-- | Identifier of the video chat. The video chat can be received through
--   the method getGroupCall
[group_call_id] :: MessageContent -> Maybe Int

-- | A message with information about an ended video chat
MessageVideoChatEnded :: Maybe Int -> MessageContent

-- | Call duration, in seconds
[duration] :: MessageContent -> Maybe Int

-- | A message with information about an invitation to a video chat
MessageInviteVideoChatParticipants :: Maybe Int -> Maybe [Int] -> MessageContent

-- | Identifier of the video chat. The video chat can be received through
--   the method getGroupCall
[group_call_id] :: MessageContent -> Maybe Int

-- | Invited user identifiers
[user_ids] :: MessageContent -> Maybe [Int]

-- | A newly created basic group
MessageBasicGroupChatCreate :: Maybe Text -> Maybe [Int] -> MessageContent

-- | Product title
[title] :: MessageContent -> Maybe Text

-- | User identifiers of members in the basic group
[member_user_ids] :: MessageContent -> Maybe [Int]

-- | A newly created supergroup or channel
MessageSupergroupChatCreate :: Maybe Text -> MessageContent

-- | Product title
[title] :: MessageContent -> Maybe Text

-- | An updated chat title
MessageChatChangeTitle :: Maybe Text -> MessageContent

-- | Product title
[title] :: MessageContent -> Maybe Text

-- | An updated chat photo
MessageChatChangePhoto :: Maybe ChatPhoto -> MessageContent

-- | New chat photo
[_photo] :: MessageContent -> Maybe ChatPhoto

-- | A deleted chat photo
MessageChatDeletePhoto :: MessageContent

-- | New chat members were added
MessageChatAddMembers :: Maybe [Int] -> MessageContent

-- | User identifiers of members in the basic group
[member_user_ids] :: MessageContent -> Maybe [Int]

-- | A new member joined the chat via an invite link
MessageChatJoinByLink :: MessageContent

-- | A new member was accepted to the chat by an administrator
MessageChatJoinByRequest :: MessageContent

-- | A chat member was deleted
MessageChatDeleteMember :: Maybe Int -> MessageContent

-- | User identifier of the deleted chat member
[user_id] :: MessageContent -> Maybe Int

-- | A basic group was upgraded to a supergroup and was deactivated as the
--   result
MessageChatUpgradeTo :: Maybe Int -> MessageContent

-- | Identifier of the supergroup to which the basic group was upgraded
[supergroup_id] :: MessageContent -> Maybe Int

-- | A supergroup has been created from a basic group
MessageChatUpgradeFrom :: Maybe Text -> Maybe Int -> MessageContent

-- | Product title
[title] :: MessageContent -> Maybe Text

-- | The identifier of the original basic group
[basic_group_id] :: MessageContent -> Maybe Int

-- | A message has been pinned
MessagePinMessage :: Maybe Int -> MessageContent

-- | Identifier of the pinned message, can be an identifier of a deleted
--   message or 0
[message_id] :: MessageContent -> Maybe Int

-- | A screenshot of a message in the chat has been taken
MessageScreenshotTaken :: MessageContent

-- | A new background was set in the chat
MessageChatSetBackground :: Maybe Int -> Maybe ChatBackground -> Maybe Bool -> MessageContent

-- | Identifier of the message with a previously set same background; 0 if
--   none. Can be an identifier of a deleted message
[old_background_message_id] :: MessageContent -> Maybe Int

-- | The new background
[background] :: MessageContent -> Maybe ChatBackground

-- | True, if the background was set only for self
[only_for_self] :: MessageContent -> Maybe Bool

-- | A theme in the chat has been changed
MessageChatSetTheme :: Maybe Text -> MessageContent

-- | If non-empty, name of a new theme, set for the chat. Otherwise, chat
--   theme was reset to the default one
[theme_name] :: MessageContent -> Maybe Text

-- | The auto-delete or self-destruct timer for messages in the chat has
--   been changed
MessageChatSetMessageAutoDeleteTime :: Maybe Int -> Maybe Int -> MessageContent

-- | New value auto-delete or self-destruct time, in seconds; 0 if disabled
[message_auto_delete_time] :: MessageContent -> Maybe Int

-- | If not 0, a user identifier, which default setting was automatically
--   applied
[from_user_id] :: MessageContent -> Maybe Int

-- | The chat was boosted by the sender of the message
MessageChatBoost :: Maybe Int -> MessageContent

-- | Number of times the chat was boosted
[boost_count] :: MessageContent -> Maybe Int

-- | A forum topic has been created
MessageForumTopicCreated :: Maybe Text -> Maybe ForumTopicIcon -> MessageContent

-- | Name of the topic
[name] :: MessageContent -> Maybe Text

-- | Icon of the topic
[icon] :: MessageContent -> Maybe ForumTopicIcon

-- | A forum topic has been edited
MessageForumTopicEdited :: Maybe Text -> Maybe Bool -> Maybe Int -> MessageContent

-- | Name of the topic
[name] :: MessageContent -> Maybe Text

-- | True, if icon's custom_emoji_id is changed
[edit_icon_custom_emoji_id] :: MessageContent -> Maybe Bool

-- | New unique identifier of the custom emoji shown on the topic icon; 0
--   if none. Must be ignored if edit_icon_custom_emoji_id is false
[icon_custom_emoji_id] :: MessageContent -> Maybe Int

-- | A forum topic has been closed or opened
MessageForumTopicIsClosedToggled :: Maybe Bool -> MessageContent

-- | True, if the topic was closed; otherwise, the topic was reopened
[is_closed] :: MessageContent -> Maybe Bool

-- | A General forum topic has been hidden or unhidden
MessageForumTopicIsHiddenToggled :: Maybe Bool -> MessageContent

-- | True, if the topic was hidden; otherwise, the topic was unhidden
[is_hidden] :: MessageContent -> Maybe Bool

-- | A profile photo was suggested to a user in a private chat
MessageSuggestProfilePhoto :: Maybe ChatPhoto -> MessageContent

-- | New chat photo
[_photo] :: MessageContent -> Maybe ChatPhoto

-- | A non-standard action has happened in the chat
MessageCustomServiceAction :: Maybe Text -> MessageContent

-- | Message text to be shown in the chat
[_text] :: MessageContent -> Maybe Text

-- | A new high score was achieved in a game
MessageGameScore :: Maybe Int -> Maybe Int -> Maybe Int -> MessageContent

-- | Identifier of the message with the game, can be an identifier of a
--   deleted message
[game_message_id] :: MessageContent -> Maybe Int

-- | Identifier of the game; may be different from the games presented in
--   the message with the game
[game_id] :: MessageContent -> Maybe Int

-- | New score
[score] :: MessageContent -> Maybe Int

-- | A payment has been completed
MessagePaymentSuccessful :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Text -> MessageContent

-- | Identifier of the chat, containing the corresponding invoice message
[invoice_chat_id] :: MessageContent -> Maybe Int

-- | Identifier of the message with the corresponding invoice; can be 0 or
--   an identifier of a deleted message
[invoice_message_id] :: MessageContent -> Maybe Int

-- | Currency for the product price
[currency] :: MessageContent -> Maybe Text

-- | Product total price in the smallest units of the currency
[total_amount] :: MessageContent -> Maybe Int

-- | True, if this is a recurring payment
[is_recurring] :: MessageContent -> Maybe Bool

-- | True, if this is the first recurring payment
[is_first_recurring] :: MessageContent -> Maybe Bool

-- | Name of the invoice; may be empty if unknown
[invoice_name] :: MessageContent -> Maybe Text

-- | A payment has been completed; for bots only
MessagePaymentSuccessfulBot :: Maybe Text -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe ByteString -> Maybe Text -> Maybe OrderInfo -> Maybe Text -> Maybe Text -> MessageContent

-- | Currency for the product price
[currency] :: MessageContent -> Maybe Text

-- | Product total price in the smallest units of the currency
[total_amount] :: MessageContent -> Maybe Int

-- | True, if this is a recurring payment
[is_recurring] :: MessageContent -> Maybe Bool

-- | True, if this is the first recurring payment
[is_first_recurring] :: MessageContent -> Maybe Bool

-- | Invoice payload
[invoice_payload] :: MessageContent -> Maybe ByteString

-- | Identifier of the shipping option chosen by the user; may be empty if
--   not applicable
[shipping_option_id] :: MessageContent -> Maybe Text

-- | Information about the order; may be null
[order_info] :: MessageContent -> Maybe OrderInfo

-- | Telegram payment identifier
[telegram_payment_charge_id] :: MessageContent -> Maybe Text

-- | Provider payment identifier
[provider_payment_charge_id] :: MessageContent -> Maybe Text

-- | Telegram Premium was gifted to the user
MessageGiftedPremium :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Sticker -> MessageContent

-- | The identifier of a user that gifted Telegram Premium; 0 if the gift
--   was anonymous
[gifter_user_id] :: MessageContent -> Maybe Int

-- | Currency for the product price
[currency] :: MessageContent -> Maybe Text

-- | The paid amount, in the smallest units of the currency
[amount] :: MessageContent -> Maybe Int

-- | Cryptocurrency used to pay for the gift; may be empty if none
[cryptocurrency] :: MessageContent -> Maybe Text

-- | The paid amount, in the smallest units of the cryptocurrency; 0 if
--   none
[cryptocurrency_amount] :: MessageContent -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: MessageContent -> Maybe Int

-- | The sticker description
[sticker] :: MessageContent -> Maybe Sticker

-- | A Telegram Premium gift code was created for the user
MessagePremiumGiftCode :: Maybe MessageSender -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Sticker -> Maybe Text -> MessageContent

-- | Identifier of a chat or a user that created the gift code; may be null
--   if unknown
[creator_id] :: MessageContent -> Maybe MessageSender

-- | True, if the gift code was created for a giveaway
[is_from_giveaway] :: MessageContent -> Maybe Bool

-- | True, if the winner for the corresponding Telegram Premium
--   subscription wasn't chosen
[is_unclaimed] :: MessageContent -> Maybe Bool

-- | Currency for the product price
[currency] :: MessageContent -> Maybe Text

-- | The paid amount, in the smallest units of the currency
[amount] :: MessageContent -> Maybe Int

-- | Cryptocurrency used to pay for the gift; may be empty if none
[cryptocurrency] :: MessageContent -> Maybe Text

-- | The paid amount, in the smallest units of the cryptocurrency; 0 if
--   none
[cryptocurrency_amount] :: MessageContent -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: MessageContent -> Maybe Int

-- | The sticker description
[sticker] :: MessageContent -> Maybe Sticker

-- | The gift code
[code] :: MessageContent -> Maybe Text

-- | A Telegram Premium giveaway was created for the chat
MessagePremiumGiveawayCreated :: MessageContent

-- | A Telegram Premium giveaway
MessagePremiumGiveaway :: Maybe PremiumGiveawayParameters -> Maybe Int -> Maybe Int -> Maybe Sticker -> MessageContent

-- | Giveaway parameters
[parameters] :: MessageContent -> Maybe PremiumGiveawayParameters

-- | Number of users which will receive Telegram Premium subscription gift
--   codes
[winner_count] :: MessageContent -> Maybe Int

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: MessageContent -> Maybe Int

-- | The sticker description
[sticker] :: MessageContent -> Maybe Sticker

-- | A Telegram Premium giveaway without public winners has been completed
--   for the chat
MessagePremiumGiveawayCompleted :: Maybe Int -> Maybe Int -> Maybe Int -> MessageContent

-- | Identifier of the message with the giveaway; can be 0 if the message
--   was deleted
[giveaway_message_id] :: MessageContent -> Maybe Int

-- | Number of users which will receive Telegram Premium subscription gift
--   codes
[winner_count] :: MessageContent -> Maybe Int

-- | Number of undistributed prizes
[unclaimed_prize_count] :: MessageContent -> Maybe Int

-- | A Telegram Premium giveaway with public winners has been completed for
--   the chat
MessagePremiumGiveawayWinners :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe Int -> MessageContent

-- | Identifier of the channel chat, which was automatically boosted by the
--   winners of the giveaway for duration of the Premium subscription
[boosted_chat_id] :: MessageContent -> Maybe Int

-- | Identifier of the message with the giveaway; can be 0 if the message
--   was deleted
[giveaway_message_id] :: MessageContent -> Maybe Int

-- | Number of other chats that participated in the giveaway
[additional_chat_count] :: MessageContent -> Maybe Int

-- | Point in time (Unix timestamp) when the winners were selected. May be
--   bigger than winners selection date specified in parameters of the
--   giveaway
[actual_winners_selection_date] :: MessageContent -> Maybe Int

-- | True, if only new members of the chats were eligible for the giveaway
[only_new_members] :: MessageContent -> Maybe Bool

-- | True, if the giveaway was canceled and was fully refunded
[was_refunded] :: MessageContent -> Maybe Bool

-- | Number of months the Telegram Premium subscription will be active
[month_count] :: MessageContent -> Maybe Int

-- | Additional description of the giveaway prize
[prize_description] :: MessageContent -> Maybe Text

-- | Number of users which will receive Telegram Premium subscription gift
--   codes
[winner_count] :: MessageContent -> Maybe Int

-- | Up to 100 user identifiers of the winners of the giveaway
[winner_user_ids] :: MessageContent -> Maybe [Int]

-- | Number of undistributed prizes
[unclaimed_prize_count] :: MessageContent -> Maybe Int

-- | A contact has registered with Telegram
MessageContactRegistered :: MessageContent

-- | The current user shared users, which were requested by the bot
MessageUsersShared :: Maybe [SharedUser] -> Maybe Int -> MessageContent

-- | The shared users
[users] :: MessageContent -> Maybe [SharedUser]

-- | Identifier of the keyboard button with the request
[button_id] :: MessageContent -> Maybe Int

-- | The current user shared a chat, which was requested by the bot
MessageChatShared :: Maybe SharedChat -> Maybe Int -> MessageContent

-- | The shared chat
[chat] :: MessageContent -> Maybe SharedChat

-- | Identifier of the keyboard button with the request
[button_id] :: MessageContent -> Maybe Int

-- | The user allowed the bot to send messages
MessageBotWriteAccessAllowed :: Maybe BotWriteAccessAllowReason -> MessageContent

-- | The reason why the bot was allowed to write messages
[reason] :: MessageContent -> Maybe BotWriteAccessAllowReason

-- | Data from a Web App has been sent to a bot
MessageWebAppDataSent :: Maybe Text -> MessageContent

-- | Text of the keyboardButtonTypeWebApp button, which opened the Web App
[button_text] :: MessageContent -> Maybe Text

-- | Data from a Web App has been received; for bots only
MessageWebAppDataReceived :: Maybe Text -> Maybe Text -> MessageContent

-- | Text of the keyboardButtonTypeWebApp button, which opened the Web App
[button_text] :: MessageContent -> Maybe Text

-- | The data
[_data] :: MessageContent -> Maybe Text

-- | Telegram Passport data has been sent to a bot
MessagePassportDataSent :: Maybe [PassportElementType] -> MessageContent

-- | List of Telegram Passport element types sent
[types] :: MessageContent -> Maybe [PassportElementType]

-- | Telegram Passport data has been received; for bots only
MessagePassportDataReceived :: Maybe [EncryptedPassportElement] -> Maybe EncryptedCredentials -> MessageContent

-- | List of received Telegram Passport elements
[elements] :: MessageContent -> Maybe [EncryptedPassportElement]

-- | Encrypted data credentials
[credentials] :: MessageContent -> Maybe EncryptedCredentials

-- | A user in the chat came within proximity alert range
MessageProximityAlertTriggered :: Maybe MessageSender -> Maybe MessageSender -> Maybe Int -> MessageContent

-- | The identifier of a user or chat that triggered the proximity alert
[traveler_id] :: MessageContent -> Maybe MessageSender

-- | The identifier of a user or chat that subscribed for the proximity
--   alert
[watcher_id] :: MessageContent -> Maybe MessageSender

-- | The distance between the users
[distance] :: MessageContent -> Maybe Int

-- | A message content that is not supported in the current TDLib version
MessageUnsupported :: MessageContent
instance GHC.Show.Show TD.Data.MessageContent.MessageContent
instance GHC.Classes.Eq TD.Data.MessageContent.MessageContent
instance TD.Lib.Internal.ShortShow TD.Data.MessageContent.MessageContent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageContent.MessageContent

module TD.Data.SponsoredMessage
data SponsoredMessage

-- | Describes a sponsored message
SponsoredMessage :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe MessageContent -> Maybe MessageSponsor -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> SponsoredMessage

-- | Message identifier; unique for the chat to which the sponsored message
--   belongs among both ordinary and sponsored messages
[message_id] :: SponsoredMessage -> Maybe Int

-- | True, if the message needs to be labeled as "recommended" instead of
--   "sponsored"
[is_recommended] :: SponsoredMessage -> Maybe Bool

-- | True, if the message can be reported to Telegram moderators through
--   reportChatSponsoredMessage
[can_be_reported] :: SponsoredMessage -> Maybe Bool

-- | Content of the message. Currently, can be only of the type messageText
[content] :: SponsoredMessage -> Maybe MessageContent

-- | Information about the sponsor of the message
[sponsor] :: SponsoredMessage -> Maybe MessageSponsor

-- | Title of the sponsored message
[title] :: SponsoredMessage -> Maybe Text

-- | Text for the message action button
[button_text] :: SponsoredMessage -> Maybe Text

-- | Identifier of the accent color for title, button text and message
--   background
[accent_color_id] :: SponsoredMessage -> Maybe Int

-- | Identifier of a custom emoji to be shown on the message background; 0
--   if none
[background_custom_emoji_id] :: SponsoredMessage -> Maybe Int

-- | If non-empty, additional information about the sponsored message to be
--   shown along with the message
[additional_info] :: SponsoredMessage -> Maybe Text
instance GHC.Show.Show TD.Data.SponsoredMessage.SponsoredMessage
instance GHC.Classes.Eq TD.Data.SponsoredMessage.SponsoredMessage
instance TD.Lib.Internal.ShortShow TD.Data.SponsoredMessage.SponsoredMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SponsoredMessage.SponsoredMessage

module TD.Data.SponsoredMessages
data SponsoredMessages

-- | Contains a list of sponsored messages
SponsoredMessages :: Maybe [SponsoredMessage] -> Maybe Int -> SponsoredMessages

-- | List of sponsored messages
[messages] :: SponsoredMessages -> Maybe [SponsoredMessage]

-- | The minimum number of messages between shown sponsored messages, or 0
--   if only one sponsored message must be shown after all ordinary
--   messages
[messages_between] :: SponsoredMessages -> Maybe Int
instance GHC.Show.Show TD.Data.SponsoredMessages.SponsoredMessages
instance GHC.Classes.Eq TD.Data.SponsoredMessages.SponsoredMessages
instance TD.Lib.Internal.ShortShow TD.Data.SponsoredMessages.SponsoredMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SponsoredMessages.SponsoredMessages

module TD.Data.QuickReplyMessage
data QuickReplyMessage

-- | Describes a message that can be used for quick reply
QuickReplyMessage :: Maybe Int -> Maybe MessageSendingState -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe MessageContent -> Maybe ReplyMarkup -> QuickReplyMessage

-- | Unique message identifier among all quick replies
[_id] :: QuickReplyMessage -> Maybe Int

-- | The sending state of the message; may be null if the message isn't
--   being sent and didn't fail to be sent
[sending_state] :: QuickReplyMessage -> Maybe MessageSendingState

-- | True, if the message can be edited
[can_be_edited] :: QuickReplyMessage -> Maybe Bool

-- | The identifier of the quick reply message to which the message
--   replies; 0 if none
[reply_to_message_id] :: QuickReplyMessage -> Maybe Int

-- | If non-zero, the user identifier of the bot through which this message
--   was sent
[via_bot_user_id] :: QuickReplyMessage -> Maybe Int

-- | Unique identifier of an album this message belongs to; 0 if none. Only
--   audios, documents, photos and videos can be grouped together in albums
[media_album_id] :: QuickReplyMessage -> Maybe Int

-- | Content of the message
[content] :: QuickReplyMessage -> Maybe MessageContent

-- | Inline keyboard reply markup for the message; may be null if none
[reply_markup] :: QuickReplyMessage -> Maybe ReplyMarkup
instance GHC.Show.Show TD.Data.QuickReplyMessage.QuickReplyMessage
instance GHC.Classes.Eq TD.Data.QuickReplyMessage.QuickReplyMessage
instance TD.Lib.Internal.ShortShow TD.Data.QuickReplyMessage.QuickReplyMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.QuickReplyMessage.QuickReplyMessage

module TD.Data.QuickReplyShortcut
data QuickReplyShortcut

-- | Describes a shortcut that can be used for a quick reply
QuickReplyShortcut :: Maybe Int -> Maybe Text -> Maybe QuickReplyMessage -> Maybe Int -> QuickReplyShortcut

-- | Unique shortcut identifier
[_id] :: QuickReplyShortcut -> Maybe Int

-- | The name of the shortcut that can be used to use the shortcut
[name] :: QuickReplyShortcut -> Maybe Text

-- | The first shortcut message
[first_message] :: QuickReplyShortcut -> Maybe QuickReplyMessage

-- | The total number of messages in the shortcut
[message_count] :: QuickReplyShortcut -> Maybe Int
instance GHC.Show.Show TD.Data.QuickReplyShortcut.QuickReplyShortcut
instance GHC.Classes.Eq TD.Data.QuickReplyShortcut.QuickReplyShortcut
instance TD.Lib.Internal.ShortShow TD.Data.QuickReplyShortcut.QuickReplyShortcut
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.QuickReplyShortcut.QuickReplyShortcut

module TD.Data.QuickReplyMessages
data QuickReplyMessages

-- | Contains a list of quick reply messages
QuickReplyMessages :: Maybe [QuickReplyMessage] -> QuickReplyMessages

-- | List of quick reply messages; messages may be null
[messages] :: QuickReplyMessages -> Maybe [QuickReplyMessage]
instance GHC.Show.Show TD.Data.QuickReplyMessages.QuickReplyMessages
instance GHC.Classes.Eq TD.Data.QuickReplyMessages.QuickReplyMessages
instance TD.Lib.Internal.ShortShow TD.Data.QuickReplyMessages.QuickReplyMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.QuickReplyMessages.QuickReplyMessages

module TD.Data.MessageReplyTo

-- | Contains information about the message or the story a message is
--   replying to
data MessageReplyTo

-- | Describes a message replied by a given message
MessageReplyToMessage :: Maybe Int -> Maybe Int -> Maybe TextQuote -> Maybe MessageOrigin -> Maybe Int -> Maybe MessageContent -> MessageReplyTo

-- | The identifier of the chat to which the message belongs; may be 0 if
--   the replied message is in unknown chat
[chat_id] :: MessageReplyTo -> Maybe Int

-- | The identifier of the message; may be 0 if the replied message is in
--   unknown chat
[message_id] :: MessageReplyTo -> Maybe Int

-- | Chosen quote from the replied message; may be null if none
[quote] :: MessageReplyTo -> Maybe TextQuote

-- | Information about origin of the message if the message was from
--   another chat or topic; may be null for messages from the same chat
[origin] :: MessageReplyTo -> Maybe MessageOrigin

-- | Point in time (Unix timestamp) when the message was sent if the
--   message was from another chat or topic; 0 for messages from the same
--   chat
[origin_send_date] :: MessageReplyTo -> Maybe Int

-- | Media content of the message if the message was from another chat or
--   topic; may be null for messages from the same chat and messages
--   without media. Can be only one of the following types:
--   messageAnimation, messageAudio, messageContact, messageDice,
--   messageDocument, messageGame, messageInvoice, messageLocation,
--   messagePhoto, messagePoll, messagePremiumGiveaway,
--   messagePremiumGiveawayWinners, messageSticker, messageStory,
--   messageText (for link preview), messageVenue, messageVideo,
--   messageVideoNote, or messageVoiceNote
[content] :: MessageReplyTo -> Maybe MessageContent

-- | Describes a story replied by a given message
MessageReplyToStory :: Maybe Int -> Maybe Int -> MessageReplyTo

-- | The identifier of the sender of the story
[story_sender_chat_id] :: MessageReplyTo -> Maybe Int

-- | The identifier of the story
[story_id] :: MessageReplyTo -> Maybe Int
instance GHC.Show.Show TD.Data.MessageReplyTo.MessageReplyTo
instance GHC.Classes.Eq TD.Data.MessageReplyTo.MessageReplyTo
instance TD.Lib.Internal.ShortShow TD.Data.MessageReplyTo.MessageReplyTo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageReplyTo.MessageReplyTo

module TD.Data.Message
data Message

-- | Describes a message
Message :: Maybe Int -> Maybe MessageSender -> Maybe Int -> Maybe MessageSendingState -> Maybe MessageSchedulingState -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe MessageForwardInfo -> Maybe MessageImportInfo -> Maybe MessageInteractionInfo -> Maybe [UnreadReaction] -> Maybe MessageReplyTo -> Maybe Int -> Maybe Int -> Maybe MessageSelfDestructType -> Maybe Double -> Maybe Double -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe MessageContent -> Maybe ReplyMarkup -> Message

-- | Message identifier; unique for the chat to which the message belongs
[_id] :: Message -> Maybe Int

-- | Identifier of the sender of the message
[sender_id] :: Message -> Maybe MessageSender

-- | Chat identifier
[chat_id] :: Message -> Maybe Int

-- | The sending state of the message; may be null if the message isn't
--   being sent and didn't fail to be sent
[sending_state] :: Message -> Maybe MessageSendingState

-- | The scheduling state of the message; may be null if the message isn't
--   scheduled
[scheduling_state] :: Message -> Maybe MessageSchedulingState

-- | True, if the message is outgoing
[is_outgoing] :: Message -> Maybe Bool

-- | True, if the message is pinned
[is_pinned] :: Message -> Maybe Bool

-- | True, if the message was sent because of a scheduled action by the
--   message sender, for example, as away, or greeting service message
[is_from_offline] :: Message -> Maybe Bool

-- | True, if the message can be edited. For live location and poll
--   messages this fields shows whether editMessageLiveLocation or stopPoll
--   can be used with this message by the application
[can_be_edited] :: Message -> Maybe Bool

-- | True, if the message can be forwarded
[can_be_forwarded] :: Message -> Maybe Bool

-- | True, if the message can be replied in another chat or topic
[can_be_replied_in_another_chat] :: Message -> Maybe Bool

-- | True, if content of the message can be saved locally or copied
[can_be_saved] :: Message -> Maybe Bool

-- | True, if the message can be deleted only for the current user while
--   other users will continue to see it
[can_be_deleted_only_for_self] :: Message -> Maybe Bool

-- | True, if the message can be deleted for all users
[can_be_deleted_for_all_users] :: Message -> Maybe Bool

-- | True, if the list of added reactions is available through
--   getMessageAddedReactions
[can_get_added_reactions] :: Message -> Maybe Bool

-- | True, if the message statistics are available through
--   getMessageStatistics
[can_get_statistics] :: Message -> Maybe Bool

-- | True, if information about the message thread is available through
--   getMessageThread and getMessageThreadHistory
[can_get_message_thread] :: Message -> Maybe Bool

-- | True, if read date of the message can be received through
--   getMessageReadDate
[can_get_read_date] :: Message -> Maybe Bool

-- | True, if chat members already viewed the message can be received
--   through getMessageViewers
[can_get_viewers] :: Message -> Maybe Bool

-- | True, if media timestamp links can be generated for media timestamp
--   entities in the message text, caption or web page description through
--   getMessageLink
[can_get_media_timestamp_links] :: Message -> Maybe Bool

-- | True, if reactions on the message can be reported through
--   reportMessageReactions
[can_report_reactions] :: Message -> Maybe Bool

-- | True, if media timestamp entities refers to a media in this message as
--   opposed to a media in the replied message
[has_timestamped_media] :: Message -> Maybe Bool

-- | True, if the message is a channel post. All messages to channels are
--   channel posts, all other messages are not channel posts
[is_channel_post] :: Message -> Maybe Bool

-- | True, if the message is a forum topic message
[is_topic_message] :: Message -> Maybe Bool

-- | True, if the message contains an unread mention for the current user
[contains_unread_mention] :: Message -> Maybe Bool

-- | Point in time (Unix timestamp) when the message was sent
[date] :: Message -> Maybe Int

-- | Point in time (Unix timestamp) when the message was last edited
[edit_date] :: Message -> Maybe Int

-- | Information about the initial message sender; may be null if none or
--   unknown
[forward_info] :: Message -> Maybe MessageForwardInfo

-- | Information about the initial message for messages created with
--   importMessages; may be null if the message isn't imported
[import_info] :: Message -> Maybe MessageImportInfo

-- | Information about interactions with the message; may be null if none
[interaction_info] :: Message -> Maybe MessageInteractionInfo

-- | Information about unread reactions added to the message
[unread_reactions] :: Message -> Maybe [UnreadReaction]

-- | Information about the message or the story this message is replying
--   to; may be null if none
[reply_to] :: Message -> Maybe MessageReplyTo

-- | If non-zero, the identifier of the message thread the message belongs
--   to; unique within the chat to which the message belongs
[message_thread_id] :: Message -> Maybe Int

-- | Identifier of the Saved Messages topic for the message; 0 for messages
--   not from Saved Messages
[saved_messages_topic_id] :: Message -> Maybe Int

-- | The message's self-destruct type; may be null if none
[self_destruct_type] :: Message -> Maybe MessageSelfDestructType

-- | Time left before the message self-destruct timer expires, in seconds;
--   0 if self-destruction isn't scheduled yet
[self_destruct_in] :: Message -> Maybe Double

-- | Time left before the message will be automatically deleted by
--   message_auto_delete_time setting of the chat, in seconds; 0 if never
[auto_delete_in] :: Message -> Maybe Double

-- | If non-zero, the user identifier of the inline bot through which this
--   message was sent
[via_bot_user_id] :: Message -> Maybe Int

-- | If non-zero, the user identifier of the business bot that sent this
--   message
[sender_business_bot_user_id] :: Message -> Maybe Int

-- | Number of times the sender of the message boosted the supergroup at
--   the time the message was sent; 0 if none or unknown. For messages sent
--   by the current user, supergroupFullInfo.my_boost_count must be used
--   instead
[sender_boost_count] :: Message -> Maybe Int

-- | For channel posts and anonymous group messages, optional author
--   signature
[author_signature] :: Message -> Maybe Text

-- | Unique identifier of an album this message belongs to; 0 if none. Only
--   audios, documents, photos and videos can be grouped together in albums
[media_album_id] :: Message -> Maybe Int

-- | If non-empty, contains a human-readable description of the reason why
--   access to this message must be restricted
[restriction_reason] :: Message -> Maybe Text

-- | Content of the message
[content] :: Message -> Maybe MessageContent

-- | Reply markup for the message; may be null if none
[reply_markup] :: Message -> Maybe ReplyMarkup
instance GHC.Show.Show TD.Data.Message.Message
instance GHC.Classes.Eq TD.Data.Message.Message
instance TD.Lib.Internal.ShortShow TD.Data.Message.Message
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Message.Message

module TD.Data.StoryInteractionType

-- | Describes type of interaction with a story
data StoryInteractionType

-- | A view of the story
StoryInteractionTypeView :: Maybe ReactionType -> StoryInteractionType

-- | Type of the reaction that was chosen by the viewer; may be null if
--   none
[chosen_reaction_type] :: StoryInteractionType -> Maybe ReactionType

-- | A forward of the story as a message
StoryInteractionTypeForward :: Maybe Message -> StoryInteractionType

-- | The message with story forward
[message] :: StoryInteractionType -> Maybe Message

-- | A repost of the story as a story
StoryInteractionTypeRepost :: Maybe Story -> StoryInteractionType

-- | The reposted story
[story] :: StoryInteractionType -> Maybe Story
instance GHC.Show.Show TD.Data.StoryInteractionType.StoryInteractionType
instance GHC.Classes.Eq TD.Data.StoryInteractionType.StoryInteractionType
instance TD.Lib.Internal.ShortShow TD.Data.StoryInteractionType.StoryInteractionType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryInteractionType.StoryInteractionType

module TD.Data.StoryInteraction
data StoryInteraction

-- | Represents interaction with a story
StoryInteraction :: Maybe MessageSender -> Maybe Int -> Maybe BlockList -> Maybe StoryInteractionType -> StoryInteraction

-- | Identifier of the user or chat that made the interaction
[actor_id] :: StoryInteraction -> Maybe MessageSender

-- | Approximate point in time (Unix timestamp) when the interaction
--   happened
[interaction_date] :: StoryInteraction -> Maybe Int

-- | Block list to which the actor is added; may be null if none or for
--   chat stories
[block_list] :: StoryInteraction -> Maybe BlockList

-- | Type of the interaction
[_type] :: StoryInteraction -> Maybe StoryInteractionType
instance GHC.Show.Show TD.Data.StoryInteraction.StoryInteraction
instance GHC.Classes.Eq TD.Data.StoryInteraction.StoryInteraction
instance TD.Lib.Internal.ShortShow TD.Data.StoryInteraction.StoryInteraction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryInteraction.StoryInteraction

module TD.Data.StoryInteractions
data StoryInteractions

-- | Represents a list of interactions with a story
StoryInteractions :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [StoryInteraction] -> Maybe Text -> StoryInteractions

-- | Approximate total number of interactions found
[total_count] :: StoryInteractions -> Maybe Int

-- | Approximate total number of found forwards and reposts; always 0 for
--   chat stories
[total_forward_count] :: StoryInteractions -> Maybe Int

-- | Approximate total number of found reactions; always 0 for chat stories
[total_reaction_count] :: StoryInteractions -> Maybe Int

-- | List of story interactions
[interactions] :: StoryInteractions -> Maybe [StoryInteraction]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: StoryInteractions -> Maybe Text
instance GHC.Show.Show TD.Data.StoryInteractions.StoryInteractions
instance GHC.Classes.Eq TD.Data.StoryInteractions.StoryInteractions
instance TD.Lib.Internal.ShortShow TD.Data.StoryInteractions.StoryInteractions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.StoryInteractions.StoryInteractions

module TD.Data.SavedMessagesTopic
data SavedMessagesTopic

-- | Contains information about a Saved Messages topic
SavedMessagesTopic :: Maybe Int -> Maybe SavedMessagesTopicType -> Maybe Bool -> Maybe Int -> Maybe Message -> Maybe DraftMessage -> SavedMessagesTopic

-- | Unique topic identifier
[_id] :: SavedMessagesTopic -> Maybe Int

-- | Type of the topic
[_type] :: SavedMessagesTopic -> Maybe SavedMessagesTopicType

-- | True, if the topic is pinned
[is_pinned] :: SavedMessagesTopic -> Maybe Bool

-- | A parameter used to determine order of the topic in the topic list.
--   Topics must be sorted by the order in descending order
[order] :: SavedMessagesTopic -> Maybe Int

-- | Last message in the topic; may be null if none or unknown
[last_message] :: SavedMessagesTopic -> Maybe Message

-- | A draft of a message in the topic; may be null if none
[draft_message] :: SavedMessagesTopic -> Maybe DraftMessage
instance GHC.Show.Show TD.Data.SavedMessagesTopic.SavedMessagesTopic
instance GHC.Classes.Eq TD.Data.SavedMessagesTopic.SavedMessagesTopic
instance TD.Lib.Internal.ShortShow TD.Data.SavedMessagesTopic.SavedMessagesTopic
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.SavedMessagesTopic.SavedMessagesTopic

module TD.Data.PublicForward

-- | Describes a public forward or repost of a story
data PublicForward

-- | Contains a public forward as a message
PublicForwardMessage :: Maybe Message -> PublicForward

-- | Information about the message
[message] :: PublicForward -> Maybe Message

-- | Contains a public repost to a story
PublicForwardStory :: Maybe Story -> PublicForward

-- | Information about the story
[story] :: PublicForward -> Maybe Story
instance GHC.Show.Show TD.Data.PublicForward.PublicForward
instance GHC.Classes.Eq TD.Data.PublicForward.PublicForward
instance TD.Lib.Internal.ShortShow TD.Data.PublicForward.PublicForward
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PublicForward.PublicForward

module TD.Data.PublicForwards
data PublicForwards

-- | Represents a list of public forwards and reposts as a story of a
--   message or a story
PublicForwards :: Maybe Int -> Maybe [PublicForward] -> Maybe Text -> PublicForwards

-- | Approximate total number of messages and stories found
[total_count] :: PublicForwards -> Maybe Int

-- | List of found public forwards and reposts
[forwards] :: PublicForwards -> Maybe [PublicForward]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: PublicForwards -> Maybe Text
instance GHC.Show.Show TD.Data.PublicForwards.PublicForwards
instance GHC.Classes.Eq TD.Data.PublicForwards.PublicForwards
instance TD.Lib.Internal.ShortShow TD.Data.PublicForwards.PublicForwards
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.PublicForwards.PublicForwards

module TD.Data.NotificationType

-- | Contains detailed information about a notification
data NotificationType

-- | New message was received
NotificationTypeNewMessage :: Maybe Message -> Maybe Bool -> NotificationType

-- | The message
[message] :: NotificationType -> Maybe Message

-- | True, if message content must be displayed in notifications
[show_preview] :: NotificationType -> Maybe Bool

-- | New secret chat was created
NotificationTypeNewSecretChat :: NotificationType

-- | New call was received
NotificationTypeNewCall :: Maybe Int -> NotificationType

-- | Call identifier
[call_id] :: NotificationType -> Maybe Int

-- | New message was received through a push notification
NotificationTypeNewPushMessage :: Maybe Int -> Maybe MessageSender -> Maybe Text -> Maybe Bool -> Maybe PushMessageContent -> NotificationType

-- | The message identifier. The message will not be available in the chat
--   history, but the identifier can be used in viewMessages, or as a
--   message to be replied in the same chat
[message_id] :: NotificationType -> Maybe Int

-- | Identifier of the sender of the message. Corresponding user or chat
--   may be inaccessible
[sender_id] :: NotificationType -> Maybe MessageSender

-- | Name of the sender
[sender_name] :: NotificationType -> Maybe Text

-- | True, if the message is outgoing
[is_outgoing] :: NotificationType -> Maybe Bool

-- | Push message content
[content] :: NotificationType -> Maybe PushMessageContent
instance GHC.Show.Show TD.Data.NotificationType.NotificationType
instance GHC.Classes.Eq TD.Data.NotificationType.NotificationType
instance TD.Lib.Internal.ShortShow TD.Data.NotificationType.NotificationType
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationType.NotificationType

module TD.Data.Notification
data Notification

-- | Contains information about a notification
Notification :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe NotificationType -> Notification

-- | Unique persistent identifier of this notification
[_id] :: Notification -> Maybe Int

-- | Notification date
[date] :: Notification -> Maybe Int

-- | True, if the notification was explicitly sent without sound
[is_silent] :: Notification -> Maybe Bool

-- | Notification type
[_type] :: Notification -> Maybe NotificationType
instance GHC.Show.Show TD.Data.Notification.Notification
instance GHC.Classes.Eq TD.Data.Notification.Notification
instance TD.Lib.Internal.ShortShow TD.Data.Notification.Notification
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Notification.Notification

module TD.Data.NotificationGroup
data NotificationGroup

-- | Describes a group of notifications
NotificationGroup :: Maybe Int -> Maybe NotificationGroupType -> Maybe Int -> Maybe Int -> Maybe [Notification] -> NotificationGroup

-- | Unique persistent auto-incremented from 1 identifier of the
--   notification group
[_id] :: NotificationGroup -> Maybe Int

-- | Type of the group
[_type] :: NotificationGroup -> Maybe NotificationGroupType

-- | Identifier of a chat to which all notifications in the group belong
[chat_id] :: NotificationGroup -> Maybe Int

-- | Total number of active notifications in the group
[total_count] :: NotificationGroup -> Maybe Int

-- | The list of active notifications
[notifications] :: NotificationGroup -> Maybe [Notification]
instance GHC.Show.Show TD.Data.NotificationGroup.NotificationGroup
instance GHC.Classes.Eq TD.Data.NotificationGroup.NotificationGroup
instance TD.Lib.Internal.ShortShow TD.Data.NotificationGroup.NotificationGroup
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.NotificationGroup.NotificationGroup

module TD.Data.Messages
data Messages

-- | Contains a list of messages
Messages :: Maybe Int -> Maybe [Message] -> Messages

-- | Approximate total number of messages found
[total_count] :: Messages -> Maybe Int

-- | List of messages; messages may be null
[messages] :: Messages -> Maybe [Message]
instance GHC.Show.Show TD.Data.Messages.Messages
instance GHC.Classes.Eq TD.Data.Messages.Messages
instance TD.Lib.Internal.ShortShow TD.Data.Messages.Messages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Messages.Messages

module TD.Data.MessageThreadInfo
data MessageThreadInfo

-- | Contains information about a message thread
MessageThreadInfo :: Maybe Int -> Maybe Int -> Maybe MessageReplyInfo -> Maybe Int -> Maybe [Message] -> Maybe DraftMessage -> MessageThreadInfo

-- | Identifier of the chat to which the message thread belongs
[chat_id] :: MessageThreadInfo -> Maybe Int

-- | Message thread identifier, unique within the chat
[message_thread_id] :: MessageThreadInfo -> Maybe Int

-- | Information about the message thread; may be null for forum topic
--   threads
[reply_info] :: MessageThreadInfo -> Maybe MessageReplyInfo

-- | Approximate number of unread messages in the message thread
[unread_message_count] :: MessageThreadInfo -> Maybe Int

-- | The messages from which the thread starts. The messages are returned
--   in a reverse chronological order (i.e., in order of decreasing
--   message_id)
[messages] :: MessageThreadInfo -> Maybe [Message]

-- | A draft of a message in the message thread; may be null if none
[draft_message] :: MessageThreadInfo -> Maybe DraftMessage
instance GHC.Show.Show TD.Data.MessageThreadInfo.MessageThreadInfo
instance GHC.Classes.Eq TD.Data.MessageThreadInfo.MessageThreadInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageThreadInfo.MessageThreadInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageThreadInfo.MessageThreadInfo

module TD.Data.MessageLinkInfo
data MessageLinkInfo

-- | Contains information about a link to a message or a forum topic in a
--   chat
MessageLinkInfo :: Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Message -> Maybe Int -> Maybe Bool -> MessageLinkInfo

-- | True, if the link is a public link for a message or a forum topic in a
--   chat
[is_public] :: MessageLinkInfo -> Maybe Bool

-- | If found, identifier of the chat to which the link points, 0 otherwise
[chat_id] :: MessageLinkInfo -> Maybe Int

-- | If found, identifier of the message thread in which to open the
--   message, or a forum topic to open if the message is missing
[message_thread_id] :: MessageLinkInfo -> Maybe Int

-- | If found, the linked message; may be null
[message] :: MessageLinkInfo -> Maybe Message

-- | Timestamp from which the video<i>audio</i>video note<i>voice
--   note</i>story playing must start, in seconds; 0 if not specified. The
--   media can be in the message content or in its web page preview
[media_timestamp] :: MessageLinkInfo -> Maybe Int

-- | True, if the whole media album to which the message belongs is linked
[for_album] :: MessageLinkInfo -> Maybe Bool
instance GHC.Show.Show TD.Data.MessageLinkInfo.MessageLinkInfo
instance GHC.Classes.Eq TD.Data.MessageLinkInfo.MessageLinkInfo
instance TD.Lib.Internal.ShortShow TD.Data.MessageLinkInfo.MessageLinkInfo
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageLinkInfo.MessageLinkInfo

module TD.Data.MessageCalendarDay
data MessageCalendarDay

-- | Contains information about found messages sent on a specific day
MessageCalendarDay :: Maybe Int -> Maybe Message -> MessageCalendarDay

-- | Total number of found messages sent on the day
[total_count] :: MessageCalendarDay -> Maybe Int

-- | First message sent on the day
[message] :: MessageCalendarDay -> Maybe Message
instance GHC.Show.Show TD.Data.MessageCalendarDay.MessageCalendarDay
instance GHC.Classes.Eq TD.Data.MessageCalendarDay.MessageCalendarDay
instance TD.Lib.Internal.ShortShow TD.Data.MessageCalendarDay.MessageCalendarDay
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCalendarDay.MessageCalendarDay

module TD.Data.MessageCalendar
data MessageCalendar

-- | Contains information about found messages, split by days according to
--   the option "utc_time_offset"
MessageCalendar :: Maybe Int -> Maybe [MessageCalendarDay] -> MessageCalendar

-- | Total number of found messages
[total_count] :: MessageCalendar -> Maybe Int

-- | Information about messages sent
[days] :: MessageCalendar -> Maybe [MessageCalendarDay]
instance GHC.Show.Show TD.Data.MessageCalendar.MessageCalendar
instance GHC.Classes.Eq TD.Data.MessageCalendar.MessageCalendar
instance TD.Lib.Internal.ShortShow TD.Data.MessageCalendar.MessageCalendar
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.MessageCalendar.MessageCalendar

module TD.Data.FoundMessages
data FoundMessages

-- | Contains a list of messages found by a search
FoundMessages :: Maybe Int -> Maybe [Message] -> Maybe Text -> FoundMessages

-- | Approximate total number of messages found; -1 if unknown
[total_count] :: FoundMessages -> Maybe Int

-- | List of messages
[messages] :: FoundMessages -> Maybe [Message]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: FoundMessages -> Maybe Text
instance GHC.Show.Show TD.Data.FoundMessages.FoundMessages
instance GHC.Classes.Eq TD.Data.FoundMessages.FoundMessages
instance TD.Lib.Internal.ShortShow TD.Data.FoundMessages.FoundMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundMessages.FoundMessages

module TD.Data.FoundChatMessages
data FoundChatMessages

-- | Contains a list of messages found by a search in a given chat
FoundChatMessages :: Maybe Int -> Maybe [Message] -> Maybe Int -> FoundChatMessages

-- | Approximate total number of messages found; -1 if unknown
[total_count] :: FoundChatMessages -> Maybe Int

-- | List of messages
[messages] :: FoundChatMessages -> Maybe [Message]

-- | The offset for the next request. If 0, there are no more results
[next_from_message_id] :: FoundChatMessages -> Maybe Int
instance GHC.Show.Show TD.Data.FoundChatMessages.FoundChatMessages
instance GHC.Classes.Eq TD.Data.FoundChatMessages.FoundChatMessages
instance TD.Lib.Internal.ShortShow TD.Data.FoundChatMessages.FoundChatMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundChatMessages.FoundChatMessages

module TD.Data.ForumTopic
data ForumTopic

-- | Describes a forum topic
ForumTopic :: Maybe ForumTopicInfo -> Maybe Message -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatNotificationSettings -> Maybe DraftMessage -> ForumTopic

-- | Basic information about the topic
[info] :: ForumTopic -> Maybe ForumTopicInfo

-- | Last message in the topic; may be null if unknown
[last_message] :: ForumTopic -> Maybe Message

-- | True, if the topic is pinned in the topic list
[is_pinned] :: ForumTopic -> Maybe Bool

-- | Number of unread messages in the topic
[unread_count] :: ForumTopic -> Maybe Int

-- | Identifier of the last read incoming message
[last_read_inbox_message_id] :: ForumTopic -> Maybe Int

-- | Identifier of the last read outgoing message
[last_read_outbox_message_id] :: ForumTopic -> Maybe Int

-- | Number of unread messages with a mention/reply in the topic
[unread_mention_count] :: ForumTopic -> Maybe Int

-- | Number of messages with unread reactions in the topic
[unread_reaction_count] :: ForumTopic -> Maybe Int

-- | Notification settings for the topic
[notification_settings] :: ForumTopic -> Maybe ChatNotificationSettings

-- | A draft of a message in the topic; may be null if none
[draft_message] :: ForumTopic -> Maybe DraftMessage
instance GHC.Show.Show TD.Data.ForumTopic.ForumTopic
instance GHC.Classes.Eq TD.Data.ForumTopic.ForumTopic
instance TD.Lib.Internal.ShortShow TD.Data.ForumTopic.ForumTopic
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ForumTopic.ForumTopic

module TD.Data.ForumTopics
data ForumTopics

-- | Describes a list of forum topics
ForumTopics :: Maybe Int -> Maybe [ForumTopic] -> Maybe Int -> Maybe Int -> Maybe Int -> ForumTopics

-- | Approximate total number of forum topics found
[total_count] :: ForumTopics -> Maybe Int

-- | List of forum topics
[topics] :: ForumTopics -> Maybe [ForumTopic]

-- | Offset date for the next getForumTopics request
[next_offset_date] :: ForumTopics -> Maybe Int

-- | Offset message identifier for the next getForumTopics request
[next_offset_message_id] :: ForumTopics -> Maybe Int

-- | Offset message thread identifier for the next getForumTopics request
[next_offset_message_thread_id] :: ForumTopics -> Maybe Int
instance GHC.Show.Show TD.Data.ForumTopics.ForumTopics
instance GHC.Classes.Eq TD.Data.ForumTopics.ForumTopics
instance TD.Lib.Internal.ShortShow TD.Data.ForumTopics.ForumTopics
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ForumTopics.ForumTopics

module TD.Data.FileDownload
data FileDownload

-- | Describes a file added to file download list
FileDownload :: Maybe Int -> Maybe Message -> Maybe Int -> Maybe Int -> Maybe Bool -> FileDownload

-- | File identifier
[file_id] :: FileDownload -> Maybe Int

-- | The message with the file
[message] :: FileDownload -> Maybe Message

-- | Point in time (Unix timestamp) when the file was added to the download
--   list
[add_date] :: FileDownload -> Maybe Int

-- | Point in time (Unix timestamp) when the file downloading was
--   completed; 0 if the file downloading isn't completed
[complete_date] :: FileDownload -> Maybe Int

-- | True, if downloading of the file is paused
[is_paused] :: FileDownload -> Maybe Bool
instance GHC.Show.Show TD.Data.FileDownload.FileDownload
instance GHC.Classes.Eq TD.Data.FileDownload.FileDownload
instance TD.Lib.Internal.ShortShow TD.Data.FileDownload.FileDownload
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FileDownload.FileDownload

module TD.Data.FoundFileDownloads
data FoundFileDownloads

-- | Contains a list of downloaded files, found by a search
FoundFileDownloads :: Maybe DownloadedFileCounts -> Maybe [FileDownload] -> Maybe Text -> FoundFileDownloads

-- | Total number of suitable files, ignoring offset
[total_counts] :: FoundFileDownloads -> Maybe DownloadedFileCounts

-- | The list of files
[files] :: FoundFileDownloads -> Maybe [FileDownload]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: FoundFileDownloads -> Maybe Text
instance GHC.Show.Show TD.Data.FoundFileDownloads.FoundFileDownloads
instance GHC.Classes.Eq TD.Data.FoundFileDownloads.FoundFileDownloads
instance TD.Lib.Internal.ShortShow TD.Data.FoundFileDownloads.FoundFileDownloads
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.FoundFileDownloads.FoundFileDownloads

module TD.Data.ChatEventAction

-- | Represents a chat event
data ChatEventAction

-- | A message was edited
ChatEventMessageEdited :: Maybe Message -> Maybe Message -> ChatEventAction

-- | The original message before the edit
[old_message] :: ChatEventAction -> Maybe Message

-- | The message after it was edited
[new_message] :: ChatEventAction -> Maybe Message

-- | A message was deleted
ChatEventMessageDeleted :: Maybe Message -> Maybe Bool -> ChatEventAction

-- | Deleted message
[message] :: ChatEventAction -> Maybe Message

-- | True, if the message deletion can be reported via
--   reportSupergroupAntiSpamFalsePositive
[can_report_anti_spam_false_positive] :: ChatEventAction -> Maybe Bool

-- | A message was pinned
ChatEventMessagePinned :: Maybe Message -> ChatEventAction

-- | Deleted message
[message] :: ChatEventAction -> Maybe Message

-- | A message was unpinned
ChatEventMessageUnpinned :: Maybe Message -> ChatEventAction

-- | Deleted message
[message] :: ChatEventAction -> Maybe Message

-- | A poll in a message was stopped
ChatEventPollStopped :: Maybe Message -> ChatEventAction

-- | Deleted message
[message] :: ChatEventAction -> Maybe Message

-- | A new member joined the chat
ChatEventMemberJoined :: ChatEventAction

-- | A new member joined the chat via an invite link
ChatEventMemberJoinedByInviteLink :: Maybe ChatInviteLink -> Maybe Bool -> ChatEventAction

-- | Invite link used to join the chat
[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | True, if the user has joined the chat using an invite link for a chat
--   folder
[via_chat_folder_invite_link] :: ChatEventAction -> Maybe Bool

-- | A new member was accepted to the chat by an administrator
ChatEventMemberJoinedByRequest :: Maybe Int -> Maybe ChatInviteLink -> ChatEventAction

-- | User identifier of the chat administrator, approved user join request
[approver_user_id] :: ChatEventAction -> Maybe Int

-- | Invite link used to join the chat
[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A new chat member was invited
ChatEventMemberInvited :: Maybe Int -> Maybe ChatMemberStatus -> ChatEventAction

-- | New member user identifier
[user_id] :: ChatEventAction -> Maybe Int

-- | New member status
[status] :: ChatEventAction -> Maybe ChatMemberStatus

-- | A member left the chat
ChatEventMemberLeft :: ChatEventAction

-- | A chat member has gained/lost administrator status, or the list of
--   their administrator privileges has changed
ChatEventMemberPromoted :: Maybe Int -> Maybe ChatMemberStatus -> Maybe ChatMemberStatus -> ChatEventAction

-- | New member user identifier
[user_id] :: ChatEventAction -> Maybe Int

-- | Previous status of the chat member
[old_status] :: ChatEventAction -> Maybe ChatMemberStatus

-- | New status of the chat member
[new_status] :: ChatEventAction -> Maybe ChatMemberStatus

-- | A chat member was restricted<i>unrestricted or banned</i>unbanned, or
--   the list of their restrictions has changed
ChatEventMemberRestricted :: Maybe MessageSender -> Maybe ChatMemberStatus -> Maybe ChatMemberStatus -> ChatEventAction

-- | Affected chat member identifier
[member_id] :: ChatEventAction -> Maybe MessageSender

-- | Previous status of the chat member
[old_status] :: ChatEventAction -> Maybe ChatMemberStatus

-- | New status of the chat member
[new_status] :: ChatEventAction -> Maybe ChatMemberStatus

-- | The chat available reactions were changed
ChatEventAvailableReactionsChanged :: Maybe ChatAvailableReactions -> Maybe ChatAvailableReactions -> ChatEventAction

-- | Previous chat available reactions
[old_available_reactions] :: ChatEventAction -> Maybe ChatAvailableReactions

-- | New chat available reactions
[new_available_reactions] :: ChatEventAction -> Maybe ChatAvailableReactions

-- | The chat background was changed
ChatEventBackgroundChanged :: Maybe ChatBackground -> Maybe ChatBackground -> ChatEventAction

-- | Previous background; may be null if none
[old_background] :: ChatEventAction -> Maybe ChatBackground

-- | New background; may be null if none
[new_background] :: ChatEventAction -> Maybe ChatBackground

-- | The chat description was changed
ChatEventDescriptionChanged :: Maybe Text -> Maybe Text -> ChatEventAction

-- | Previous chat description
[old_description] :: ChatEventAction -> Maybe Text

-- | New chat description
[new_description] :: ChatEventAction -> Maybe Text

-- | The chat emoji status was changed
ChatEventEmojiStatusChanged :: Maybe EmojiStatus -> Maybe EmojiStatus -> ChatEventAction

-- | Previous emoji status; may be null if none
[old_emoji_status] :: ChatEventAction -> Maybe EmojiStatus

-- | New emoji status; may be null if none
[new_emoji_status] :: ChatEventAction -> Maybe EmojiStatus

-- | The linked chat of a supergroup was changed
ChatEventLinkedChatChanged :: Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous supergroup linked chat identifier
[old_linked_chat_id] :: ChatEventAction -> Maybe Int

-- | New supergroup linked chat identifier
[new_linked_chat_id] :: ChatEventAction -> Maybe Int

-- | The supergroup location was changed
ChatEventLocationChanged :: Maybe ChatLocation -> Maybe ChatLocation -> ChatEventAction

-- | Previous location; may be null
[old_location] :: ChatEventAction -> Maybe ChatLocation

-- | New location; may be null
[new_location] :: ChatEventAction -> Maybe ChatLocation

-- | The message auto-delete timer was changed
ChatEventMessageAutoDeleteTimeChanged :: Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous value of message_auto_delete_time
[old_message_auto_delete_time] :: ChatEventAction -> Maybe Int

-- | New value of message_auto_delete_time
[new_message_auto_delete_time] :: ChatEventAction -> Maybe Int

-- | The chat permissions were changed
ChatEventPermissionsChanged :: Maybe ChatPermissions -> Maybe ChatPermissions -> ChatEventAction

-- | Previous chat permissions
[old_permissions] :: ChatEventAction -> Maybe ChatPermissions

-- | New chat permissions
[new_permissions] :: ChatEventAction -> Maybe ChatPermissions

-- | The chat photo was changed
ChatEventPhotoChanged :: Maybe ChatPhoto -> Maybe ChatPhoto -> ChatEventAction

-- | Previous chat photo value; may be null
[old_photo] :: ChatEventAction -> Maybe ChatPhoto

-- | New chat photo value; may be null
[new_photo] :: ChatEventAction -> Maybe ChatPhoto

-- | The slow_mode_delay setting of a supergroup was changed
ChatEventSlowModeDelayChanged :: Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous value of slow_mode_delay, in seconds
[old_slow_mode_delay] :: ChatEventAction -> Maybe Int

-- | New value of slow_mode_delay, in seconds
[new_slow_mode_delay] :: ChatEventAction -> Maybe Int

-- | The supergroup sticker set was changed
ChatEventStickerSetChanged :: Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous identifier of the chat sticker set; 0 if none
[old_sticker_set_id] :: ChatEventAction -> Maybe Int

-- | New identifier of the chat sticker set; 0 if none
[new_sticker_set_id] :: ChatEventAction -> Maybe Int

-- | The supergroup sticker set with allowed custom emoji was changed
ChatEventCustomEmojiStickerSetChanged :: Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous identifier of the chat sticker set; 0 if none
[old_sticker_set_id] :: ChatEventAction -> Maybe Int

-- | New identifier of the chat sticker set; 0 if none
[new_sticker_set_id] :: ChatEventAction -> Maybe Int

-- | The chat title was changed
ChatEventTitleChanged :: Maybe Text -> Maybe Text -> ChatEventAction

-- | Previous chat title
[old_title] :: ChatEventAction -> Maybe Text

-- | New chat title
[new_title] :: ChatEventAction -> Maybe Text

-- | The chat editable username was changed
ChatEventUsernameChanged :: Maybe Text -> Maybe Text -> ChatEventAction

-- | Previous chat username
[old_username] :: ChatEventAction -> Maybe Text

-- | New chat username
[new_username] :: ChatEventAction -> Maybe Text

-- | The chat active usernames were changed
ChatEventActiveUsernamesChanged :: Maybe [Text] -> Maybe [Text] -> ChatEventAction

-- | Previous list of active usernames
[old_usernames] :: ChatEventAction -> Maybe [Text]

-- | New list of active usernames
[new_usernames] :: ChatEventAction -> Maybe [Text]

-- | The chat accent color or background custom emoji were changed
ChatEventAccentColorChanged :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous identifier of chat accent color
[old_accent_color_id] :: ChatEventAction -> Maybe Int

-- | Previous identifier of the custom emoji; 0 if none
[old_background_custom_emoji_id] :: ChatEventAction -> Maybe Int

-- | New identifier of chat accent color
[new_accent_color_id] :: ChatEventAction -> Maybe Int

-- | New identifier of the custom emoji; 0 if none
[new_background_custom_emoji_id] :: ChatEventAction -> Maybe Int

-- | The chat's profile accent color or profile background custom emoji
--   were changed
ChatEventProfileAccentColorChanged :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> ChatEventAction

-- | Previous identifier of chat's profile accent color; -1 if none
[old_profile_accent_color_id] :: ChatEventAction -> Maybe Int

-- | Previous identifier of the custom emoji; 0 if none
[old_profile_background_custom_emoji_id] :: ChatEventAction -> Maybe Int

-- | New identifier of chat's profile accent color; -1 if none
[new_profile_accent_color_id] :: ChatEventAction -> Maybe Int

-- | New identifier of the custom emoji; 0 if none
[new_profile_background_custom_emoji_id] :: ChatEventAction -> Maybe Int

-- | The has_protected_content setting of a channel was toggled
ChatEventHasProtectedContentToggled :: Maybe Bool -> ChatEventAction

-- | New value of has_protected_content
[has_protected_content] :: ChatEventAction -> Maybe Bool

-- | The can_invite_users permission of a supergroup chat was toggled
ChatEventInvitesToggled :: Maybe Bool -> ChatEventAction

-- | New value of can_invite_users permission
[can_invite_users] :: ChatEventAction -> Maybe Bool

-- | The is_all_history_available setting of a supergroup was toggled
ChatEventIsAllHistoryAvailableToggled :: Maybe Bool -> ChatEventAction

-- | New value of is_all_history_available
[is_all_history_available] :: ChatEventAction -> Maybe Bool

-- | The has_aggressive_anti_spam_enabled setting of a supergroup was
--   toggled
ChatEventHasAggressiveAntiSpamEnabledToggled :: Maybe Bool -> ChatEventAction

-- | New value of has_aggressive_anti_spam_enabled
[has_aggressive_anti_spam_enabled] :: ChatEventAction -> Maybe Bool

-- | The sign_messages setting of a channel was toggled
ChatEventSignMessagesToggled :: Maybe Bool -> ChatEventAction

-- | New value of sign_messages
[sign_messages] :: ChatEventAction -> Maybe Bool

-- | A chat invite link was edited
ChatEventInviteLinkEdited :: Maybe ChatInviteLink -> Maybe ChatInviteLink -> ChatEventAction

-- | Previous information about the invite link
[old_invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | New information about the invite link
[new_invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A chat invite link was revoked
ChatEventInviteLinkRevoked :: Maybe ChatInviteLink -> ChatEventAction

-- | Invite link used to join the chat
[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A revoked chat invite link was deleted
ChatEventInviteLinkDeleted :: Maybe ChatInviteLink -> ChatEventAction

-- | Invite link used to join the chat
[invite_link] :: ChatEventAction -> Maybe ChatInviteLink

-- | A video chat was created
ChatEventVideoChatCreated :: Maybe Int -> ChatEventAction

-- | Identifier of the video chat. The video chat can be received through
--   the method getGroupCall
[group_call_id] :: ChatEventAction -> Maybe Int

-- | A video chat was ended
ChatEventVideoChatEnded :: Maybe Int -> ChatEventAction

-- | Identifier of the video chat. The video chat can be received through
--   the method getGroupCall
[group_call_id] :: ChatEventAction -> Maybe Int

-- | The mute_new_participants setting of a video chat was toggled
ChatEventVideoChatMuteNewParticipantsToggled :: Maybe Bool -> ChatEventAction

-- | New value of the mute_new_participants setting
[mute_new_participants] :: ChatEventAction -> Maybe Bool

-- | A video chat participant was muted or unmuted
ChatEventVideoChatParticipantIsMutedToggled :: Maybe MessageSender -> Maybe Bool -> ChatEventAction

-- | Identifier of the affected group call participant
[participant_id] :: ChatEventAction -> Maybe MessageSender

-- | New value of is_muted
[is_muted] :: ChatEventAction -> Maybe Bool

-- | A video chat participant volume level was changed
ChatEventVideoChatParticipantVolumeLevelChanged :: Maybe MessageSender -> Maybe Int -> ChatEventAction

-- | Identifier of the affected group call participant
[participant_id] :: ChatEventAction -> Maybe MessageSender

-- | New value of volume_level; 1-20000 in hundreds of percents
[volume_level] :: ChatEventAction -> Maybe Int

-- | The is_forum setting of a channel was toggled
ChatEventIsForumToggled :: Maybe Bool -> ChatEventAction

-- | New value of is_forum
[is_forum] :: ChatEventAction -> Maybe Bool

-- | A new forum topic was created
ChatEventForumTopicCreated :: Maybe ForumTopicInfo -> ChatEventAction

-- | Information about the topic
[topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | A forum topic was edited
ChatEventForumTopicEdited :: Maybe ForumTopicInfo -> Maybe ForumTopicInfo -> ChatEventAction

-- | Old information about the topic
[old_topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | New information about the topic
[new_topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | A forum topic was closed or reopened
ChatEventForumTopicToggleIsClosed :: Maybe ForumTopicInfo -> ChatEventAction

-- | Information about the topic
[topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | The General forum topic was hidden or unhidden
ChatEventForumTopicToggleIsHidden :: Maybe ForumTopicInfo -> ChatEventAction

-- | Information about the topic
[topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | A forum topic was deleted
ChatEventForumTopicDeleted :: Maybe ForumTopicInfo -> ChatEventAction

-- | Information about the topic
[topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | A pinned forum topic was changed
ChatEventForumTopicPinned :: Maybe ForumTopicInfo -> Maybe ForumTopicInfo -> ChatEventAction

-- | Old information about the topic
[old_topic_info] :: ChatEventAction -> Maybe ForumTopicInfo

-- | New information about the topic
[new_topic_info] :: ChatEventAction -> Maybe ForumTopicInfo
instance GHC.Show.Show TD.Data.ChatEventAction.ChatEventAction
instance GHC.Classes.Eq TD.Data.ChatEventAction.ChatEventAction
instance TD.Lib.Internal.ShortShow TD.Data.ChatEventAction.ChatEventAction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEventAction.ChatEventAction

module TD.Data.ChatEvent
data ChatEvent

-- | Represents a chat event
ChatEvent :: Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe ChatEventAction -> ChatEvent

-- | Chat event identifier
[_id] :: ChatEvent -> Maybe Int

-- | Point in time (Unix timestamp) when the event happened
[date] :: ChatEvent -> Maybe Int

-- | Identifier of the user or chat who performed the action
[member_id] :: ChatEvent -> Maybe MessageSender

-- | The action
[action] :: ChatEvent -> Maybe ChatEventAction
instance GHC.Show.Show TD.Data.ChatEvent.ChatEvent
instance GHC.Classes.Eq TD.Data.ChatEvent.ChatEvent
instance TD.Lib.Internal.ShortShow TD.Data.ChatEvent.ChatEvent
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEvent.ChatEvent

module TD.Data.ChatEvents
data ChatEvents

-- | Contains a list of chat events
ChatEvents :: Maybe [ChatEvent] -> ChatEvents

-- | List of events
[events] :: ChatEvents -> Maybe [ChatEvent]
instance GHC.Show.Show TD.Data.ChatEvents.ChatEvents
instance GHC.Classes.Eq TD.Data.ChatEvents.ChatEvents
instance TD.Lib.Internal.ShortShow TD.Data.ChatEvents.ChatEvents
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.ChatEvents.ChatEvents

module TD.Data.Chat
data Chat

-- | A chat. (Can be a private chat, basic group, supergroup, or secret
--   chat)
Chat :: Maybe Int -> Maybe ChatType -> Maybe Text -> Maybe ChatPhotoInfo -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatPermissions -> Maybe Message -> Maybe [ChatPosition] -> Maybe [ChatList] -> Maybe MessageSender -> Maybe BlockList -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatNotificationSettings -> Maybe ChatAvailableReactions -> Maybe Int -> Maybe EmojiStatus -> Maybe ChatBackground -> Maybe Text -> Maybe ChatActionBar -> Maybe BusinessBotManageBar -> Maybe VideoChat -> Maybe ChatJoinRequestsInfo -> Maybe Int -> Maybe DraftMessage -> Maybe Text -> Chat

-- | Chat unique identifier
[_id] :: Chat -> Maybe Int

-- | Type of the chat
[_type] :: Chat -> Maybe ChatType

-- | Chat title
[title] :: Chat -> Maybe Text

-- | Chat photo; may be null
[photo] :: Chat -> Maybe ChatPhotoInfo

-- | Identifier of the accent color for message sender name, and
--   backgrounds of chat photo, reply header, and link preview
[accent_color_id] :: Chat -> Maybe Int

-- | Identifier of a custom emoji to be shown on the reply header and link
--   preview background for messages sent by the chat; 0 if none
[background_custom_emoji_id] :: Chat -> Maybe Int

-- | Identifier of the profile accent color for the chat's profile; -1 if
--   none
[profile_accent_color_id] :: Chat -> Maybe Int

-- | Identifier of a custom emoji to be shown on the background of the
--   chat's profile; 0 if none
[profile_background_custom_emoji_id] :: Chat -> Maybe Int

-- | Actions that non-administrator chat members are allowed to take in the
--   chat
[permissions] :: Chat -> Maybe ChatPermissions

-- | Last message in the chat; may be null if none or unknown
[last_message] :: Chat -> Maybe Message

-- | Positions of the chat in chat lists
[positions] :: Chat -> Maybe [ChatPosition]

-- | Chat lists to which the chat belongs. A chat can have a non-zero
--   position in a chat list even it doesn't belong to the chat list and
--   have no position in a chat list even it belongs to the chat list
[chat_lists] :: Chat -> Maybe [ChatList]

-- | Identifier of a user or chat that is selected to send messages in the
--   chat; may be null if the user can't change message sender
[message_sender_id] :: Chat -> Maybe MessageSender

-- | Block list to which the chat is added; may be null if none
[block_list] :: Chat -> Maybe BlockList

-- | True, if chat content can't be saved locally, forwarded, or copied
[has_protected_content] :: Chat -> Maybe Bool

-- | True, if translation of all messages in the chat must be suggested to
--   the user
[is_translatable] :: Chat -> Maybe Bool

-- | True, if the chat is marked as unread
[is_marked_as_unread] :: Chat -> Maybe Bool

-- | True, if the chat is a forum supergroup that must be shown in the
--   "View as topics" mode, or Saved Messages chat that must be shown in
--   the "View as chats"
[view_as_topics] :: Chat -> Maybe Bool

-- | True, if the chat has scheduled messages
[has_scheduled_messages] :: Chat -> Maybe Bool

-- | True, if the chat messages can be deleted only for the current user
--   while other users will continue to see the messages
[can_be_deleted_only_for_self] :: Chat -> Maybe Bool

-- | True, if the chat messages can be deleted for all users
[can_be_deleted_for_all_users] :: Chat -> Maybe Bool

-- | True, if the chat can be reported to Telegram moderators through
--   reportChat or reportChatPhoto
[can_be_reported] :: Chat -> Maybe Bool

-- | Default value of the disable_notification parameter, used when a
--   message is sent to the chat
[default_disable_notification] :: Chat -> Maybe Bool

-- | Number of unread messages in the chat
[unread_count] :: Chat -> Maybe Int

-- | Identifier of the last read incoming message
[last_read_inbox_message_id] :: Chat -> Maybe Int

-- | Identifier of the last read outgoing message
[last_read_outbox_message_id] :: Chat -> Maybe Int

-- | Number of unread messages with a mention/reply in the chat
[unread_mention_count] :: Chat -> Maybe Int

-- | Number of messages with unread reactions in the chat
[unread_reaction_count] :: Chat -> Maybe Int

-- | Notification settings for the chat
[notification_settings] :: Chat -> Maybe ChatNotificationSettings

-- | Types of reaction, available in the chat
[available_reactions] :: Chat -> Maybe ChatAvailableReactions

-- | Current message auto-delete or self-destruct timer setting for the
--   chat, in seconds; 0 if disabled. Self-destruct timer in secret chats
--   starts after the message or its content is viewed. Auto-delete timer
--   in other chats starts from the send date
[message_auto_delete_time] :: Chat -> Maybe Int

-- | Emoji status to be shown along with chat title; may be null
[emoji_status] :: Chat -> Maybe EmojiStatus

-- | Background set for the chat; may be null if none
[background] :: Chat -> Maybe ChatBackground

-- | If non-empty, name of a theme, set for the chat
[theme_name] :: Chat -> Maybe Text

-- | Information about actions which must be possible to do through the
--   chat action bar; may be null if none
[action_bar] :: Chat -> Maybe ChatActionBar

-- | Information about bar for managing a business bot in the chat; may be
--   null if none
[business_bot_manage_bar] :: Chat -> Maybe BusinessBotManageBar

-- | Information about video chat of the chat
[video_chat] :: Chat -> Maybe VideoChat

-- | Information about pending join requests; may be null if none
[pending_join_requests] :: Chat -> Maybe ChatJoinRequestsInfo

-- | Identifier of the message from which reply markup needs to be used; 0
--   if there is no default custom reply markup in the chat
[reply_markup_message_id] :: Chat -> Maybe Int

-- | A draft of a message in the chat; may be null if none
[draft_message] :: Chat -> Maybe DraftMessage

-- | Application-specific data associated with the chat. (For example, the
--   chat scroll position or local chat notification settings can be stored
--   here.) Persistent if the message database is used
[client_data] :: Chat -> Maybe Text
instance GHC.Show.Show TD.Data.Chat.Chat
instance GHC.Classes.Eq TD.Data.Chat.Chat
instance TD.Lib.Internal.ShortShow TD.Data.Chat.Chat
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Chat.Chat

module TD.Data.BusinessMessage
data BusinessMessage

-- | Describes a message from a business account as received by a bot
BusinessMessage :: Maybe Message -> Maybe Message -> BusinessMessage

-- | The message
[message] :: BusinessMessage -> Maybe Message

-- | Message that is replied by the message in the same chat; may be null
--   if none
[reply_to_message] :: BusinessMessage -> Maybe Message
instance GHC.Show.Show TD.Data.BusinessMessage.BusinessMessage
instance GHC.Classes.Eq TD.Data.BusinessMessage.BusinessMessage
instance TD.Lib.Internal.ShortShow TD.Data.BusinessMessage.BusinessMessage
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessMessage.BusinessMessage

module TD.Data.BusinessMessages
data BusinessMessages

-- | Contains a list of messages from a business account as received by a
--   bot
BusinessMessages :: Maybe [BusinessMessage] -> BusinessMessages

-- | List of business messages
[messages] :: BusinessMessages -> Maybe [BusinessMessage]
instance GHC.Show.Show TD.Data.BusinessMessages.BusinessMessages
instance GHC.Classes.Eq TD.Data.BusinessMessages.BusinessMessages
instance TD.Lib.Internal.ShortShow TD.Data.BusinessMessages.BusinessMessages
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.BusinessMessages.BusinessMessages

module TD.Data.InputPassportElement

-- | Contains information about a Telegram Passport element to be saved
data InputPassportElement

-- | A Telegram Passport element to be saved containing the user's personal
--   details
InputPassportElementPersonalDetails :: Maybe PersonalDetails -> InputPassportElement

-- | Personal details of the user
[personal_details] :: InputPassportElement -> Maybe PersonalDetails

-- | A Telegram Passport element to be saved containing the user's passport
InputPassportElementPassport :: Maybe InputIdentityDocument -> InputPassportElement

-- | The passport to be saved
[passport] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's driver
--   license
InputPassportElementDriverLicense :: Maybe InputIdentityDocument -> InputPassportElement

-- | The driver license to be saved
[driver_license] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's identity
--   card
InputPassportElementIdentityCard :: Maybe InputIdentityDocument -> InputPassportElement

-- | The identity card to be saved
[identity_card] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's internal
--   passport
InputPassportElementInternalPassport :: Maybe InputIdentityDocument -> InputPassportElement

-- | The internal passport to be saved
[internal_passport] :: InputPassportElement -> Maybe InputIdentityDocument

-- | A Telegram Passport element to be saved containing the user's address
InputPassportElementAddress :: Maybe Address -> InputPassportElement

-- | The address to be saved
[address] :: InputPassportElement -> Maybe Address

-- | A Telegram Passport element to be saved containing the user's utility
--   bill
InputPassportElementUtilityBill :: Maybe InputPersonalDocument -> InputPassportElement

-- | The utility bill to be saved
[utility_bill] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's bank
--   statement
InputPassportElementBankStatement :: Maybe InputPersonalDocument -> InputPassportElement

-- | The bank statement to be saved
[bank_statement] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's rental
--   agreement
InputPassportElementRentalAgreement :: Maybe InputPersonalDocument -> InputPassportElement

-- | The rental agreement to be saved
[rental_agreement] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's passport
--   registration
InputPassportElementPassportRegistration :: Maybe InputPersonalDocument -> InputPassportElement

-- | The passport registration page to be saved
[passport_registration] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's
--   temporary registration
InputPassportElementTemporaryRegistration :: Maybe InputPersonalDocument -> InputPassportElement

-- | The temporary registration document to be saved
[temporary_registration] :: InputPassportElement -> Maybe InputPersonalDocument

-- | A Telegram Passport element to be saved containing the user's phone
--   number
InputPassportElementPhoneNumber :: Maybe Text -> InputPassportElement

-- | The phone number to be saved
[phone_number] :: InputPassportElement -> Maybe Text

-- | A Telegram Passport element to be saved containing the user's email
--   address
InputPassportElementEmailAddress :: Maybe Text -> InputPassportElement

-- | The email address to be saved
[email_address] :: InputPassportElement -> Maybe Text
instance GHC.Show.Show TD.Data.InputPassportElement.InputPassportElement
instance GHC.Classes.Eq TD.Data.InputPassportElement.InputPassportElement
instance TD.Lib.Internal.ShortShow TD.Data.InputPassportElement.InputPassportElement
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.InputPassportElement.InputPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.InputPassportElement.InputPassportElement

module TD.Data.AddedReaction
data AddedReaction

-- | Represents a reaction applied to a message
AddedReaction :: Maybe ReactionType -> Maybe MessageSender -> Maybe Bool -> Maybe Int -> AddedReaction

-- | Type of the reaction
[_type] :: AddedReaction -> Maybe ReactionType

-- | Identifier of the chat member, applied the reaction
[sender_id] :: AddedReaction -> Maybe MessageSender

-- | True, if the reaction was added by the current user
[is_outgoing] :: AddedReaction -> Maybe Bool

-- | Point in time (Unix timestamp) when the reaction was added
[date] :: AddedReaction -> Maybe Int
instance GHC.Show.Show TD.Data.AddedReaction.AddedReaction
instance GHC.Classes.Eq TD.Data.AddedReaction.AddedReaction
instance TD.Lib.Internal.ShortShow TD.Data.AddedReaction.AddedReaction
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AddedReaction.AddedReaction

module TD.Data.AddedReactions
data AddedReactions

-- | Represents a list of reactions added to a message
AddedReactions :: Maybe Int -> Maybe [AddedReaction] -> Maybe Text -> AddedReactions

-- | The total number of found reactions
[total_count] :: AddedReactions -> Maybe Int

-- | The list of added reactions
[reactions] :: AddedReactions -> Maybe [AddedReaction]

-- | The offset for the next request. If empty, then there are no more
--   results
[next_offset] :: AddedReactions -> Maybe Text
instance GHC.Show.Show TD.Data.AddedReactions.AddedReactions
instance GHC.Classes.Eq TD.Data.AddedReactions.AddedReactions
instance TD.Lib.Internal.ShortShow TD.Data.AddedReactions.AddedReactions
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AddedReactions.AddedReactions

module TD.Data.AccountTtl
data AccountTtl

-- | Contains information about the period of inactivity after which the
--   current user's account will automatically be deleted
AccountTtl :: Maybe Int -> AccountTtl

-- | Number of days of inactivity before the account will be flagged for
--   deletion; 30-366 days
[days] :: AccountTtl -> Maybe Int
defaultAccountTtl :: AccountTtl
instance GHC.Show.Show TD.Data.AccountTtl.AccountTtl
instance GHC.Classes.Eq TD.Data.AccountTtl.AccountTtl
instance TD.Lib.Internal.ShortShow TD.Data.AccountTtl.AccountTtl
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AccountTtl.AccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Data.AccountTtl.AccountTtl

module TD.Data.AccentColor
data AccentColor

-- | Contains information about supported accent color for user/chat name,
--   background of empty chat photo, replies to messages and link previews
AccentColor :: Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe [Int] -> Maybe Int -> AccentColor

-- | Accent color identifier
[_id] :: AccentColor -> Maybe Int

-- | Identifier of a built-in color to use in places, where only one color
--   is needed; 0-6
[built_in_accent_color_id] :: AccentColor -> Maybe Int

-- | The list of 1-3 colors in RGB format, describing the accent color, as
--   expected to be shown in light themes
[light_theme_colors] :: AccentColor -> Maybe [Int]

-- | The list of 1-3 colors in RGB format, describing the accent color, as
--   expected to be shown in dark themes
[dark_theme_colors] :: AccentColor -> Maybe [Int]

-- | The minimum chat boost level required to use the color in a channel
--   chat
[min_channel_chat_boost_level] :: AccentColor -> Maybe Int
instance GHC.Show.Show TD.Data.AccentColor.AccentColor
instance GHC.Classes.Eq TD.Data.AccentColor.AccentColor
instance TD.Lib.Internal.ShortShow TD.Data.AccentColor.AccentColor
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.AccentColor.AccentColor

module TD.Data.Update

-- | Contains notifications about data changes
data Update

-- | The user authorization state has changed
UpdateAuthorizationState :: Maybe AuthorizationState -> Update

-- | New authorization state
[authorization_state] :: Update -> Maybe AuthorizationState

-- | A new message was received; can also be an outgoing message
UpdateNewMessage :: Maybe Message -> Update

-- | The new message
[message] :: Update -> Maybe Message

-- | A request to send a message has reached the Telegram server. This
--   doesn't mean that the message will be sent successfully. This update
--   is sent only if the option "use_quick_ack" is set to true. This update
--   may be sent multiple times for the same message
UpdateMessageSendAcknowledged :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | A message has been successfully sent
UpdateMessageSendSucceeded :: Maybe Message -> Maybe Int -> Update

-- | The new message
[message] :: Update -> Maybe Message

-- | The previous temporary message identifier
[old_message_id] :: Update -> Maybe Int

-- | A message failed to send. Be aware that some messages being sent can
--   be irrecoverably deleted, in which case updateDeleteMessages will be
--   received instead of this update
UpdateMessageSendFailed :: Maybe Message -> Maybe Int -> Maybe Error -> Update

-- | The new message
[message] :: Update -> Maybe Message

-- | The previous temporary message identifier
[old_message_id] :: Update -> Maybe Int

-- | The cause of the message sending failure
[_error] :: Update -> Maybe Error

-- | The message content has changed
UpdateMessageContent :: Maybe Int -> Maybe Int -> Maybe MessageContent -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | New message content
[new_content] :: Update -> Maybe MessageContent

-- | A message was edited. Changes in the message content will come in a
--   separate updateMessageContent
UpdateMessageEdited :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when the message was edited
[edit_date] :: Update -> Maybe Int

-- | New message reply markup; may be null
[reply_markup] :: Update -> Maybe ReplyMarkup

-- | The message pinned state was changed
UpdateMessageIsPinned :: Maybe Int -> Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | True, if the message is pinned
[is_pinned] :: Update -> Maybe Bool

-- | The information about interactions with a message has changed
UpdateMessageInteractionInfo :: Maybe Int -> Maybe Int -> Maybe MessageInteractionInfo -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | New information about interactions with the message; may be null
[interaction_info] :: Update -> Maybe MessageInteractionInfo

-- | The message content was opened. Updates voice note messages to
--   "listened", video note messages to "viewed" and starts the
--   self-destruct timer
UpdateMessageContentOpened :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | A message with an unread mention was read
UpdateMessageMentionRead :: Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | The new number of unread mention messages left in the chat
[unread_mention_count] :: Update -> Maybe Int

-- | The list of unread reactions added to a message was changed
UpdateMessageUnreadReactions :: Maybe Int -> Maybe Int -> Maybe [UnreadReaction] -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | The new list of unread reactions
[unread_reactions] :: Update -> Maybe [UnreadReaction]

-- | The new number of messages with unread reactions left in the chat
[unread_reaction_count] :: Update -> Maybe Int

-- | A message with a live location was viewed. When the update is
--   received, the application is supposed to update the live location
UpdateMessageLiveLocationViewed :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | A new chat has been loaded/created. This update is guaranteed to come
--   before the chat identifier is returned to the application. The chat
--   field changes will be reported through separate updates
UpdateNewChat :: Maybe Chat -> Update

-- | The chat
[chat] :: Update -> Maybe Chat

-- | The title of a chat was changed
UpdateChatTitle :: Maybe Int -> Maybe Text -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat title
[title] :: Update -> Maybe Text

-- | A chat photo was changed
UpdateChatPhoto :: Maybe Int -> Maybe ChatPhotoInfo -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat photo; may be null
[photo] :: Update -> Maybe ChatPhotoInfo

-- | Chat accent colors have changed
UpdateChatAccentColors :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat accent color identifier
[accent_color_id] :: Update -> Maybe Int

-- | The new identifier of a custom emoji to be shown on the reply header
--   and link preview background; 0 if none
[background_custom_emoji_id] :: Update -> Maybe Int

-- | The new chat profile accent color identifier; -1 if none
[profile_accent_color_id] :: Update -> Maybe Int

-- | The new identifier of a custom emoji to be shown on the profile
--   background; 0 if none
[profile_background_custom_emoji_id] :: Update -> Maybe Int

-- | Chat permissions were changed
UpdateChatPermissions :: Maybe Int -> Maybe ChatPermissions -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat permissions
[permissions] :: Update -> Maybe ChatPermissions

-- | The last message of a chat was changed
UpdateChatLastMessage :: Maybe Int -> Maybe Message -> Maybe [ChatPosition] -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new last message in the chat; may be null if the last message
--   became unknown. While the last message is unknown, new messages can be
--   added to the chat without corresponding updateNewMessage update
[last_message] :: Update -> Maybe Message

-- | The new chat positions in the chat lists
[positions] :: Update -> Maybe [ChatPosition]

-- | The position of a chat in a chat list has changed. An
--   updateChatLastMessage or updateChatDraftMessage update might be sent
--   instead of the update
UpdateChatPosition :: Maybe Int -> Maybe ChatPosition -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New chat position. If new order is 0, then the chat needs to be
--   removed from the list
[position] :: Update -> Maybe ChatPosition

-- | A chat was added to a chat list
UpdateChatAddedToList :: Maybe Int -> Maybe ChatList -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The chat list to which the chat was added
[chat_list] :: Update -> Maybe ChatList

-- | A chat was removed from a chat list
UpdateChatRemovedFromList :: Maybe Int -> Maybe ChatList -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The chat list to which the chat was added
[chat_list] :: Update -> Maybe ChatList

-- | Incoming messages were read or the number of unread messages has been
--   changed
UpdateChatReadInbox :: Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifier of the last read incoming message
[last_read_inbox_message_id] :: Update -> Maybe Int

-- | The number of unread messages left in the chat
[unread_count] :: Update -> Maybe Int

-- | Outgoing messages were read
UpdateChatReadOutbox :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifier of last read outgoing message
[last_read_outbox_message_id] :: Update -> Maybe Int

-- | The chat action bar was changed
UpdateChatActionBar :: Maybe Int -> Maybe ChatActionBar -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new value of the action bar; may be null
[action_bar] :: Update -> Maybe ChatActionBar

-- | The bar for managing business bot was changed in a chat
UpdateChatBusinessBotManageBar :: Maybe Int -> Maybe BusinessBotManageBar -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new value of the business bot manage bar; may be null
[business_bot_manage_bar] :: Update -> Maybe BusinessBotManageBar

-- | The chat available reactions were changed
UpdateChatAvailableReactions :: Maybe Int -> Maybe ChatAvailableReactions -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new reactions, available in the chat
[available_reactions] :: Update -> Maybe ChatAvailableReactions

-- | A chat draft has changed. Be aware that the update may come in the
--   currently opened chat but with old content of the draft. If the user
--   has changed the content of the draft, this update mustn't be applied
UpdateChatDraftMessage :: Maybe Int -> Maybe DraftMessage -> Maybe [ChatPosition] -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new draft message; may be null if none
[draft_message] :: Update -> Maybe DraftMessage

-- | The new chat positions in the chat lists
[positions] :: Update -> Maybe [ChatPosition]

-- | Chat emoji status has changed
UpdateChatEmojiStatus :: Maybe Int -> Maybe EmojiStatus -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat emoji status; may be null
[emoji_status] :: Update -> Maybe EmojiStatus

-- | The message sender that is selected to send messages in a chat has
--   changed
UpdateChatMessageSender :: Maybe Int -> Maybe MessageSender -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of message_sender_id; may be null if the user can't change
--   message sender
[message_sender_id] :: Update -> Maybe MessageSender

-- | The message auto-delete or self-destruct timer setting for a chat was
--   changed
UpdateChatMessageAutoDeleteTime :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of message_auto_delete_time
[message_auto_delete_time] :: Update -> Maybe Int

-- | Notification settings for a chat were changed
UpdateChatNotificationSettings :: Maybe Int -> Maybe ChatNotificationSettings -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new notification settings
[notification_settings] :: Update -> Maybe ChatNotificationSettings

-- | The chat pending join requests were changed
UpdateChatPendingJoinRequests :: Maybe Int -> Maybe ChatJoinRequestsInfo -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new data about pending join requests; may be null
[pending_join_requests] :: Update -> Maybe ChatJoinRequestsInfo

-- | The default chat reply markup was changed. Can occur because new
--   messages with reply markup were received or because an old reply
--   markup was hidden by the user
UpdateChatReplyMarkup :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifier of the message from which reply markup needs to be used; 0
--   if there is no default custom reply markup in the chat
[reply_markup_message_id] :: Update -> Maybe Int

-- | The chat background was changed
UpdateChatBackground :: Maybe Int -> Maybe ChatBackground -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new chat background; may be null if background was reset to
--   default
[background] :: Update -> Maybe ChatBackground

-- | The chat theme was changed
UpdateChatTheme :: Maybe Int -> Maybe Text -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new name of the chat theme; may be empty if theme was reset to
--   default
[theme_name] :: Update -> Maybe Text

-- | The chat unread_mention_count has changed
UpdateChatUnreadMentionCount :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new number of unread mention messages left in the chat
[unread_mention_count] :: Update -> Maybe Int

-- | The chat unread_reaction_count has changed
UpdateChatUnreadReactionCount :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new number of messages with unread reactions left in the chat
[unread_reaction_count] :: Update -> Maybe Int

-- | A chat video chat state has changed
UpdateChatVideoChat :: Maybe Int -> Maybe VideoChat -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of video_chat
[video_chat] :: Update -> Maybe VideoChat

-- | The value of the default disable_notification parameter, used when a
--   message is sent to the chat, was changed
UpdateChatDefaultDisableNotification :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | The new default_disable_notification value
[default_disable_notification] :: Update -> Maybe Bool

-- | A chat content was allowed or restricted for saving
UpdateChatHasProtectedContent :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of has_protected_content
[has_protected_content] :: Update -> Maybe Bool

-- | Translation of chat messages was enabled or disabled
UpdateChatIsTranslatable :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of is_translatable
[is_translatable] :: Update -> Maybe Bool

-- | A chat was marked as unread or was read
UpdateChatIsMarkedAsUnread :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of is_marked_as_unread
[is_marked_as_unread] :: Update -> Maybe Bool

-- | A chat default appearance has changed
UpdateChatViewAsTopics :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of view_as_topics
[view_as_topics] :: Update -> Maybe Bool

-- | A chat was blocked or unblocked
UpdateChatBlockList :: Maybe Int -> Maybe BlockList -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Block list to which the chat is added; may be null if none
[block_list] :: Update -> Maybe BlockList

-- | A chat's has_scheduled_messages field has changed
UpdateChatHasScheduledMessages :: Maybe Int -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New value of has_scheduled_messages
[has_scheduled_messages] :: Update -> Maybe Bool

-- | The list of chat folders or a chat folder has changed
UpdateChatFolders :: Maybe [ChatFolderInfo] -> Maybe Int -> Maybe Bool -> Update

-- | The new list of chat folders
[chat_folders] :: Update -> Maybe [ChatFolderInfo]

-- | Position of the main chat list among chat folders, 0-based
[main_chat_list_position] :: Update -> Maybe Int

-- | True, if folder tags are enabled
[are_tags_enabled] :: Update -> Maybe Bool

-- | The number of online group members has changed. This update with
--   non-zero number of online group members is sent only for currently
--   opened chats. There is no guarantee that it is sent just after the
--   number of online users has changed
UpdateChatOnlineMemberCount :: Maybe Int -> Maybe Int -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New number of online members in the chat, or 0 if unknown
[online_member_count] :: Update -> Maybe Int

-- | Basic information about a Saved Messages topic has changed. This
--   update is guaranteed to come before the topic identifier is returned
--   to the application
UpdateSavedMessagesTopic :: Maybe SavedMessagesTopic -> Update

-- | New data about the topic
[topic] :: Update -> Maybe SavedMessagesTopic

-- | Number of Saved Messages topics has changed
UpdateSavedMessagesTopicCount :: Maybe Int -> Update

-- | Approximate total number of Saved Messages topics
[topic_count] :: Update -> Maybe Int

-- | Basic information about a quick reply shortcut has changed. This
--   update is guaranteed to come before the quick shortcut name is
--   returned to the application
UpdateQuickReplyShortcut :: Maybe QuickReplyShortcut -> Update

-- | New data about the shortcut
[shortcut] :: Update -> Maybe QuickReplyShortcut

-- | A quick reply shortcut and all its messages were deleted
UpdateQuickReplyShortcutDeleted :: Maybe Int -> Update

-- | The identifier of the deleted shortcut
[shortcut_id] :: Update -> Maybe Int

-- | The list of quick reply shortcuts has changed
UpdateQuickReplyShortcuts :: Maybe [Int] -> Update

-- | The new list of identifiers of quick reply shortcuts
[shortcut_ids] :: Update -> Maybe [Int]

-- | The list of quick reply shortcut messages has changed
UpdateQuickReplyShortcutMessages :: Maybe Int -> Maybe [QuickReplyMessage] -> Update

-- | The identifier of the deleted shortcut
[shortcut_id] :: Update -> Maybe Int

-- | The new list of quick reply messages for the shortcut in order from
--   the first to the last sent
[messages] :: Update -> Maybe [QuickReplyMessage]

-- | Basic information about a topic in a forum chat was changed
UpdateForumTopicInfo :: Maybe Int -> Maybe ForumTopicInfo -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New information about the topic
[info] :: Update -> Maybe ForumTopicInfo

-- | Notification settings for some type of chats were updated
UpdateScopeNotificationSettings :: Maybe NotificationSettingsScope -> Maybe ScopeNotificationSettings -> Update

-- | Types of chats for which notification settings were updated
[scope] :: Update -> Maybe NotificationSettingsScope

-- | The new notification settings
[_notification_settings] :: Update -> Maybe ScopeNotificationSettings

-- | Notification settings for reactions were updated
UpdateReactionNotificationSettings :: Maybe ReactionNotificationSettings -> Update

-- | The new notification settings
[__notification_settings] :: Update -> Maybe ReactionNotificationSettings

-- | A notification was changed
UpdateNotification :: Maybe Int -> Maybe Notification -> Update

-- | Unique notification group identifier
[notification_group_id] :: Update -> Maybe Int

-- | Changed notification
[notification] :: Update -> Maybe Notification

-- | A list of active notifications in a notification group has changed
UpdateNotificationGroup :: Maybe Int -> Maybe NotificationGroupType -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Notification] -> Maybe [Int] -> Update

-- | Unique notification group identifier
[notification_group_id] :: Update -> Maybe Int

-- | New type of the notification group
[_type] :: Update -> Maybe NotificationGroupType

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Chat identifier, which notification settings must be applied to the
--   added notifications
[notification_settings_chat_id] :: Update -> Maybe Int

-- | Identifier of the notification sound to be played; 0 if sound is
--   disabled
[notification_sound_id] :: Update -> Maybe Int

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

-- | List of added group notifications, sorted by notification identifier
[added_notifications] :: Update -> Maybe [Notification]

-- | Identifiers of removed group notifications, sorted by notification
--   identifier
[removed_notification_ids] :: Update -> Maybe [Int]

-- | Contains active notifications that were shown on previous application
--   launches. This update is sent only if the message database is used. In
--   that case it comes once before any updateNotification and
--   updateNotificationGroup update
UpdateActiveNotifications :: Maybe [NotificationGroup] -> Update

-- | Lists of active notification groups
[groups] :: Update -> Maybe [NotificationGroup]

-- | Describes whether there are some pending notification updates. Can be
--   used to prevent application from killing, while there are some pending
--   notifications
UpdateHavePendingNotifications :: Maybe Bool -> Maybe Bool -> Update

-- | True, if there are some delayed notification updates, which will be
--   sent soon
[have_delayed_notifications] :: Update -> Maybe Bool

-- | True, if there can be some yet unreceived notifications, which are
--   being fetched from the server
[have_unreceived_notifications] :: Update -> Maybe Bool

-- | Some messages were deleted
UpdateDeleteMessages :: Maybe Int -> Maybe [Int] -> Maybe Bool -> Maybe Bool -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifiers of the deleted messages
[message_ids] :: Update -> Maybe [Int]

-- | True, if the messages are permanently deleted by a user (as opposed to
--   just becoming inaccessible)
[is_permanent] :: Update -> Maybe Bool

-- | True, if the messages are deleted only from the cache and can possibly
--   be retrieved again in the future
[from_cache] :: Update -> Maybe Bool

-- | A message sender activity in the chat has changed
UpdateChatAction :: Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe ChatAction -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | If not 0, the message thread identifier in which the action was
--   performed
[message_thread_id] :: Update -> Maybe Int

-- | Identifier of a message sender performing the action
[sender_id] :: Update -> Maybe MessageSender

-- | The action
[action] :: Update -> Maybe ChatAction

-- | The user went online or offline
UpdateUserStatus :: Maybe Int -> Maybe UserStatus -> Update

-- | User identifier
[user_id] :: Update -> Maybe Int

-- | New status of the user
[status] :: Update -> Maybe UserStatus

-- | Some data of a user has changed. This update is guaranteed to come
--   before the user identifier is returned to the application
UpdateUser :: Maybe User -> Update

-- | New data about the user
[user] :: Update -> Maybe User

-- | Some data of a basic group has changed. This update is guaranteed to
--   come before the basic group identifier is returned to the application
UpdateBasicGroup :: Maybe BasicGroup -> Update

-- | New data about the group
[basic_group] :: Update -> Maybe BasicGroup

-- | Some data of a supergroup or a channel has changed. This update is
--   guaranteed to come before the supergroup identifier is returned to the
--   application
UpdateSupergroup :: Maybe Supergroup -> Update

-- | New data about the supergroup
[supergroup] :: Update -> Maybe Supergroup

-- | Some data of a secret chat has changed. This update is guaranteed to
--   come before the secret chat identifier is returned to the application
UpdateSecretChat :: Maybe SecretChat -> Update

-- | New data about the secret chat
[secret_chat] :: Update -> Maybe SecretChat

-- | Some data in userFullInfo has been changed
UpdateUserFullInfo :: Maybe Int -> Maybe UserFullInfo -> Update

-- | User identifier
[user_id] :: Update -> Maybe Int

-- | New full information about the user
[user_full_info] :: Update -> Maybe UserFullInfo

-- | Some data in basicGroupFullInfo has been changed
UpdateBasicGroupFullInfo :: Maybe Int -> Maybe BasicGroupFullInfo -> Update

-- | Identifier of a basic group
[basic_group_id] :: Update -> Maybe Int

-- | New full information about the group
[basic_group_full_info] :: Update -> Maybe BasicGroupFullInfo

-- | Some data in supergroupFullInfo has been changed
UpdateSupergroupFullInfo :: Maybe Int -> Maybe SupergroupFullInfo -> Update

-- | Identifier of the supergroup or channel
[supergroup_id] :: Update -> Maybe Int

-- | New full information about the supergroup
[supergroup_full_info] :: Update -> Maybe SupergroupFullInfo

-- | A service notification from the server was received. Upon receiving
--   this the application must show a popup with the content of the
--   notification
UpdateServiceNotification :: Maybe Text -> Maybe MessageContent -> Update

-- | Notification type. If type begins with <a>AUTH_KEY_DROP_</a>, then two
--   buttons <a>Cancel</a> and "Log out" must be shown under notification;
--   if user presses the second, all local data must be destroyed using
--   Destroy method
[__type] :: Update -> Maybe Text

-- | Notification content
[content] :: Update -> Maybe MessageContent

-- | Information about a file was updated
UpdateFile :: Maybe File -> Update

-- | New data about the file
[file] :: Update -> Maybe File

-- | The file generation process needs to be started by the application
UpdateFileGenerationStart :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Update

-- | Unique identifier for the generation process
[generation_id] :: Update -> Maybe Int

-- | The path to a file from which a new file is generated; may be empty
[original_path] :: Update -> Maybe Text

-- | The path to a file that must be created and where the new file is
--   generated
[destination_path] :: Update -> Maybe Text

-- | String specifying the conversion applied to the original file. If
--   conversion is "" than original_path contains an HTTP/HTTPS URL of a
--   file, which must be downloaded by the application
[conversion] :: Update -> Maybe Text

-- | File generation is no longer needed
UpdateFileGenerationStop :: Maybe Int -> Update

-- | Unique identifier for the generation process
[generation_id] :: Update -> Maybe Int

-- | The state of the file download list has changed
UpdateFileDownloads :: Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | Total size of files in the file download list, in bytes
[total_size] :: Update -> Maybe Int

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

-- | Total downloaded size of files in the file download list, in bytes
[downloaded_size] :: Update -> Maybe Int

-- | A file was added to the file download list. This update is sent only
--   after file download list is loaded for the first time
UpdateFileAddedToDownloads :: Maybe FileDownload -> Maybe DownloadedFileCounts -> Update

-- | The added file download
[file_download] :: Update -> Maybe FileDownload

-- | New number of being downloaded and recently downloaded files found
[counts] :: Update -> Maybe DownloadedFileCounts

-- | A file download was changed. This update is sent only after file
--   download list is loaded for the first time
UpdateFileDownload :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe DownloadedFileCounts -> Update

-- | File identifier
[file_id] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when the file downloading was
--   completed; 0 if the file downloading isn't completed
[complete_date] :: Update -> Maybe Int

-- | True, if downloading of the file is paused
[is_paused] :: Update -> Maybe Bool

-- | New number of being downloaded and recently downloaded files found
[counts] :: Update -> Maybe DownloadedFileCounts

-- | A file was removed from the file download list. This update is sent
--   only after file download list is loaded for the first time
UpdateFileRemovedFromDownloads :: Maybe Int -> Maybe DownloadedFileCounts -> Update

-- | File identifier
[file_id] :: Update -> Maybe Int

-- | New number of being downloaded and recently downloaded files found
[counts] :: Update -> Maybe DownloadedFileCounts

-- | New call was created or information about a call was updated
UpdateCall :: Maybe Call -> Update

-- | New data about a call
[call] :: Update -> Maybe Call

-- | Information about a group call was updated
UpdateGroupCall :: Maybe GroupCall -> Update

-- | New data about a group call
[group_call] :: Update -> Maybe GroupCall

-- | Information about a group call participant was changed. The updates
--   are sent only after the group call is received through getGroupCall
--   and only if the call is joined or being joined
UpdateGroupCallParticipant :: Maybe Int -> Maybe GroupCallParticipant -> Update

-- | Identifier of group call
[group_call_id] :: Update -> Maybe Int

-- | New data about a participant
[participant] :: Update -> Maybe GroupCallParticipant

-- | New call signaling data arrived
UpdateNewCallSignalingData :: Maybe Int -> Maybe ByteString -> Update

-- | The call identifier
[call_id] :: Update -> Maybe Int

-- | The data
[_data] :: Update -> Maybe ByteString

-- | Some privacy setting rules have been changed
UpdateUserPrivacySettingRules :: Maybe UserPrivacySetting -> Maybe UserPrivacySettingRules -> Update

-- | The privacy setting
[setting] :: Update -> Maybe UserPrivacySetting

-- | New privacy rules
[rules] :: Update -> Maybe UserPrivacySettingRules

-- | Number of unread messages in a chat list has changed. This update is
--   sent only if the message database is used
UpdateUnreadMessageCount :: Maybe ChatList -> Maybe Int -> Maybe Int -> Update

-- | The chat list to which the chat was added
[chat_list] :: Update -> Maybe ChatList

-- | The number of unread messages left in the chat
[unread_count] :: Update -> Maybe Int

-- | Total number of unread messages in unmuted chats
[unread_unmuted_count] :: Update -> Maybe Int

-- | Number of unread chats, i.e. with unread messages or marked as unread,
--   has changed. This update is sent only if the message database is used
UpdateUnreadChatCount :: Maybe ChatList -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | The chat list to which the chat was added
[chat_list] :: Update -> Maybe ChatList

-- | Total number of unread notifications in the group, can be bigger than
--   number of active notifications
[total_count] :: Update -> Maybe Int

-- | The number of unread messages left in the chat
[unread_count] :: Update -> Maybe Int

-- | Total number of unread messages in unmuted chats
[unread_unmuted_count] :: Update -> Maybe Int

-- | Total number of chats marked as unread
[marked_as_unread_count] :: Update -> Maybe Int

-- | Total number of unmuted chats marked as unread
[marked_as_unread_unmuted_count] :: Update -> Maybe Int

-- | A story was changed
UpdateStory :: Maybe Story -> Update

-- | The new information about the story
[story] :: Update -> Maybe Story

-- | A story became inaccessible
UpdateStoryDeleted :: Maybe Int -> Maybe Int -> Update

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: Update -> Maybe Int

-- | Story identifier
[story_id] :: Update -> Maybe Int

-- | A story has been successfully sent
UpdateStorySendSucceeded :: Maybe Story -> Maybe Int -> Update

-- | The new information about the story
[story] :: Update -> Maybe Story

-- | The previous temporary story identifier
[old_story_id] :: Update -> Maybe Int

-- | A story failed to send. If the story sending is canceled, then
--   updateStoryDeleted will be received instead of this update
UpdateStorySendFailed :: Maybe Story -> Maybe Error -> Maybe CanSendStoryResult -> Update

-- | The new information about the story
[story] :: Update -> Maybe Story

-- | The cause of the message sending failure
[_error] :: Update -> Maybe Error

-- | Type of the error; may be null if unknown
[error_type] :: Update -> Maybe CanSendStoryResult

-- | The list of active stories posted by a specific chat has changed
UpdateChatActiveStories :: Maybe ChatActiveStories -> Update

-- | The new list of active stories
[active_stories] :: Update -> Maybe ChatActiveStories

-- | Number of chats in a story list has changed
UpdateStoryListChatCount :: Maybe StoryList -> Maybe Int -> Update

-- | The story list
[story_list] :: Update -> Maybe StoryList

-- | Approximate total number of chats with active stories in the list
[chat_count] :: Update -> Maybe Int

-- | Story stealth mode settings have changed
UpdateStoryStealthMode :: Maybe Int -> Maybe Int -> Update

-- | Point in time (Unix timestamp) until stealth mode is active; 0 if it
--   is disabled
[active_until_date] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when stealth mode can be enabled again;
--   0 if there is no active cooldown
[cooldown_until_date] :: Update -> Maybe Int

-- | An option changed its value
UpdateOption :: Maybe Text -> Maybe OptionValue -> Update

-- | The option name
[name] :: Update -> Maybe Text

-- | The new option value
[value] :: Update -> Maybe OptionValue

-- | A sticker set has changed
UpdateStickerSet :: Maybe StickerSet -> Update

-- | The sticker set
[sticker_set] :: Update -> Maybe StickerSet

-- | The list of installed sticker sets was updated
UpdateInstalledStickerSets :: Maybe StickerType -> Maybe [Int] -> Update

-- | Type of the affected stickers
[sticker_type] :: Update -> Maybe StickerType

-- | The new list of installed ordinary sticker sets
[sticker_set_ids] :: Update -> Maybe [Int]

-- | The list of trending sticker sets was updated or some of them were
--   viewed
UpdateTrendingStickerSets :: Maybe StickerType -> Maybe TrendingStickerSets -> Update

-- | Type of the affected stickers
[sticker_type] :: Update -> Maybe StickerType

-- | The prefix of the list of trending sticker sets with the newest
--   trending sticker sets
[sticker_sets] :: Update -> Maybe TrendingStickerSets

-- | The list of recently used stickers was updated
UpdateRecentStickers :: Maybe Bool -> Maybe [Int] -> Update

-- | True, if the list of stickers attached to photo or video files was
--   updated; otherwise, the list of sent stickers is updated
[is_attached] :: Update -> Maybe Bool

-- | The new list of file identifiers of recently used stickers
[sticker_ids] :: Update -> Maybe [Int]

-- | The list of favorite stickers was updated
UpdateFavoriteStickers :: Maybe [Int] -> Update

-- | The new list of file identifiers of recently used stickers
[sticker_ids] :: Update -> Maybe [Int]

-- | The list of saved animations was updated
UpdateSavedAnimations :: Maybe [Int] -> Update

-- | The new list of file identifiers of saved animations
[animation_ids] :: Update -> Maybe [Int]

-- | The list of saved notification sounds was updated. This update may not
--   be sent until information about a notification sound was requested for
--   the first time
UpdateSavedNotificationSounds :: Maybe [Int] -> Update

-- | The new list of identifiers of saved notification sounds
[notification_sound_ids] :: Update -> Maybe [Int]

-- | The default background has changed
UpdateDefaultBackground :: Maybe Bool -> Maybe Background -> Update

-- | True, if default background for dark theme has changed
[for_dark_theme] :: Update -> Maybe Bool

-- | The new default background; may be null
[_background] :: Update -> Maybe Background

-- | The list of available chat themes has changed
UpdateChatThemes :: Maybe [ChatTheme] -> Update

-- | The new list of chat themes
[chat_themes] :: Update -> Maybe [ChatTheme]

-- | The list of supported accent colors has changed
UpdateAccentColors :: Maybe [AccentColor] -> Maybe [Int] -> Update

-- | Information about supported colors; colors with identifiers 0 (red), 1
--   (orange), 2 (purple/violet), 3 (green), 4 (cyan), 5 (blue), 6 (pink)
--   must always be supported and aren't included in the list. The exact
--   colors for the accent colors with identifiers 0-6 must be taken from
--   the app theme
[colors] :: Update -> Maybe [AccentColor]

-- | The list of accent color identifiers, which can be set through
--   setAccentColor and setChatAccentColor. The colors must be shown in the
--   specififed order
[available_accent_color_ids] :: Update -> Maybe [Int]

-- | The list of supported accent colors for user profiles has changed
UpdateProfileAccentColors :: Maybe [ProfileAccentColor] -> Maybe [Int] -> Update

-- | Information about supported colors
[_colors] :: Update -> Maybe [ProfileAccentColor]

-- | The list of accent color identifiers, which can be set through
--   setAccentColor and setChatAccentColor. The colors must be shown in the
--   specififed order
[available_accent_color_ids] :: Update -> Maybe [Int]

-- | Some language pack strings have been updated
UpdateLanguagePackStrings :: Maybe Text -> Maybe Text -> Maybe [LanguagePackString] -> Update

-- | Localization target to which the language pack belongs
[localization_target] :: Update -> Maybe Text

-- | Identifier of the updated language pack
[language_pack_id] :: Update -> Maybe Text

-- | List of changed language pack strings; empty if all strings have
--   changed
[strings] :: Update -> Maybe [LanguagePackString]

-- | The connection state has changed. This update must be used only to
--   show a human-readable description of the connection state
UpdateConnectionState :: Maybe ConnectionState -> Update

-- | The new connection state
[state] :: Update -> Maybe ConnectionState

-- | New terms of service must be accepted by the user. If the terms of
--   service are declined, then the deleteAccount method must be called
--   with the reason "Decline ToS update"
UpdateTermsOfService :: Maybe Text -> Maybe TermsOfService -> Update

-- | Identifier of the terms of service
[terms_of_service_id] :: Update -> Maybe Text

-- | The new terms of service
[terms_of_service] :: Update -> Maybe TermsOfService

-- | The list of users nearby has changed. The update is guaranteed to be
--   sent only 60 seconds after a successful searchChatsNearby request
UpdateUsersNearby :: Maybe [ChatNearby] -> Update

-- | The new list of users nearby
[users_nearby] :: Update -> Maybe [ChatNearby]

-- | The first unconfirmed session has changed
UpdateUnconfirmedSession :: Maybe UnconfirmedSession -> Update

-- | The unconfirmed session; may be null if none
[session] :: Update -> Maybe UnconfirmedSession

-- | The list of bots added to attachment or side menu has changed
UpdateAttachmentMenuBots :: Maybe [AttachmentMenuBot] -> Update

-- | The new list of bots. The bots must not be shown on scheduled messages
--   screen
[bots] :: Update -> Maybe [AttachmentMenuBot]

-- | A message was sent by an opened Web App, so the Web App needs to be
--   closed
UpdateWebAppMessageSent :: Maybe Int -> Update

-- | Identifier of Web App launch
[web_app_launch_id] :: Update -> Maybe Int

-- | The list of active emoji reactions has changed
UpdateActiveEmojiReactions :: Maybe [Text] -> Update

-- | The new list of active emoji reactions
[emojis] :: Update -> Maybe [Text]

-- | The type of default reaction has changed
UpdateDefaultReactionType :: Maybe ReactionType -> Update

-- | The new type of the default reaction
[reaction_type] :: Update -> Maybe ReactionType

-- | Tags used in Saved Messages or a Saved Messages topic have changed
UpdateSavedMessagesTags :: Maybe Int -> Maybe SavedMessagesTags -> Update

-- | Identifier of Saved Messages topic which tags were changed; 0 if tags
--   for the whole chat has changed
[saved_messages_topic_id] :: Update -> Maybe Int

-- | The new tags
[tags] :: Update -> Maybe SavedMessagesTags

-- | The revenue earned from sponsored messages in a chat has changed. If
--   chat revenue screen is opened, then getChatRevenueTransactions may be
--   called to fetch new transactions
UpdateChatRevenueAmount :: Update

-- | The parameters of speech recognition without Telegram Premium
--   subscription has changed
UpdateSpeechRecognitionTrial :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Update

-- | The maximum allowed duration of media for speech recognition without
--   Telegram Premium subscription, in seconds
[max_media_duration] :: Update -> Maybe Int

-- | The total number of allowed speech recognitions per week; 0 if none
[weekly_count] :: Update -> Maybe Int

-- | Number of left speech recognition attempts this week
[left_count] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when the weekly number of tries will
--   reset; 0 if unknown
[next_reset_date] :: Update -> Maybe Int

-- | The list of supported dice emojis has changed
UpdateDiceEmojis :: Maybe [Text] -> Update

-- | The new list of active emoji reactions
[emojis] :: Update -> Maybe [Text]

-- | Some animated emoji message was clicked and a big animated sticker
--   must be played if the message is visible on the screen.
--   chatActionWatchingAnimations with the text of the message needs to be
--   sent if the sticker is played
UpdateAnimatedEmojiMessageClicked :: Maybe Int -> Maybe Int -> Maybe Sticker -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | The animated sticker to be played
[sticker] :: Update -> Maybe Sticker

-- | The parameters of animation search through
--   getOption("animation_search_bot_username") bot has changed
UpdateAnimationSearchParameters :: Maybe Text -> Maybe [Text] -> Update

-- | Name of the animation search provider
[provider] :: Update -> Maybe Text

-- | The new list of active emoji reactions
[emojis] :: Update -> Maybe [Text]

-- | The list of suggested to the user actions has changed
UpdateSuggestedActions :: Maybe [SuggestedAction] -> Maybe [SuggestedAction] -> Update

-- | Added suggested actions
[added_actions] :: Update -> Maybe [SuggestedAction]

-- | Removed suggested actions
[removed_actions] :: Update -> Maybe [SuggestedAction]

-- | Download or upload file speed for the user was limited, but it can be
--   restored by subscription to Telegram Premium. The notification can be
--   postponed until a being downloaded or uploaded file is visible to the
--   user Use getOption("premium_download_speedup") or
--   getOption("premium_upload_speedup") to get expected speedup after
--   subscription to Telegram Premium
UpdateSpeedLimitNotification :: Maybe Bool -> Update

-- | True, if upload speed was limited; false, if download speed was
--   limited
[is_upload] :: Update -> Maybe Bool

-- | The list of contacts that had birthdays recently or will have birthday
--   soon has changed
UpdateContactCloseBirthdays :: Maybe [CloseBirthdayUser] -> Update

-- | List of contact users with close birthday
[close_birthday_users] :: Update -> Maybe [CloseBirthdayUser]

-- | Autosave settings for some type of chats were updated
UpdateAutosaveSettings :: Maybe AutosaveSettingsScope -> Maybe ScopeAutosaveSettings -> Update

-- | Type of chats for which autosave settings were updated
[_scope] :: Update -> Maybe AutosaveSettingsScope

-- | The new autosave settings; may be null if the settings are reset to
--   default
[settings] :: Update -> Maybe ScopeAutosaveSettings

-- | A business connection has changed; for bots only
UpdateBusinessConnection :: Maybe BusinessConnection -> Update

-- | New data about the connection
[connection] :: Update -> Maybe BusinessConnection

-- | A new message was added to a business account; for bots only
UpdateNewBusinessMessage :: Maybe Text -> Maybe BusinessMessage -> Update

-- | Unique identifier of the business connection
[connection_id] :: Update -> Maybe Text

-- | The new message
[_message] :: Update -> Maybe BusinessMessage

-- | A message in a business account was edited; for bots only
UpdateBusinessMessageEdited :: Maybe Text -> Maybe BusinessMessage -> Update

-- | Unique identifier of the business connection
[connection_id] :: Update -> Maybe Text

-- | The new message
[_message] :: Update -> Maybe BusinessMessage

-- | Messages in a business account were deleted; for bots only
UpdateBusinessMessagesDeleted :: Maybe Text -> Maybe Int -> Maybe [Int] -> Update

-- | Unique identifier of the business connection
[connection_id] :: Update -> Maybe Text

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifiers of the deleted messages
[message_ids] :: Update -> Maybe [Int]

-- | A new incoming inline query; for bots only
UpdateNewInlineQuery :: Maybe Int -> Maybe Int -> Maybe Location -> Maybe ChatType -> Maybe Text -> Maybe Text -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | User location; may be null
[user_location] :: Update -> Maybe Location

-- | The type of the chat from which the query originated; may be null if
--   unknown
[chat_type] :: Update -> Maybe ChatType

-- | Text of the query
[query] :: Update -> Maybe Text

-- | Offset of the first entry to return
[offset] :: Update -> Maybe Text

-- | The user has chosen a result of an inline query; for bots only
UpdateNewChosenInlineResult :: Maybe Int -> Maybe Location -> Maybe Text -> Maybe Text -> Maybe Text -> Update

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | User location; may be null
[user_location] :: Update -> Maybe Location

-- | Text of the query
[query] :: Update -> Maybe Text

-- | Identifier of the chosen result
[result_id] :: Update -> Maybe Text

-- | Identifier of the sent inline message, if known
[inline_message_id] :: Update -> Maybe Text

-- | A new incoming callback query; for bots only
UpdateNewCallbackQuery :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe CallbackQueryPayload -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | Identifier that uniquely corresponds to the chat to which the message
--   was sent
[chat_instance] :: Update -> Maybe Int

-- | Query payload
[payload] :: Update -> Maybe CallbackQueryPayload

-- | A new incoming callback query from a message sent via a bot; for bots
--   only
UpdateNewInlineCallbackQuery :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe CallbackQueryPayload -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | Identifier of the sent inline message, if known
[inline_message_id] :: Update -> Maybe Text

-- | Identifier that uniquely corresponds to the chat to which the message
--   was sent
[chat_instance] :: Update -> Maybe Int

-- | Query payload
[payload] :: Update -> Maybe CallbackQueryPayload

-- | A new incoming shipping query; for bots only. Only for invoices with
--   flexible price
UpdateNewShippingQuery :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Address -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | Invoice payload
[invoice_payload] :: Update -> Maybe Text

-- | User shipping address
[shipping_address] :: Update -> Maybe Address

-- | A new incoming pre-checkout query; for bots only. Contains full
--   information about a checkout
UpdateNewPreCheckoutQuery :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe ByteString -> Maybe Text -> Maybe OrderInfo -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | Identifier of the user who sent the query
[sender_user_id] :: Update -> Maybe Int

-- | Currency for the product price
[currency] :: Update -> Maybe Text

-- | Total price for the product, in the smallest units of the currency
[total_amount] :: Update -> Maybe Int

-- | Invoice payload
[_invoice_payload] :: Update -> Maybe ByteString

-- | Identifier of a shipping option chosen by the user; may be empty if
--   not applicable
[shipping_option_id] :: Update -> Maybe Text

-- | Information about the order; may be null
[order_info] :: Update -> Maybe OrderInfo

-- | A new incoming event; for bots only
UpdateNewCustomEvent :: Maybe Text -> Update

-- | A JSON-serialized event
[event] :: Update -> Maybe Text

-- | A new incoming query; for bots only
UpdateNewCustomQuery :: Maybe Int -> Maybe Text -> Maybe Int -> Update

-- | Unique query identifier
[_id] :: Update -> Maybe Int

-- | JSON-serialized query data
[__data] :: Update -> Maybe Text

-- | Query timeout
[timeout] :: Update -> Maybe Int

-- | A poll was updated; for bots only
UpdatePoll :: Maybe Poll -> Update

-- | New data about the poll
[poll] :: Update -> Maybe Poll

-- | A user changed the answer to a poll; for bots only
UpdatePollAnswer :: Maybe Int -> Maybe MessageSender -> Maybe [Int] -> Update

-- | Unique poll identifier
[poll_id] :: Update -> Maybe Int

-- | Identifier of the message sender that changed the answer to the poll
[voter_id] :: Update -> Maybe MessageSender

-- | 0-based identifiers of answer options, chosen by the user
[option_ids] :: Update -> Maybe [Int]

-- | User rights changed in a chat; for bots only
UpdateChatMember :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe ChatInviteLink -> Maybe Bool -> Maybe Bool -> Maybe ChatMember -> Maybe ChatMember -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Identifier of the user, changing the rights
[actor_user_id] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when the user rights were changed
[date] :: Update -> Maybe Int

-- | If user has joined the chat using an invite link, the invite link; may
--   be null
[invite_link] :: Update -> Maybe ChatInviteLink

-- | True, if the user has joined the chat after sending a join request and
--   being approved by an administrator
[via_join_request] :: Update -> Maybe Bool

-- | True, if the user has joined the chat using an invite link for a chat
--   folder
[via_chat_folder_invite_link] :: Update -> Maybe Bool

-- | Previous chat member
[old_chat_member] :: Update -> Maybe ChatMember

-- | New chat member
[new_chat_member] :: Update -> Maybe ChatMember

-- | A user sent a join request to a chat; for bots only
UpdateNewChatJoinRequest :: Maybe Int -> Maybe ChatJoinRequest -> Maybe Int -> Maybe ChatInviteLink -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | Join request
[request] :: Update -> Maybe ChatJoinRequest

-- | Chat identifier of the private chat with the user
[user_chat_id] :: Update -> Maybe Int

-- | If user has joined the chat using an invite link, the invite link; may
--   be null
[invite_link] :: Update -> Maybe ChatInviteLink

-- | A chat boost has changed; for bots only
UpdateChatBoost :: Maybe Int -> Maybe ChatBoost -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | New information about the boost
[boost] :: Update -> Maybe ChatBoost

-- | User changed its reactions on a message with public reactions; for
--   bots only
UpdateMessageReaction :: Maybe Int -> Maybe Int -> Maybe MessageSender -> Maybe Int -> Maybe [ReactionType] -> Maybe [ReactionType] -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | Identifier of the user or chat that changed reactions
[actor_id] :: Update -> Maybe MessageSender

-- | Point in time (Unix timestamp) when the user rights were changed
[date] :: Update -> Maybe Int

-- | Old list of chosen reactions
[old_reaction_types] :: Update -> Maybe [ReactionType]

-- | New list of chosen reactions
[new_reaction_types] :: Update -> Maybe [ReactionType]

-- | Reactions added to a message with anonymous reactions have changed;
--   for bots only
UpdateMessageReactions :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [MessageReaction] -> Update

-- | The chat identifier of the sent message
[chat_id] :: Update -> Maybe Int

-- | A temporary message identifier
[message_id] :: Update -> Maybe Int

-- | Point in time (Unix timestamp) when the user rights were changed
[date] :: Update -> Maybe Int

-- | The list of reactions added to the message
[reactions] :: Update -> Maybe [MessageReaction]
instance GHC.Show.Show TD.Data.Update.Update
instance GHC.Classes.Eq TD.Data.Update.Update
instance TD.Lib.Internal.ShortShow TD.Data.Update.Update
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Update.Update

module TD.Data.Updates
data Updates

-- | Contains a list of updates
Updates :: Maybe [Update] -> Updates

-- | List of updates
[updates] :: Updates -> Maybe [Update]
instance GHC.Show.Show TD.Data.Updates.Updates
instance GHC.Classes.Eq TD.Data.Updates.Updates
instance TD.Lib.Internal.ShortShow TD.Data.Updates.Updates
instance Data.Aeson.Types.FromJSON.FromJSON TD.Data.Updates.Updates

module TD.GeneralResult
data GeneralResult
AccountTtl :: AccountTtl -> GeneralResult
AddedReactions :: AddedReactions -> GeneralResult
AnimatedEmoji :: AnimatedEmoji -> GeneralResult
Animations :: Animations -> GeneralResult
ArchiveChatListSettings :: ArchiveChatListSettings -> GeneralResult
AttachmentMenuBot :: AttachmentMenuBot -> GeneralResult
AuthenticationCodeInfo :: AuthenticationCodeInfo -> GeneralResult
AuthorizationState :: AuthorizationState -> GeneralResult
AutoDownloadSettingsPresets :: AutoDownloadSettingsPresets -> GeneralResult
AutosaveSettings :: AutosaveSettings -> GeneralResult
AvailableReactions :: AvailableReactions -> GeneralResult
Background :: Background -> GeneralResult
Backgrounds :: Backgrounds -> GeneralResult
BankCardInfo :: BankCardInfo -> GeneralResult
BasicGroup :: BasicGroup -> GeneralResult
BasicGroupFullInfo :: BasicGroupFullInfo -> GeneralResult
BotCommands :: BotCommands -> GeneralResult
BotMenuButton :: BotMenuButton -> GeneralResult
BusinessChatLink :: BusinessChatLink -> GeneralResult
BusinessChatLinkInfo :: BusinessChatLinkInfo -> GeneralResult
BusinessChatLinks :: BusinessChatLinks -> GeneralResult
BusinessConnectedBot :: BusinessConnectedBot -> GeneralResult
BusinessConnection :: BusinessConnection -> GeneralResult
BusinessFeatures :: BusinessFeatures -> GeneralResult
BusinessMessage :: BusinessMessage -> GeneralResult
BusinessMessages :: BusinessMessages -> GeneralResult
CallId :: CallId -> GeneralResult
CallbackQueryAnswer :: CallbackQueryAnswer -> GeneralResult
CanSendMessageToUserResult :: CanSendMessageToUserResult -> GeneralResult
CanSendStoryResult :: CanSendStoryResult -> GeneralResult
CanTransferOwnershipResult :: CanTransferOwnershipResult -> GeneralResult
Chat :: Chat -> GeneralResult
ChatActiveStories :: ChatActiveStories -> GeneralResult
ChatAdministrators :: ChatAdministrators -> GeneralResult
ChatBoostFeatures :: ChatBoostFeatures -> GeneralResult
ChatBoostLevelFeatures :: ChatBoostLevelFeatures -> GeneralResult
ChatBoostLink :: ChatBoostLink -> GeneralResult
ChatBoostLinkInfo :: ChatBoostLinkInfo -> GeneralResult
ChatBoostSlots :: ChatBoostSlots -> GeneralResult
ChatBoostStatus :: ChatBoostStatus -> GeneralResult
ChatEvents :: ChatEvents -> GeneralResult
ChatFolder :: ChatFolder -> GeneralResult
ChatFolderIcon :: ChatFolderIcon -> GeneralResult
ChatFolderInfo :: ChatFolderInfo -> GeneralResult
ChatFolderInviteLink :: ChatFolderInviteLink -> GeneralResult
ChatFolderInviteLinkInfo :: ChatFolderInviteLinkInfo -> GeneralResult
ChatFolderInviteLinks :: ChatFolderInviteLinks -> GeneralResult
ChatInviteLink :: ChatInviteLink -> GeneralResult
ChatInviteLinkCounts :: ChatInviteLinkCounts -> GeneralResult
ChatInviteLinkInfo :: ChatInviteLinkInfo -> GeneralResult
ChatInviteLinkMembers :: ChatInviteLinkMembers -> GeneralResult
ChatInviteLinks :: ChatInviteLinks -> GeneralResult
ChatJoinRequests :: ChatJoinRequests -> GeneralResult
ChatLists :: ChatLists -> GeneralResult
ChatMember :: ChatMember -> GeneralResult
ChatMembers :: ChatMembers -> GeneralResult
ChatMessageSenders :: ChatMessageSenders -> GeneralResult
ChatPhotos :: ChatPhotos -> GeneralResult
ChatRevenueStatistics :: ChatRevenueStatistics -> GeneralResult
ChatRevenueTransactions :: ChatRevenueTransactions -> GeneralResult
ChatStatistics :: ChatStatistics -> GeneralResult
Chats :: Chats -> GeneralResult
ChatsNearby :: ChatsNearby -> GeneralResult
CheckChatUsernameResult :: CheckChatUsernameResult -> GeneralResult
CheckStickerSetNameResult :: CheckStickerSetNameResult -> GeneralResult
CollectibleItemInfo :: CollectibleItemInfo -> GeneralResult
ConnectedWebsites :: ConnectedWebsites -> GeneralResult
Count :: Count -> GeneralResult
Countries :: Countries -> GeneralResult
CreatedBasicGroupChat :: CreatedBasicGroupChat -> GeneralResult
CustomRequestResult :: CustomRequestResult -> GeneralResult
DatabaseStatistics :: DatabaseStatistics -> GeneralResult
DeepLinkInfo :: DeepLinkInfo -> GeneralResult
EmailAddressAuthenticationCodeInfo :: EmailAddressAuthenticationCodeInfo -> GeneralResult
EmojiCategories :: EmojiCategories -> GeneralResult
EmojiKeywords :: EmojiKeywords -> GeneralResult
EmojiReaction :: EmojiReaction -> GeneralResult
EmojiStatuses :: EmojiStatuses -> GeneralResult
Emojis :: Emojis -> GeneralResult
Error :: Error -> GeneralResult
FailedToAddMembers :: FailedToAddMembers -> GeneralResult
File :: File -> GeneralResult
FileDownloadedPrefixSize :: FileDownloadedPrefixSize -> GeneralResult
FilePart :: FilePart -> GeneralResult
FormattedText :: FormattedText -> GeneralResult
ForumTopic :: ForumTopic -> GeneralResult
ForumTopicInfo :: ForumTopicInfo -> GeneralResult
ForumTopics :: ForumTopics -> GeneralResult
FoundChatBoosts :: FoundChatBoosts -> GeneralResult
FoundChatMessages :: FoundChatMessages -> GeneralResult
FoundFileDownloads :: FoundFileDownloads -> GeneralResult
FoundMessages :: FoundMessages -> GeneralResult
FoundPosition :: FoundPosition -> GeneralResult
FoundPositions :: FoundPositions -> GeneralResult
FoundWebApp :: FoundWebApp -> GeneralResult
GameHighScores :: GameHighScores -> GeneralResult
GroupCall :: GroupCall -> GeneralResult
GroupCallId :: GroupCallId -> GeneralResult
GroupCallStreams :: GroupCallStreams -> GeneralResult
Hashtags :: Hashtags -> GeneralResult
HttpUrl :: HttpUrl -> GeneralResult
ImportedContacts :: ImportedContacts -> GeneralResult
InlineQueryResults :: InlineQueryResults -> GeneralResult
InternalLinkType :: InternalLinkType -> GeneralResult
JsonValue :: JsonValue -> GeneralResult
LanguagePackInfo :: LanguagePackInfo -> GeneralResult
LanguagePackStringValue :: LanguagePackStringValue -> GeneralResult
LanguagePackStrings :: LanguagePackStrings -> GeneralResult
LocalizationTargetInfo :: LocalizationTargetInfo -> GeneralResult
LogStream :: LogStream -> GeneralResult
LogTags :: LogTags -> GeneralResult
LogVerbosityLevel :: LogVerbosityLevel -> GeneralResult
LoginUrlInfo :: LoginUrlInfo -> GeneralResult
Message :: Message -> GeneralResult
MessageAutoDeleteTime :: MessageAutoDeleteTime -> GeneralResult
MessageCalendar :: MessageCalendar -> GeneralResult
MessageFileType :: MessageFileType -> GeneralResult
MessageLink :: MessageLink -> GeneralResult
MessageLinkInfo :: MessageLinkInfo -> GeneralResult
MessagePositions :: MessagePositions -> GeneralResult
MessageReadDate :: MessageReadDate -> GeneralResult
MessageSenders :: MessageSenders -> GeneralResult
MessageStatistics :: MessageStatistics -> GeneralResult
MessageThreadInfo :: MessageThreadInfo -> GeneralResult
MessageViewers :: MessageViewers -> GeneralResult
Messages :: Messages -> GeneralResult
NetworkStatistics :: NetworkStatistics -> GeneralResult
NewChatPrivacySettings :: NewChatPrivacySettings -> GeneralResult
NotificationSound :: NotificationSound -> GeneralResult
NotificationSounds :: NotificationSounds -> GeneralResult
Ok :: Ok -> GeneralResult
OptionValue :: OptionValue -> GeneralResult
OrderInfo :: OrderInfo -> GeneralResult
PassportAuthorizationForm :: PassportAuthorizationForm -> GeneralResult
PassportElement :: PassportElement -> GeneralResult
PassportElements :: PassportElements -> GeneralResult
PassportElementsWithErrors :: PassportElementsWithErrors -> GeneralResult
PasswordState :: PasswordState -> GeneralResult
PaymentForm :: PaymentForm -> GeneralResult
PaymentReceipt :: PaymentReceipt -> GeneralResult
PaymentResult :: PaymentResult -> GeneralResult
PhoneNumberInfo :: PhoneNumberInfo -> GeneralResult
PremiumFeatures :: PremiumFeatures -> GeneralResult
PremiumGiftCodeInfo :: PremiumGiftCodeInfo -> GeneralResult
PremiumGiftCodePaymentOptions :: PremiumGiftCodePaymentOptions -> GeneralResult
PremiumGiveawayInfo :: PremiumGiveawayInfo -> GeneralResult
PremiumLimit :: PremiumLimit -> GeneralResult
PremiumState :: PremiumState -> GeneralResult
Proxies :: Proxies -> GeneralResult
Proxy :: Proxy -> GeneralResult
PublicForwards :: PublicForwards -> GeneralResult
PushReceiverId :: PushReceiverId -> GeneralResult
QuickReplyMessage :: QuickReplyMessage -> GeneralResult
QuickReplyMessages :: QuickReplyMessages -> GeneralResult
ReadDatePrivacySettings :: ReadDatePrivacySettings -> GeneralResult
RecommendedChatFolders :: RecommendedChatFolders -> GeneralResult
RecoveryEmailAddress :: RecoveryEmailAddress -> GeneralResult
ReportChatSponsoredMessageResult :: ReportChatSponsoredMessageResult -> GeneralResult
ResetPasswordResult :: ResetPasswordResult -> GeneralResult
RtmpUrl :: RtmpUrl -> GeneralResult
SavedMessagesTags :: SavedMessagesTags -> GeneralResult
ScopeNotificationSettings :: ScopeNotificationSettings -> GeneralResult
Seconds :: Seconds -> GeneralResult
SecretChat :: SecretChat -> GeneralResult
SentWebAppMessage :: SentWebAppMessage -> GeneralResult
Session :: Session -> GeneralResult
Sessions :: Sessions -> GeneralResult
SponsoredMessages :: SponsoredMessages -> GeneralResult
StatisticalGraph :: StatisticalGraph -> GeneralResult
Sticker :: Sticker -> GeneralResult
StickerSet :: StickerSet -> GeneralResult
StickerSets :: StickerSets -> GeneralResult
Stickers :: Stickers -> GeneralResult
StorageStatistics :: StorageStatistics -> GeneralResult
StorageStatisticsFast :: StorageStatisticsFast -> GeneralResult
Stories :: Stories -> GeneralResult
Story :: Story -> GeneralResult
StoryInteractions :: StoryInteractions -> GeneralResult
StoryStatistics :: StoryStatistics -> GeneralResult
Supergroup :: Supergroup -> GeneralResult
SupergroupFullInfo :: SupergroupFullInfo -> GeneralResult
TMeUrls :: TMeUrls -> GeneralResult
TemporaryPasswordState :: TemporaryPasswordState -> GeneralResult
TestBytes :: TestBytes -> GeneralResult
TestInt :: TestInt -> GeneralResult
TestString :: TestString -> GeneralResult
TestVectorInt :: TestVectorInt -> GeneralResult
TestVectorIntObject :: TestVectorIntObject -> GeneralResult
TestVectorString :: TestVectorString -> GeneralResult
TestVectorStringObject :: TestVectorStringObject -> GeneralResult
Text :: Text -> GeneralResult
TextEntities :: TextEntities -> GeneralResult
TimeZones :: TimeZones -> GeneralResult
TrendingStickerSets :: TrendingStickerSets -> GeneralResult
Update :: Update -> GeneralResult
Updates :: Updates -> GeneralResult
User :: User -> GeneralResult
UserFullInfo :: UserFullInfo -> GeneralResult
UserLink :: UserLink -> GeneralResult
UserPrivacySettingRules :: UserPrivacySettingRules -> GeneralResult
UserSupportInfo :: UserSupportInfo -> GeneralResult
Users :: Users -> GeneralResult
ValidatedOrderInfo :: ValidatedOrderInfo -> GeneralResult
WebAppInfo :: WebAppInfo -> GeneralResult
WebPage :: WebPage -> GeneralResult
WebPageInstantView :: WebPageInstantView -> GeneralResult
instance GHC.Show.Show TD.GeneralResult.GeneralResult
instance GHC.Classes.Eq TD.GeneralResult.GeneralResult
instance TD.Lib.Internal.ShortShow TD.GeneralResult.GeneralResult
instance Data.Aeson.Types.FromJSON.FromJSON TD.GeneralResult.GeneralResult

module TD.Lib
create :: IO Client
send :: ToJSON a => Client -> a -> IO ()
sendWExtra :: ToJSON a => Client -> a -> IO Extra
receive :: Client -> IO (Maybe (GeneralResult, Maybe Extra))
destroy :: Client -> IO ()
type Client = Ptr ()
data Extra

-- | Show class alternative that hides unset and bytes values, multiline
--   text values are shown as single line
class ShortShow a
shortShow :: ShortShow a => a -> String

module TD.Query.AcceptCall

-- | Accepts an incoming call. Returns <a>Ok</a>
data AcceptCall
AcceptCall :: Maybe Int -> Maybe CallProtocol -> AcceptCall

-- | Call identifier
[call_id] :: AcceptCall -> Maybe Int

-- | The call protocols supported by the application
[protocol] :: AcceptCall -> Maybe CallProtocol
defaultAcceptCall :: AcceptCall
instance GHC.Show.Show TD.Query.AcceptCall.AcceptCall
instance GHC.Classes.Eq TD.Query.AcceptCall.AcceptCall
instance TD.Lib.Internal.ShortShow TD.Query.AcceptCall.AcceptCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AcceptCall.AcceptCall

module TD.Query.AcceptTermsOfService

-- | Accepts Telegram terms of services. Returns <a>Ok</a>
data AcceptTermsOfService
AcceptTermsOfService :: Maybe Text -> AcceptTermsOfService

-- | Terms of service identifier
[terms_of_service_id] :: AcceptTermsOfService -> Maybe Text
instance GHC.Show.Show TD.Query.AcceptTermsOfService.AcceptTermsOfService
instance GHC.Classes.Eq TD.Query.AcceptTermsOfService.AcceptTermsOfService
instance TD.Lib.Internal.ShortShow TD.Query.AcceptTermsOfService.AcceptTermsOfService
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AcceptTermsOfService.AcceptTermsOfService

module TD.Query.ActivateStoryStealthMode

-- | Activates stealth mode for stories, which hides all views of stories
--   from the current user in the last "story_stealth_mode_past_period"
--   seconds and for the next "story_stealth_mode_future_period" seconds;
--   for Telegram Premium users only. Returns <a>Ok</a>
data ActivateStoryStealthMode
ActivateStoryStealthMode :: ActivateStoryStealthMode
instance GHC.Show.Show TD.Query.ActivateStoryStealthMode.ActivateStoryStealthMode
instance GHC.Classes.Eq TD.Query.ActivateStoryStealthMode.ActivateStoryStealthMode
instance TD.Lib.Internal.ShortShow TD.Query.ActivateStoryStealthMode.ActivateStoryStealthMode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ActivateStoryStealthMode.ActivateStoryStealthMode

module TD.Query.AddChatFolderByInviteLink

-- | Adds a chat folder by an invite link. Returns <a>Ok</a>
data AddChatFolderByInviteLink
AddChatFolderByInviteLink :: Maybe Text -> Maybe [Int] -> AddChatFolderByInviteLink

-- | Invite link for the chat folder
[invite_link] :: AddChatFolderByInviteLink -> Maybe Text

-- | Identifiers of the chats added to the chat folder. The chats are
--   automatically joined if they aren't joined yet
[chat_ids] :: AddChatFolderByInviteLink -> Maybe [Int]
defaultAddChatFolderByInviteLink :: AddChatFolderByInviteLink
instance GHC.Show.Show TD.Query.AddChatFolderByInviteLink.AddChatFolderByInviteLink
instance GHC.Classes.Eq TD.Query.AddChatFolderByInviteLink.AddChatFolderByInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.AddChatFolderByInviteLink.AddChatFolderByInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatFolderByInviteLink.AddChatFolderByInviteLink

module TD.Query.AddChatMember

-- | Adds a new member to a chat; requires can_invite_users member right.
--   Members can't be added to private or secret chats. Returns information
--   about members that weren't added. Returns <a>FailedToAddMembers</a>
data AddChatMember
AddChatMember :: Maybe Int -> Maybe Int -> Maybe Int -> AddChatMember

-- | Chat identifier
[chat_id] :: AddChatMember -> Maybe Int

-- | Identifier of the user
[user_id] :: AddChatMember -> Maybe Int

-- | The number of earlier messages from the chat to be forwarded to the
--   new member; up to 100. Ignored for supergroups and channels, or if the
--   added user is a bot
[forward_limit] :: AddChatMember -> Maybe Int
defaultAddChatMember :: AddChatMember
instance GHC.Show.Show TD.Query.AddChatMember.AddChatMember
instance GHC.Classes.Eq TD.Query.AddChatMember.AddChatMember
instance TD.Lib.Internal.ShortShow TD.Query.AddChatMember.AddChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatMember.AddChatMember

module TD.Query.AddChatMembers

-- | Adds multiple new members to a chat; requires can_invite_users member
--   right. Currently, this method is only available for supergroups and
--   channels. This method can't be used to join a chat. Members can't be
--   added to a channel if it has more than 200 members. Returns
--   information about members that weren't added. Returns
--   <a>FailedToAddMembers</a>
data AddChatMembers
AddChatMembers :: Maybe Int -> Maybe [Int] -> AddChatMembers

-- | Chat identifier
[chat_id] :: AddChatMembers -> Maybe Int

-- | Identifiers of the users to be added to the chat. The maximum number
--   of added users is 20 for supergroups and 100 for channels
[user_ids] :: AddChatMembers -> Maybe [Int]
defaultAddChatMembers :: AddChatMembers
instance GHC.Show.Show TD.Query.AddChatMembers.AddChatMembers
instance GHC.Classes.Eq TD.Query.AddChatMembers.AddChatMembers
instance TD.Lib.Internal.ShortShow TD.Query.AddChatMembers.AddChatMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatMembers.AddChatMembers

module TD.Query.AddChatToList

-- | Adds a chat to a chat list. A chat can't be simultaneously in Main and
--   Archive chat lists, so it is automatically removed from another one if
--   needed. Returns <a>Ok</a>
data AddChatToList
AddChatToList :: Maybe Int -> Maybe ChatList -> AddChatToList

-- | Chat identifier
[chat_id] :: AddChatToList -> Maybe Int

-- | The chat list. Use getChatListsToAddChat to get suitable chat lists
[chat_list] :: AddChatToList -> Maybe ChatList
defaultAddChatToList :: AddChatToList
instance GHC.Show.Show TD.Query.AddChatToList.AddChatToList
instance GHC.Classes.Eq TD.Query.AddChatToList.AddChatToList
instance TD.Lib.Internal.ShortShow TD.Query.AddChatToList.AddChatToList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddChatToList.AddChatToList

module TD.Query.AddContact

-- | Adds a user to the contact list or edits an existing contact by their
--   user identifier. Returns <a>Ok</a>
data AddContact
AddContact :: Maybe Contact -> Maybe Bool -> AddContact

-- | The contact to add or edit; phone number may be empty and needs to be
--   specified only if known, vCard is ignored
[contact] :: AddContact -> Maybe Contact

-- | Pass true to share the current user's phone number with the new
--   contact. A corresponding rule to userPrivacySettingShowPhoneNumber
--   will be added if needed. Use the field
--   userFullInfo.need_phone_number_privacy_exception to check whether the
--   current user needs to be asked to share their phone number
[share_phone_number] :: AddContact -> Maybe Bool
defaultAddContact :: AddContact
instance GHC.Show.Show TD.Query.AddContact.AddContact
instance GHC.Classes.Eq TD.Query.AddContact.AddContact
instance TD.Lib.Internal.ShortShow TD.Query.AddContact.AddContact
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddContact.AddContact

module TD.Query.AddCustomServerLanguagePack

-- | Adds a custom server language pack to the list of installed language
--   packs in current localization target. Can be called before
--   authorization. Returns <a>Ok</a>
data AddCustomServerLanguagePack
AddCustomServerLanguagePack :: Maybe Text -> AddCustomServerLanguagePack

-- | Identifier of a language pack to be added
[language_pack_id] :: AddCustomServerLanguagePack -> Maybe Text
instance GHC.Show.Show TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack
instance GHC.Classes.Eq TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack
instance TD.Lib.Internal.ShortShow TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddCustomServerLanguagePack.AddCustomServerLanguagePack

module TD.Query.AddFavoriteSticker

-- | Adds a new sticker to the list of favorite stickers. The new sticker
--   is added to the top of the list. If the sticker was already in the
--   list, it is removed from the list first. Only stickers belonging to a
--   sticker set or in WEBP or WEBM format can be added to this list. Emoji
--   stickers can't be added to favorite stickers. Returns <a>Ok</a>
data AddFavoriteSticker
AddFavoriteSticker :: Maybe InputFile -> AddFavoriteSticker

-- | Sticker file to add
[sticker] :: AddFavoriteSticker -> Maybe InputFile
instance GHC.Show.Show TD.Query.AddFavoriteSticker.AddFavoriteSticker
instance GHC.Classes.Eq TD.Query.AddFavoriteSticker.AddFavoriteSticker
instance TD.Lib.Internal.ShortShow TD.Query.AddFavoriteSticker.AddFavoriteSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddFavoriteSticker.AddFavoriteSticker

module TD.Query.AddFileToDownloads

-- | Adds a file from a message to the list of file downloads. Download
--   progress and completion of the download will be notified through
--   updateFile updates. If message database is used, the list of file
--   downloads is persistent across application restarts. The downloading
--   is independent of download using downloadFile, i.e. it continues if
--   downloadFile is canceled or is used to download a part of the file.
--   Returns <a>File</a>
data AddFileToDownloads
AddFileToDownloads :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> AddFileToDownloads

-- | Identifier of the file to download
[file_id] :: AddFileToDownloads -> Maybe Int

-- | Chat identifier of the message with the file
[chat_id] :: AddFileToDownloads -> Maybe Int

-- | Message identifier
[message_id] :: AddFileToDownloads -> Maybe Int

-- | Priority of the download (1-32). The higher the priority, the earlier
--   the file will be downloaded. If the priorities of two files are equal,
--   then the last one for which downloadFile/addFileToDownloads was called
--   will be downloaded first
[priority] :: AddFileToDownloads -> Maybe Int
defaultAddFileToDownloads :: AddFileToDownloads
instance GHC.Show.Show TD.Query.AddFileToDownloads.AddFileToDownloads
instance GHC.Classes.Eq TD.Query.AddFileToDownloads.AddFileToDownloads
instance TD.Lib.Internal.ShortShow TD.Query.AddFileToDownloads.AddFileToDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddFileToDownloads.AddFileToDownloads

module TD.Query.AddLocalMessage

-- | Adds a local message to a chat. The message is persistent across
--   application restarts only if the message database is used. Returns the
--   added message. Returns <a>Message</a>
data AddLocalMessage
AddLocalMessage :: Maybe Int -> Maybe MessageSender -> Maybe InputMessageReplyTo -> Maybe Bool -> Maybe InputMessageContent -> AddLocalMessage

-- | Target chat
[chat_id] :: AddLocalMessage -> Maybe Int

-- | Identifier of the sender of the message
[sender_id] :: AddLocalMessage -> Maybe MessageSender

-- | Information about the message or story to be replied; pass null if
--   none
[reply_to] :: AddLocalMessage -> Maybe InputMessageReplyTo

-- | Pass true to disable notification for the message
[disable_notification] :: AddLocalMessage -> Maybe Bool

-- | The content of the message to be added
[input_message_content] :: AddLocalMessage -> Maybe InputMessageContent
defaultAddLocalMessage :: AddLocalMessage
instance GHC.Show.Show TD.Query.AddLocalMessage.AddLocalMessage
instance GHC.Classes.Eq TD.Query.AddLocalMessage.AddLocalMessage
instance TD.Lib.Internal.ShortShow TD.Query.AddLocalMessage.AddLocalMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddLocalMessage.AddLocalMessage

module TD.Query.AddLogMessage

-- | Adds a message to TDLib internal log. Can be called synchronously.
--   Returns <a>Ok</a>
data AddLogMessage
AddLogMessage :: Maybe Int -> Maybe Text -> AddLogMessage

-- | The minimum verbosity level needed for the message to be logged;
--   0-1023
[verbosity_level] :: AddLogMessage -> Maybe Int

-- | Text of a message to log
[text] :: AddLogMessage -> Maybe Text
defaultAddLogMessage :: AddLogMessage
instance GHC.Show.Show TD.Query.AddLogMessage.AddLogMessage
instance GHC.Classes.Eq TD.Query.AddLogMessage.AddLogMessage
instance TD.Lib.Internal.ShortShow TD.Query.AddLogMessage.AddLogMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddLogMessage.AddLogMessage

module TD.Query.AddMessageReaction

-- | Adds a reaction or a tag to a message. Use
--   getMessageAvailableReactions to receive the list of available
--   reactions for the message. Returns <a>Ok</a>
data AddMessageReaction
AddMessageReaction :: Maybe Int -> Maybe Int -> Maybe ReactionType -> Maybe Bool -> Maybe Bool -> AddMessageReaction

-- | Identifier of the chat to which the message belongs
[chat_id] :: AddMessageReaction -> Maybe Int

-- | Identifier of the message
[message_id] :: AddMessageReaction -> Maybe Int

-- | Type of the reaction to add
[reaction_type] :: AddMessageReaction -> Maybe ReactionType

-- | Pass true if the reaction is added with a big animation
[is_big] :: AddMessageReaction -> Maybe Bool

-- | Pass true if the reaction needs to be added to recent reactions; tags
--   are never added to the list of recent reactions
[update_recent_reactions] :: AddMessageReaction -> Maybe Bool
defaultAddMessageReaction :: AddMessageReaction
instance GHC.Show.Show TD.Query.AddMessageReaction.AddMessageReaction
instance GHC.Classes.Eq TD.Query.AddMessageReaction.AddMessageReaction
instance TD.Lib.Internal.ShortShow TD.Query.AddMessageReaction.AddMessageReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddMessageReaction.AddMessageReaction

module TD.Query.AddNetworkStatistics

-- | Adds the specified data to data usage statistics. Can be called before
--   authorization. Returns <a>Ok</a>
data AddNetworkStatistics
AddNetworkStatistics :: Maybe NetworkStatisticsEntry -> AddNetworkStatistics

-- | The network statistics entry with the data to be added to statistics
[entry] :: AddNetworkStatistics -> Maybe NetworkStatisticsEntry
instance GHC.Show.Show TD.Query.AddNetworkStatistics.AddNetworkStatistics
instance GHC.Classes.Eq TD.Query.AddNetworkStatistics.AddNetworkStatistics
instance TD.Lib.Internal.ShortShow TD.Query.AddNetworkStatistics.AddNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddNetworkStatistics.AddNetworkStatistics

module TD.Query.AddProxy

-- | Adds a proxy server for network requests. Can be called before
--   authorization. Returns <a>Proxy</a>
data AddProxy
AddProxy :: Maybe Text -> Maybe Int -> Maybe Bool -> Maybe ProxyType -> AddProxy

-- | Proxy server domain or IP address
[server] :: AddProxy -> Maybe Text

-- | Proxy server port
[port] :: AddProxy -> Maybe Int

-- | Pass true to immediately enable the proxy
[enable] :: AddProxy -> Maybe Bool

-- | Proxy type
[_type] :: AddProxy -> Maybe ProxyType
defaultAddProxy :: AddProxy
instance GHC.Show.Show TD.Query.AddProxy.AddProxy
instance GHC.Classes.Eq TD.Query.AddProxy.AddProxy
instance TD.Lib.Internal.ShortShow TD.Query.AddProxy.AddProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddProxy.AddProxy

module TD.Query.AddQuickReplyShortcutInlineQueryResultMessage

-- | Adds a message to a quick reply shortcut via inline bot. If shortcut
--   doesn't exist and there are less than
--   getOption("quick_reply_shortcut_count_max") shortcuts, then a new
--   shortcut is created. The shortcut must not contain more than
--   getOption("quick_reply_shortcut_message_count_max") messages after
--   adding the new message. Returns the added message. Returns
--   <a>QuickReplyMessage</a>
data AddQuickReplyShortcutInlineQueryResultMessage
AddQuickReplyShortcutInlineQueryResultMessage :: Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> AddQuickReplyShortcutInlineQueryResultMessage

-- | Name of the target shortcut
[shortcut_name] :: AddQuickReplyShortcutInlineQueryResultMessage -> Maybe Text

-- | Identifier of a quick reply message in the same shortcut to be
--   replied; pass 0 if none
[reply_to_message_id] :: AddQuickReplyShortcutInlineQueryResultMessage -> Maybe Int

-- | Identifier of the inline query
[query_id] :: AddQuickReplyShortcutInlineQueryResultMessage -> Maybe Int

-- | Identifier of the inline query result
[result_id] :: AddQuickReplyShortcutInlineQueryResultMessage -> Maybe Text

-- | Pass true to hide the bot, via which the message is sent. Can be used
--   only for bots getOption("animation_search_bot_username"),
--   getOption("photo_search_bot_username"), and
--   getOption("venue_search_bot_username")
[hide_via_bot] :: AddQuickReplyShortcutInlineQueryResultMessage -> Maybe Bool
defaultAddQuickReplyShortcutInlineQueryResultMessage :: AddQuickReplyShortcutInlineQueryResultMessage
instance GHC.Show.Show TD.Query.AddQuickReplyShortcutInlineQueryResultMessage.AddQuickReplyShortcutInlineQueryResultMessage
instance GHC.Classes.Eq TD.Query.AddQuickReplyShortcutInlineQueryResultMessage.AddQuickReplyShortcutInlineQueryResultMessage
instance TD.Lib.Internal.ShortShow TD.Query.AddQuickReplyShortcutInlineQueryResultMessage.AddQuickReplyShortcutInlineQueryResultMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddQuickReplyShortcutInlineQueryResultMessage.AddQuickReplyShortcutInlineQueryResultMessage

module TD.Query.AddQuickReplyShortcutMessage

-- | Adds a message to a quick reply shortcut. If shortcut doesn't exist
--   and there are less than getOption("quick_reply_shortcut_count_max")
--   shortcuts, then a new shortcut is created. The shortcut must not
--   contain more than getOption("quick_reply_shortcut_message_count_max")
--   messages after adding the new message. Returns the added message.
--   Returns <a>QuickReplyMessage</a>
data AddQuickReplyShortcutMessage
AddQuickReplyShortcutMessage :: Maybe Text -> Maybe Int -> Maybe InputMessageContent -> AddQuickReplyShortcutMessage

-- | Name of the target shortcut
[shortcut_name] :: AddQuickReplyShortcutMessage -> Maybe Text

-- | Identifier of a quick reply message in the same shortcut to be
--   replied; pass 0 if none
[reply_to_message_id] :: AddQuickReplyShortcutMessage -> Maybe Int

-- | The content of the message to be added; inputMessagePoll,
--   inputMessageForwarded and inputMessageLocation with live_period aren't
--   supported
[input_message_content] :: AddQuickReplyShortcutMessage -> Maybe InputMessageContent
defaultAddQuickReplyShortcutMessage :: AddQuickReplyShortcutMessage
instance GHC.Show.Show TD.Query.AddQuickReplyShortcutMessage.AddQuickReplyShortcutMessage
instance GHC.Classes.Eq TD.Query.AddQuickReplyShortcutMessage.AddQuickReplyShortcutMessage
instance TD.Lib.Internal.ShortShow TD.Query.AddQuickReplyShortcutMessage.AddQuickReplyShortcutMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddQuickReplyShortcutMessage.AddQuickReplyShortcutMessage

module TD.Query.AddQuickReplyShortcutMessageAlbum

-- | Adds 2-10 messages grouped together into an album to a quick reply
--   shortcut. Currently, only audio, document, photo and video messages
--   can be grouped into an album. Documents and audio files can be only
--   grouped in an album with messages of the same type. Returns sent
--   messages. Returns <a>QuickReplyMessages</a>
data AddQuickReplyShortcutMessageAlbum
AddQuickReplyShortcutMessageAlbum :: Maybe Text -> Maybe Int -> Maybe [InputMessageContent] -> AddQuickReplyShortcutMessageAlbum

-- | Name of the target shortcut
[shortcut_name] :: AddQuickReplyShortcutMessageAlbum -> Maybe Text

-- | Identifier of a quick reply message in the same shortcut to be
--   replied; pass 0 if none
[reply_to_message_id] :: AddQuickReplyShortcutMessageAlbum -> Maybe Int

-- | Contents of messages to be sent. At most 10 messages can be added to
--   an album
[input_message_contents] :: AddQuickReplyShortcutMessageAlbum -> Maybe [InputMessageContent]
defaultAddQuickReplyShortcutMessageAlbum :: AddQuickReplyShortcutMessageAlbum
instance GHC.Show.Show TD.Query.AddQuickReplyShortcutMessageAlbum.AddQuickReplyShortcutMessageAlbum
instance GHC.Classes.Eq TD.Query.AddQuickReplyShortcutMessageAlbum.AddQuickReplyShortcutMessageAlbum
instance TD.Lib.Internal.ShortShow TD.Query.AddQuickReplyShortcutMessageAlbum.AddQuickReplyShortcutMessageAlbum
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddQuickReplyShortcutMessageAlbum.AddQuickReplyShortcutMessageAlbum

module TD.Query.AddRecentSticker

-- | Manually adds a new sticker to the list of recently used stickers. The
--   new sticker is added to the top of the list. If the sticker was
--   already in the list, it is removed from the list first. Only stickers
--   belonging to a sticker set or in WEBP or WEBM format can be added to
--   this list. Emoji stickers can't be added to recent stickers. Returns
--   <a>Stickers</a>
data AddRecentSticker
AddRecentSticker :: Maybe Bool -> Maybe InputFile -> AddRecentSticker

-- | Pass true to add the sticker to the list of stickers recently attached
--   to photo or video files; pass false to add the sticker to the list of
--   recently sent stickers
[is_attached] :: AddRecentSticker -> Maybe Bool

-- | Sticker file to add
[sticker] :: AddRecentSticker -> Maybe InputFile
defaultAddRecentSticker :: AddRecentSticker
instance GHC.Show.Show TD.Query.AddRecentSticker.AddRecentSticker
instance GHC.Classes.Eq TD.Query.AddRecentSticker.AddRecentSticker
instance TD.Lib.Internal.ShortShow TD.Query.AddRecentSticker.AddRecentSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddRecentSticker.AddRecentSticker

module TD.Query.AddRecentlyFoundChat

-- | Adds a chat to the list of recently found chats. The chat is added to
--   the beginning of the list. If the chat is already in the list, it will
--   be removed from the list first. Returns <a>Ok</a>
data AddRecentlyFoundChat
AddRecentlyFoundChat :: Maybe Int -> AddRecentlyFoundChat

-- | Identifier of the chat to add
[chat_id] :: AddRecentlyFoundChat -> Maybe Int
instance GHC.Show.Show TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat
instance GHC.Classes.Eq TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat
instance TD.Lib.Internal.ShortShow TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddRecentlyFoundChat.AddRecentlyFoundChat

module TD.Query.AddSavedAnimation

-- | Manually adds a new animation to the list of saved animations. The new
--   animation is added to the beginning of the list. If the animation was
--   already in the list, it is removed first. Only non-secret video
--   animations with MIME type "video/mp4" can be added to the list.
--   Returns <a>Ok</a>
data AddSavedAnimation
AddSavedAnimation :: Maybe InputFile -> AddSavedAnimation

-- | The animation file to be added. Only animations known to the server
--   (i.e., successfully sent via a message) can be added to the list
[animation] :: AddSavedAnimation -> Maybe InputFile
instance GHC.Show.Show TD.Query.AddSavedAnimation.AddSavedAnimation
instance GHC.Classes.Eq TD.Query.AddSavedAnimation.AddSavedAnimation
instance TD.Lib.Internal.ShortShow TD.Query.AddSavedAnimation.AddSavedAnimation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddSavedAnimation.AddSavedAnimation

module TD.Query.AddSavedNotificationSound

-- | Adds a new notification sound to the list of saved notification
--   sounds. The new notification sound is added to the top of the list. If
--   it is already in the list, its position isn't changed. Returns
--   <a>NotificationSound</a>
data AddSavedNotificationSound
AddSavedNotificationSound :: Maybe InputFile -> AddSavedNotificationSound

-- | Notification sound file to add
[sound] :: AddSavedNotificationSound -> Maybe InputFile
instance GHC.Show.Show TD.Query.AddSavedNotificationSound.AddSavedNotificationSound
instance GHC.Classes.Eq TD.Query.AddSavedNotificationSound.AddSavedNotificationSound
instance TD.Lib.Internal.ShortShow TD.Query.AddSavedNotificationSound.AddSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddSavedNotificationSound.AddSavedNotificationSound

module TD.Query.AddStickerToSet

-- | Adds a new sticker to a set. Returns <a>Ok</a>
data AddStickerToSet
AddStickerToSet :: Maybe Int -> Maybe Text -> Maybe InputSticker -> AddStickerToSet

-- | Sticker set owner; ignored for regular users
[user_id] :: AddStickerToSet -> Maybe Int

-- | Sticker set name. The sticker set must be owned by the current user,
--   and contain less than 200 stickers for custom emoji sticker sets and
--   less than 120 otherwise
[name] :: AddStickerToSet -> Maybe Text

-- | Sticker to add to the set
[sticker] :: AddStickerToSet -> Maybe InputSticker
defaultAddStickerToSet :: AddStickerToSet
instance GHC.Show.Show TD.Query.AddStickerToSet.AddStickerToSet
instance GHC.Classes.Eq TD.Query.AddStickerToSet.AddStickerToSet
instance TD.Lib.Internal.ShortShow TD.Query.AddStickerToSet.AddStickerToSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AddStickerToSet.AddStickerToSet

module TD.Query.AllowBotToSendMessages

-- | Allows the specified bot to send messages to the user. Returns
--   <a>Ok</a>
data AllowBotToSendMessages
AllowBotToSendMessages :: Maybe Int -> AllowBotToSendMessages

-- | Identifier of the target bot
[bot_user_id] :: AllowBotToSendMessages -> Maybe Int
instance GHC.Show.Show TD.Query.AllowBotToSendMessages.AllowBotToSendMessages
instance GHC.Classes.Eq TD.Query.AllowBotToSendMessages.AllowBotToSendMessages
instance TD.Lib.Internal.ShortShow TD.Query.AllowBotToSendMessages.AllowBotToSendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AllowBotToSendMessages.AllowBotToSendMessages

module TD.Query.AnswerCallbackQuery

-- | Sets the result of a callback query; for bots only. Returns <a>Ok</a>
data AnswerCallbackQuery
AnswerCallbackQuery :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> AnswerCallbackQuery

-- | Identifier of the callback query
[callback_query_id] :: AnswerCallbackQuery -> Maybe Int

-- | Text of the answer
[text] :: AnswerCallbackQuery -> Maybe Text

-- | Pass true to show an alert to the user instead of a toast notification
[show_alert] :: AnswerCallbackQuery -> Maybe Bool

-- | URL to be opened
[url] :: AnswerCallbackQuery -> Maybe Text

-- | Time during which the result of the query can be cached, in seconds
[cache_time] :: AnswerCallbackQuery -> Maybe Int
defaultAnswerCallbackQuery :: AnswerCallbackQuery
instance GHC.Show.Show TD.Query.AnswerCallbackQuery.AnswerCallbackQuery
instance GHC.Classes.Eq TD.Query.AnswerCallbackQuery.AnswerCallbackQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerCallbackQuery.AnswerCallbackQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerCallbackQuery.AnswerCallbackQuery

module TD.Query.AnswerCustomQuery

-- | Answers a custom query; for bots only. Returns <a>Ok</a>
data AnswerCustomQuery
AnswerCustomQuery :: Maybe Int -> Maybe Text -> AnswerCustomQuery

-- | Identifier of a custom query
[custom_query_id] :: AnswerCustomQuery -> Maybe Int

-- | JSON-serialized answer to the query
[_data] :: AnswerCustomQuery -> Maybe Text
defaultAnswerCustomQuery :: AnswerCustomQuery
instance GHC.Show.Show TD.Query.AnswerCustomQuery.AnswerCustomQuery
instance GHC.Classes.Eq TD.Query.AnswerCustomQuery.AnswerCustomQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerCustomQuery.AnswerCustomQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerCustomQuery.AnswerCustomQuery

module TD.Query.AnswerInlineQuery

-- | Sets the result of an inline query; for bots only. Returns <a>Ok</a>
data AnswerInlineQuery
AnswerInlineQuery :: Maybe Int -> Maybe Bool -> Maybe InlineQueryResultsButton -> Maybe [InputInlineQueryResult] -> Maybe Int -> Maybe Text -> AnswerInlineQuery

-- | Identifier of the inline query
[inline_query_id] :: AnswerInlineQuery -> Maybe Int

-- | Pass true if results may be cached and returned only for the user that
--   sent the query. By default, results may be returned to any user who
--   sends the same query
[is_personal] :: AnswerInlineQuery -> Maybe Bool

-- | Button to be shown above inline query results; pass null if none
[button] :: AnswerInlineQuery -> Maybe InlineQueryResultsButton

-- | The results of the query
[results] :: AnswerInlineQuery -> Maybe [InputInlineQueryResult]

-- | Allowed time to cache the results of the query, in seconds
[cache_time] :: AnswerInlineQuery -> Maybe Int

-- | Offset for the next inline query; pass an empty string if there are no
--   more results
[next_offset] :: AnswerInlineQuery -> Maybe Text
defaultAnswerInlineQuery :: AnswerInlineQuery
instance GHC.Show.Show TD.Query.AnswerInlineQuery.AnswerInlineQuery
instance GHC.Classes.Eq TD.Query.AnswerInlineQuery.AnswerInlineQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerInlineQuery.AnswerInlineQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerInlineQuery.AnswerInlineQuery

module TD.Query.AnswerPreCheckoutQuery

-- | Sets the result of a pre-checkout query; for bots only. Returns
--   <a>Ok</a>
data AnswerPreCheckoutQuery
AnswerPreCheckoutQuery :: Maybe Int -> Maybe Text -> AnswerPreCheckoutQuery

-- | Identifier of the pre-checkout query
[pre_checkout_query_id] :: AnswerPreCheckoutQuery -> Maybe Int

-- | An error message, empty on success
[error_message] :: AnswerPreCheckoutQuery -> Maybe Text
defaultAnswerPreCheckoutQuery :: AnswerPreCheckoutQuery
instance GHC.Show.Show TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery
instance GHC.Classes.Eq TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerPreCheckoutQuery.AnswerPreCheckoutQuery

module TD.Query.AnswerShippingQuery

-- | Sets the result of a shipping query; for bots only. Returns <a>Ok</a>
data AnswerShippingQuery
AnswerShippingQuery :: Maybe Int -> Maybe [ShippingOption] -> Maybe Text -> AnswerShippingQuery

-- | Identifier of the shipping query
[shipping_query_id] :: AnswerShippingQuery -> Maybe Int

-- | Available shipping options
[shipping_options] :: AnswerShippingQuery -> Maybe [ShippingOption]

-- | An error message, empty on success
[error_message] :: AnswerShippingQuery -> Maybe Text
defaultAnswerShippingQuery :: AnswerShippingQuery
instance GHC.Show.Show TD.Query.AnswerShippingQuery.AnswerShippingQuery
instance GHC.Classes.Eq TD.Query.AnswerShippingQuery.AnswerShippingQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerShippingQuery.AnswerShippingQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerShippingQuery.AnswerShippingQuery

module TD.Query.AnswerWebAppQuery

-- | Sets the result of interaction with a Web App and sends corresponding
--   message on behalf of the user to the chat from which the query
--   originated; for bots only. Returns <a>SentWebAppMessage</a>
data AnswerWebAppQuery
AnswerWebAppQuery :: Maybe Text -> Maybe InputInlineQueryResult -> AnswerWebAppQuery

-- | Identifier of the Web App query
[web_app_query_id] :: AnswerWebAppQuery -> Maybe Text

-- | The result of the query
[result] :: AnswerWebAppQuery -> Maybe InputInlineQueryResult
defaultAnswerWebAppQuery :: AnswerWebAppQuery
instance GHC.Show.Show TD.Query.AnswerWebAppQuery.AnswerWebAppQuery
instance GHC.Classes.Eq TD.Query.AnswerWebAppQuery.AnswerWebAppQuery
instance TD.Lib.Internal.ShortShow TD.Query.AnswerWebAppQuery.AnswerWebAppQuery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AnswerWebAppQuery.AnswerWebAppQuery

module TD.Query.ApplyPremiumGiftCode

-- | Applies a Telegram Premium gift code. Returns <a>Ok</a>
data ApplyPremiumGiftCode
ApplyPremiumGiftCode :: Maybe Text -> ApplyPremiumGiftCode

-- | The code to apply
[code] :: ApplyPremiumGiftCode -> Maybe Text
instance GHC.Show.Show TD.Query.ApplyPremiumGiftCode.ApplyPremiumGiftCode
instance GHC.Classes.Eq TD.Query.ApplyPremiumGiftCode.ApplyPremiumGiftCode
instance TD.Lib.Internal.ShortShow TD.Query.ApplyPremiumGiftCode.ApplyPremiumGiftCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ApplyPremiumGiftCode.ApplyPremiumGiftCode

module TD.Query.AssignAppStoreTransaction

-- | Informs server about a purchase through App Store. For official
--   applications only. Returns <a>Ok</a>
data AssignAppStoreTransaction
AssignAppStoreTransaction :: Maybe ByteString -> Maybe StorePaymentPurpose -> AssignAppStoreTransaction

-- | App Store receipt
[receipt] :: AssignAppStoreTransaction -> Maybe ByteString

-- | Transaction purpose
[purpose] :: AssignAppStoreTransaction -> Maybe StorePaymentPurpose
defaultAssignAppStoreTransaction :: AssignAppStoreTransaction
instance GHC.Show.Show TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction
instance GHC.Classes.Eq TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction
instance TD.Lib.Internal.ShortShow TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AssignAppStoreTransaction.AssignAppStoreTransaction

module TD.Query.AssignGooglePlayTransaction

-- | Informs server about a purchase through Google Play. For official
--   applications only. Returns <a>Ok</a>
data AssignGooglePlayTransaction
AssignGooglePlayTransaction :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe StorePaymentPurpose -> AssignGooglePlayTransaction

-- | Application package name
[package_name] :: AssignGooglePlayTransaction -> Maybe Text

-- | Identifier of the purchased store product
[store_product_id] :: AssignGooglePlayTransaction -> Maybe Text

-- | Google Play purchase token
[purchase_token] :: AssignGooglePlayTransaction -> Maybe Text

-- | Transaction purpose
[purpose] :: AssignGooglePlayTransaction -> Maybe StorePaymentPurpose
defaultAssignGooglePlayTransaction :: AssignGooglePlayTransaction
instance GHC.Show.Show TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction
instance GHC.Classes.Eq TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction
instance TD.Lib.Internal.ShortShow TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.AssignGooglePlayTransaction.AssignGooglePlayTransaction

module TD.Query.BanChatMember

-- | Bans a member in a chat; requires can_restrict_members administrator
--   right. Members can't be banned in private or secret chats. In
--   supergroups and channels, the user will not be able to return to the
--   group on their own using invite links, etc., unless unbanned first.
--   Returns <a>Ok</a>
data BanChatMember
BanChatMember :: Maybe Int -> Maybe MessageSender -> Maybe Int -> Maybe Bool -> BanChatMember

-- | Chat identifier
[chat_id] :: BanChatMember -> Maybe Int

-- | Member identifier
[member_id] :: BanChatMember -> Maybe MessageSender

-- | Point in time (Unix timestamp) when the user will be unbanned; 0 if
--   never. If the user is banned for more than 366 days or for less than
--   30 seconds from the current time, the user is considered to be banned
--   forever. Ignored in basic groups and if a chat is banned
[banned_until_date] :: BanChatMember -> Maybe Int

-- | Pass true to delete all messages in the chat for the user that is
--   being removed. Always true for supergroups and channels
[revoke_messages] :: BanChatMember -> Maybe Bool
defaultBanChatMember :: BanChatMember
instance GHC.Show.Show TD.Query.BanChatMember.BanChatMember
instance GHC.Classes.Eq TD.Query.BanChatMember.BanChatMember
instance TD.Lib.Internal.ShortShow TD.Query.BanChatMember.BanChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.BanChatMember.BanChatMember

module TD.Query.BlockMessageSenderFromReplies

-- | Blocks an original sender of a message in the Replies chat. Returns
--   <a>Ok</a>
data BlockMessageSenderFromReplies
BlockMessageSenderFromReplies :: Maybe Int -> Maybe Bool -> Maybe Bool -> Maybe Bool -> BlockMessageSenderFromReplies

-- | The identifier of an incoming message in the Replies chat
[message_id] :: BlockMessageSenderFromReplies -> Maybe Int

-- | Pass true to delete the message
[delete_message] :: BlockMessageSenderFromReplies -> Maybe Bool

-- | Pass true to delete all messages from the same sender
[delete_all_messages] :: BlockMessageSenderFromReplies -> Maybe Bool

-- | Pass true to report the sender to the Telegram moderators
[report_spam] :: BlockMessageSenderFromReplies -> Maybe Bool
defaultBlockMessageSenderFromReplies :: BlockMessageSenderFromReplies
instance GHC.Show.Show TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies
instance GHC.Classes.Eq TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies
instance TD.Lib.Internal.ShortShow TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.BlockMessageSenderFromReplies.BlockMessageSenderFromReplies

module TD.Query.BoostChat

-- | Boosts a chat and returns the list of available chat boost slots for
--   the current user after the boost. Returns <a>ChatBoostSlots</a>
data BoostChat
BoostChat :: Maybe Int -> Maybe [Int] -> BoostChat

-- | Identifier of the chat
[chat_id] :: BoostChat -> Maybe Int

-- | Identifiers of boost slots of the current user from which to apply
--   boosts to the chat
[slot_ids] :: BoostChat -> Maybe [Int]
defaultBoostChat :: BoostChat
instance GHC.Show.Show TD.Query.BoostChat.BoostChat
instance GHC.Classes.Eq TD.Query.BoostChat.BoostChat
instance TD.Lib.Internal.ShortShow TD.Query.BoostChat.BoostChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.BoostChat.BoostChat

module TD.Query.CanBotSendMessages

-- | Checks whether the specified bot can send messages to the user.
--   Returns a 404 error if can't and the access can be granted by call to
--   allowBotToSendMessages. Returns <a>Ok</a>
data CanBotSendMessages
CanBotSendMessages :: Maybe Int -> CanBotSendMessages

-- | Identifier of the target bot
[bot_user_id] :: CanBotSendMessages -> Maybe Int
instance GHC.Show.Show TD.Query.CanBotSendMessages.CanBotSendMessages
instance GHC.Classes.Eq TD.Query.CanBotSendMessages.CanBotSendMessages
instance TD.Lib.Internal.ShortShow TD.Query.CanBotSendMessages.CanBotSendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanBotSendMessages.CanBotSendMessages

module TD.Query.CanPurchasePremium

-- | Checks whether Telegram Premium purchase is possible. Must be called
--   before in-store Premium purchase. Returns <a>Ok</a>
data CanPurchasePremium
CanPurchasePremium :: Maybe StorePaymentPurpose -> CanPurchasePremium

-- | Transaction purpose
[purpose] :: CanPurchasePremium -> Maybe StorePaymentPurpose
instance GHC.Show.Show TD.Query.CanPurchasePremium.CanPurchasePremium
instance GHC.Classes.Eq TD.Query.CanPurchasePremium.CanPurchasePremium
instance TD.Lib.Internal.ShortShow TD.Query.CanPurchasePremium.CanPurchasePremium
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanPurchasePremium.CanPurchasePremium

module TD.Query.CanSendMessageToUser

-- | Check whether the current user can message another user or try to
--   create a chat with them. Returns <a>CanSendMessageToUserResult</a>
data CanSendMessageToUser
CanSendMessageToUser :: Maybe Int -> Maybe Bool -> CanSendMessageToUser

-- | Identifier of the other user
[user_id] :: CanSendMessageToUser -> Maybe Int

-- | Pass true to get only locally available information without sending
--   network requests
[only_local] :: CanSendMessageToUser -> Maybe Bool
defaultCanSendMessageToUser :: CanSendMessageToUser
instance GHC.Show.Show TD.Query.CanSendMessageToUser.CanSendMessageToUser
instance GHC.Classes.Eq TD.Query.CanSendMessageToUser.CanSendMessageToUser
instance TD.Lib.Internal.ShortShow TD.Query.CanSendMessageToUser.CanSendMessageToUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanSendMessageToUser.CanSendMessageToUser

module TD.Query.CanSendStory

-- | Checks whether the current user can send a story on behalf of a chat;
--   requires can_post_stories right for supergroup and channel chats.
--   Returns <a>CanSendStoryResult</a>
data CanSendStory
CanSendStory :: Maybe Int -> CanSendStory

-- | Chat identifier
[chat_id] :: CanSendStory -> Maybe Int
instance GHC.Show.Show TD.Query.CanSendStory.CanSendStory
instance GHC.Classes.Eq TD.Query.CanSendStory.CanSendStory
instance TD.Lib.Internal.ShortShow TD.Query.CanSendStory.CanSendStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanSendStory.CanSendStory

module TD.Query.CanTransferOwnership

-- | Checks whether the current session can be used to transfer a chat
--   ownership to another user. Returns <a>CanTransferOwnershipResult</a>
data CanTransferOwnership
CanTransferOwnership :: CanTransferOwnership
instance GHC.Show.Show TD.Query.CanTransferOwnership.CanTransferOwnership
instance GHC.Classes.Eq TD.Query.CanTransferOwnership.CanTransferOwnership
instance TD.Lib.Internal.ShortShow TD.Query.CanTransferOwnership.CanTransferOwnership
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CanTransferOwnership.CanTransferOwnership

module TD.Query.CancelDownloadFile

-- | Stops the downloading of a file. If a file has already been
--   downloaded, does nothing. Returns <a>Ok</a>
data CancelDownloadFile
CancelDownloadFile :: Maybe Int -> Maybe Bool -> CancelDownloadFile

-- | Identifier of a file to stop downloading
[file_id] :: CancelDownloadFile -> Maybe Int

-- | Pass true to stop downloading only if it hasn't been started, i.e.
--   request hasn't been sent to server
[only_if_pending] :: CancelDownloadFile -> Maybe Bool
defaultCancelDownloadFile :: CancelDownloadFile
instance GHC.Show.Show TD.Query.CancelDownloadFile.CancelDownloadFile
instance GHC.Classes.Eq TD.Query.CancelDownloadFile.CancelDownloadFile
instance TD.Lib.Internal.ShortShow TD.Query.CancelDownloadFile.CancelDownloadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelDownloadFile.CancelDownloadFile

module TD.Query.CancelPasswordReset

-- | Cancels reset of 2-step verification password. The method can be
--   called if passwordState.pending_reset_date &gt; 0. Returns <a>Ok</a>
data CancelPasswordReset
CancelPasswordReset :: CancelPasswordReset
instance GHC.Show.Show TD.Query.CancelPasswordReset.CancelPasswordReset
instance GHC.Classes.Eq TD.Query.CancelPasswordReset.CancelPasswordReset
instance TD.Lib.Internal.ShortShow TD.Query.CancelPasswordReset.CancelPasswordReset
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelPasswordReset.CancelPasswordReset

module TD.Query.CancelPreliminaryUploadFile

-- | Stops the preliminary uploading of a file. Supported only for files
--   uploaded by using preliminaryUploadFile. For other files the behavior
--   is undefined. Returns <a>Ok</a>
data CancelPreliminaryUploadFile
CancelPreliminaryUploadFile :: Maybe Int -> CancelPreliminaryUploadFile

-- | Identifier of the file to stop uploading
[file_id] :: CancelPreliminaryUploadFile -> Maybe Int
instance GHC.Show.Show TD.Query.CancelPreliminaryUploadFile.CancelPreliminaryUploadFile
instance GHC.Classes.Eq TD.Query.CancelPreliminaryUploadFile.CancelPreliminaryUploadFile
instance TD.Lib.Internal.ShortShow TD.Query.CancelPreliminaryUploadFile.CancelPreliminaryUploadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelPreliminaryUploadFile.CancelPreliminaryUploadFile

module TD.Query.CancelRecoveryEmailAddressVerification

-- | Cancels verification of the 2-step verification recovery email
--   address. Returns <a>PasswordState</a>
data CancelRecoveryEmailAddressVerification
CancelRecoveryEmailAddressVerification :: CancelRecoveryEmailAddressVerification
instance GHC.Show.Show TD.Query.CancelRecoveryEmailAddressVerification.CancelRecoveryEmailAddressVerification
instance GHC.Classes.Eq TD.Query.CancelRecoveryEmailAddressVerification.CancelRecoveryEmailAddressVerification
instance TD.Lib.Internal.ShortShow TD.Query.CancelRecoveryEmailAddressVerification.CancelRecoveryEmailAddressVerification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CancelRecoveryEmailAddressVerification.CancelRecoveryEmailAddressVerification

module TD.Query.ChangeImportedContacts

-- | Changes imported contacts using the list of contacts saved on the
--   device. Imports newly added contacts and, if at least the file
--   database is enabled, deletes recently deleted contacts. Query result
--   depends on the result of the previous query, so only one query is
--   possible at the same time. Returns <a>ImportedContacts</a>
data ChangeImportedContacts
ChangeImportedContacts :: Maybe [Contact] -> ChangeImportedContacts

-- | The new list of contacts, contact's vCard are ignored and are not
--   imported
[contacts] :: ChangeImportedContacts -> Maybe [Contact]
instance GHC.Show.Show TD.Query.ChangeImportedContacts.ChangeImportedContacts
instance GHC.Classes.Eq TD.Query.ChangeImportedContacts.ChangeImportedContacts
instance TD.Lib.Internal.ShortShow TD.Query.ChangeImportedContacts.ChangeImportedContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ChangeImportedContacts.ChangeImportedContacts

module TD.Query.ChangeStickerSet

-- | Installs<i>uninstalls or activates</i>archives a sticker set. Returns
--   <a>Ok</a>
data ChangeStickerSet
ChangeStickerSet :: Maybe Int -> Maybe Bool -> Maybe Bool -> ChangeStickerSet

-- | Identifier of the sticker set
[set_id] :: ChangeStickerSet -> Maybe Int

-- | The new value of is_installed
[is_installed] :: ChangeStickerSet -> Maybe Bool

-- | The new value of is_archived. A sticker set can't be installed and
--   archived simultaneously
[is_archived] :: ChangeStickerSet -> Maybe Bool
defaultChangeStickerSet :: ChangeStickerSet
instance GHC.Show.Show TD.Query.ChangeStickerSet.ChangeStickerSet
instance GHC.Classes.Eq TD.Query.ChangeStickerSet.ChangeStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.ChangeStickerSet.ChangeStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ChangeStickerSet.ChangeStickerSet

module TD.Query.CheckAuthenticationBotToken

-- | Checks the authentication token of a bot; to log in as a bot. Works
--   only when the current authorization state is
--   authorizationStateWaitPhoneNumber. Can be used instead of
--   setAuthenticationPhoneNumber and checkAuthenticationCode to log in.
--   Returns <a>Ok</a>
data CheckAuthenticationBotToken
CheckAuthenticationBotToken :: Maybe Text -> CheckAuthenticationBotToken

-- | The bot token
[token] :: CheckAuthenticationBotToken -> Maybe Text
instance GHC.Show.Show TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken
instance GHC.Classes.Eq TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken
instance TD.Lib.Internal.ShortShow TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationBotToken.CheckAuthenticationBotToken

module TD.Query.CheckAuthenticationCode

-- | Checks the authentication code. Works only when the current
--   authorization state is authorizationStateWaitCode. Returns <a>Ok</a>
data CheckAuthenticationCode
CheckAuthenticationCode :: Maybe Text -> CheckAuthenticationCode

-- | Authentication code to check
[code] :: CheckAuthenticationCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckAuthenticationCode.CheckAuthenticationCode
instance GHC.Classes.Eq TD.Query.CheckAuthenticationCode.CheckAuthenticationCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckAuthenticationCode.CheckAuthenticationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationCode.CheckAuthenticationCode

module TD.Query.CheckAuthenticationEmailCode

-- | Checks the authentication of an email address. Works only when the
--   current authorization state is authorizationStateWaitEmailCode.
--   Returns <a>Ok</a>
data CheckAuthenticationEmailCode
CheckAuthenticationEmailCode :: Maybe EmailAddressAuthentication -> CheckAuthenticationEmailCode

-- | Email address authentication to check
[code] :: CheckAuthenticationEmailCode -> Maybe EmailAddressAuthentication
instance GHC.Show.Show TD.Query.CheckAuthenticationEmailCode.CheckAuthenticationEmailCode
instance GHC.Classes.Eq TD.Query.CheckAuthenticationEmailCode.CheckAuthenticationEmailCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckAuthenticationEmailCode.CheckAuthenticationEmailCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationEmailCode.CheckAuthenticationEmailCode

module TD.Query.CheckAuthenticationPassword

-- | Checks the 2-step verification password for correctness. Works only
--   when the current authorization state is
--   authorizationStateWaitPassword. Returns <a>Ok</a>
data CheckAuthenticationPassword
CheckAuthenticationPassword :: Maybe Text -> CheckAuthenticationPassword

-- | The 2-step verification password to check
[password] :: CheckAuthenticationPassword -> Maybe Text
instance GHC.Show.Show TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword
instance GHC.Classes.Eq TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword
instance TD.Lib.Internal.ShortShow TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationPassword.CheckAuthenticationPassword

module TD.Query.CheckAuthenticationPasswordRecoveryCode

-- | Checks whether a 2-step verification password recovery code sent to an
--   email address is valid. Works only when the current authorization
--   state is authorizationStateWaitPassword. Returns <a>Ok</a>
data CheckAuthenticationPasswordRecoveryCode
CheckAuthenticationPasswordRecoveryCode :: Maybe Text -> CheckAuthenticationPasswordRecoveryCode

-- | Recovery code to check
[recovery_code] :: CheckAuthenticationPasswordRecoveryCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode
instance GHC.Classes.Eq TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckAuthenticationPasswordRecoveryCode.CheckAuthenticationPasswordRecoveryCode

module TD.Query.CheckChatFolderInviteLink

-- | Checks the validity of an invite link for a chat folder and returns
--   information about the corresponding chat folder. Returns
--   <a>ChatFolderInviteLinkInfo</a>
data CheckChatFolderInviteLink
CheckChatFolderInviteLink :: Maybe Text -> CheckChatFolderInviteLink

-- | Invite link to be checked
[invite_link] :: CheckChatFolderInviteLink -> Maybe Text
instance GHC.Show.Show TD.Query.CheckChatFolderInviteLink.CheckChatFolderInviteLink
instance GHC.Classes.Eq TD.Query.CheckChatFolderInviteLink.CheckChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.CheckChatFolderInviteLink.CheckChatFolderInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChatFolderInviteLink.CheckChatFolderInviteLink

module TD.Query.CheckChatInviteLink

-- | Checks the validity of an invite link for a chat and returns
--   information about the corresponding chat. Returns
--   <a>ChatInviteLinkInfo</a>
data CheckChatInviteLink
CheckChatInviteLink :: Maybe Text -> CheckChatInviteLink

-- | Invite link to be checked
[invite_link] :: CheckChatInviteLink -> Maybe Text
instance GHC.Show.Show TD.Query.CheckChatInviteLink.CheckChatInviteLink
instance GHC.Classes.Eq TD.Query.CheckChatInviteLink.CheckChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.CheckChatInviteLink.CheckChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChatInviteLink.CheckChatInviteLink

module TD.Query.CheckChatUsername

-- | Checks whether a username can be set for a chat. Returns
--   <a>CheckChatUsernameResult</a>
data CheckChatUsername
CheckChatUsername :: Maybe Int -> Maybe Text -> CheckChatUsername

-- | Chat identifier; must be identifier of a supergroup chat, or a channel
--   chat, or a private chat with self, or 0 if the chat is being created
[chat_id] :: CheckChatUsername -> Maybe Int

-- | Username to be checked
[username] :: CheckChatUsername -> Maybe Text
defaultCheckChatUsername :: CheckChatUsername
instance GHC.Show.Show TD.Query.CheckChatUsername.CheckChatUsername
instance GHC.Classes.Eq TD.Query.CheckChatUsername.CheckChatUsername
instance TD.Lib.Internal.ShortShow TD.Query.CheckChatUsername.CheckChatUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckChatUsername.CheckChatUsername

module TD.Query.CheckCreatedPublicChatsLimit

-- | Checks whether the maximum number of owned public chats has been
--   reached. Returns corresponding error if the limit was reached. The
--   limit can be increased with Telegram Premium. Returns <a>Ok</a>
data CheckCreatedPublicChatsLimit
CheckCreatedPublicChatsLimit :: Maybe PublicChatType -> CheckCreatedPublicChatsLimit

-- | Type of the public chats, for which to check the limit
[_type] :: CheckCreatedPublicChatsLimit -> Maybe PublicChatType
instance GHC.Show.Show TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit
instance GHC.Classes.Eq TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit
instance TD.Lib.Internal.ShortShow TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckCreatedPublicChatsLimit.CheckCreatedPublicChatsLimit

module TD.Query.CheckEmailAddressVerificationCode

-- | Checks the email address verification code for Telegram Passport.
--   Returns <a>Ok</a>
data CheckEmailAddressVerificationCode
CheckEmailAddressVerificationCode :: Maybe Text -> CheckEmailAddressVerificationCode

-- | Verification code to check
[code] :: CheckEmailAddressVerificationCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode
instance GHC.Classes.Eq TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckEmailAddressVerificationCode.CheckEmailAddressVerificationCode

module TD.Query.CheckLoginEmailAddressCode

-- | Checks the login email address authentication. Returns <a>Ok</a>
data CheckLoginEmailAddressCode
CheckLoginEmailAddressCode :: Maybe EmailAddressAuthentication -> CheckLoginEmailAddressCode

-- | Email address authentication to check
[code] :: CheckLoginEmailAddressCode -> Maybe EmailAddressAuthentication
instance GHC.Show.Show TD.Query.CheckLoginEmailAddressCode.CheckLoginEmailAddressCode
instance GHC.Classes.Eq TD.Query.CheckLoginEmailAddressCode.CheckLoginEmailAddressCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckLoginEmailAddressCode.CheckLoginEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckLoginEmailAddressCode.CheckLoginEmailAddressCode

module TD.Query.CheckPasswordRecoveryCode

-- | Checks whether a 2-step verification password recovery code sent to an
--   email address is valid. Returns <a>Ok</a>
data CheckPasswordRecoveryCode
CheckPasswordRecoveryCode :: Maybe Text -> CheckPasswordRecoveryCode

-- | Recovery code to check
[recovery_code] :: CheckPasswordRecoveryCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode
instance GHC.Classes.Eq TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPasswordRecoveryCode.CheckPasswordRecoveryCode

module TD.Query.CheckPhoneNumberCode

-- | Check the authentication code and completes the request for which the
--   code was sent if appropriate. Returns <a>Ok</a>
data CheckPhoneNumberCode
CheckPhoneNumberCode :: Maybe Text -> CheckPhoneNumberCode

-- | Authentication code to check
[code] :: CheckPhoneNumberCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckPhoneNumberCode.CheckPhoneNumberCode
instance GHC.Classes.Eq TD.Query.CheckPhoneNumberCode.CheckPhoneNumberCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckPhoneNumberCode.CheckPhoneNumberCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPhoneNumberCode.CheckPhoneNumberCode

module TD.Query.CheckPremiumGiftCode

-- | Return information about a Telegram Premium gift code. Returns
--   <a>PremiumGiftCodeInfo</a>
data CheckPremiumGiftCode
CheckPremiumGiftCode :: Maybe Text -> CheckPremiumGiftCode

-- | The code to check
[code] :: CheckPremiumGiftCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckPremiumGiftCode.CheckPremiumGiftCode
instance GHC.Classes.Eq TD.Query.CheckPremiumGiftCode.CheckPremiumGiftCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckPremiumGiftCode.CheckPremiumGiftCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckPremiumGiftCode.CheckPremiumGiftCode

module TD.Query.CheckQuickReplyShortcutName

-- | Checks validness of a name for a quick reply shortcut. Can be called
--   synchronously. Returns <a>Ok</a>
data CheckQuickReplyShortcutName
CheckQuickReplyShortcutName :: Maybe Text -> CheckQuickReplyShortcutName

-- | The name of the shortcut; 1-32 characters
[name] :: CheckQuickReplyShortcutName -> Maybe Text
instance GHC.Show.Show TD.Query.CheckQuickReplyShortcutName.CheckQuickReplyShortcutName
instance GHC.Classes.Eq TD.Query.CheckQuickReplyShortcutName.CheckQuickReplyShortcutName
instance TD.Lib.Internal.ShortShow TD.Query.CheckQuickReplyShortcutName.CheckQuickReplyShortcutName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckQuickReplyShortcutName.CheckQuickReplyShortcutName

module TD.Query.CheckRecoveryEmailAddressCode

-- | Checks the 2-step verification recovery email address verification
--   code. Returns <a>PasswordState</a>
data CheckRecoveryEmailAddressCode
CheckRecoveryEmailAddressCode :: Maybe Text -> CheckRecoveryEmailAddressCode

-- | Verification code to check
[code] :: CheckRecoveryEmailAddressCode -> Maybe Text
instance GHC.Show.Show TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode
instance GHC.Classes.Eq TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode
instance TD.Lib.Internal.ShortShow TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckRecoveryEmailAddressCode.CheckRecoveryEmailAddressCode

module TD.Query.CheckStickerSetName

-- | Checks whether a name can be used for a new sticker set. Returns
--   <a>CheckStickerSetNameResult</a>
data CheckStickerSetName
CheckStickerSetName :: Maybe Text -> CheckStickerSetName

-- | Name to be checked
[name] :: CheckStickerSetName -> Maybe Text
instance GHC.Show.Show TD.Query.CheckStickerSetName.CheckStickerSetName
instance GHC.Classes.Eq TD.Query.CheckStickerSetName.CheckStickerSetName
instance TD.Lib.Internal.ShortShow TD.Query.CheckStickerSetName.CheckStickerSetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CheckStickerSetName.CheckStickerSetName

module TD.Query.CleanFileName

-- | Removes potentially dangerous characters from the name of a file. The
--   encoding of the file name is supposed to be UTF-8. Returns an empty
--   string on failure. Can be called synchronously. Returns <a>Text</a>
data CleanFileName
CleanFileName :: Maybe Text -> CleanFileName

-- | File name or path to the file
[file_name] :: CleanFileName -> Maybe Text
instance GHC.Show.Show TD.Query.CleanFileName.CleanFileName
instance GHC.Classes.Eq TD.Query.CleanFileName.CleanFileName
instance TD.Lib.Internal.ShortShow TD.Query.CleanFileName.CleanFileName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CleanFileName.CleanFileName

module TD.Query.ClearAllDraftMessages

-- | Clears message drafts in all chats. Returns <a>Ok</a>
data ClearAllDraftMessages
ClearAllDraftMessages :: Maybe Bool -> ClearAllDraftMessages

-- | Pass true to keep local message drafts in secret chats
[exclude_secret_chats] :: ClearAllDraftMessages -> Maybe Bool
instance GHC.Show.Show TD.Query.ClearAllDraftMessages.ClearAllDraftMessages
instance GHC.Classes.Eq TD.Query.ClearAllDraftMessages.ClearAllDraftMessages
instance TD.Lib.Internal.ShortShow TD.Query.ClearAllDraftMessages.ClearAllDraftMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearAllDraftMessages.ClearAllDraftMessages

module TD.Query.ClearAutosaveSettingsExceptions

-- | Clears the list of all autosave settings exceptions. The method is
--   guaranteed to work only after at least one call to
--   getAutosaveSettings. Returns <a>Ok</a>
data ClearAutosaveSettingsExceptions
ClearAutosaveSettingsExceptions :: ClearAutosaveSettingsExceptions
instance GHC.Show.Show TD.Query.ClearAutosaveSettingsExceptions.ClearAutosaveSettingsExceptions
instance GHC.Classes.Eq TD.Query.ClearAutosaveSettingsExceptions.ClearAutosaveSettingsExceptions
instance TD.Lib.Internal.ShortShow TD.Query.ClearAutosaveSettingsExceptions.ClearAutosaveSettingsExceptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearAutosaveSettingsExceptions.ClearAutosaveSettingsExceptions

module TD.Query.ClearImportedContacts

-- | Clears all imported contacts, contact list remains unchanged. Returns
--   <a>Ok</a>
data ClearImportedContacts
ClearImportedContacts :: ClearImportedContacts
instance GHC.Show.Show TD.Query.ClearImportedContacts.ClearImportedContacts
instance GHC.Classes.Eq TD.Query.ClearImportedContacts.ClearImportedContacts
instance TD.Lib.Internal.ShortShow TD.Query.ClearImportedContacts.ClearImportedContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearImportedContacts.ClearImportedContacts

module TD.Query.ClearRecentEmojiStatuses

-- | Clears the list of recently used emoji statuses for self status.
--   Returns <a>Ok</a>
data ClearRecentEmojiStatuses
ClearRecentEmojiStatuses :: ClearRecentEmojiStatuses
instance GHC.Show.Show TD.Query.ClearRecentEmojiStatuses.ClearRecentEmojiStatuses
instance GHC.Classes.Eq TD.Query.ClearRecentEmojiStatuses.ClearRecentEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.ClearRecentEmojiStatuses.ClearRecentEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentEmojiStatuses.ClearRecentEmojiStatuses

module TD.Query.ClearRecentReactions

-- | Clears the list of recently used reactions. Returns <a>Ok</a>
data ClearRecentReactions
ClearRecentReactions :: ClearRecentReactions
instance GHC.Show.Show TD.Query.ClearRecentReactions.ClearRecentReactions
instance GHC.Classes.Eq TD.Query.ClearRecentReactions.ClearRecentReactions
instance TD.Lib.Internal.ShortShow TD.Query.ClearRecentReactions.ClearRecentReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentReactions.ClearRecentReactions

module TD.Query.ClearRecentStickers

-- | Clears the list of recently used stickers. Returns <a>Ok</a>
data ClearRecentStickers
ClearRecentStickers :: Maybe Bool -> ClearRecentStickers

-- | Pass true to clear the list of stickers recently attached to photo or
--   video files; pass false to clear the list of recently sent stickers
[is_attached] :: ClearRecentStickers -> Maybe Bool
instance GHC.Show.Show TD.Query.ClearRecentStickers.ClearRecentStickers
instance GHC.Classes.Eq TD.Query.ClearRecentStickers.ClearRecentStickers
instance TD.Lib.Internal.ShortShow TD.Query.ClearRecentStickers.ClearRecentStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentStickers.ClearRecentStickers

module TD.Query.ClearRecentlyFoundChats

-- | Clears the list of recently found chats. Returns <a>Ok</a>
data ClearRecentlyFoundChats
ClearRecentlyFoundChats :: ClearRecentlyFoundChats
instance GHC.Show.Show TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats
instance GHC.Classes.Eq TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats
instance TD.Lib.Internal.ShortShow TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClearRecentlyFoundChats.ClearRecentlyFoundChats

module TD.Query.ClickAnimatedEmojiMessage

-- | Informs TDLib that a message with an animated emoji was clicked by the
--   user. Returns a big animated sticker to be played or a 404 error if
--   usual animation needs to be played. Returns <a>Sticker</a>
data ClickAnimatedEmojiMessage
ClickAnimatedEmojiMessage :: Maybe Int -> Maybe Int -> ClickAnimatedEmojiMessage

-- | Chat identifier of the message
[chat_id] :: ClickAnimatedEmojiMessage -> Maybe Int

-- | Identifier of the clicked message
[message_id] :: ClickAnimatedEmojiMessage -> Maybe Int
defaultClickAnimatedEmojiMessage :: ClickAnimatedEmojiMessage
instance GHC.Show.Show TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage
instance GHC.Classes.Eq TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage
instance TD.Lib.Internal.ShortShow TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClickAnimatedEmojiMessage.ClickAnimatedEmojiMessage

module TD.Query.ClickChatSponsoredMessage

-- | Informs TDLib that the user opened the sponsored chat via the button,
--   the name, the photo, or a mention in the sponsored message. Returns
--   <a>Ok</a>
data ClickChatSponsoredMessage
ClickChatSponsoredMessage :: Maybe Int -> Maybe Int -> ClickChatSponsoredMessage

-- | Chat identifier of the sponsored message
[chat_id] :: ClickChatSponsoredMessage -> Maybe Int

-- | Identifier of the sponsored message
[message_id] :: ClickChatSponsoredMessage -> Maybe Int
defaultClickChatSponsoredMessage :: ClickChatSponsoredMessage
instance GHC.Show.Show TD.Query.ClickChatSponsoredMessage.ClickChatSponsoredMessage
instance GHC.Classes.Eq TD.Query.ClickChatSponsoredMessage.ClickChatSponsoredMessage
instance TD.Lib.Internal.ShortShow TD.Query.ClickChatSponsoredMessage.ClickChatSponsoredMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClickChatSponsoredMessage.ClickChatSponsoredMessage

module TD.Query.ClickPremiumSubscriptionButton

-- | Informs TDLib that the user clicked Premium subscription button on the
--   Premium features screen. Returns <a>Ok</a>
data ClickPremiumSubscriptionButton
ClickPremiumSubscriptionButton :: ClickPremiumSubscriptionButton
instance GHC.Show.Show TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton
instance GHC.Classes.Eq TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton
instance TD.Lib.Internal.ShortShow TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ClickPremiumSubscriptionButton.ClickPremiumSubscriptionButton

module TD.Query.Close

-- | Closes the TDLib instance. All databases will be flushed to disk and
--   properly closed. After the close completes, updateAuthorizationState
--   with authorizationStateClosed will be sent. Can be called before
--   initialization. Returns <a>Ok</a>
data Close
Close :: Close
instance GHC.Show.Show TD.Query.Close.Close
instance GHC.Classes.Eq TD.Query.Close.Close
instance TD.Lib.Internal.ShortShow TD.Query.Close.Close
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.Close.Close

module TD.Query.CloseChat

-- | Informs TDLib that the chat is closed by the user. Many useful
--   activities depend on the chat being opened or closed. Returns
--   <a>Ok</a>
data CloseChat
CloseChat :: Maybe Int -> CloseChat

-- | Chat identifier
[chat_id] :: CloseChat -> Maybe Int
instance GHC.Show.Show TD.Query.CloseChat.CloseChat
instance GHC.Classes.Eq TD.Query.CloseChat.CloseChat
instance TD.Lib.Internal.ShortShow TD.Query.CloseChat.CloseChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseChat.CloseChat

module TD.Query.CloseSecretChat

-- | Closes a secret chat, effectively transferring its state to
--   secretChatStateClosed. Returns <a>Ok</a>
data CloseSecretChat
CloseSecretChat :: Maybe Int -> CloseSecretChat

-- | Secret chat identifier
[secret_chat_id] :: CloseSecretChat -> Maybe Int
instance GHC.Show.Show TD.Query.CloseSecretChat.CloseSecretChat
instance GHC.Classes.Eq TD.Query.CloseSecretChat.CloseSecretChat
instance TD.Lib.Internal.ShortShow TD.Query.CloseSecretChat.CloseSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseSecretChat.CloseSecretChat

module TD.Query.CloseStory

-- | Informs TDLib that a story is closed by the user. Returns <a>Ok</a>
data CloseStory
CloseStory :: Maybe Int -> Maybe Int -> CloseStory

-- | The identifier of the sender of the story to close
[story_sender_chat_id] :: CloseStory -> Maybe Int

-- | The identifier of the story
[story_id] :: CloseStory -> Maybe Int
defaultCloseStory :: CloseStory
instance GHC.Show.Show TD.Query.CloseStory.CloseStory
instance GHC.Classes.Eq TD.Query.CloseStory.CloseStory
instance TD.Lib.Internal.ShortShow TD.Query.CloseStory.CloseStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseStory.CloseStory

module TD.Query.CloseWebApp

-- | Informs TDLib that a previously opened Web App was closed. Returns
--   <a>Ok</a>
data CloseWebApp
CloseWebApp :: Maybe Int -> CloseWebApp

-- | Identifier of Web App launch, received from openWebApp
[web_app_launch_id] :: CloseWebApp -> Maybe Int
instance GHC.Show.Show TD.Query.CloseWebApp.CloseWebApp
instance GHC.Classes.Eq TD.Query.CloseWebApp.CloseWebApp
instance TD.Lib.Internal.ShortShow TD.Query.CloseWebApp.CloseWebApp
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CloseWebApp.CloseWebApp

module TD.Query.ConfirmQrCodeAuthentication

-- | Confirms QR code authentication on another device. Returns created
--   session on success. Returns <a>Session</a>
data ConfirmQrCodeAuthentication
ConfirmQrCodeAuthentication :: Maybe Text -> ConfirmQrCodeAuthentication

-- | A link from a QR code. The link must be scanned by the in-app camera
[link] :: ConfirmQrCodeAuthentication -> Maybe Text
instance GHC.Show.Show TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication
instance GHC.Classes.Eq TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication
instance TD.Lib.Internal.ShortShow TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ConfirmQrCodeAuthentication.ConfirmQrCodeAuthentication

module TD.Query.ConfirmSession

-- | Confirms an unconfirmed session of the current user from another
--   device. Returns <a>Ok</a>
data ConfirmSession
ConfirmSession :: Maybe Int -> ConfirmSession

-- | Session identifier
[session_id] :: ConfirmSession -> Maybe Int
instance GHC.Show.Show TD.Query.ConfirmSession.ConfirmSession
instance GHC.Classes.Eq TD.Query.ConfirmSession.ConfirmSession
instance TD.Lib.Internal.ShortShow TD.Query.ConfirmSession.ConfirmSession
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ConfirmSession.ConfirmSession

module TD.Query.CreateBasicGroupChat

-- | Returns an existing chat corresponding to a known basic group. Returns
--   <a>Chat</a>
data CreateBasicGroupChat
CreateBasicGroupChat :: Maybe Int -> Maybe Bool -> CreateBasicGroupChat

-- | Basic group identifier
[basic_group_id] :: CreateBasicGroupChat -> Maybe Int

-- | Pass true to create the chat without a network request. In this case
--   all information about the chat except its type, title and photo can be
--   incorrect
[force] :: CreateBasicGroupChat -> Maybe Bool
defaultCreateBasicGroupChat :: CreateBasicGroupChat
instance GHC.Show.Show TD.Query.CreateBasicGroupChat.CreateBasicGroupChat
instance GHC.Classes.Eq TD.Query.CreateBasicGroupChat.CreateBasicGroupChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateBasicGroupChat.CreateBasicGroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateBasicGroupChat.CreateBasicGroupChat

module TD.Query.CreateBusinessChatLink

-- | Creates a business chat link for the current account. Requires
--   Telegram Business subscription. There can be up to
--   getOption("business_chat_link_count_max") links created. Returns the
--   created link. Returns <a>BusinessChatLink</a>
data CreateBusinessChatLink
CreateBusinessChatLink :: Maybe InputBusinessChatLink -> CreateBusinessChatLink

-- | Information about the link to create
[link_info] :: CreateBusinessChatLink -> Maybe InputBusinessChatLink
instance GHC.Show.Show TD.Query.CreateBusinessChatLink.CreateBusinessChatLink
instance GHC.Classes.Eq TD.Query.CreateBusinessChatLink.CreateBusinessChatLink
instance TD.Lib.Internal.ShortShow TD.Query.CreateBusinessChatLink.CreateBusinessChatLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateBusinessChatLink.CreateBusinessChatLink

module TD.Query.CreateCall

-- | Creates a new call. Returns <a>CallId</a>
data CreateCall
CreateCall :: Maybe Int -> Maybe CallProtocol -> Maybe Bool -> CreateCall

-- | Identifier of the user to be called
[user_id] :: CreateCall -> Maybe Int

-- | The call protocols supported by the application
[protocol] :: CreateCall -> Maybe CallProtocol

-- | Pass true to create a video call
[is_video] :: CreateCall -> Maybe Bool
defaultCreateCall :: CreateCall
instance GHC.Show.Show TD.Query.CreateCall.CreateCall
instance GHC.Classes.Eq TD.Query.CreateCall.CreateCall
instance TD.Lib.Internal.ShortShow TD.Query.CreateCall.CreateCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateCall.CreateCall

module TD.Query.CreateChatFolder

-- | Creates new chat folder. Returns information about the created chat
--   folder. There can be up to getOption("chat_folder_count_max") chat
--   folders, but the limit can be increased with Telegram Premium. Returns
--   <a>ChatFolderInfo</a>
data CreateChatFolder
CreateChatFolder :: Maybe ChatFolder -> CreateChatFolder

-- | The new chat folder
[folder] :: CreateChatFolder -> Maybe ChatFolder
instance GHC.Show.Show TD.Query.CreateChatFolder.CreateChatFolder
instance GHC.Classes.Eq TD.Query.CreateChatFolder.CreateChatFolder
instance TD.Lib.Internal.ShortShow TD.Query.CreateChatFolder.CreateChatFolder
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateChatFolder.CreateChatFolder

module TD.Query.CreateChatFolderInviteLink

-- | Creates a new invite link for a chat folder. A link can be created for
--   a chat folder if it has only pinned and included chats. Returns
--   <a>ChatFolderInviteLink</a>
data CreateChatFolderInviteLink
CreateChatFolderInviteLink :: Maybe Int -> Maybe Text -> Maybe [Int] -> CreateChatFolderInviteLink

-- | Chat folder identifier
[chat_folder_id] :: CreateChatFolderInviteLink -> Maybe Int

-- | Name of the link; 0-32 characters
[name] :: CreateChatFolderInviteLink -> Maybe Text

-- | Identifiers of chats to be accessible by the invite link. Use
--   getChatsForChatFolderInviteLink to get suitable chats. Basic groups
--   will be automatically converted to supergroups before link creation
[chat_ids] :: CreateChatFolderInviteLink -> Maybe [Int]
defaultCreateChatFolderInviteLink :: CreateChatFolderInviteLink
instance GHC.Show.Show TD.Query.CreateChatFolderInviteLink.CreateChatFolderInviteLink
instance GHC.Classes.Eq TD.Query.CreateChatFolderInviteLink.CreateChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.CreateChatFolderInviteLink.CreateChatFolderInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateChatFolderInviteLink.CreateChatFolderInviteLink

module TD.Query.CreateChatInviteLink

-- | Creates a new invite link for a chat. Available for basic groups,
--   supergroups, and channels. Requires administrator privileges and
--   can_invite_users right in the chat. Returns <a>ChatInviteLink</a>
data CreateChatInviteLink
CreateChatInviteLink :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> CreateChatInviteLink

-- | Chat identifier
[chat_id] :: CreateChatInviteLink -> Maybe Int

-- | Invite link name; 0-32 characters
[name] :: CreateChatInviteLink -> Maybe Text

-- | Point in time (Unix timestamp) when the link will expire; pass 0 if
--   never
[expiration_date] :: CreateChatInviteLink -> Maybe Int

-- | The maximum number of chat members that can join the chat via the link
--   simultaneously; 0-99999; pass 0 if not limited
[member_limit] :: CreateChatInviteLink -> Maybe Int

-- | Pass true if users joining the chat via the link need to be approved
--   by chat administrators. In this case, member_limit must be 0
[creates_join_request] :: CreateChatInviteLink -> Maybe Bool
defaultCreateChatInviteLink :: CreateChatInviteLink
instance GHC.Show.Show TD.Query.CreateChatInviteLink.CreateChatInviteLink
instance GHC.Classes.Eq TD.Query.CreateChatInviteLink.CreateChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.CreateChatInviteLink.CreateChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateChatInviteLink.CreateChatInviteLink

module TD.Query.CreateForumTopic

-- | Creates a topic in a forum supergroup chat; requires can_manage_topics
--   administrator or can_create_topics member right in the supergroup.
--   Returns <a>ForumTopicInfo</a>
data CreateForumTopic
CreateForumTopic :: Maybe Int -> Maybe Text -> Maybe ForumTopicIcon -> CreateForumTopic

-- | Identifier of the chat
[chat_id] :: CreateForumTopic -> Maybe Int

-- | Name of the topic; 1-128 characters
[name] :: CreateForumTopic -> Maybe Text

-- | Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E,
--   0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can
--   use any custom emoji as topic icon, other users can use only a custom
--   emoji returned by getForumTopicDefaultIcons
[icon] :: CreateForumTopic -> Maybe ForumTopicIcon
defaultCreateForumTopic :: CreateForumTopic
instance GHC.Show.Show TD.Query.CreateForumTopic.CreateForumTopic
instance GHC.Classes.Eq TD.Query.CreateForumTopic.CreateForumTopic
instance TD.Lib.Internal.ShortShow TD.Query.CreateForumTopic.CreateForumTopic
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateForumTopic.CreateForumTopic

module TD.Query.CreateInvoiceLink

-- | Creates a link for the given invoice; for bots only. Returns
--   <a>HttpUrl</a>
data CreateInvoiceLink
CreateInvoiceLink :: Maybe InputMessageContent -> CreateInvoiceLink

-- | Information about the invoice of the type inputMessageInvoice
[invoice] :: CreateInvoiceLink -> Maybe InputMessageContent
instance GHC.Show.Show TD.Query.CreateInvoiceLink.CreateInvoiceLink
instance GHC.Classes.Eq TD.Query.CreateInvoiceLink.CreateInvoiceLink
instance TD.Lib.Internal.ShortShow TD.Query.CreateInvoiceLink.CreateInvoiceLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateInvoiceLink.CreateInvoiceLink

module TD.Query.CreateNewBasicGroupChat

-- | Creates a new basic group and sends a corresponding
--   messageBasicGroupChatCreate. Returns information about the newly
--   created chat. Returns <a>CreatedBasicGroupChat</a>
data CreateNewBasicGroupChat
CreateNewBasicGroupChat :: Maybe [Int] -> Maybe Text -> Maybe Int -> CreateNewBasicGroupChat

-- | Identifiers of users to be added to the basic group; may be empty to
--   create a basic group without other members
[user_ids] :: CreateNewBasicGroupChat -> Maybe [Int]

-- | Title of the new basic group; 1-128 characters
[title] :: CreateNewBasicGroupChat -> Maybe Text

-- | Message auto-delete time value, in seconds; must be from 0 up to 365 *
--   86400 and be divisible by 86400. If 0, then messages aren't deleted
--   automatically
[message_auto_delete_time] :: CreateNewBasicGroupChat -> Maybe Int
defaultCreateNewBasicGroupChat :: CreateNewBasicGroupChat
instance GHC.Show.Show TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat
instance GHC.Classes.Eq TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewBasicGroupChat.CreateNewBasicGroupChat

module TD.Query.CreateNewSecretChat

-- | Creates a new secret chat. Returns the newly created chat. Returns
--   <a>Chat</a>
data CreateNewSecretChat
CreateNewSecretChat :: Maybe Int -> CreateNewSecretChat

-- | Identifier of the target user
[user_id] :: CreateNewSecretChat -> Maybe Int
instance GHC.Show.Show TD.Query.CreateNewSecretChat.CreateNewSecretChat
instance GHC.Classes.Eq TD.Query.CreateNewSecretChat.CreateNewSecretChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateNewSecretChat.CreateNewSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewSecretChat.CreateNewSecretChat

module TD.Query.CreateNewStickerSet

-- | Creates a new sticker set. Returns the newly created sticker set.
--   Returns <a>StickerSet</a>
data CreateNewStickerSet
CreateNewStickerSet :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe StickerType -> Maybe Bool -> Maybe [InputSticker] -> Maybe Text -> CreateNewStickerSet

-- | Sticker set owner; ignored for regular users
[user_id] :: CreateNewStickerSet -> Maybe Int

-- | Sticker set title; 1-64 characters
[title] :: CreateNewStickerSet -> Maybe Text

-- | Sticker set name. Can contain only English letters, digits and
--   underscores. Must end with *"_by_<a>username</a>"*
--   (*<a>bot_username</a>* is case insensitive) for bots; 0-64 characters.
--   If empty, then the name returned by getSuggestedStickerSetName will be
--   used automatically
[name] :: CreateNewStickerSet -> Maybe Text

-- | Type of the stickers in the set
[sticker_type] :: CreateNewStickerSet -> Maybe StickerType

-- | Pass true if stickers in the sticker set must be repainted; for custom
--   emoji sticker sets only
[needs_repainting] :: CreateNewStickerSet -> Maybe Bool

-- | List of stickers to be added to the set; 1-200 stickers for custom
--   emoji sticker sets, and 1-120 stickers otherwise. For TGS stickers,
--   uploadStickerFile must be used before the sticker is shown
[stickers] :: CreateNewStickerSet -> Maybe [InputSticker]

-- | Source of the sticker set; may be empty if unknown
[source] :: CreateNewStickerSet -> Maybe Text
defaultCreateNewStickerSet :: CreateNewStickerSet
instance GHC.Show.Show TD.Query.CreateNewStickerSet.CreateNewStickerSet
instance GHC.Classes.Eq TD.Query.CreateNewStickerSet.CreateNewStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.CreateNewStickerSet.CreateNewStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewStickerSet.CreateNewStickerSet

module TD.Query.CreateNewSupergroupChat

-- | Creates a new supergroup or channel and sends a corresponding
--   messageSupergroupChatCreate. Returns the newly created chat. Returns
--   <a>Chat</a>
data CreateNewSupergroupChat
CreateNewSupergroupChat :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe ChatLocation -> Maybe Int -> Maybe Bool -> CreateNewSupergroupChat

-- | Title of the new chat; 1-128 characters
[title] :: CreateNewSupergroupChat -> Maybe Text

-- | Pass true to create a forum supergroup chat
[is_forum] :: CreateNewSupergroupChat -> Maybe Bool

-- | Pass true to create a channel chat; ignored if a forum is created
[is_channel] :: CreateNewSupergroupChat -> Maybe Bool
[description] :: CreateNewSupergroupChat -> Maybe Text

-- | Chat location if a location-based supergroup is being created; pass
--   null to create an ordinary supergroup chat
[location] :: CreateNewSupergroupChat -> Maybe ChatLocation

-- | Message auto-delete time value, in seconds; must be from 0 up to 365 *
--   86400 and be divisible by 86400. If 0, then messages aren't deleted
--   automatically
[message_auto_delete_time] :: CreateNewSupergroupChat -> Maybe Int

-- | Pass true to create a supergroup for importing messages using
--   importMessages
[for_import] :: CreateNewSupergroupChat -> Maybe Bool
defaultCreateNewSupergroupChat :: CreateNewSupergroupChat
instance GHC.Show.Show TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat
instance GHC.Classes.Eq TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateNewSupergroupChat.CreateNewSupergroupChat

module TD.Query.CreatePrivateChat

-- | Returns an existing chat corresponding to a given user. Returns
--   <a>Chat</a>
data CreatePrivateChat
CreatePrivateChat :: Maybe Int -> Maybe Bool -> CreatePrivateChat

-- | User identifier
[user_id] :: CreatePrivateChat -> Maybe Int

-- | Pass true to create the chat without a network request. In this case
--   all information about the chat except its type, title and photo can be
--   incorrect
[force] :: CreatePrivateChat -> Maybe Bool
defaultCreatePrivateChat :: CreatePrivateChat
instance GHC.Show.Show TD.Query.CreatePrivateChat.CreatePrivateChat
instance GHC.Classes.Eq TD.Query.CreatePrivateChat.CreatePrivateChat
instance TD.Lib.Internal.ShortShow TD.Query.CreatePrivateChat.CreatePrivateChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreatePrivateChat.CreatePrivateChat

module TD.Query.CreateSecretChat

-- | Returns an existing chat corresponding to a known secret chat. Returns
--   <a>Chat</a>
data CreateSecretChat
CreateSecretChat :: Maybe Int -> CreateSecretChat

-- | Secret chat identifier
[secret_chat_id] :: CreateSecretChat -> Maybe Int
instance GHC.Show.Show TD.Query.CreateSecretChat.CreateSecretChat
instance GHC.Classes.Eq TD.Query.CreateSecretChat.CreateSecretChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateSecretChat.CreateSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateSecretChat.CreateSecretChat

module TD.Query.CreateSupergroupChat

-- | Returns an existing chat corresponding to a known supergroup or
--   channel. Returns <a>Chat</a>
data CreateSupergroupChat
CreateSupergroupChat :: Maybe Int -> Maybe Bool -> CreateSupergroupChat

-- | Supergroup or channel identifier
[supergroup_id] :: CreateSupergroupChat -> Maybe Int

-- | Pass true to create the chat without a network request. In this case
--   all information about the chat except its type, title and photo can be
--   incorrect
[force] :: CreateSupergroupChat -> Maybe Bool
defaultCreateSupergroupChat :: CreateSupergroupChat
instance GHC.Show.Show TD.Query.CreateSupergroupChat.CreateSupergroupChat
instance GHC.Classes.Eq TD.Query.CreateSupergroupChat.CreateSupergroupChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateSupergroupChat.CreateSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateSupergroupChat.CreateSupergroupChat

module TD.Query.CreateTemporaryPassword

-- | Creates a new temporary password for processing payments. Returns
--   <a>TemporaryPasswordState</a>
data CreateTemporaryPassword
CreateTemporaryPassword :: Maybe Text -> Maybe Int -> CreateTemporaryPassword

-- | The 2-step verification password of the current user
[password] :: CreateTemporaryPassword -> Maybe Text

-- | Time during which the temporary password will be valid, in seconds;
--   must be between 60 and 86400
[valid_for] :: CreateTemporaryPassword -> Maybe Int
defaultCreateTemporaryPassword :: CreateTemporaryPassword
instance GHC.Show.Show TD.Query.CreateTemporaryPassword.CreateTemporaryPassword
instance GHC.Classes.Eq TD.Query.CreateTemporaryPassword.CreateTemporaryPassword
instance TD.Lib.Internal.ShortShow TD.Query.CreateTemporaryPassword.CreateTemporaryPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateTemporaryPassword.CreateTemporaryPassword

module TD.Query.CreateVideoChat

-- | Creates a video chat (a group call bound to a chat). Available only
--   for basic groups, supergroups and channels; requires
--   can_manage_video_chats administrator right. Returns <a>GroupCallId</a>
data CreateVideoChat
CreateVideoChat :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Bool -> CreateVideoChat

-- | Identifier of a chat in which the video chat will be created
[chat_id] :: CreateVideoChat -> Maybe Int

-- | Group call title; if empty, chat title will be used
[title] :: CreateVideoChat -> Maybe Text

-- | Point in time (Unix timestamp) when the group call is supposed to be
--   started by an administrator; 0 to start the video chat immediately.
--   The date must be at least 10 seconds and at most 8 days in the future
[start_date] :: CreateVideoChat -> Maybe Int

-- | Pass true to create an RTMP stream instead of an ordinary video chat;
--   requires owner privileges
[is_rtmp_stream] :: CreateVideoChat -> Maybe Bool
defaultCreateVideoChat :: CreateVideoChat
instance GHC.Show.Show TD.Query.CreateVideoChat.CreateVideoChat
instance GHC.Classes.Eq TD.Query.CreateVideoChat.CreateVideoChat
instance TD.Lib.Internal.ShortShow TD.Query.CreateVideoChat.CreateVideoChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.CreateVideoChat.CreateVideoChat

module TD.Query.DeleteAccount

-- | Deletes the account of the current user, deleting all information
--   associated with the user from the server. The phone number of the
--   account can be used to create a new account. Can be called before
--   authorization when the current authorization state is
--   authorizationStateWaitPassword. Returns <a>Ok</a>
data DeleteAccount
DeleteAccount :: Maybe Text -> Maybe Text -> DeleteAccount

-- | The reason why the account was deleted; optional
[reason] :: DeleteAccount -> Maybe Text

-- | The 2-step verification password of the current user. If the current
--   user isn't authorized, then an empty string can be passed and account
--   deletion can be canceled within one week
[password] :: DeleteAccount -> Maybe Text
defaultDeleteAccount :: DeleteAccount
instance GHC.Show.Show TD.Query.DeleteAccount.DeleteAccount
instance GHC.Classes.Eq TD.Query.DeleteAccount.DeleteAccount
instance TD.Lib.Internal.ShortShow TD.Query.DeleteAccount.DeleteAccount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAccount.DeleteAccount

module TD.Query.DeleteAllCallMessages

-- | Deletes all call messages. Returns <a>Ok</a>
data DeleteAllCallMessages
DeleteAllCallMessages :: Maybe Bool -> DeleteAllCallMessages

-- | Pass true to delete the messages for all users
[revoke] :: DeleteAllCallMessages -> Maybe Bool
instance GHC.Show.Show TD.Query.DeleteAllCallMessages.DeleteAllCallMessages
instance GHC.Classes.Eq TD.Query.DeleteAllCallMessages.DeleteAllCallMessages
instance TD.Lib.Internal.ShortShow TD.Query.DeleteAllCallMessages.DeleteAllCallMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAllCallMessages.DeleteAllCallMessages

module TD.Query.DeleteAllRevokedChatInviteLinks

-- | Deletes all revoked chat invite links created by a given chat
--   administrator. Requires administrator privileges and can_invite_users
--   right in the chat for own links and owner privileges for other links.
--   Returns <a>Ok</a>
data DeleteAllRevokedChatInviteLinks
DeleteAllRevokedChatInviteLinks :: Maybe Int -> Maybe Int -> DeleteAllRevokedChatInviteLinks

-- | Chat identifier
[chat_id] :: DeleteAllRevokedChatInviteLinks -> Maybe Int

-- | User identifier of a chat administrator, which links will be deleted.
--   Must be an identifier of the current user for non-owner
[creator_user_id] :: DeleteAllRevokedChatInviteLinks -> Maybe Int
defaultDeleteAllRevokedChatInviteLinks :: DeleteAllRevokedChatInviteLinks
instance GHC.Show.Show TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks
instance GHC.Classes.Eq TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks
instance TD.Lib.Internal.ShortShow TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteAllRevokedChatInviteLinks.DeleteAllRevokedChatInviteLinks

module TD.Query.DeleteBusinessChatLink

-- | Deletes a business chat link of the current account. Returns <a>Ok</a>
data DeleteBusinessChatLink
DeleteBusinessChatLink :: Maybe Text -> DeleteBusinessChatLink

-- | The link to delete
[link] :: DeleteBusinessChatLink -> Maybe Text
instance GHC.Show.Show TD.Query.DeleteBusinessChatLink.DeleteBusinessChatLink
instance GHC.Classes.Eq TD.Query.DeleteBusinessChatLink.DeleteBusinessChatLink
instance TD.Lib.Internal.ShortShow TD.Query.DeleteBusinessChatLink.DeleteBusinessChatLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteBusinessChatLink.DeleteBusinessChatLink

module TD.Query.DeleteBusinessConnectedBot

-- | Deletes the business bot that is connected to the current user
--   account. Returns <a>Ok</a>
data DeleteBusinessConnectedBot
DeleteBusinessConnectedBot :: Maybe Int -> DeleteBusinessConnectedBot

-- | Unique user identifier for the bot
[bot_user_id] :: DeleteBusinessConnectedBot -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteBusinessConnectedBot.DeleteBusinessConnectedBot
instance GHC.Classes.Eq TD.Query.DeleteBusinessConnectedBot.DeleteBusinessConnectedBot
instance TD.Lib.Internal.ShortShow TD.Query.DeleteBusinessConnectedBot.DeleteBusinessConnectedBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteBusinessConnectedBot.DeleteBusinessConnectedBot

module TD.Query.DeleteChat

-- | Deletes a chat along with all messages in the corresponding chat for
--   all chat members. For group chats this will release the usernames and
--   remove all members. Use the field chat.can_be_deleted_for_all_users to
--   find whether the method can be applied to the chat. Returns <a>Ok</a>
data DeleteChat
DeleteChat :: Maybe Int -> DeleteChat

-- | Chat identifier
[chat_id] :: DeleteChat -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteChat.DeleteChat
instance GHC.Classes.Eq TD.Query.DeleteChat.DeleteChat
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChat.DeleteChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChat.DeleteChat

module TD.Query.DeleteChatBackground

-- | Deletes background in a specific chat. Returns <a>Ok</a>
data DeleteChatBackground
DeleteChatBackground :: Maybe Int -> Maybe Bool -> DeleteChatBackground

-- | Chat identifier
[chat_id] :: DeleteChatBackground -> Maybe Int

-- | Pass true to restore previously set background. Can be used only in
--   private and secret chats with non-deleted users if
--   userFullInfo.set_chat_background == true. Supposed to be used from
--   messageChatSetBackground messages with the currently set background
--   that was set for both sides by the other user
[restore_previous] :: DeleteChatBackground -> Maybe Bool
defaultDeleteChatBackground :: DeleteChatBackground
instance GHC.Show.Show TD.Query.DeleteChatBackground.DeleteChatBackground
instance GHC.Classes.Eq TD.Query.DeleteChatBackground.DeleteChatBackground
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatBackground.DeleteChatBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatBackground.DeleteChatBackground

module TD.Query.DeleteChatFolder

-- | Deletes existing chat folder. Returns <a>Ok</a>
data DeleteChatFolder
DeleteChatFolder :: Maybe Int -> Maybe [Int] -> DeleteChatFolder

-- | Chat folder identifier
[chat_folder_id] :: DeleteChatFolder -> Maybe Int

-- | Identifiers of the chats to leave. The chats must be pinned or always
--   included in the folder
[leave_chat_ids] :: DeleteChatFolder -> Maybe [Int]
defaultDeleteChatFolder :: DeleteChatFolder
instance GHC.Show.Show TD.Query.DeleteChatFolder.DeleteChatFolder
instance GHC.Classes.Eq TD.Query.DeleteChatFolder.DeleteChatFolder
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatFolder.DeleteChatFolder
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatFolder.DeleteChatFolder

module TD.Query.DeleteChatFolderInviteLink

-- | Deletes an invite link for a chat folder. Returns <a>Ok</a>
data DeleteChatFolderInviteLink
DeleteChatFolderInviteLink :: Maybe Int -> Maybe Text -> DeleteChatFolderInviteLink

-- | Chat folder identifier
[chat_folder_id] :: DeleteChatFolderInviteLink -> Maybe Int

-- | Invite link to be deleted
[invite_link] :: DeleteChatFolderInviteLink -> Maybe Text
defaultDeleteChatFolderInviteLink :: DeleteChatFolderInviteLink
instance GHC.Show.Show TD.Query.DeleteChatFolderInviteLink.DeleteChatFolderInviteLink
instance GHC.Classes.Eq TD.Query.DeleteChatFolderInviteLink.DeleteChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatFolderInviteLink.DeleteChatFolderInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatFolderInviteLink.DeleteChatFolderInviteLink

module TD.Query.DeleteChatHistory

-- | Deletes all messages in the chat. Use
--   chat.can_be_deleted_only_for_self and
--   chat.can_be_deleted_for_all_users fields to find whether and how the
--   method can be applied to the chat. Returns <a>Ok</a>
data DeleteChatHistory
DeleteChatHistory :: Maybe Int -> Maybe Bool -> Maybe Bool -> DeleteChatHistory

-- | Chat identifier
[chat_id] :: DeleteChatHistory -> Maybe Int

-- | Pass true to remove the chat from all chat lists
[remove_from_chat_list] :: DeleteChatHistory -> Maybe Bool

-- | Pass true to delete chat history for all users
[revoke] :: DeleteChatHistory -> Maybe Bool
defaultDeleteChatHistory :: DeleteChatHistory
instance GHC.Show.Show TD.Query.DeleteChatHistory.DeleteChatHistory
instance GHC.Classes.Eq TD.Query.DeleteChatHistory.DeleteChatHistory
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatHistory.DeleteChatHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatHistory.DeleteChatHistory

module TD.Query.DeleteChatMessagesByDate

-- | Deletes all messages between the specified dates in a chat. Supported
--   only for private chats and basic groups. Messages sent in the last 30
--   seconds will not be deleted. Returns <a>Ok</a>
data DeleteChatMessagesByDate
DeleteChatMessagesByDate :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> DeleteChatMessagesByDate

-- | Chat identifier
[chat_id] :: DeleteChatMessagesByDate -> Maybe Int

-- | The minimum date of the messages to delete
[min_date] :: DeleteChatMessagesByDate -> Maybe Int

-- | The maximum date of the messages to delete
[max_date] :: DeleteChatMessagesByDate -> Maybe Int

-- | Pass true to delete chat messages for all users; private chats only
[revoke] :: DeleteChatMessagesByDate -> Maybe Bool
defaultDeleteChatMessagesByDate :: DeleteChatMessagesByDate
instance GHC.Show.Show TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate
instance GHC.Classes.Eq TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatMessagesByDate.DeleteChatMessagesByDate

module TD.Query.DeleteChatMessagesBySender

-- | Deletes all messages sent by the specified message sender in a chat.
--   Supported only for supergroups; requires can_delete_messages
--   administrator privileges. Returns <a>Ok</a>
data DeleteChatMessagesBySender
DeleteChatMessagesBySender :: Maybe Int -> Maybe MessageSender -> DeleteChatMessagesBySender

-- | Chat identifier
[chat_id] :: DeleteChatMessagesBySender -> Maybe Int

-- | Identifier of the sender of messages to delete
[sender_id] :: DeleteChatMessagesBySender -> Maybe MessageSender
defaultDeleteChatMessagesBySender :: DeleteChatMessagesBySender
instance GHC.Show.Show TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender
instance GHC.Classes.Eq TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatMessagesBySender.DeleteChatMessagesBySender

module TD.Query.DeleteChatReplyMarkup

-- | Deletes the default reply markup from a chat. Must be called after a
--   one-time keyboard or a replyMarkupForceReply reply markup has been
--   used. An updateChatReplyMarkup update will be sent if the reply markup
--   is changed. Returns <a>Ok</a>
data DeleteChatReplyMarkup
DeleteChatReplyMarkup :: Maybe Int -> Maybe Int -> DeleteChatReplyMarkup

-- | Chat identifier
[chat_id] :: DeleteChatReplyMarkup -> Maybe Int

-- | The message identifier of the used keyboard
[message_id] :: DeleteChatReplyMarkup -> Maybe Int
defaultDeleteChatReplyMarkup :: DeleteChatReplyMarkup
instance GHC.Show.Show TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup
instance GHC.Classes.Eq TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup
instance TD.Lib.Internal.ShortShow TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteChatReplyMarkup.DeleteChatReplyMarkup

module TD.Query.DeleteCommands

-- | Deletes commands supported by the bot for the given user scope and
--   language; for bots only. Returns <a>Ok</a>
data DeleteCommands
DeleteCommands :: Maybe BotCommandScope -> Maybe Text -> DeleteCommands

-- | The scope to which the commands are relevant; pass null to delete
--   commands in the default bot command scope
[scope] :: DeleteCommands -> Maybe BotCommandScope

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: DeleteCommands -> Maybe Text
defaultDeleteCommands :: DeleteCommands
instance GHC.Show.Show TD.Query.DeleteCommands.DeleteCommands
instance GHC.Classes.Eq TD.Query.DeleteCommands.DeleteCommands
instance TD.Lib.Internal.ShortShow TD.Query.DeleteCommands.DeleteCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteCommands.DeleteCommands

module TD.Query.DeleteDefaultBackground

-- | Deletes default background for chats. Returns <a>Ok</a>
data DeleteDefaultBackground
DeleteDefaultBackground :: Maybe Bool -> DeleteDefaultBackground

-- | Pass true if the background is deleted for a dark theme
[for_dark_theme] :: DeleteDefaultBackground -> Maybe Bool
instance GHC.Show.Show TD.Query.DeleteDefaultBackground.DeleteDefaultBackground
instance GHC.Classes.Eq TD.Query.DeleteDefaultBackground.DeleteDefaultBackground
instance TD.Lib.Internal.ShortShow TD.Query.DeleteDefaultBackground.DeleteDefaultBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteDefaultBackground.DeleteDefaultBackground

module TD.Query.DeleteFile

-- | Deletes a file from the TDLib file cache. Returns <a>Ok</a>
data DeleteFile
DeleteFile :: Maybe Int -> DeleteFile

-- | Identifier of the file to delete
[file_id] :: DeleteFile -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteFile.DeleteFile
instance GHC.Classes.Eq TD.Query.DeleteFile.DeleteFile
instance TD.Lib.Internal.ShortShow TD.Query.DeleteFile.DeleteFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteFile.DeleteFile

module TD.Query.DeleteForumTopic

-- | Deletes all messages in a forum topic; requires can_delete_messages
--   administrator right in the supergroup unless the user is creator of
--   the topic, the topic has no messages from other users and has at most
--   11 messages. Returns <a>Ok</a>
data DeleteForumTopic
DeleteForumTopic :: Maybe Int -> Maybe Int -> DeleteForumTopic

-- | Identifier of the chat
[chat_id] :: DeleteForumTopic -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: DeleteForumTopic -> Maybe Int
defaultDeleteForumTopic :: DeleteForumTopic
instance GHC.Show.Show TD.Query.DeleteForumTopic.DeleteForumTopic
instance GHC.Classes.Eq TD.Query.DeleteForumTopic.DeleteForumTopic
instance TD.Lib.Internal.ShortShow TD.Query.DeleteForumTopic.DeleteForumTopic
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteForumTopic.DeleteForumTopic

module TD.Query.DeleteLanguagePack

-- | Deletes all information about a language pack in the current
--   localization target. The language pack which is currently in use
--   (including base language pack) or is being synchronized can't be
--   deleted. Can be called before authorization. Returns <a>Ok</a>
data DeleteLanguagePack
DeleteLanguagePack :: Maybe Text -> DeleteLanguagePack

-- | Identifier of the language pack to delete
[language_pack_id] :: DeleteLanguagePack -> Maybe Text
instance GHC.Show.Show TD.Query.DeleteLanguagePack.DeleteLanguagePack
instance GHC.Classes.Eq TD.Query.DeleteLanguagePack.DeleteLanguagePack
instance TD.Lib.Internal.ShortShow TD.Query.DeleteLanguagePack.DeleteLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteLanguagePack.DeleteLanguagePack

module TD.Query.DeleteMessages

-- | Deletes messages. Returns <a>Ok</a>
data DeleteMessages
DeleteMessages :: Maybe Int -> Maybe [Int] -> Maybe Bool -> DeleteMessages

-- | Chat identifier
[chat_id] :: DeleteMessages -> Maybe Int

-- | Identifiers of the messages to be deleted
[message_ids] :: DeleteMessages -> Maybe [Int]

-- | Pass true to delete messages for all chat members. Always true for
--   supergroups, channels and secret chats
[revoke] :: DeleteMessages -> Maybe Bool
defaultDeleteMessages :: DeleteMessages
instance GHC.Show.Show TD.Query.DeleteMessages.DeleteMessages
instance GHC.Classes.Eq TD.Query.DeleteMessages.DeleteMessages
instance TD.Lib.Internal.ShortShow TD.Query.DeleteMessages.DeleteMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteMessages.DeleteMessages

module TD.Query.DeletePassportElement

-- | Deletes a Telegram Passport element. Returns <a>Ok</a>
data DeletePassportElement
DeletePassportElement :: Maybe PassportElementType -> DeletePassportElement

-- | Element type
[_type] :: DeletePassportElement -> Maybe PassportElementType
instance GHC.Show.Show TD.Query.DeletePassportElement.DeletePassportElement
instance GHC.Classes.Eq TD.Query.DeletePassportElement.DeletePassportElement
instance TD.Lib.Internal.ShortShow TD.Query.DeletePassportElement.DeletePassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeletePassportElement.DeletePassportElement

module TD.Query.DeleteProfilePhoto

-- | Deletes a profile photo. Returns <a>Ok</a>
data DeleteProfilePhoto
DeleteProfilePhoto :: Maybe Int -> DeleteProfilePhoto

-- | Identifier of the profile photo to delete
[profile_photo_id] :: DeleteProfilePhoto -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteProfilePhoto.DeleteProfilePhoto
instance GHC.Classes.Eq TD.Query.DeleteProfilePhoto.DeleteProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Query.DeleteProfilePhoto.DeleteProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteProfilePhoto.DeleteProfilePhoto

module TD.Query.DeleteQuickReplyShortcut

-- | Deletes a quick reply shortcut. Returns <a>Ok</a>
data DeleteQuickReplyShortcut
DeleteQuickReplyShortcut :: Maybe Int -> DeleteQuickReplyShortcut

-- | Unique identifier of the quick reply shortcut
[shortcut_id] :: DeleteQuickReplyShortcut -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteQuickReplyShortcut.DeleteQuickReplyShortcut
instance GHC.Classes.Eq TD.Query.DeleteQuickReplyShortcut.DeleteQuickReplyShortcut
instance TD.Lib.Internal.ShortShow TD.Query.DeleteQuickReplyShortcut.DeleteQuickReplyShortcut
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteQuickReplyShortcut.DeleteQuickReplyShortcut

module TD.Query.DeleteQuickReplyShortcutMessages

-- | Deletes specified quick reply messages. Returns <a>Ok</a>
data DeleteQuickReplyShortcutMessages
DeleteQuickReplyShortcutMessages :: Maybe Int -> Maybe [Int] -> DeleteQuickReplyShortcutMessages

-- | Unique identifier of the quick reply shortcut to which the messages
--   belong
[shortcut_id] :: DeleteQuickReplyShortcutMessages -> Maybe Int

-- | Unique identifiers of the messages
[message_ids] :: DeleteQuickReplyShortcutMessages -> Maybe [Int]
defaultDeleteQuickReplyShortcutMessages :: DeleteQuickReplyShortcutMessages
instance GHC.Show.Show TD.Query.DeleteQuickReplyShortcutMessages.DeleteQuickReplyShortcutMessages
instance GHC.Classes.Eq TD.Query.DeleteQuickReplyShortcutMessages.DeleteQuickReplyShortcutMessages
instance TD.Lib.Internal.ShortShow TD.Query.DeleteQuickReplyShortcutMessages.DeleteQuickReplyShortcutMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteQuickReplyShortcutMessages.DeleteQuickReplyShortcutMessages

module TD.Query.DeleteRevokedChatInviteLink

-- | Deletes revoked chat invite links. Requires administrator privileges
--   and can_invite_users right in the chat for own links and owner
--   privileges for other links. Returns <a>Ok</a>
data DeleteRevokedChatInviteLink
DeleteRevokedChatInviteLink :: Maybe Int -> Maybe Text -> DeleteRevokedChatInviteLink

-- | Chat identifier
[chat_id] :: DeleteRevokedChatInviteLink -> Maybe Int

-- | Invite link to revoke
[invite_link] :: DeleteRevokedChatInviteLink -> Maybe Text
defaultDeleteRevokedChatInviteLink :: DeleteRevokedChatInviteLink
instance GHC.Show.Show TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink
instance GHC.Classes.Eq TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteRevokedChatInviteLink.DeleteRevokedChatInviteLink

module TD.Query.DeleteSavedCredentials

-- | Deletes saved credentials for all payment provider bots. Returns
--   <a>Ok</a>
data DeleteSavedCredentials
DeleteSavedCredentials :: DeleteSavedCredentials
instance GHC.Show.Show TD.Query.DeleteSavedCredentials.DeleteSavedCredentials
instance GHC.Classes.Eq TD.Query.DeleteSavedCredentials.DeleteSavedCredentials
instance TD.Lib.Internal.ShortShow TD.Query.DeleteSavedCredentials.DeleteSavedCredentials
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedCredentials.DeleteSavedCredentials

module TD.Query.DeleteSavedMessagesTopicHistory

-- | Deletes all messages in a Saved Messages topic. Returns <a>Ok</a>
data DeleteSavedMessagesTopicHistory
DeleteSavedMessagesTopicHistory :: Maybe Int -> DeleteSavedMessagesTopicHistory

-- | Identifier of Saved Messages topic which messages will be deleted
[saved_messages_topic_id] :: DeleteSavedMessagesTopicHistory -> Maybe Int
instance GHC.Show.Show TD.Query.DeleteSavedMessagesTopicHistory.DeleteSavedMessagesTopicHistory
instance GHC.Classes.Eq TD.Query.DeleteSavedMessagesTopicHistory.DeleteSavedMessagesTopicHistory
instance TD.Lib.Internal.ShortShow TD.Query.DeleteSavedMessagesTopicHistory.DeleteSavedMessagesTopicHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedMessagesTopicHistory.DeleteSavedMessagesTopicHistory

module TD.Query.DeleteSavedMessagesTopicMessagesByDate

-- | Deletes all messages between the specified dates in a Saved Messages
--   topic. Messages sent in the last 30 seconds will not be deleted.
--   Returns <a>Ok</a>
data DeleteSavedMessagesTopicMessagesByDate
DeleteSavedMessagesTopicMessagesByDate :: Maybe Int -> Maybe Int -> Maybe Int -> DeleteSavedMessagesTopicMessagesByDate

-- | Identifier of Saved Messages topic which messages will be deleted
[saved_messages_topic_id] :: DeleteSavedMessagesTopicMessagesByDate -> Maybe Int

-- | The minimum date of the messages to delete
[min_date] :: DeleteSavedMessagesTopicMessagesByDate -> Maybe Int

-- | The maximum date of the messages to delete
[max_date] :: DeleteSavedMessagesTopicMessagesByDate -> Maybe Int
defaultDeleteSavedMessagesTopicMessagesByDate :: DeleteSavedMessagesTopicMessagesByDate
instance GHC.Show.Show TD.Query.DeleteSavedMessagesTopicMessagesByDate.DeleteSavedMessagesTopicMessagesByDate
instance GHC.Classes.Eq TD.Query.DeleteSavedMessagesTopicMessagesByDate.DeleteSavedMessagesTopicMessagesByDate
instance TD.Lib.Internal.ShortShow TD.Query.DeleteSavedMessagesTopicMessagesByDate.DeleteSavedMessagesTopicMessagesByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedMessagesTopicMessagesByDate.DeleteSavedMessagesTopicMessagesByDate

module TD.Query.DeleteSavedOrderInfo

-- | Deletes saved order information. Returns <a>Ok</a>
data DeleteSavedOrderInfo
DeleteSavedOrderInfo :: DeleteSavedOrderInfo
instance GHC.Show.Show TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo
instance GHC.Classes.Eq TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo
instance TD.Lib.Internal.ShortShow TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteSavedOrderInfo.DeleteSavedOrderInfo

module TD.Query.DeleteStickerSet

-- | Completely deletes a sticker set. Returns <a>Ok</a>
data DeleteStickerSet
DeleteStickerSet :: Maybe Text -> DeleteStickerSet

-- | Sticker set name. The sticker set must be owned by the current user
[name] :: DeleteStickerSet -> Maybe Text
instance GHC.Show.Show TD.Query.DeleteStickerSet.DeleteStickerSet
instance GHC.Classes.Eq TD.Query.DeleteStickerSet.DeleteStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.DeleteStickerSet.DeleteStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteStickerSet.DeleteStickerSet

module TD.Query.DeleteStory

-- | Deletes a previously sent story. Can be called only if
--   story.can_be_deleted == true. Returns <a>Ok</a>
data DeleteStory
DeleteStory :: Maybe Int -> Maybe Int -> DeleteStory

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: DeleteStory -> Maybe Int

-- | Identifier of the story to delete
[story_id] :: DeleteStory -> Maybe Int
defaultDeleteStory :: DeleteStory
instance GHC.Show.Show TD.Query.DeleteStory.DeleteStory
instance GHC.Classes.Eq TD.Query.DeleteStory.DeleteStory
instance TD.Lib.Internal.ShortShow TD.Query.DeleteStory.DeleteStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DeleteStory.DeleteStory

module TD.Query.Destroy

-- | Closes the TDLib instance, destroying all local data without a proper
--   logout. The current user session will remain in the list of all active
--   sessions. All local data will be destroyed. After the destruction
--   completes updateAuthorizationState with authorizationStateClosed will
--   be sent. Can be called before authorization. Returns <a>Ok</a>
data Destroy
Destroy :: Destroy
instance GHC.Show.Show TD.Query.Destroy.Destroy
instance GHC.Classes.Eq TD.Query.Destroy.Destroy
instance TD.Lib.Internal.ShortShow TD.Query.Destroy.Destroy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.Destroy.Destroy

module TD.Query.DisableAllSupergroupUsernames

-- | Disables all active non-editable usernames of a supergroup or channel,
--   requires owner privileges in the supergroup or channel. Returns
--   <a>Ok</a>
data DisableAllSupergroupUsernames
DisableAllSupergroupUsernames :: Maybe Int -> DisableAllSupergroupUsernames

-- | Identifier of the supergroup or channel
[supergroup_id] :: DisableAllSupergroupUsernames -> Maybe Int
instance GHC.Show.Show TD.Query.DisableAllSupergroupUsernames.DisableAllSupergroupUsernames
instance GHC.Classes.Eq TD.Query.DisableAllSupergroupUsernames.DisableAllSupergroupUsernames
instance TD.Lib.Internal.ShortShow TD.Query.DisableAllSupergroupUsernames.DisableAllSupergroupUsernames
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisableAllSupergroupUsernames.DisableAllSupergroupUsernames

module TD.Query.DisableProxy

-- | Disables the currently enabled proxy. Can be called before
--   authorization. Returns <a>Ok</a>
data DisableProxy
DisableProxy :: DisableProxy
instance GHC.Show.Show TD.Query.DisableProxy.DisableProxy
instance GHC.Classes.Eq TD.Query.DisableProxy.DisableProxy
instance TD.Lib.Internal.ShortShow TD.Query.DisableProxy.DisableProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisableProxy.DisableProxy

module TD.Query.DiscardCall

-- | Discards a call. Returns <a>Ok</a>
data DiscardCall
DiscardCall :: Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> DiscardCall

-- | Call identifier
[call_id] :: DiscardCall -> Maybe Int

-- | Pass true if the user was disconnected
[is_disconnected] :: DiscardCall -> Maybe Bool

-- | The call duration, in seconds
[duration] :: DiscardCall -> Maybe Int

-- | Pass true if the call was a video call
[is_video] :: DiscardCall -> Maybe Bool

-- | Identifier of the connection used during the call
[connection_id] :: DiscardCall -> Maybe Int
defaultDiscardCall :: DiscardCall
instance GHC.Show.Show TD.Query.DiscardCall.DiscardCall
instance GHC.Classes.Eq TD.Query.DiscardCall.DiscardCall
instance TD.Lib.Internal.ShortShow TD.Query.DiscardCall.DiscardCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DiscardCall.DiscardCall

module TD.Query.DisconnectAllWebsites

-- | Disconnects all websites from the current user's Telegram account.
--   Returns <a>Ok</a>
data DisconnectAllWebsites
DisconnectAllWebsites :: DisconnectAllWebsites
instance GHC.Show.Show TD.Query.DisconnectAllWebsites.DisconnectAllWebsites
instance GHC.Classes.Eq TD.Query.DisconnectAllWebsites.DisconnectAllWebsites
instance TD.Lib.Internal.ShortShow TD.Query.DisconnectAllWebsites.DisconnectAllWebsites
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisconnectAllWebsites.DisconnectAllWebsites

module TD.Query.DisconnectWebsite

-- | Disconnects website from the current user's Telegram account. Returns
--   <a>Ok</a>
data DisconnectWebsite
DisconnectWebsite :: Maybe Int -> DisconnectWebsite

-- | Website identifier
[website_id] :: DisconnectWebsite -> Maybe Int
instance GHC.Show.Show TD.Query.DisconnectWebsite.DisconnectWebsite
instance GHC.Classes.Eq TD.Query.DisconnectWebsite.DisconnectWebsite
instance TD.Lib.Internal.ShortShow TD.Query.DisconnectWebsite.DisconnectWebsite
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DisconnectWebsite.DisconnectWebsite

module TD.Query.DownloadFile

-- | Downloads a file from the cloud. Download progress and completion of
--   the download will be notified through updateFile updates. Returns
--   <a>File</a>
data DownloadFile
DownloadFile :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> DownloadFile

-- | Identifier of the file to download
[file_id] :: DownloadFile -> Maybe Int

-- | Priority of the download (1-32). The higher the priority, the earlier
--   the file will be downloaded. If the priorities of two files are equal,
--   then the last one for which downloadFile/addFileToDownloads was called
--   will be downloaded first
[priority] :: DownloadFile -> Maybe Int

-- | The starting position from which the file needs to be downloaded
[offset] :: DownloadFile -> Maybe Int

-- | Number of bytes which need to be downloaded starting from the "offset"
--   position before the download will automatically be canceled; use 0 to
--   download without a limit
[limit] :: DownloadFile -> Maybe Int

-- | Pass true to return response only after the file download has
--   succeeded, has failed, has been canceled, or a new downloadFile
--   request with different offset/limit parameters was sent; pass false to
--   return file state immediately, just after the download has been
--   started
[synchronous] :: DownloadFile -> Maybe Bool
defaultDownloadFile :: DownloadFile
instance GHC.Show.Show TD.Query.DownloadFile.DownloadFile
instance GHC.Classes.Eq TD.Query.DownloadFile.DownloadFile
instance TD.Lib.Internal.ShortShow TD.Query.DownloadFile.DownloadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.DownloadFile.DownloadFile

module TD.Query.EditBusinessChatLink

-- | Edits a business chat link of the current account. Requires Telegram
--   Business subscription. Returns the edited link. Returns
--   <a>BusinessChatLink</a>
data EditBusinessChatLink
EditBusinessChatLink :: Maybe Text -> Maybe InputBusinessChatLink -> EditBusinessChatLink

-- | The link to edit
[link] :: EditBusinessChatLink -> Maybe Text

-- | New description of the link
[link_info] :: EditBusinessChatLink -> Maybe InputBusinessChatLink
defaultEditBusinessChatLink :: EditBusinessChatLink
instance GHC.Show.Show TD.Query.EditBusinessChatLink.EditBusinessChatLink
instance GHC.Classes.Eq TD.Query.EditBusinessChatLink.EditBusinessChatLink
instance TD.Lib.Internal.ShortShow TD.Query.EditBusinessChatLink.EditBusinessChatLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditBusinessChatLink.EditBusinessChatLink

module TD.Query.EditChatFolder

-- | Edits existing chat folder. Returns information about the edited chat
--   folder. Returns <a>ChatFolderInfo</a>
data EditChatFolder
EditChatFolder :: Maybe Int -> Maybe ChatFolder -> EditChatFolder

-- | Chat folder identifier
[chat_folder_id] :: EditChatFolder -> Maybe Int

-- | The edited chat folder
[folder] :: EditChatFolder -> Maybe ChatFolder
defaultEditChatFolder :: EditChatFolder
instance GHC.Show.Show TD.Query.EditChatFolder.EditChatFolder
instance GHC.Classes.Eq TD.Query.EditChatFolder.EditChatFolder
instance TD.Lib.Internal.ShortShow TD.Query.EditChatFolder.EditChatFolder
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditChatFolder.EditChatFolder

module TD.Query.EditChatFolderInviteLink

-- | Edits an invite link for a chat folder. Returns
--   <a>ChatFolderInviteLink</a>
data EditChatFolderInviteLink
EditChatFolderInviteLink :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe [Int] -> EditChatFolderInviteLink

-- | Chat folder identifier
[chat_folder_id] :: EditChatFolderInviteLink -> Maybe Int

-- | Invite link to be edited
[invite_link] :: EditChatFolderInviteLink -> Maybe Text

-- | New name of the link; 0-32 characters
[name] :: EditChatFolderInviteLink -> Maybe Text

-- | New identifiers of chats to be accessible by the invite link. Use
--   getChatsForChatFolderInviteLink to get suitable chats. Basic groups
--   will be automatically converted to supergroups before link editing
[chat_ids] :: EditChatFolderInviteLink -> Maybe [Int]
defaultEditChatFolderInviteLink :: EditChatFolderInviteLink
instance GHC.Show.Show TD.Query.EditChatFolderInviteLink.EditChatFolderInviteLink
instance GHC.Classes.Eq TD.Query.EditChatFolderInviteLink.EditChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.EditChatFolderInviteLink.EditChatFolderInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditChatFolderInviteLink.EditChatFolderInviteLink

module TD.Query.EditChatInviteLink

-- | Edits a non-primary invite link for a chat. Available for basic
--   groups, supergroups, and channels. Requires administrator privileges
--   and can_invite_users right in the chat for own links and owner
--   privileges for other links. Returns <a>ChatInviteLink</a>
data EditChatInviteLink
EditChatInviteLink :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> EditChatInviteLink

-- | Chat identifier
[chat_id] :: EditChatInviteLink -> Maybe Int

-- | Invite link to be edited
[invite_link] :: EditChatInviteLink -> Maybe Text

-- | Invite link name; 0-32 characters
[name] :: EditChatInviteLink -> Maybe Text

-- | Point in time (Unix timestamp) when the link will expire; pass 0 if
--   never
[expiration_date] :: EditChatInviteLink -> Maybe Int

-- | The maximum number of chat members that can join the chat via the link
--   simultaneously; 0-99999; pass 0 if not limited
[member_limit] :: EditChatInviteLink -> Maybe Int

-- | Pass true if users joining the chat via the link need to be approved
--   by chat administrators. In this case, member_limit must be 0
[creates_join_request] :: EditChatInviteLink -> Maybe Bool
defaultEditChatInviteLink :: EditChatInviteLink
instance GHC.Show.Show TD.Query.EditChatInviteLink.EditChatInviteLink
instance GHC.Classes.Eq TD.Query.EditChatInviteLink.EditChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.EditChatInviteLink.EditChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditChatInviteLink.EditChatInviteLink

module TD.Query.EditCustomLanguagePackInfo

-- | Edits information about a custom local language pack in the current
--   localization target. Can be called before authorization. Returns
--   <a>Ok</a>
data EditCustomLanguagePackInfo
EditCustomLanguagePackInfo :: Maybe LanguagePackInfo -> EditCustomLanguagePackInfo

-- | New information about the custom local language pack
[info] :: EditCustomLanguagePackInfo -> Maybe LanguagePackInfo
instance GHC.Show.Show TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo
instance GHC.Classes.Eq TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo
instance TD.Lib.Internal.ShortShow TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditCustomLanguagePackInfo.EditCustomLanguagePackInfo

module TD.Query.EditForumTopic

-- | Edits title and icon of a topic in a forum supergroup chat; requires
--   can_manage_topics right in the supergroup unless the user is creator
--   of the topic. Returns <a>Ok</a>
data EditForumTopic
EditForumTopic :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Int -> EditForumTopic

-- | Identifier of the chat
[chat_id] :: EditForumTopic -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: EditForumTopic -> Maybe Int

-- | New name of the topic; 0-128 characters. If empty, the previous topic
--   name is kept
[name] :: EditForumTopic -> Maybe Text

-- | Pass true to edit the icon of the topic. Icon of the General topic
--   can't be edited
[edit_icon_custom_emoji] :: EditForumTopic -> Maybe Bool

-- | Identifier of the new custom emoji for topic icon; pass 0 to remove
--   the custom emoji. Ignored if edit_icon_custom_emoji is false. Telegram
--   Premium users can use any custom emoji, other users can use only a
--   custom emoji returned by getForumTopicDefaultIcons
[icon_custom_emoji_id] :: EditForumTopic -> Maybe Int
defaultEditForumTopic :: EditForumTopic
instance GHC.Show.Show TD.Query.EditForumTopic.EditForumTopic
instance GHC.Classes.Eq TD.Query.EditForumTopic.EditForumTopic
instance TD.Lib.Internal.ShortShow TD.Query.EditForumTopic.EditForumTopic
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditForumTopic.EditForumTopic

module TD.Query.EditInlineMessageCaption

-- | Edits the caption of an inline message sent via a bot; for bots only.
--   Returns <a>Ok</a>
data EditInlineMessageCaption
EditInlineMessageCaption :: Maybe Text -> Maybe ReplyMarkup -> Maybe FormattedText -> EditInlineMessageCaption

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageCaption -> Maybe Text

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageCaption -> Maybe ReplyMarkup

-- | New message content caption; pass null to remove caption;
--   0-getOption("message_caption_length_max") characters
[caption] :: EditInlineMessageCaption -> Maybe FormattedText
defaultEditInlineMessageCaption :: EditInlineMessageCaption
instance GHC.Show.Show TD.Query.EditInlineMessageCaption.EditInlineMessageCaption
instance GHC.Classes.Eq TD.Query.EditInlineMessageCaption.EditInlineMessageCaption
instance TD.Lib.Internal.ShortShow TD.Query.EditInlineMessageCaption.EditInlineMessageCaption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageCaption.EditInlineMessageCaption

module TD.Query.EditInlineMessageLiveLocation

-- | Edits the content of a live location in an inline message sent via a
--   bot; for bots only. Returns <a>Ok</a>
data EditInlineMessageLiveLocation
EditInlineMessageLiveLocation :: Maybe Text -> Maybe ReplyMarkup -> Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> EditInlineMessageLiveLocation

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageLiveLocation -> Maybe Text

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageLiveLocation -> Maybe ReplyMarkup

-- | New location content of the message; pass null to stop sharing the
--   live location
[location] :: EditInlineMessageLiveLocation -> Maybe Location

-- | New time relative to the message send date, for which the location can
--   be updated, in seconds. If 0x7FFFFFFF specified, then the location can
--   be updated forever. Otherwise, must not exceed the current live_period
--   by more than a day, and the live location expiration date must remain
--   in the next 90 days. Pass 0 to keep the current live_period
[live_period] :: EditInlineMessageLiveLocation -> Maybe Int

-- | The new direction in which the location moves, in degrees; 1-360. Pass
--   0 if unknown
[heading] :: EditInlineMessageLiveLocation -> Maybe Int

-- | The new maximum distance for proximity alerts, in meters (0-100000).
--   Pass 0 if the notification is disabled
[proximity_alert_radius] :: EditInlineMessageLiveLocation -> Maybe Int
defaultEditInlineMessageLiveLocation :: EditInlineMessageLiveLocation
instance GHC.Show.Show TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation
instance GHC.Classes.Eq TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation
instance TD.Lib.Internal.ShortShow TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageLiveLocation.EditInlineMessageLiveLocation

module TD.Query.EditInlineMessageMedia

-- | Edits the content of a message with an animation, an audio, a
--   document, a photo or a video in an inline message sent via a bot; for
--   bots only. Returns <a>Ok</a>
data EditInlineMessageMedia
EditInlineMessageMedia :: Maybe Text -> Maybe ReplyMarkup -> Maybe InputMessageContent -> EditInlineMessageMedia

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageMedia -> Maybe Text

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditInlineMessageMedia -> Maybe ReplyMarkup

-- | New content of the message. Must be one of the following types:
--   inputMessageAnimation, inputMessageAudio, inputMessageDocument,
--   inputMessagePhoto or inputMessageVideo
[input_message_content] :: EditInlineMessageMedia -> Maybe InputMessageContent
defaultEditInlineMessageMedia :: EditInlineMessageMedia
instance GHC.Show.Show TD.Query.EditInlineMessageMedia.EditInlineMessageMedia
instance GHC.Classes.Eq TD.Query.EditInlineMessageMedia.EditInlineMessageMedia
instance TD.Lib.Internal.ShortShow TD.Query.EditInlineMessageMedia.EditInlineMessageMedia
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageMedia.EditInlineMessageMedia

module TD.Query.EditInlineMessageReplyMarkup

-- | Edits the reply markup of an inline message sent via a bot; for bots
--   only. Returns <a>Ok</a>
data EditInlineMessageReplyMarkup
EditInlineMessageReplyMarkup :: Maybe Text -> Maybe ReplyMarkup -> EditInlineMessageReplyMarkup

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageReplyMarkup -> Maybe Text

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageReplyMarkup -> Maybe ReplyMarkup
defaultEditInlineMessageReplyMarkup :: EditInlineMessageReplyMarkup
instance GHC.Show.Show TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup
instance GHC.Classes.Eq TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup
instance TD.Lib.Internal.ShortShow TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageReplyMarkup.EditInlineMessageReplyMarkup

module TD.Query.EditInlineMessageText

-- | Edits the text of an inline text or game message sent via a bot; for
--   bots only. Returns <a>Ok</a>
data EditInlineMessageText
EditInlineMessageText :: Maybe Text -> Maybe ReplyMarkup -> Maybe InputMessageContent -> EditInlineMessageText

-- | Inline message identifier
[inline_message_id] :: EditInlineMessageText -> Maybe Text

-- | The new message reply markup; pass null if none
[reply_markup] :: EditInlineMessageText -> Maybe ReplyMarkup

-- | New text content of the message. Must be of type inputMessageText
[input_message_content] :: EditInlineMessageText -> Maybe InputMessageContent
defaultEditInlineMessageText :: EditInlineMessageText
instance GHC.Show.Show TD.Query.EditInlineMessageText.EditInlineMessageText
instance GHC.Classes.Eq TD.Query.EditInlineMessageText.EditInlineMessageText
instance TD.Lib.Internal.ShortShow TD.Query.EditInlineMessageText.EditInlineMessageText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditInlineMessageText.EditInlineMessageText

module TD.Query.EditMessageCaption

-- | Edits the message content caption. Returns the edited message after
--   the edit is completed on the server side. Returns <a>Message</a>
data EditMessageCaption
EditMessageCaption :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe FormattedText -> EditMessageCaption

-- | The chat the message belongs to
[chat_id] :: EditMessageCaption -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageCaption -> Maybe Int

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageCaption -> Maybe ReplyMarkup

-- | New message content caption; 0-getOption("message_caption_length_max")
--   characters; pass null to remove caption
[caption] :: EditMessageCaption -> Maybe FormattedText
defaultEditMessageCaption :: EditMessageCaption
instance GHC.Show.Show TD.Query.EditMessageCaption.EditMessageCaption
instance GHC.Classes.Eq TD.Query.EditMessageCaption.EditMessageCaption
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageCaption.EditMessageCaption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageCaption.EditMessageCaption

module TD.Query.EditMessageLiveLocation

-- | Edits the message content of a live location. Messages can be edited
--   for a limited period of time specified in the live location. Returns
--   the edited message after the edit is completed on the server side.
--   Returns <a>Message</a>
data EditMessageLiveLocation
EditMessageLiveLocation :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> EditMessageLiveLocation

-- | The chat the message belongs to
[chat_id] :: EditMessageLiveLocation -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageLiveLocation -> Maybe Int

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageLiveLocation -> Maybe ReplyMarkup

-- | New location content of the message; pass null to stop sharing the
--   live location
[location] :: EditMessageLiveLocation -> Maybe Location

-- | New time relative to the message send date, for which the location can
--   be updated, in seconds. If 0x7FFFFFFF specified, then the location can
--   be updated forever. Otherwise, must not exceed the current live_period
--   by more than a day, and the live location expiration date must remain
--   in the next 90 days. Pass 0 to keep the current live_period
[live_period] :: EditMessageLiveLocation -> Maybe Int

-- | The new direction in which the location moves, in degrees; 1-360. Pass
--   0 if unknown
[heading] :: EditMessageLiveLocation -> Maybe Int

-- | The new maximum distance for proximity alerts, in meters (0-100000).
--   Pass 0 if the notification is disabled
[proximity_alert_radius] :: EditMessageLiveLocation -> Maybe Int
defaultEditMessageLiveLocation :: EditMessageLiveLocation
instance GHC.Show.Show TD.Query.EditMessageLiveLocation.EditMessageLiveLocation
instance GHC.Classes.Eq TD.Query.EditMessageLiveLocation.EditMessageLiveLocation
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageLiveLocation.EditMessageLiveLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageLiveLocation.EditMessageLiveLocation

module TD.Query.EditMessageMedia

-- | Edits the content of a message with an animation, an audio, a
--   document, a photo or a video, including message caption. If only the
--   caption needs to be edited, use editMessageCaption instead. The media
--   can't be edited if the message was set to self-destruct or to a
--   self-destructing media. The type of message content in an album can't
--   be changed with exception of replacing a photo with a video or vice
--   versa. Returns the edited message after the edit is completed on the
--   server side. Returns <a>Message</a>
data EditMessageMedia
EditMessageMedia :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> EditMessageMedia

-- | The chat the message belongs to
[chat_id] :: EditMessageMedia -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageMedia -> Maybe Int

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageMedia -> Maybe ReplyMarkup

-- | New content of the message. Must be one of the following types:
--   inputMessageAnimation, inputMessageAudio, inputMessageDocument,
--   inputMessagePhoto or inputMessageVideo
[input_message_content] :: EditMessageMedia -> Maybe InputMessageContent
defaultEditMessageMedia :: EditMessageMedia
instance GHC.Show.Show TD.Query.EditMessageMedia.EditMessageMedia
instance GHC.Classes.Eq TD.Query.EditMessageMedia.EditMessageMedia
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageMedia.EditMessageMedia
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageMedia.EditMessageMedia

module TD.Query.EditMessageReplyMarkup

-- | Edits the message reply markup; for bots only. Returns the edited
--   message after the edit is completed on the server side. Returns
--   <a>Message</a>
data EditMessageReplyMarkup
EditMessageReplyMarkup :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> EditMessageReplyMarkup

-- | The chat the message belongs to
[chat_id] :: EditMessageReplyMarkup -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageReplyMarkup -> Maybe Int

-- | The new message reply markup; pass null if none
[reply_markup] :: EditMessageReplyMarkup -> Maybe ReplyMarkup
defaultEditMessageReplyMarkup :: EditMessageReplyMarkup
instance GHC.Show.Show TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup
instance GHC.Classes.Eq TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageReplyMarkup.EditMessageReplyMarkup

module TD.Query.EditMessageSchedulingState

-- | Edits the time when a scheduled message will be sent. Scheduling state
--   of all messages in the same album or forwarded together with the
--   message will be also changed. Returns <a>Ok</a>
data EditMessageSchedulingState
EditMessageSchedulingState :: Maybe Int -> Maybe Int -> Maybe MessageSchedulingState -> EditMessageSchedulingState

-- | The chat the message belongs to
[chat_id] :: EditMessageSchedulingState -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageSchedulingState -> Maybe Int

-- | The new message scheduling state; pass null to send the message
--   immediately
[scheduling_state] :: EditMessageSchedulingState -> Maybe MessageSchedulingState
defaultEditMessageSchedulingState :: EditMessageSchedulingState
instance GHC.Show.Show TD.Query.EditMessageSchedulingState.EditMessageSchedulingState
instance GHC.Classes.Eq TD.Query.EditMessageSchedulingState.EditMessageSchedulingState
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageSchedulingState.EditMessageSchedulingState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageSchedulingState.EditMessageSchedulingState

module TD.Query.EditMessageText

-- | Edits the text of a message (or a text of a game message). Returns the
--   edited message after the edit is completed on the server side. Returns
--   <a>Message</a>
data EditMessageText
EditMessageText :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> Maybe InputMessageContent -> EditMessageText

-- | The chat the message belongs to
[chat_id] :: EditMessageText -> Maybe Int

-- | Identifier of the message
[message_id] :: EditMessageText -> Maybe Int

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: EditMessageText -> Maybe ReplyMarkup

-- | New text content of the message. Must be of type inputMessageText
[input_message_content] :: EditMessageText -> Maybe InputMessageContent
defaultEditMessageText :: EditMessageText
instance GHC.Show.Show TD.Query.EditMessageText.EditMessageText
instance GHC.Classes.Eq TD.Query.EditMessageText.EditMessageText
instance TD.Lib.Internal.ShortShow TD.Query.EditMessageText.EditMessageText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditMessageText.EditMessageText

module TD.Query.EditProxy

-- | Edits an existing proxy server for network requests. Can be called
--   before authorization. Returns <a>Proxy</a>
data EditProxy
EditProxy :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe ProxyType -> EditProxy

-- | Proxy identifier
[proxy_id] :: EditProxy -> Maybe Int

-- | Proxy server domain or IP address
[server] :: EditProxy -> Maybe Text

-- | Proxy server port
[port] :: EditProxy -> Maybe Int

-- | Pass true to immediately enable the proxy
[enable] :: EditProxy -> Maybe Bool

-- | Proxy type
[_type] :: EditProxy -> Maybe ProxyType
defaultEditProxy :: EditProxy
instance GHC.Show.Show TD.Query.EditProxy.EditProxy
instance GHC.Classes.Eq TD.Query.EditProxy.EditProxy
instance TD.Lib.Internal.ShortShow TD.Query.EditProxy.EditProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditProxy.EditProxy

module TD.Query.EditQuickReplyMessage

-- | Asynchronously edits the text, media or caption of a quick reply
--   message. Use quickReplyMessage.can_be_edited to check whether a
--   message can be edited. Text message can be edited only to a text
--   message. The type of message content in an album can't be changed with
--   exception of replacing a photo with a video or vice versa. Returns
--   <a>Ok</a>
data EditQuickReplyMessage
EditQuickReplyMessage :: Maybe Int -> Maybe Int -> Maybe InputMessageContent -> EditQuickReplyMessage

-- | Unique identifier of the quick reply shortcut with the message
[shortcut_id] :: EditQuickReplyMessage -> Maybe Int

-- | Identifier of the message
[message_id] :: EditQuickReplyMessage -> Maybe Int

-- | New content of the message. Must be one of the following types:
--   inputMessageText, inputMessageAnimation, inputMessageAudio,
--   inputMessageDocument, inputMessagePhoto or inputMessageVideo
[input_message_content] :: EditQuickReplyMessage -> Maybe InputMessageContent
defaultEditQuickReplyMessage :: EditQuickReplyMessage
instance GHC.Show.Show TD.Query.EditQuickReplyMessage.EditQuickReplyMessage
instance GHC.Classes.Eq TD.Query.EditQuickReplyMessage.EditQuickReplyMessage
instance TD.Lib.Internal.ShortShow TD.Query.EditQuickReplyMessage.EditQuickReplyMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditQuickReplyMessage.EditQuickReplyMessage

module TD.Query.EditStory

-- | Changes content and caption of a story. Can be called only if
--   story.can_be_edited == true. Returns <a>Ok</a>
data EditStory
EditStory :: Maybe Int -> Maybe Int -> Maybe InputStoryContent -> Maybe InputStoryAreas -> Maybe FormattedText -> EditStory

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: EditStory -> Maybe Int

-- | Identifier of the story to edit
[story_id] :: EditStory -> Maybe Int

-- | New content of the story; pass null to keep the current content
[content] :: EditStory -> Maybe InputStoryContent

-- | New clickable rectangle areas to be shown on the story media; pass
--   null to keep the current areas. Areas can't be edited if story content
--   isn't changed
[areas] :: EditStory -> Maybe InputStoryAreas

-- | New story caption; pass null to keep the current caption
[caption] :: EditStory -> Maybe FormattedText
defaultEditStory :: EditStory
instance GHC.Show.Show TD.Query.EditStory.EditStory
instance GHC.Classes.Eq TD.Query.EditStory.EditStory
instance TD.Lib.Internal.ShortShow TD.Query.EditStory.EditStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EditStory.EditStory

module TD.Query.EnableProxy

-- | Enables a proxy. Only one proxy can be enabled at a time. Can be
--   called before authorization. Returns <a>Ok</a>
data EnableProxy
EnableProxy :: Maybe Int -> EnableProxy

-- | Proxy identifier
[proxy_id] :: EnableProxy -> Maybe Int
instance GHC.Show.Show TD.Query.EnableProxy.EnableProxy
instance GHC.Classes.Eq TD.Query.EnableProxy.EnableProxy
instance TD.Lib.Internal.ShortShow TD.Query.EnableProxy.EnableProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EnableProxy.EnableProxy

module TD.Query.EndGroupCall

-- | Ends a group call. Requires groupCall.can_be_managed. Returns
--   <a>Ok</a>
data EndGroupCall
EndGroupCall :: Maybe Int -> EndGroupCall

-- | Group call identifier
[group_call_id] :: EndGroupCall -> Maybe Int
instance GHC.Show.Show TD.Query.EndGroupCall.EndGroupCall
instance GHC.Classes.Eq TD.Query.EndGroupCall.EndGroupCall
instance TD.Lib.Internal.ShortShow TD.Query.EndGroupCall.EndGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCall.EndGroupCall

module TD.Query.EndGroupCallRecording

-- | Ends recording of an active group call. Requires
--   groupCall.can_be_managed group call flag. Returns <a>Ok</a>
data EndGroupCallRecording
EndGroupCallRecording :: Maybe Int -> EndGroupCallRecording

-- | Group call identifier
[group_call_id] :: EndGroupCallRecording -> Maybe Int
instance GHC.Show.Show TD.Query.EndGroupCallRecording.EndGroupCallRecording
instance GHC.Classes.Eq TD.Query.EndGroupCallRecording.EndGroupCallRecording
instance TD.Lib.Internal.ShortShow TD.Query.EndGroupCallRecording.EndGroupCallRecording
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCallRecording.EndGroupCallRecording

module TD.Query.EndGroupCallScreenSharing

-- | Ends screen sharing in a joined group call. Returns <a>Ok</a>
data EndGroupCallScreenSharing
EndGroupCallScreenSharing :: Maybe Int -> EndGroupCallScreenSharing

-- | Group call identifier
[group_call_id] :: EndGroupCallScreenSharing -> Maybe Int
instance GHC.Show.Show TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing
instance GHC.Classes.Eq TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing
instance TD.Lib.Internal.ShortShow TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.EndGroupCallScreenSharing.EndGroupCallScreenSharing

module TD.Query.FinishFileGeneration

-- | Finishes the file generation. Returns <a>Ok</a>
data FinishFileGeneration
FinishFileGeneration :: Maybe Int -> Maybe Error -> FinishFileGeneration

-- | The identifier of the generation process
[generation_id] :: FinishFileGeneration -> Maybe Int

-- | If passed, the file generation has failed and must be terminated; pass
--   null if the file generation succeeded
[_error] :: FinishFileGeneration -> Maybe Error
defaultFinishFileGeneration :: FinishFileGeneration
instance GHC.Show.Show TD.Query.FinishFileGeneration.FinishFileGeneration
instance GHC.Classes.Eq TD.Query.FinishFileGeneration.FinishFileGeneration
instance TD.Lib.Internal.ShortShow TD.Query.FinishFileGeneration.FinishFileGeneration
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.FinishFileGeneration.FinishFileGeneration

module TD.Query.ForwardMessages

-- | Forwards previously sent messages. Returns the forwarded messages in
--   the same order as the message identifiers passed in message_ids. If a
--   message can't be forwarded, null will be returned instead of the
--   message. Returns <a>Messages</a>
data ForwardMessages
ForwardMessages :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe MessageSendOptions -> Maybe Bool -> Maybe Bool -> ForwardMessages

-- | Identifier of the chat to which to forward messages
[chat_id] :: ForwardMessages -> Maybe Int

-- | If not 0, the message thread identifier in which the message will be
--   sent; for forum threads only
[message_thread_id] :: ForwardMessages -> Maybe Int

-- | Identifier of the chat from which to forward messages
[from_chat_id] :: ForwardMessages -> Maybe Int

-- | Identifiers of the messages to forward. Message identifiers must be in
--   a strictly increasing order. At most 100 messages can be forwarded
--   simultaneously. A message can be forwarded only if
--   message.can_be_forwarded
[message_ids] :: ForwardMessages -> Maybe [Int]

-- | Options to be used to send the messages; pass null to use default
--   options
[options] :: ForwardMessages -> Maybe MessageSendOptions

-- | Pass true to copy content of the messages without reference to the
--   original sender. Always true if the messages are forwarded to a secret
--   chat or are local
[send_copy] :: ForwardMessages -> Maybe Bool

-- | Pass true to remove media captions of message copies. Ignored if
--   send_copy is false
[remove_caption] :: ForwardMessages -> Maybe Bool
defaultForwardMessages :: ForwardMessages
instance GHC.Show.Show TD.Query.ForwardMessages.ForwardMessages
instance GHC.Classes.Eq TD.Query.ForwardMessages.ForwardMessages
instance TD.Lib.Internal.ShortShow TD.Query.ForwardMessages.ForwardMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ForwardMessages.ForwardMessages

module TD.Query.GetAccountTtl

-- | Returns the period of inactivity after which the account of the
--   current user will automatically be deleted. Returns <a>AccountTtl</a>
data GetAccountTtl
GetAccountTtl :: GetAccountTtl
instance GHC.Show.Show TD.Query.GetAccountTtl.GetAccountTtl
instance GHC.Classes.Eq TD.Query.GetAccountTtl.GetAccountTtl
instance TD.Lib.Internal.ShortShow TD.Query.GetAccountTtl.GetAccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAccountTtl.GetAccountTtl

module TD.Query.GetActiveLiveLocationMessages

-- | Returns all active live locations that need to be updated by the
--   application. The list is persistent across application restarts only
--   if the message database is used. Returns <a>Messages</a>
data GetActiveLiveLocationMessages
GetActiveLiveLocationMessages :: GetActiveLiveLocationMessages
instance GHC.Show.Show TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages
instance GHC.Classes.Eq TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages
instance TD.Lib.Internal.ShortShow TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetActiveLiveLocationMessages.GetActiveLiveLocationMessages

module TD.Query.GetActiveSessions

-- | Returns all active sessions of the current user. Returns
--   <a>Sessions</a>
data GetActiveSessions
GetActiveSessions :: GetActiveSessions
instance GHC.Show.Show TD.Query.GetActiveSessions.GetActiveSessions
instance GHC.Classes.Eq TD.Query.GetActiveSessions.GetActiveSessions
instance TD.Lib.Internal.ShortShow TD.Query.GetActiveSessions.GetActiveSessions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetActiveSessions.GetActiveSessions

module TD.Query.GetAllPassportElements

-- | Returns all available Telegram Passport elements. Returns
--   <a>PassportElements</a>
data GetAllPassportElements
GetAllPassportElements :: Maybe Text -> GetAllPassportElements

-- | The 2-step verification password of the current user
[password] :: GetAllPassportElements -> Maybe Text
instance GHC.Show.Show TD.Query.GetAllPassportElements.GetAllPassportElements
instance GHC.Classes.Eq TD.Query.GetAllPassportElements.GetAllPassportElements
instance TD.Lib.Internal.ShortShow TD.Query.GetAllPassportElements.GetAllPassportElements
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAllPassportElements.GetAllPassportElements

module TD.Query.GetAllStickerEmojis

-- | Returns unique emoji that correspond to stickers to be found by the
--   getStickers(sticker_type, query, 1000000, chat_id). Returns
--   <a>Emojis</a>
data GetAllStickerEmojis
GetAllStickerEmojis :: Maybe StickerType -> Maybe Text -> Maybe Int -> Maybe Bool -> GetAllStickerEmojis

-- | Type of the stickers to search for
[sticker_type] :: GetAllStickerEmojis -> Maybe StickerType

-- | Search query
[query] :: GetAllStickerEmojis -> Maybe Text

-- | Chat identifier for which to find stickers
[chat_id] :: GetAllStickerEmojis -> Maybe Int

-- | Pass true if only main emoji for each found sticker must be included
--   in the result
[return_only_main_emoji] :: GetAllStickerEmojis -> Maybe Bool
defaultGetAllStickerEmojis :: GetAllStickerEmojis
instance GHC.Show.Show TD.Query.GetAllStickerEmojis.GetAllStickerEmojis
instance GHC.Classes.Eq TD.Query.GetAllStickerEmojis.GetAllStickerEmojis
instance TD.Lib.Internal.ShortShow TD.Query.GetAllStickerEmojis.GetAllStickerEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAllStickerEmojis.GetAllStickerEmojis

module TD.Query.GetAnimatedEmoji

-- | Returns an animated emoji corresponding to a given emoji. Returns a
--   404 error if the emoji has no animated emoji. Returns
--   <a>AnimatedEmoji</a>
data GetAnimatedEmoji
GetAnimatedEmoji :: Maybe Text -> GetAnimatedEmoji

-- | The emoji
[emoji] :: GetAnimatedEmoji -> Maybe Text
instance GHC.Show.Show TD.Query.GetAnimatedEmoji.GetAnimatedEmoji
instance GHC.Classes.Eq TD.Query.GetAnimatedEmoji.GetAnimatedEmoji
instance TD.Lib.Internal.ShortShow TD.Query.GetAnimatedEmoji.GetAnimatedEmoji
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAnimatedEmoji.GetAnimatedEmoji

module TD.Query.GetApplicationConfig

-- | Returns application config, provided by the server. Can be called
--   before authorization. Returns <a>JsonValue</a>
data GetApplicationConfig
GetApplicationConfig :: GetApplicationConfig
instance GHC.Show.Show TD.Query.GetApplicationConfig.GetApplicationConfig
instance GHC.Classes.Eq TD.Query.GetApplicationConfig.GetApplicationConfig
instance TD.Lib.Internal.ShortShow TD.Query.GetApplicationConfig.GetApplicationConfig
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetApplicationConfig.GetApplicationConfig

module TD.Query.GetApplicationDownloadLink

-- | Returns the link for downloading official Telegram application to be
--   used when the current user invites friends to Telegram. Returns
--   <a>HttpUrl</a>
data GetApplicationDownloadLink
GetApplicationDownloadLink :: GetApplicationDownloadLink
instance GHC.Show.Show TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink
instance GHC.Classes.Eq TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink
instance TD.Lib.Internal.ShortShow TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetApplicationDownloadLink.GetApplicationDownloadLink

module TD.Query.GetArchiveChatListSettings

-- | Returns settings for automatic moving of chats to and from the Archive
--   chat lists. Returns <a>ArchiveChatListSettings</a>
data GetArchiveChatListSettings
GetArchiveChatListSettings :: GetArchiveChatListSettings
instance GHC.Show.Show TD.Query.GetArchiveChatListSettings.GetArchiveChatListSettings
instance GHC.Classes.Eq TD.Query.GetArchiveChatListSettings.GetArchiveChatListSettings
instance TD.Lib.Internal.ShortShow TD.Query.GetArchiveChatListSettings.GetArchiveChatListSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetArchiveChatListSettings.GetArchiveChatListSettings

module TD.Query.GetArchivedStickerSets

-- | Returns a list of archived sticker sets. Returns <a>StickerSets</a>
data GetArchivedStickerSets
GetArchivedStickerSets :: Maybe StickerType -> Maybe Int -> Maybe Int -> GetArchivedStickerSets

-- | Type of the sticker sets to return
[sticker_type] :: GetArchivedStickerSets -> Maybe StickerType

-- | Identifier of the sticker set from which to return the result; use 0
--   to get results from the beginning
[offset_sticker_set_id] :: GetArchivedStickerSets -> Maybe Int

-- | The maximum number of sticker sets to return; up to 100
[limit] :: GetArchivedStickerSets -> Maybe Int
defaultGetArchivedStickerSets :: GetArchivedStickerSets
instance GHC.Show.Show TD.Query.GetArchivedStickerSets.GetArchivedStickerSets
instance GHC.Classes.Eq TD.Query.GetArchivedStickerSets.GetArchivedStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.GetArchivedStickerSets.GetArchivedStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetArchivedStickerSets.GetArchivedStickerSets

module TD.Query.GetAttachedStickerSets

-- | Returns a list of sticker sets attached to a file, including regular,
--   mask, and emoji sticker sets. Currently, only animations, photos, and
--   videos can have attached sticker sets. Returns <a>StickerSets</a>
data GetAttachedStickerSets
GetAttachedStickerSets :: Maybe Int -> GetAttachedStickerSets

-- | File identifier
[file_id] :: GetAttachedStickerSets -> Maybe Int
instance GHC.Show.Show TD.Query.GetAttachedStickerSets.GetAttachedStickerSets
instance GHC.Classes.Eq TD.Query.GetAttachedStickerSets.GetAttachedStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.GetAttachedStickerSets.GetAttachedStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAttachedStickerSets.GetAttachedStickerSets

module TD.Query.GetAttachmentMenuBot

-- | Returns information about a bot that can be added to attachment or
--   side menu. Returns <a>AttachmentMenuBot</a>
data GetAttachmentMenuBot
GetAttachmentMenuBot :: Maybe Int -> GetAttachmentMenuBot

-- | Bot's user identifier
[bot_user_id] :: GetAttachmentMenuBot -> Maybe Int
instance GHC.Show.Show TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot
instance GHC.Classes.Eq TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot
instance TD.Lib.Internal.ShortShow TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAttachmentMenuBot.GetAttachmentMenuBot

module TD.Query.GetAuthorizationState

-- | Returns the current authorization state; this is an offline request.
--   For informational purposes only. Use updateAuthorizationState instead
--   to maintain the current authorization state. Can be called before
--   initialization. Returns <a>AuthorizationState</a>
data GetAuthorizationState
GetAuthorizationState :: GetAuthorizationState
instance GHC.Show.Show TD.Query.GetAuthorizationState.GetAuthorizationState
instance GHC.Classes.Eq TD.Query.GetAuthorizationState.GetAuthorizationState
instance TD.Lib.Internal.ShortShow TD.Query.GetAuthorizationState.GetAuthorizationState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAuthorizationState.GetAuthorizationState

module TD.Query.GetAutoDownloadSettingsPresets

-- | Returns auto-download settings presets for the current user. Returns
--   <a>AutoDownloadSettingsPresets</a>
data GetAutoDownloadSettingsPresets
GetAutoDownloadSettingsPresets :: GetAutoDownloadSettingsPresets
instance GHC.Show.Show TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets
instance GHC.Classes.Eq TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets
instance TD.Lib.Internal.ShortShow TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAutoDownloadSettingsPresets.GetAutoDownloadSettingsPresets

module TD.Query.GetAutosaveSettings

-- | Returns autosave settings for the current user. Returns
--   <a>AutosaveSettings</a>
data GetAutosaveSettings
GetAutosaveSettings :: GetAutosaveSettings
instance GHC.Show.Show TD.Query.GetAutosaveSettings.GetAutosaveSettings
instance GHC.Classes.Eq TD.Query.GetAutosaveSettings.GetAutosaveSettings
instance TD.Lib.Internal.ShortShow TD.Query.GetAutosaveSettings.GetAutosaveSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAutosaveSettings.GetAutosaveSettings

module TD.Query.GetAvailableChatBoostSlots

-- | Returns the list of available chat boost slots for the current user.
--   Returns <a>ChatBoostSlots</a>
data GetAvailableChatBoostSlots
GetAvailableChatBoostSlots :: GetAvailableChatBoostSlots
instance GHC.Show.Show TD.Query.GetAvailableChatBoostSlots.GetAvailableChatBoostSlots
instance GHC.Classes.Eq TD.Query.GetAvailableChatBoostSlots.GetAvailableChatBoostSlots
instance TD.Lib.Internal.ShortShow TD.Query.GetAvailableChatBoostSlots.GetAvailableChatBoostSlots
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetAvailableChatBoostSlots.GetAvailableChatBoostSlots

module TD.Query.GetBackgroundUrl

-- | Constructs a persistent HTTP URL for a background. Returns
--   <a>HttpUrl</a>
data GetBackgroundUrl
GetBackgroundUrl :: Maybe Text -> Maybe BackgroundType -> GetBackgroundUrl

-- | Background name
[name] :: GetBackgroundUrl -> Maybe Text

-- | Background type; backgroundTypeChatTheme isn't supported
[_type] :: GetBackgroundUrl -> Maybe BackgroundType
defaultGetBackgroundUrl :: GetBackgroundUrl
instance GHC.Show.Show TD.Query.GetBackgroundUrl.GetBackgroundUrl
instance GHC.Classes.Eq TD.Query.GetBackgroundUrl.GetBackgroundUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetBackgroundUrl.GetBackgroundUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBackgroundUrl.GetBackgroundUrl

module TD.Query.GetBankCardInfo

-- | Returns information about a bank card. Returns <a>BankCardInfo</a>
data GetBankCardInfo
GetBankCardInfo :: Maybe Text -> GetBankCardInfo

-- | The bank card number
[bank_card_number] :: GetBankCardInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetBankCardInfo.GetBankCardInfo
instance GHC.Classes.Eq TD.Query.GetBankCardInfo.GetBankCardInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetBankCardInfo.GetBankCardInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBankCardInfo.GetBankCardInfo

module TD.Query.GetBasicGroup

-- | Returns information about a basic group by its identifier. This is an
--   offline request if the current user is not a bot. Returns
--   <a>BasicGroup</a>
data GetBasicGroup
GetBasicGroup :: Maybe Int -> GetBasicGroup

-- | Basic group identifier
[basic_group_id] :: GetBasicGroup -> Maybe Int
instance GHC.Show.Show TD.Query.GetBasicGroup.GetBasicGroup
instance GHC.Classes.Eq TD.Query.GetBasicGroup.GetBasicGroup
instance TD.Lib.Internal.ShortShow TD.Query.GetBasicGroup.GetBasicGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBasicGroup.GetBasicGroup

module TD.Query.GetBasicGroupFullInfo

-- | Returns full information about a basic group by its identifier.
--   Returns <a>BasicGroupFullInfo</a>
data GetBasicGroupFullInfo
GetBasicGroupFullInfo :: Maybe Int -> GetBasicGroupFullInfo

-- | Basic group identifier
[basic_group_id] :: GetBasicGroupFullInfo -> Maybe Int
instance GHC.Show.Show TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo
instance GHC.Classes.Eq TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBasicGroupFullInfo.GetBasicGroupFullInfo

module TD.Query.GetBlockedMessageSenders

-- | Returns users and chats that were blocked by the current user. Returns
--   <a>MessageSenders</a>
data GetBlockedMessageSenders
GetBlockedMessageSenders :: Maybe BlockList -> Maybe Int -> Maybe Int -> GetBlockedMessageSenders

-- | Block list from which to return users
[block_list] :: GetBlockedMessageSenders -> Maybe BlockList

-- | Number of users and chats to skip in the result; must be non-negative
[offset] :: GetBlockedMessageSenders -> Maybe Int

-- | The maximum number of users and chats to return; up to 100
[limit] :: GetBlockedMessageSenders -> Maybe Int
defaultGetBlockedMessageSenders :: GetBlockedMessageSenders
instance GHC.Show.Show TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders
instance GHC.Classes.Eq TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders
instance TD.Lib.Internal.ShortShow TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBlockedMessageSenders.GetBlockedMessageSenders

module TD.Query.GetBotInfoDescription

-- | Returns the text shown in the chat with a bot if the chat is empty in
--   the given language. Can be called only if userTypeBot.can_be_edited ==
--   true. Returns <a>Text</a>
data GetBotInfoDescription
GetBotInfoDescription :: Maybe Int -> Maybe Text -> GetBotInfoDescription

-- | Identifier of the target bot
[bot_user_id] :: GetBotInfoDescription -> Maybe Int

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: GetBotInfoDescription -> Maybe Text
defaultGetBotInfoDescription :: GetBotInfoDescription
instance GHC.Show.Show TD.Query.GetBotInfoDescription.GetBotInfoDescription
instance GHC.Classes.Eq TD.Query.GetBotInfoDescription.GetBotInfoDescription
instance TD.Lib.Internal.ShortShow TD.Query.GetBotInfoDescription.GetBotInfoDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBotInfoDescription.GetBotInfoDescription

module TD.Query.GetBotInfoShortDescription

-- | Returns the text shown on a bot's profile page and sent together with
--   the link when users share the bot in the given language. Can be called
--   only if userTypeBot.can_be_edited == true. Returns <a>Text</a>
data GetBotInfoShortDescription
GetBotInfoShortDescription :: Maybe Int -> Maybe Text -> GetBotInfoShortDescription

-- | Identifier of the target bot
[bot_user_id] :: GetBotInfoShortDescription -> Maybe Int

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: GetBotInfoShortDescription -> Maybe Text
defaultGetBotInfoShortDescription :: GetBotInfoShortDescription
instance GHC.Show.Show TD.Query.GetBotInfoShortDescription.GetBotInfoShortDescription
instance GHC.Classes.Eq TD.Query.GetBotInfoShortDescription.GetBotInfoShortDescription
instance TD.Lib.Internal.ShortShow TD.Query.GetBotInfoShortDescription.GetBotInfoShortDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBotInfoShortDescription.GetBotInfoShortDescription

module TD.Query.GetBotName

-- | Returns the name of a bot in the given language. Can be called only if
--   userTypeBot.can_be_edited == true. Returns <a>Text</a>
data GetBotName
GetBotName :: Maybe Int -> Maybe Text -> GetBotName

-- | Identifier of the target bot
[bot_user_id] :: GetBotName -> Maybe Int

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: GetBotName -> Maybe Text
defaultGetBotName :: GetBotName
instance GHC.Show.Show TD.Query.GetBotName.GetBotName
instance GHC.Classes.Eq TD.Query.GetBotName.GetBotName
instance TD.Lib.Internal.ShortShow TD.Query.GetBotName.GetBotName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBotName.GetBotName

module TD.Query.GetBusinessChatLinkInfo

-- | Returns information about a business chat link. Returns
--   <a>BusinessChatLinkInfo</a>
data GetBusinessChatLinkInfo
GetBusinessChatLinkInfo :: Maybe Text -> GetBusinessChatLinkInfo

-- | Name of the link
[link_name] :: GetBusinessChatLinkInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetBusinessChatLinkInfo.GetBusinessChatLinkInfo
instance GHC.Classes.Eq TD.Query.GetBusinessChatLinkInfo.GetBusinessChatLinkInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetBusinessChatLinkInfo.GetBusinessChatLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBusinessChatLinkInfo.GetBusinessChatLinkInfo

module TD.Query.GetBusinessChatLinks

-- | Returns business chat links created for the current account. Returns
--   <a>BusinessChatLinks</a>
data GetBusinessChatLinks
GetBusinessChatLinks :: GetBusinessChatLinks
instance GHC.Show.Show TD.Query.GetBusinessChatLinks.GetBusinessChatLinks
instance GHC.Classes.Eq TD.Query.GetBusinessChatLinks.GetBusinessChatLinks
instance TD.Lib.Internal.ShortShow TD.Query.GetBusinessChatLinks.GetBusinessChatLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBusinessChatLinks.GetBusinessChatLinks

module TD.Query.GetBusinessConnectedBot

-- | Returns the business bot that is connected to the current user
--   account. Returns a 404 error if there is no connected bot. Returns
--   <a>BusinessConnectedBot</a>
data GetBusinessConnectedBot
GetBusinessConnectedBot :: GetBusinessConnectedBot
instance GHC.Show.Show TD.Query.GetBusinessConnectedBot.GetBusinessConnectedBot
instance GHC.Classes.Eq TD.Query.GetBusinessConnectedBot.GetBusinessConnectedBot
instance TD.Lib.Internal.ShortShow TD.Query.GetBusinessConnectedBot.GetBusinessConnectedBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBusinessConnectedBot.GetBusinessConnectedBot

module TD.Query.GetBusinessConnection

-- | Returns information about a business connection by its identifier; for
--   bots only. Returns <a>BusinessConnection</a>
data GetBusinessConnection
GetBusinessConnection :: Maybe Text -> GetBusinessConnection

-- | Identifier of the business connection to return
[connection_id] :: GetBusinessConnection -> Maybe Text
instance GHC.Show.Show TD.Query.GetBusinessConnection.GetBusinessConnection
instance GHC.Classes.Eq TD.Query.GetBusinessConnection.GetBusinessConnection
instance TD.Lib.Internal.ShortShow TD.Query.GetBusinessConnection.GetBusinessConnection
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBusinessConnection.GetBusinessConnection

module TD.Query.GetBusinessFeatures

-- | Returns information about features, available to Business users.
--   Returns <a>BusinessFeatures</a>
data GetBusinessFeatures
GetBusinessFeatures :: Maybe BusinessFeature -> GetBusinessFeatures

-- | Source of the request; pass null if the method is called from settings
--   or some non-standard source
[source] :: GetBusinessFeatures -> Maybe BusinessFeature
instance GHC.Show.Show TD.Query.GetBusinessFeatures.GetBusinessFeatures
instance GHC.Classes.Eq TD.Query.GetBusinessFeatures.GetBusinessFeatures
instance TD.Lib.Internal.ShortShow TD.Query.GetBusinessFeatures.GetBusinessFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetBusinessFeatures.GetBusinessFeatures

module TD.Query.GetCallbackQueryAnswer

-- | Sends a callback query to a bot and returns an answer. Returns an
--   error with code 502 if the bot fails to answer the query before the
--   query timeout expires. Returns <a>CallbackQueryAnswer</a>
data GetCallbackQueryAnswer
GetCallbackQueryAnswer :: Maybe Int -> Maybe Int -> Maybe CallbackQueryPayload -> GetCallbackQueryAnswer

-- | Identifier of the chat with the message
[chat_id] :: GetCallbackQueryAnswer -> Maybe Int

-- | Identifier of the message from which the query originated
[message_id] :: GetCallbackQueryAnswer -> Maybe Int

-- | Query payload
[payload] :: GetCallbackQueryAnswer -> Maybe CallbackQueryPayload
defaultGetCallbackQueryAnswer :: GetCallbackQueryAnswer
instance GHC.Show.Show TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer
instance GHC.Classes.Eq TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer
instance TD.Lib.Internal.ShortShow TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCallbackQueryAnswer.GetCallbackQueryAnswer

module TD.Query.GetCallbackQueryMessage

-- | Returns information about a message with the callback button that
--   originated a callback query; for bots only. Returns <a>Message</a>
data GetCallbackQueryMessage
GetCallbackQueryMessage :: Maybe Int -> Maybe Int -> Maybe Int -> GetCallbackQueryMessage

-- | Identifier of the chat the message belongs to
[chat_id] :: GetCallbackQueryMessage -> Maybe Int

-- | Message identifier
[message_id] :: GetCallbackQueryMessage -> Maybe Int

-- | Identifier of the callback query
[callback_query_id] :: GetCallbackQueryMessage -> Maybe Int
defaultGetCallbackQueryMessage :: GetCallbackQueryMessage
instance GHC.Show.Show TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage
instance GHC.Classes.Eq TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage
instance TD.Lib.Internal.ShortShow TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCallbackQueryMessage.GetCallbackQueryMessage

module TD.Query.GetChat

-- | Returns information about a chat by its identifier; this is an offline
--   request if the current user is not a bot. Returns <a>Chat</a>
data GetChat
GetChat :: Maybe Int -> GetChat

-- | Chat identifier
[chat_id] :: GetChat -> Maybe Int
instance GHC.Show.Show TD.Query.GetChat.GetChat
instance GHC.Classes.Eq TD.Query.GetChat.GetChat
instance TD.Lib.Internal.ShortShow TD.Query.GetChat.GetChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChat.GetChat

module TD.Query.GetChatActiveStories

-- | Returns the list of active stories posted by the given chat. Returns
--   <a>ChatActiveStories</a>
data GetChatActiveStories
GetChatActiveStories :: Maybe Int -> GetChatActiveStories

-- | Chat identifier
[chat_id] :: GetChatActiveStories -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatActiveStories.GetChatActiveStories
instance GHC.Classes.Eq TD.Query.GetChatActiveStories.GetChatActiveStories
instance TD.Lib.Internal.ShortShow TD.Query.GetChatActiveStories.GetChatActiveStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatActiveStories.GetChatActiveStories

module TD.Query.GetChatAdministrators

-- | Returns a list of administrators of the chat with their custom titles.
--   Returns <a>ChatAdministrators</a>
data GetChatAdministrators
GetChatAdministrators :: Maybe Int -> GetChatAdministrators

-- | Chat identifier
[chat_id] :: GetChatAdministrators -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatAdministrators.GetChatAdministrators
instance GHC.Classes.Eq TD.Query.GetChatAdministrators.GetChatAdministrators
instance TD.Lib.Internal.ShortShow TD.Query.GetChatAdministrators.GetChatAdministrators
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatAdministrators.GetChatAdministrators

module TD.Query.GetChatArchivedStories

-- | Returns the list of all stories posted by the given chat; requires
--   can_edit_stories right in the chat. The stories are returned in a
--   reverse chronological order (i.e., in order of decreasing story_id).
--   For optimal performance, the number of returned stories is chosen by
--   TDLib. Returns <a>Stories</a>
data GetChatArchivedStories
GetChatArchivedStories :: Maybe Int -> Maybe Int -> Maybe Int -> GetChatArchivedStories

-- | Chat identifier
[chat_id] :: GetChatArchivedStories -> Maybe Int

-- | Identifier of the story starting from which stories must be returned;
--   use 0 to get results from the last story
[from_story_id] :: GetChatArchivedStories -> Maybe Int

-- | The maximum number of stories to be returned For optimal performance,
--   the number of returned stories is chosen by TDLib and can be smaller
--   than the specified limit
[limit] :: GetChatArchivedStories -> Maybe Int
defaultGetChatArchivedStories :: GetChatArchivedStories
instance GHC.Show.Show TD.Query.GetChatArchivedStories.GetChatArchivedStories
instance GHC.Classes.Eq TD.Query.GetChatArchivedStories.GetChatArchivedStories
instance TD.Lib.Internal.ShortShow TD.Query.GetChatArchivedStories.GetChatArchivedStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatArchivedStories.GetChatArchivedStories

module TD.Query.GetChatAvailableMessageSenders

-- | Returns the list of message sender identifiers, which can be used to
--   send messages in a chat. Returns <a>ChatMessageSenders</a>
data GetChatAvailableMessageSenders
GetChatAvailableMessageSenders :: Maybe Int -> GetChatAvailableMessageSenders

-- | Chat identifier
[chat_id] :: GetChatAvailableMessageSenders -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders
instance GHC.Classes.Eq TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders
instance TD.Lib.Internal.ShortShow TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatAvailableMessageSenders.GetChatAvailableMessageSenders

module TD.Query.GetChatBoostFeatures

-- | Returns the list of features available for different chat boost
--   levels; this is an offline request. Returns <a>ChatBoostFeatures</a>
data GetChatBoostFeatures
GetChatBoostFeatures :: Maybe Bool -> GetChatBoostFeatures

-- | Pass true to get the list of features for channels; pass false to get
--   the list of features for supergroups
[is_channel] :: GetChatBoostFeatures -> Maybe Bool
instance GHC.Show.Show TD.Query.GetChatBoostFeatures.GetChatBoostFeatures
instance GHC.Classes.Eq TD.Query.GetChatBoostFeatures.GetChatBoostFeatures
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoostFeatures.GetChatBoostFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoostFeatures.GetChatBoostFeatures

module TD.Query.GetChatBoostLevelFeatures

-- | Returns the list of features available on the specific chat boost
--   level; this is an offline request. Returns
--   <a>ChatBoostLevelFeatures</a>
data GetChatBoostLevelFeatures
GetChatBoostLevelFeatures :: Maybe Bool -> Maybe Int -> GetChatBoostLevelFeatures

-- | Pass true to get the list of features for channels; pass false to get
--   the list of features for supergroups
[is_channel] :: GetChatBoostLevelFeatures -> Maybe Bool

-- | Chat boost level
[level] :: GetChatBoostLevelFeatures -> Maybe Int
defaultGetChatBoostLevelFeatures :: GetChatBoostLevelFeatures
instance GHC.Show.Show TD.Query.GetChatBoostLevelFeatures.GetChatBoostLevelFeatures
instance GHC.Classes.Eq TD.Query.GetChatBoostLevelFeatures.GetChatBoostLevelFeatures
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoostLevelFeatures.GetChatBoostLevelFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoostLevelFeatures.GetChatBoostLevelFeatures

module TD.Query.GetChatBoostLink

-- | Returns an HTTPS link to boost the specified supergroup or channel
--   chat. Returns <a>ChatBoostLink</a>
data GetChatBoostLink
GetChatBoostLink :: Maybe Int -> GetChatBoostLink

-- | Identifier of the chat
[chat_id] :: GetChatBoostLink -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatBoostLink.GetChatBoostLink
instance GHC.Classes.Eq TD.Query.GetChatBoostLink.GetChatBoostLink
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoostLink.GetChatBoostLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoostLink.GetChatBoostLink

module TD.Query.GetChatBoostLinkInfo

-- | Returns information about a link to boost a chat. Can be called for
--   any internal link of the type internalLinkTypeChatBoost. Returns
--   <a>ChatBoostLinkInfo</a>
data GetChatBoostLinkInfo
GetChatBoostLinkInfo :: Maybe Text -> GetChatBoostLinkInfo

-- | The link to boost a chat
[url] :: GetChatBoostLinkInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetChatBoostLinkInfo.GetChatBoostLinkInfo
instance GHC.Classes.Eq TD.Query.GetChatBoostLinkInfo.GetChatBoostLinkInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoostLinkInfo.GetChatBoostLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoostLinkInfo.GetChatBoostLinkInfo

module TD.Query.GetChatBoostStatus

-- | Returns the current boost status for a supergroup or a channel chat.
--   Returns <a>ChatBoostStatus</a>
data GetChatBoostStatus
GetChatBoostStatus :: Maybe Int -> GetChatBoostStatus

-- | Identifier of the chat
[chat_id] :: GetChatBoostStatus -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatBoostStatus.GetChatBoostStatus
instance GHC.Classes.Eq TD.Query.GetChatBoostStatus.GetChatBoostStatus
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoostStatus.GetChatBoostStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoostStatus.GetChatBoostStatus

module TD.Query.GetChatBoosts

-- | Returns the list of boosts applied to a chat; requires administrator
--   rights in the chat. Returns <a>FoundChatBoosts</a>
data GetChatBoosts
GetChatBoosts :: Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Int -> GetChatBoosts

-- | Identifier of the chat
[chat_id] :: GetChatBoosts -> Maybe Int

-- | Pass true to receive only boosts received from gift codes and
--   giveaways created by the chat
[only_gift_codes] :: GetChatBoosts -> Maybe Bool

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetChatBoosts -> Maybe Text

-- | The maximum number of boosts to be returned; up to 100. For optimal
--   performance, the number of returned boosts can be smaller than the
--   specified limit
[limit] :: GetChatBoosts -> Maybe Int
defaultGetChatBoosts :: GetChatBoosts
instance GHC.Show.Show TD.Query.GetChatBoosts.GetChatBoosts
instance GHC.Classes.Eq TD.Query.GetChatBoosts.GetChatBoosts
instance TD.Lib.Internal.ShortShow TD.Query.GetChatBoosts.GetChatBoosts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatBoosts.GetChatBoosts

module TD.Query.GetChatEventLog

-- | Returns a list of service actions taken by chat members and
--   administrators in the last 48 hours. Available only for supergroups
--   and channels. Requires administrator rights. Returns results in
--   reverse chronological order (i.e., in order of decreasing event_id).
--   Returns <a>ChatEvents</a>
data GetChatEventLog
GetChatEventLog :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe ChatEventLogFilters -> Maybe [Int] -> GetChatEventLog

-- | Chat identifier
[chat_id] :: GetChatEventLog -> Maybe Int

-- | Search query by which to filter events
[query] :: GetChatEventLog -> Maybe Text

-- | Identifier of an event from which to return results. Use 0 to get
--   results from the latest events
[from_event_id] :: GetChatEventLog -> Maybe Int

-- | The maximum number of events to return; up to 100
[limit] :: GetChatEventLog -> Maybe Int

-- | The types of events to return; pass null to get chat events of all
--   types
[filters] :: GetChatEventLog -> Maybe ChatEventLogFilters

-- | User identifiers by which to filter events. By default, events
--   relating to all users will be returned
[user_ids] :: GetChatEventLog -> Maybe [Int]
defaultGetChatEventLog :: GetChatEventLog
instance GHC.Show.Show TD.Query.GetChatEventLog.GetChatEventLog
instance GHC.Classes.Eq TD.Query.GetChatEventLog.GetChatEventLog
instance TD.Lib.Internal.ShortShow TD.Query.GetChatEventLog.GetChatEventLog
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatEventLog.GetChatEventLog

module TD.Query.GetChatFolder

-- | Returns information about a chat folder by its identifier. Returns
--   <a>ChatFolder</a>
data GetChatFolder
GetChatFolder :: Maybe Int -> GetChatFolder

-- | Chat folder identifier
[chat_folder_id] :: GetChatFolder -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatFolder.GetChatFolder
instance GHC.Classes.Eq TD.Query.GetChatFolder.GetChatFolder
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolder.GetChatFolder
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolder.GetChatFolder

module TD.Query.GetChatFolderChatCount

-- | Returns approximate number of chats in a being created chat folder.
--   Main and archive chat lists must be fully preloaded for this function
--   to work correctly. Returns <a>Count</a>
data GetChatFolderChatCount
GetChatFolderChatCount :: Maybe ChatFolder -> GetChatFolderChatCount

-- | The new chat folder
[folder] :: GetChatFolderChatCount -> Maybe ChatFolder
instance GHC.Show.Show TD.Query.GetChatFolderChatCount.GetChatFolderChatCount
instance GHC.Classes.Eq TD.Query.GetChatFolderChatCount.GetChatFolderChatCount
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolderChatCount.GetChatFolderChatCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolderChatCount.GetChatFolderChatCount

module TD.Query.GetChatFolderChatsToLeave

-- | Returns identifiers of pinned or always included chats from a chat
--   folder, which are suggested to be left when the chat folder is
--   deleted. Returns <a>Chats</a>
data GetChatFolderChatsToLeave
GetChatFolderChatsToLeave :: Maybe Int -> GetChatFolderChatsToLeave

-- | Chat folder identifier
[chat_folder_id] :: GetChatFolderChatsToLeave -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatFolderChatsToLeave.GetChatFolderChatsToLeave
instance GHC.Classes.Eq TD.Query.GetChatFolderChatsToLeave.GetChatFolderChatsToLeave
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolderChatsToLeave.GetChatFolderChatsToLeave
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolderChatsToLeave.GetChatFolderChatsToLeave

module TD.Query.GetChatFolderDefaultIconName

-- | Returns default icon name for a folder. Can be called synchronously.
--   Returns <a>ChatFolderIcon</a>
data GetChatFolderDefaultIconName
GetChatFolderDefaultIconName :: Maybe ChatFolder -> GetChatFolderDefaultIconName

-- | Chat folder
[folder] :: GetChatFolderDefaultIconName -> Maybe ChatFolder
instance GHC.Show.Show TD.Query.GetChatFolderDefaultIconName.GetChatFolderDefaultIconName
instance GHC.Classes.Eq TD.Query.GetChatFolderDefaultIconName.GetChatFolderDefaultIconName
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolderDefaultIconName.GetChatFolderDefaultIconName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolderDefaultIconName.GetChatFolderDefaultIconName

module TD.Query.GetChatFolderInviteLinks

-- | Returns invite links created by the current user for a shareable chat
--   folder. Returns <a>ChatFolderInviteLinks</a>
data GetChatFolderInviteLinks
GetChatFolderInviteLinks :: Maybe Int -> GetChatFolderInviteLinks

-- | Chat folder identifier
[chat_folder_id] :: GetChatFolderInviteLinks -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatFolderInviteLinks.GetChatFolderInviteLinks
instance GHC.Classes.Eq TD.Query.GetChatFolderInviteLinks.GetChatFolderInviteLinks
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolderInviteLinks.GetChatFolderInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolderInviteLinks.GetChatFolderInviteLinks

module TD.Query.GetChatFolderNewChats

-- | Returns new chats added to a shareable chat folder by its owner. The
--   method must be called at most once in
--   getOption("chat_folder_new_chats_update_period") for the given chat
--   folder. Returns <a>Chats</a>
data GetChatFolderNewChats
GetChatFolderNewChats :: Maybe Int -> GetChatFolderNewChats

-- | Chat folder identifier
[chat_folder_id] :: GetChatFolderNewChats -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatFolderNewChats.GetChatFolderNewChats
instance GHC.Classes.Eq TD.Query.GetChatFolderNewChats.GetChatFolderNewChats
instance TD.Lib.Internal.ShortShow TD.Query.GetChatFolderNewChats.GetChatFolderNewChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatFolderNewChats.GetChatFolderNewChats

module TD.Query.GetChatHistory

-- | Returns messages in a chat. The messages are returned in a reverse
--   chronological order (i.e., in order of decreasing message_id). For
--   optimal performance, the number of returned messages is chosen by
--   TDLib. This is an offline request if only_local is true. Returns
--   <a>Messages</a>
data GetChatHistory
GetChatHistory :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> GetChatHistory

-- | Chat identifier
[chat_id] :: GetChatHistory -> Maybe Int

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: GetChatHistory -> Maybe Int

-- | Specify 0 to get results from exactly the message from_message_id or a
--   negative offset up to 99 to get additionally some newer messages
[offset] :: GetChatHistory -> Maybe Int

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than or equal to -offset. For optimal performance, the
--   number of returned messages is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetChatHistory -> Maybe Int

-- | Pass true to get only messages that are available without sending
--   network requests
[only_local] :: GetChatHistory -> Maybe Bool
defaultGetChatHistory :: GetChatHistory
instance GHC.Show.Show TD.Query.GetChatHistory.GetChatHistory
instance GHC.Classes.Eq TD.Query.GetChatHistory.GetChatHistory
instance TD.Lib.Internal.ShortShow TD.Query.GetChatHistory.GetChatHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatHistory.GetChatHistory

module TD.Query.GetChatInviteLink

-- | Returns information about an invite link. Requires administrator
--   privileges and can_invite_users right in the chat to get own links and
--   owner privileges to get other links. Returns <a>ChatInviteLink</a>
data GetChatInviteLink
GetChatInviteLink :: Maybe Int -> Maybe Text -> GetChatInviteLink

-- | Chat identifier
[chat_id] :: GetChatInviteLink -> Maybe Int

-- | Invite link to get
[invite_link] :: GetChatInviteLink -> Maybe Text
defaultGetChatInviteLink :: GetChatInviteLink
instance GHC.Show.Show TD.Query.GetChatInviteLink.GetChatInviteLink
instance GHC.Classes.Eq TD.Query.GetChatInviteLink.GetChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.GetChatInviteLink.GetChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLink.GetChatInviteLink

module TD.Query.GetChatInviteLinkCounts

-- | Returns the list of chat administrators with number of their invite
--   links. Requires owner privileges in the chat. Returns
--   <a>ChatInviteLinkCounts</a>
data GetChatInviteLinkCounts
GetChatInviteLinkCounts :: Maybe Int -> GetChatInviteLinkCounts

-- | Chat identifier
[chat_id] :: GetChatInviteLinkCounts -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts
instance GHC.Classes.Eq TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts
instance TD.Lib.Internal.ShortShow TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinkCounts.GetChatInviteLinkCounts

module TD.Query.GetChatInviteLinkMembers

-- | Returns chat members joined a chat via an invite link. Requires
--   administrator privileges and can_invite_users right in the chat for
--   own links and owner privileges for other links. Returns
--   <a>ChatInviteLinkMembers</a>
data GetChatInviteLinkMembers
GetChatInviteLinkMembers :: Maybe Int -> Maybe Text -> Maybe ChatInviteLinkMember -> Maybe Int -> GetChatInviteLinkMembers

-- | Chat identifier
[chat_id] :: GetChatInviteLinkMembers -> Maybe Int

-- | Invite link for which to return chat members
[invite_link] :: GetChatInviteLinkMembers -> Maybe Text

-- | A chat member from which to return next chat members; pass null to get
--   results from the beginning
[offset_member] :: GetChatInviteLinkMembers -> Maybe ChatInviteLinkMember

-- | The maximum number of chat members to return; up to 100
[limit] :: GetChatInviteLinkMembers -> Maybe Int
defaultGetChatInviteLinkMembers :: GetChatInviteLinkMembers
instance GHC.Show.Show TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers
instance GHC.Classes.Eq TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers
instance TD.Lib.Internal.ShortShow TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinkMembers.GetChatInviteLinkMembers

module TD.Query.GetChatInviteLinks

-- | Returns invite links for a chat created by specified administrator.
--   Requires administrator privileges and can_invite_users right in the
--   chat to get own links and owner privileges to get other links. Returns
--   <a>ChatInviteLinks</a>
data GetChatInviteLinks
GetChatInviteLinks :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Int -> GetChatInviteLinks

-- | Chat identifier
[chat_id] :: GetChatInviteLinks -> Maybe Int

-- | User identifier of a chat administrator. Must be an identifier of the
--   current user for non-owner
[creator_user_id] :: GetChatInviteLinks -> Maybe Int

-- | Pass true if revoked links needs to be returned instead of active or
--   expired
[is_revoked] :: GetChatInviteLinks -> Maybe Bool

-- | Creation date of an invite link starting after which to return invite
--   links; use 0 to get results from the beginning
[offset_date] :: GetChatInviteLinks -> Maybe Int

-- | Invite link starting after which to return invite links; use empty
--   string to get results from the beginning
[offset_invite_link] :: GetChatInviteLinks -> Maybe Text

-- | The maximum number of invite links to return; up to 100
[limit] :: GetChatInviteLinks -> Maybe Int
defaultGetChatInviteLinks :: GetChatInviteLinks
instance GHC.Show.Show TD.Query.GetChatInviteLinks.GetChatInviteLinks
instance GHC.Classes.Eq TD.Query.GetChatInviteLinks.GetChatInviteLinks
instance TD.Lib.Internal.ShortShow TD.Query.GetChatInviteLinks.GetChatInviteLinks
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatInviteLinks.GetChatInviteLinks

module TD.Query.GetChatJoinRequests

-- | Returns pending join requests in a chat. Returns
--   <a>ChatJoinRequests</a>
data GetChatJoinRequests
GetChatJoinRequests :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe ChatJoinRequest -> Maybe Int -> GetChatJoinRequests

-- | Chat identifier
[chat_id] :: GetChatJoinRequests -> Maybe Int

-- | Invite link for which to return join requests. If empty, all join
--   requests will be returned. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links
[invite_link] :: GetChatJoinRequests -> Maybe Text

-- | A query to search for in the first names, last names and usernames of
--   the users to return
[query] :: GetChatJoinRequests -> Maybe Text

-- | A chat join request from which to return next requests; pass null to
--   get results from the beginning
[offset_request] :: GetChatJoinRequests -> Maybe ChatJoinRequest

-- | The maximum number of requests to join the chat to return
[limit] :: GetChatJoinRequests -> Maybe Int
defaultGetChatJoinRequests :: GetChatJoinRequests
instance GHC.Show.Show TD.Query.GetChatJoinRequests.GetChatJoinRequests
instance GHC.Classes.Eq TD.Query.GetChatJoinRequests.GetChatJoinRequests
instance TD.Lib.Internal.ShortShow TD.Query.GetChatJoinRequests.GetChatJoinRequests
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatJoinRequests.GetChatJoinRequests

module TD.Query.GetChatListsToAddChat

-- | Returns chat lists to which the chat can be added. This is an offline
--   request. Returns <a>ChatLists</a>
data GetChatListsToAddChat
GetChatListsToAddChat :: Maybe Int -> GetChatListsToAddChat

-- | Chat identifier
[chat_id] :: GetChatListsToAddChat -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatListsToAddChat.GetChatListsToAddChat
instance GHC.Classes.Eq TD.Query.GetChatListsToAddChat.GetChatListsToAddChat
instance TD.Lib.Internal.ShortShow TD.Query.GetChatListsToAddChat.GetChatListsToAddChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatListsToAddChat.GetChatListsToAddChat

module TD.Query.GetChatMember

-- | Returns information about a single member of a chat. Returns
--   <a>ChatMember</a>
data GetChatMember
GetChatMember :: Maybe Int -> Maybe MessageSender -> GetChatMember

-- | Chat identifier
[chat_id] :: GetChatMember -> Maybe Int

-- | Member identifier
[member_id] :: GetChatMember -> Maybe MessageSender
defaultGetChatMember :: GetChatMember
instance GHC.Show.Show TD.Query.GetChatMember.GetChatMember
instance GHC.Classes.Eq TD.Query.GetChatMember.GetChatMember
instance TD.Lib.Internal.ShortShow TD.Query.GetChatMember.GetChatMember
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMember.GetChatMember

module TD.Query.GetChatMessageByDate

-- | Returns the last message sent in a chat no later than the specified
--   date. Returns <a>Message</a>
data GetChatMessageByDate
GetChatMessageByDate :: Maybe Int -> Maybe Int -> GetChatMessageByDate

-- | Chat identifier
[chat_id] :: GetChatMessageByDate -> Maybe Int

-- | Point in time (Unix timestamp) relative to which to search for
--   messages
[date] :: GetChatMessageByDate -> Maybe Int
defaultGetChatMessageByDate :: GetChatMessageByDate
instance GHC.Show.Show TD.Query.GetChatMessageByDate.GetChatMessageByDate
instance GHC.Classes.Eq TD.Query.GetChatMessageByDate.GetChatMessageByDate
instance TD.Lib.Internal.ShortShow TD.Query.GetChatMessageByDate.GetChatMessageByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageByDate.GetChatMessageByDate

module TD.Query.GetChatMessageCalendar

-- | Returns information about the next messages of the specified type in
--   the chat split by days. Returns the results in reverse chronological
--   order. Can return partial result for the last returned day. Behavior
--   of this method depends on the value of the option "utc_time_offset".
--   Returns <a>MessageCalendar</a>
data GetChatMessageCalendar
GetChatMessageCalendar :: Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> GetChatMessageCalendar

-- | Identifier of the chat in which to return information about messages
[chat_id] :: GetChatMessageCalendar -> Maybe Int

-- | Filter for message content. Filters searchMessagesFilterEmpty,
--   searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
--   searchMessagesFilterUnreadReaction are unsupported in this function
[_filter] :: GetChatMessageCalendar -> Maybe SearchMessagesFilter

-- | The message identifier from which to return information about
--   messages; use 0 to get results from the last message
[from_message_id] :: GetChatMessageCalendar -> Maybe Int

-- | If not0, only messages in the specified Saved Messages topic will be
--   considered; pass 0 to consider all messages, or for chats other than
--   Saved Messages
[saved_messages_topic_id] :: GetChatMessageCalendar -> Maybe Int
defaultGetChatMessageCalendar :: GetChatMessageCalendar
instance GHC.Show.Show TD.Query.GetChatMessageCalendar.GetChatMessageCalendar
instance GHC.Classes.Eq TD.Query.GetChatMessageCalendar.GetChatMessageCalendar
instance TD.Lib.Internal.ShortShow TD.Query.GetChatMessageCalendar.GetChatMessageCalendar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageCalendar.GetChatMessageCalendar

module TD.Query.GetChatMessageCount

-- | Returns approximate number of messages of the specified type in the
--   chat. Returns <a>Count</a>
data GetChatMessageCount
GetChatMessageCount :: Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Bool -> GetChatMessageCount

-- | Identifier of the chat in which to count messages
[chat_id] :: GetChatMessageCount -> Maybe Int

-- | Filter for message content; searchMessagesFilterEmpty is unsupported
--   in this function
[_filter] :: GetChatMessageCount -> Maybe SearchMessagesFilter

-- | If not 0, only messages in the specified Saved Messages topic will be
--   counted; pass 0 to count all messages, or for chats other than Saved
--   Messages
[saved_messages_topic_id] :: GetChatMessageCount -> Maybe Int

-- | Pass true to get the number of messages without sending network
--   requests, or -1 if the number of messages is unknown locally
[return_local] :: GetChatMessageCount -> Maybe Bool
defaultGetChatMessageCount :: GetChatMessageCount
instance GHC.Show.Show TD.Query.GetChatMessageCount.GetChatMessageCount
instance GHC.Classes.Eq TD.Query.GetChatMessageCount.GetChatMessageCount
instance TD.Lib.Internal.ShortShow TD.Query.GetChatMessageCount.GetChatMessageCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessageCount.GetChatMessageCount

module TD.Query.GetChatMessagePosition

-- | Returns approximate 1-based position of a message among messages,
--   which can be found by the specified filter in the chat. Cannot be used
--   in secret chats. Returns <a>Count</a>
data GetChatMessagePosition
GetChatMessagePosition :: Maybe Int -> Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> GetChatMessagePosition

-- | Identifier of the chat in which to find message position
[chat_id] :: GetChatMessagePosition -> Maybe Int

-- | Message identifier
[message_id] :: GetChatMessagePosition -> Maybe Int

-- | Filter for message content; searchMessagesFilterEmpty,
--   searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction,
--   and searchMessagesFilterFailedToSend are unsupported in this function
[_filter] :: GetChatMessagePosition -> Maybe SearchMessagesFilter

-- | If not 0, only messages in the specified thread will be considered;
--   supergroups only
[message_thread_id] :: GetChatMessagePosition -> Maybe Int

-- | If not 0, only messages in the specified Saved Messages topic will be
--   considered; pass 0 to consider all relevant messages, or for chats
--   other than Saved Messages
[saved_messages_topic_id] :: GetChatMessagePosition -> Maybe Int
defaultGetChatMessagePosition :: GetChatMessagePosition
instance GHC.Show.Show TD.Query.GetChatMessagePosition.GetChatMessagePosition
instance GHC.Classes.Eq TD.Query.GetChatMessagePosition.GetChatMessagePosition
instance TD.Lib.Internal.ShortShow TD.Query.GetChatMessagePosition.GetChatMessagePosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatMessagePosition.GetChatMessagePosition

module TD.Query.GetChatNotificationSettingsExceptions

-- | Returns the list of chats with non-default notification settings for
--   new messages. Returns <a>Chats</a>
data GetChatNotificationSettingsExceptions
GetChatNotificationSettingsExceptions :: Maybe NotificationSettingsScope -> Maybe Bool -> GetChatNotificationSettingsExceptions

-- | If specified, only chats from the scope will be returned; pass null to
--   return chats from all scopes
[scope] :: GetChatNotificationSettingsExceptions -> Maybe NotificationSettingsScope

-- | Pass true to include in the response chats with only non-default sound
[compare_sound] :: GetChatNotificationSettingsExceptions -> Maybe Bool
defaultGetChatNotificationSettingsExceptions :: GetChatNotificationSettingsExceptions
instance GHC.Show.Show TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions
instance GHC.Classes.Eq TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions
instance TD.Lib.Internal.ShortShow TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatNotificationSettingsExceptions.GetChatNotificationSettingsExceptions

module TD.Query.GetChatPinnedMessage

-- | Returns information about a newest pinned message in the chat. Returns
--   <a>Message</a>
data GetChatPinnedMessage
GetChatPinnedMessage :: Maybe Int -> GetChatPinnedMessage

-- | Identifier of the chat the message belongs to
[chat_id] :: GetChatPinnedMessage -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatPinnedMessage.GetChatPinnedMessage
instance GHC.Classes.Eq TD.Query.GetChatPinnedMessage.GetChatPinnedMessage
instance TD.Lib.Internal.ShortShow TD.Query.GetChatPinnedMessage.GetChatPinnedMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatPinnedMessage.GetChatPinnedMessage

module TD.Query.GetChatPostedToChatPageStories

-- | Returns the list of stories that posted by the given chat to its chat
--   page. If from_story_id == 0, then pinned stories are returned first.
--   Then, stories are returned in a reverse chronological order (i.e., in
--   order of decreasing story_id). For optimal performance, the number of
--   returned stories is chosen by TDLib. Returns <a>Stories</a>
data GetChatPostedToChatPageStories
GetChatPostedToChatPageStories :: Maybe Int -> Maybe Int -> Maybe Int -> GetChatPostedToChatPageStories

-- | Chat identifier
[chat_id] :: GetChatPostedToChatPageStories -> Maybe Int

-- | Identifier of the story starting from which stories must be returned;
--   use 0 to get results from pinned and the newest story
[from_story_id] :: GetChatPostedToChatPageStories -> Maybe Int

-- | The maximum number of stories to be returned For optimal performance,
--   the number of returned stories is chosen by TDLib and can be smaller
--   than the specified limit
[limit] :: GetChatPostedToChatPageStories -> Maybe Int
defaultGetChatPostedToChatPageStories :: GetChatPostedToChatPageStories
instance GHC.Show.Show TD.Query.GetChatPostedToChatPageStories.GetChatPostedToChatPageStories
instance GHC.Classes.Eq TD.Query.GetChatPostedToChatPageStories.GetChatPostedToChatPageStories
instance TD.Lib.Internal.ShortShow TD.Query.GetChatPostedToChatPageStories.GetChatPostedToChatPageStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatPostedToChatPageStories.GetChatPostedToChatPageStories

module TD.Query.GetChatRevenueStatistics

-- | Returns detailed revenue statistics about a chat. Currently, this
--   method can be used only for channels if
--   supergroupFullInfo.can_get_revenue_statistics == true. Returns
--   <a>ChatRevenueStatistics</a>
data GetChatRevenueStatistics
GetChatRevenueStatistics :: Maybe Int -> Maybe Bool -> GetChatRevenueStatistics

-- | Chat identifier
[chat_id] :: GetChatRevenueStatistics -> Maybe Int

-- | Pass true if a dark theme is used by the application
[is_dark] :: GetChatRevenueStatistics -> Maybe Bool
defaultGetChatRevenueStatistics :: GetChatRevenueStatistics
instance GHC.Show.Show TD.Query.GetChatRevenueStatistics.GetChatRevenueStatistics
instance GHC.Classes.Eq TD.Query.GetChatRevenueStatistics.GetChatRevenueStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetChatRevenueStatistics.GetChatRevenueStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatRevenueStatistics.GetChatRevenueStatistics

module TD.Query.GetChatRevenueTransactions

-- | Returns the list of revenue transactions for a chat. Currently, this
--   method can be used only for channels if
--   supergroupFullInfo.can_get_revenue_statistics == true. Returns
--   <a>ChatRevenueTransactions</a>
data GetChatRevenueTransactions
GetChatRevenueTransactions :: Maybe Int -> Maybe Int -> Maybe Int -> GetChatRevenueTransactions

-- | Chat identifier
[chat_id] :: GetChatRevenueTransactions -> Maybe Int

-- | Number of transactions to skip
[offset] :: GetChatRevenueTransactions -> Maybe Int

-- | The maximum number of transactions to be returned; up to 200
[limit] :: GetChatRevenueTransactions -> Maybe Int
defaultGetChatRevenueTransactions :: GetChatRevenueTransactions
instance GHC.Show.Show TD.Query.GetChatRevenueTransactions.GetChatRevenueTransactions
instance GHC.Classes.Eq TD.Query.GetChatRevenueTransactions.GetChatRevenueTransactions
instance TD.Lib.Internal.ShortShow TD.Query.GetChatRevenueTransactions.GetChatRevenueTransactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatRevenueTransactions.GetChatRevenueTransactions

module TD.Query.GetChatRevenueWithdrawalUrl

-- | Returns URL for chat revenue withdrawal; requires owner privileges in
--   the chat. Currently, this method can be used only for channels if
--   supergroupFullInfo.can_get_revenue_statistics == true and
--   getOption("can_withdraw_chat_revenue"). Returns <a>HttpUrl</a>
data GetChatRevenueWithdrawalUrl
GetChatRevenueWithdrawalUrl :: Maybe Int -> Maybe Text -> GetChatRevenueWithdrawalUrl

-- | Chat identifier
[chat_id] :: GetChatRevenueWithdrawalUrl -> Maybe Int

-- | The 2-step verification password of the current user
[password] :: GetChatRevenueWithdrawalUrl -> Maybe Text
defaultGetChatRevenueWithdrawalUrl :: GetChatRevenueWithdrawalUrl
instance GHC.Show.Show TD.Query.GetChatRevenueWithdrawalUrl.GetChatRevenueWithdrawalUrl
instance GHC.Classes.Eq TD.Query.GetChatRevenueWithdrawalUrl.GetChatRevenueWithdrawalUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetChatRevenueWithdrawalUrl.GetChatRevenueWithdrawalUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatRevenueWithdrawalUrl.GetChatRevenueWithdrawalUrl

module TD.Query.GetChatScheduledMessages

-- | Returns all scheduled messages in a chat. The messages are returned in
--   a reverse chronological order (i.e., in order of decreasing
--   message_id). Returns <a>Messages</a>
data GetChatScheduledMessages
GetChatScheduledMessages :: Maybe Int -> GetChatScheduledMessages

-- | Chat identifier
[chat_id] :: GetChatScheduledMessages -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatScheduledMessages.GetChatScheduledMessages
instance GHC.Classes.Eq TD.Query.GetChatScheduledMessages.GetChatScheduledMessages
instance TD.Lib.Internal.ShortShow TD.Query.GetChatScheduledMessages.GetChatScheduledMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatScheduledMessages.GetChatScheduledMessages

module TD.Query.GetChatSimilarChatCount

-- | Returns approximate number of chats similar to the given chat. Returns
--   <a>Count</a>
data GetChatSimilarChatCount
GetChatSimilarChatCount :: Maybe Int -> Maybe Bool -> GetChatSimilarChatCount

-- | Identifier of the target chat; must be an identifier of a channel chat
[chat_id] :: GetChatSimilarChatCount -> Maybe Int

-- | Pass true to get the number of chats without sending network requests,
--   or -1 if the number of chats is unknown locally
[return_local] :: GetChatSimilarChatCount -> Maybe Bool
defaultGetChatSimilarChatCount :: GetChatSimilarChatCount
instance GHC.Show.Show TD.Query.GetChatSimilarChatCount.GetChatSimilarChatCount
instance GHC.Classes.Eq TD.Query.GetChatSimilarChatCount.GetChatSimilarChatCount
instance TD.Lib.Internal.ShortShow TD.Query.GetChatSimilarChatCount.GetChatSimilarChatCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSimilarChatCount.GetChatSimilarChatCount

module TD.Query.GetChatSimilarChats

-- | Returns a list of chats similar to the given chat. Returns
--   <a>Chats</a>
data GetChatSimilarChats
GetChatSimilarChats :: Maybe Int -> GetChatSimilarChats

-- | Identifier of the target chat; must be an identifier of a channel chat
[chat_id] :: GetChatSimilarChats -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatSimilarChats.GetChatSimilarChats
instance GHC.Classes.Eq TD.Query.GetChatSimilarChats.GetChatSimilarChats
instance TD.Lib.Internal.ShortShow TD.Query.GetChatSimilarChats.GetChatSimilarChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSimilarChats.GetChatSimilarChats

module TD.Query.GetChatSparseMessagePositions

-- | Returns sparse positions of messages of the specified type in the chat
--   to be used for shared media scroll implementation. Returns the results
--   in reverse chronological order (i.e., in order of decreasing
--   message_id). Cannot be used in secret chats or with
--   searchMessagesFilterFailedToSend filter without an enabled message
--   database. Returns <a>MessagePositions</a>
data GetChatSparseMessagePositions
GetChatSparseMessagePositions :: Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> Maybe Int -> GetChatSparseMessagePositions

-- | Identifier of the chat in which to return information about message
--   positions
[chat_id] :: GetChatSparseMessagePositions -> Maybe Int

-- | Filter for message content. Filters searchMessagesFilterEmpty,
--   searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
--   searchMessagesFilterUnreadReaction are unsupported in this function
[_filter] :: GetChatSparseMessagePositions -> Maybe SearchMessagesFilter

-- | The message identifier from which to return information about message
--   positions
[from_message_id] :: GetChatSparseMessagePositions -> Maybe Int

-- | The expected number of message positions to be returned; 50-2000. A
--   smaller number of positions can be returned, if there are not enough
--   appropriate messages
[limit] :: GetChatSparseMessagePositions -> Maybe Int

-- | If not 0, only messages in the specified Saved Messages topic will be
--   considered; pass 0 to consider all messages, or for chats other than
--   Saved Messages
[saved_messages_topic_id] :: GetChatSparseMessagePositions -> Maybe Int
defaultGetChatSparseMessagePositions :: GetChatSparseMessagePositions
instance GHC.Show.Show TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions
instance GHC.Classes.Eq TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions
instance TD.Lib.Internal.ShortShow TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSparseMessagePositions.GetChatSparseMessagePositions

module TD.Query.GetChatSponsoredMessages

-- | Returns sponsored messages to be shown in a chat; for channel chats
--   only. Returns <a>SponsoredMessages</a>
data GetChatSponsoredMessages
GetChatSponsoredMessages :: Maybe Int -> GetChatSponsoredMessages

-- | Identifier of the chat
[chat_id] :: GetChatSponsoredMessages -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatSponsoredMessages.GetChatSponsoredMessages
instance GHC.Classes.Eq TD.Query.GetChatSponsoredMessages.GetChatSponsoredMessages
instance TD.Lib.Internal.ShortShow TD.Query.GetChatSponsoredMessages.GetChatSponsoredMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatSponsoredMessages.GetChatSponsoredMessages

module TD.Query.GetChatStatistics

-- | Returns detailed statistics about a chat. Currently, this method can
--   be used only for supergroups and channels. Can be used only if
--   supergroupFullInfo.can_get_statistics == true. Returns
--   <a>ChatStatistics</a>
data GetChatStatistics
GetChatStatistics :: Maybe Int -> Maybe Bool -> GetChatStatistics

-- | Chat identifier
[chat_id] :: GetChatStatistics -> Maybe Int

-- | Pass true if a dark theme is used by the application
[is_dark] :: GetChatStatistics -> Maybe Bool
defaultGetChatStatistics :: GetChatStatistics
instance GHC.Show.Show TD.Query.GetChatStatistics.GetChatStatistics
instance GHC.Classes.Eq TD.Query.GetChatStatistics.GetChatStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetChatStatistics.GetChatStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatStatistics.GetChatStatistics

module TD.Query.GetChatStoryInteractions

-- | Returns interactions with a story posted in a chat. Can be used only
--   if story is posted on behalf of a chat and the user is an
--   administrator in the chat. Returns <a>StoryInteractions</a>
data GetChatStoryInteractions
GetChatStoryInteractions :: Maybe Int -> Maybe Int -> Maybe ReactionType -> Maybe Bool -> Maybe Text -> Maybe Int -> GetChatStoryInteractions

-- | The identifier of the sender of the story
[story_sender_chat_id] :: GetChatStoryInteractions -> Maybe Int

-- | Story identifier
[story_id] :: GetChatStoryInteractions -> Maybe Int

-- | Pass the default heart reaction or a suggested reaction type to
--   receive only interactions with the specified reaction type; pass null
--   to receive all interactions
[reaction_type] :: GetChatStoryInteractions -> Maybe ReactionType

-- | Pass true to get forwards and reposts first, then reactions, then
--   other views; pass false to get interactions sorted just by interaction
--   date
[prefer_forwards] :: GetChatStoryInteractions -> Maybe Bool

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetChatStoryInteractions -> Maybe Text

-- | The maximum number of story interactions to return
[limit] :: GetChatStoryInteractions -> Maybe Int
defaultGetChatStoryInteractions :: GetChatStoryInteractions
instance GHC.Show.Show TD.Query.GetChatStoryInteractions.GetChatStoryInteractions
instance GHC.Classes.Eq TD.Query.GetChatStoryInteractions.GetChatStoryInteractions
instance TD.Lib.Internal.ShortShow TD.Query.GetChatStoryInteractions.GetChatStoryInteractions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatStoryInteractions.GetChatStoryInteractions

module TD.Query.GetChats

-- | Returns an ordered list of chats from the beginning of a chat list.
--   For informational purposes only. Use loadChats and updates processing
--   instead to maintain chat lists in a consistent state. Returns
--   <a>Chats</a>
data GetChats
GetChats :: Maybe ChatList -> Maybe Int -> GetChats

-- | The chat list in which to return chats; pass null to get chats from
--   the main chat list
[chat_list] :: GetChats -> Maybe ChatList

-- | The maximum number of chats to be returned
[limit] :: GetChats -> Maybe Int
defaultGetChats :: GetChats
instance GHC.Show.Show TD.Query.GetChats.GetChats
instance GHC.Classes.Eq TD.Query.GetChats.GetChats
instance TD.Lib.Internal.ShortShow TD.Query.GetChats.GetChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChats.GetChats

module TD.Query.GetChatsForChatFolderInviteLink

-- | Returns identifiers of chats from a chat folder, suitable for adding
--   to a chat folder invite link. Returns <a>Chats</a>
data GetChatsForChatFolderInviteLink
GetChatsForChatFolderInviteLink :: Maybe Int -> GetChatsForChatFolderInviteLink

-- | Chat folder identifier
[chat_folder_id] :: GetChatsForChatFolderInviteLink -> Maybe Int
instance GHC.Show.Show TD.Query.GetChatsForChatFolderInviteLink.GetChatsForChatFolderInviteLink
instance GHC.Classes.Eq TD.Query.GetChatsForChatFolderInviteLink.GetChatsForChatFolderInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.GetChatsForChatFolderInviteLink.GetChatsForChatFolderInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatsForChatFolderInviteLink.GetChatsForChatFolderInviteLink

module TD.Query.GetChatsToSendStories

-- | Returns supergroup and channel chats in which the current user has the
--   right to post stories. The chats must be rechecked with canSendStory
--   before actually trying to post a story there. Returns <a>Chats</a>
data GetChatsToSendStories
GetChatsToSendStories :: GetChatsToSendStories
instance GHC.Show.Show TD.Query.GetChatsToSendStories.GetChatsToSendStories
instance GHC.Classes.Eq TD.Query.GetChatsToSendStories.GetChatsToSendStories
instance TD.Lib.Internal.ShortShow TD.Query.GetChatsToSendStories.GetChatsToSendStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetChatsToSendStories.GetChatsToSendStories

module TD.Query.GetCloseFriends

-- | Returns all close friends of the current user. Returns <a>Users</a>
data GetCloseFriends
GetCloseFriends :: GetCloseFriends
instance GHC.Show.Show TD.Query.GetCloseFriends.GetCloseFriends
instance GHC.Classes.Eq TD.Query.GetCloseFriends.GetCloseFriends
instance TD.Lib.Internal.ShortShow TD.Query.GetCloseFriends.GetCloseFriends
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCloseFriends.GetCloseFriends

module TD.Query.GetCollectibleItemInfo

-- | Returns information about a given collectible item that was purchased
--   at <a>https://fragment.com</a>. Returns <a>CollectibleItemInfo</a>
data GetCollectibleItemInfo
GetCollectibleItemInfo :: Maybe CollectibleItemType -> GetCollectibleItemInfo

-- | Type of the collectible item. The item must be used by a user and must
--   be visible to the current user
[_type] :: GetCollectibleItemInfo -> Maybe CollectibleItemType
instance GHC.Show.Show TD.Query.GetCollectibleItemInfo.GetCollectibleItemInfo
instance GHC.Classes.Eq TD.Query.GetCollectibleItemInfo.GetCollectibleItemInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetCollectibleItemInfo.GetCollectibleItemInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCollectibleItemInfo.GetCollectibleItemInfo

module TD.Query.GetCommands

-- | Returns the list of commands supported by the bot for the given user
--   scope and language; for bots only. Returns <a>BotCommands</a>
data GetCommands
GetCommands :: Maybe BotCommandScope -> Maybe Text -> GetCommands

-- | The scope to which the commands are relevant; pass null to get
--   commands in the default bot command scope
[scope] :: GetCommands -> Maybe BotCommandScope

-- | A two-letter ISO 639-1 language code or an empty string
[language_code] :: GetCommands -> Maybe Text
defaultGetCommands :: GetCommands
instance GHC.Show.Show TD.Query.GetCommands.GetCommands
instance GHC.Classes.Eq TD.Query.GetCommands.GetCommands
instance TD.Lib.Internal.ShortShow TD.Query.GetCommands.GetCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCommands.GetCommands

module TD.Query.GetConnectedWebsites

-- | Returns all website where the current user used Telegram to log in.
--   Returns <a>ConnectedWebsites</a>
data GetConnectedWebsites
GetConnectedWebsites :: GetConnectedWebsites
instance GHC.Show.Show TD.Query.GetConnectedWebsites.GetConnectedWebsites
instance GHC.Classes.Eq TD.Query.GetConnectedWebsites.GetConnectedWebsites
instance TD.Lib.Internal.ShortShow TD.Query.GetConnectedWebsites.GetConnectedWebsites
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetConnectedWebsites.GetConnectedWebsites

module TD.Query.GetContacts

-- | Returns all contacts of the user. Returns <a>Users</a>
data GetContacts
GetContacts :: GetContacts
instance GHC.Show.Show TD.Query.GetContacts.GetContacts
instance GHC.Classes.Eq TD.Query.GetContacts.GetContacts
instance TD.Lib.Internal.ShortShow TD.Query.GetContacts.GetContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetContacts.GetContacts

module TD.Query.GetCountries

-- | Returns information about existing countries. Can be called before
--   authorization. Returns <a>Countries</a>
data GetCountries
GetCountries :: GetCountries
instance GHC.Show.Show TD.Query.GetCountries.GetCountries
instance GHC.Classes.Eq TD.Query.GetCountries.GetCountries
instance TD.Lib.Internal.ShortShow TD.Query.GetCountries.GetCountries
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCountries.GetCountries

module TD.Query.GetCountryCode

-- | Uses the current IP address to find the current country. Returns
--   two-letter ISO 3166-1 alpha-2 country code. Can be called before
--   authorization. Returns <a>Text</a>
data GetCountryCode
GetCountryCode :: GetCountryCode
instance GHC.Show.Show TD.Query.GetCountryCode.GetCountryCode
instance GHC.Classes.Eq TD.Query.GetCountryCode.GetCountryCode
instance TD.Lib.Internal.ShortShow TD.Query.GetCountryCode.GetCountryCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCountryCode.GetCountryCode

module TD.Query.GetCountryFlagEmoji

-- | Returns an emoji for the given country. Returns an empty string on
--   failure. Can be called synchronously. Returns <a>Text</a>
data GetCountryFlagEmoji
GetCountryFlagEmoji :: Maybe Text -> GetCountryFlagEmoji

-- | A two-letter ISO 3166-1 alpha-2 country code as received from
--   getCountries
[country_code] :: GetCountryFlagEmoji -> Maybe Text
instance GHC.Show.Show TD.Query.GetCountryFlagEmoji.GetCountryFlagEmoji
instance GHC.Classes.Eq TD.Query.GetCountryFlagEmoji.GetCountryFlagEmoji
instance TD.Lib.Internal.ShortShow TD.Query.GetCountryFlagEmoji.GetCountryFlagEmoji
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCountryFlagEmoji.GetCountryFlagEmoji

module TD.Query.GetCreatedPublicChats

-- | Returns a list of public chats of the specified type, owned by the
--   user. Returns <a>Chats</a>
data GetCreatedPublicChats
GetCreatedPublicChats :: Maybe PublicChatType -> GetCreatedPublicChats

-- | Type of the public chats to return
[_type] :: GetCreatedPublicChats -> Maybe PublicChatType
instance GHC.Show.Show TD.Query.GetCreatedPublicChats.GetCreatedPublicChats
instance GHC.Classes.Eq TD.Query.GetCreatedPublicChats.GetCreatedPublicChats
instance TD.Lib.Internal.ShortShow TD.Query.GetCreatedPublicChats.GetCreatedPublicChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCreatedPublicChats.GetCreatedPublicChats

module TD.Query.GetCurrentState

-- | Returns all updates needed to restore current TDLib state, i.e. all
--   actual updateAuthorizationState<i>updateUser</i>updateNewChat and
--   others. This is especially useful if TDLib is run in a separate
--   process. Can be called before initialization. Returns <a>Updates</a>
data GetCurrentState
GetCurrentState :: GetCurrentState
instance GHC.Show.Show TD.Query.GetCurrentState.GetCurrentState
instance GHC.Classes.Eq TD.Query.GetCurrentState.GetCurrentState
instance TD.Lib.Internal.ShortShow TD.Query.GetCurrentState.GetCurrentState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCurrentState.GetCurrentState

module TD.Query.GetCustomEmojiReactionAnimations

-- | Returns TGS stickers with generic animations for custom emoji
--   reactions. Returns <a>Stickers</a>
data GetCustomEmojiReactionAnimations
GetCustomEmojiReactionAnimations :: GetCustomEmojiReactionAnimations
instance GHC.Show.Show TD.Query.GetCustomEmojiReactionAnimations.GetCustomEmojiReactionAnimations
instance GHC.Classes.Eq TD.Query.GetCustomEmojiReactionAnimations.GetCustomEmojiReactionAnimations
instance TD.Lib.Internal.ShortShow TD.Query.GetCustomEmojiReactionAnimations.GetCustomEmojiReactionAnimations
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCustomEmojiReactionAnimations.GetCustomEmojiReactionAnimations

module TD.Query.GetCustomEmojiStickers

-- | Returns the list of custom emoji stickers by their identifiers.
--   Stickers are returned in arbitrary order. Only found stickers are
--   returned. Returns <a>Stickers</a>
data GetCustomEmojiStickers
GetCustomEmojiStickers :: Maybe [Int] -> GetCustomEmojiStickers

-- | Identifiers of custom emoji stickers. At most 200 custom emoji
--   stickers can be received simultaneously
[custom_emoji_ids] :: GetCustomEmojiStickers -> Maybe [Int]
instance GHC.Show.Show TD.Query.GetCustomEmojiStickers.GetCustomEmojiStickers
instance GHC.Classes.Eq TD.Query.GetCustomEmojiStickers.GetCustomEmojiStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetCustomEmojiStickers.GetCustomEmojiStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetCustomEmojiStickers.GetCustomEmojiStickers

module TD.Query.GetDatabaseStatistics

-- | Returns database statistics. Returns <a>DatabaseStatistics</a>
data GetDatabaseStatistics
GetDatabaseStatistics :: GetDatabaseStatistics
instance GHC.Show.Show TD.Query.GetDatabaseStatistics.GetDatabaseStatistics
instance GHC.Classes.Eq TD.Query.GetDatabaseStatistics.GetDatabaseStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetDatabaseStatistics.GetDatabaseStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDatabaseStatistics.GetDatabaseStatistics

module TD.Query.GetDeepLinkInfo

-- | Returns information about a tg:/<i> deep link. Use
--   "tg:</i>/need_update_for_some_feature" or
--   "tg:some_unsupported_feature" for testing. Returns a 404 error for
--   unknown links. Can be called before authorization. Returns
--   <a>DeepLinkInfo</a>
data GetDeepLinkInfo
GetDeepLinkInfo :: Maybe Text -> GetDeepLinkInfo

-- | The link
[link] :: GetDeepLinkInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetDeepLinkInfo.GetDeepLinkInfo
instance GHC.Classes.Eq TD.Query.GetDeepLinkInfo.GetDeepLinkInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetDeepLinkInfo.GetDeepLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDeepLinkInfo.GetDeepLinkInfo

module TD.Query.GetDefaultBackgroundCustomEmojiStickers

-- | Returns default list of custom emoji stickers for reply background.
--   Returns <a>Stickers</a>
data GetDefaultBackgroundCustomEmojiStickers
GetDefaultBackgroundCustomEmojiStickers :: GetDefaultBackgroundCustomEmojiStickers
instance GHC.Show.Show TD.Query.GetDefaultBackgroundCustomEmojiStickers.GetDefaultBackgroundCustomEmojiStickers
instance GHC.Classes.Eq TD.Query.GetDefaultBackgroundCustomEmojiStickers.GetDefaultBackgroundCustomEmojiStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultBackgroundCustomEmojiStickers.GetDefaultBackgroundCustomEmojiStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultBackgroundCustomEmojiStickers.GetDefaultBackgroundCustomEmojiStickers

module TD.Query.GetDefaultChatEmojiStatuses

-- | Returns default emoji statuses for chats. Returns <a>EmojiStatuses</a>
data GetDefaultChatEmojiStatuses
GetDefaultChatEmojiStatuses :: GetDefaultChatEmojiStatuses
instance GHC.Show.Show TD.Query.GetDefaultChatEmojiStatuses.GetDefaultChatEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetDefaultChatEmojiStatuses.GetDefaultChatEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultChatEmojiStatuses.GetDefaultChatEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultChatEmojiStatuses.GetDefaultChatEmojiStatuses

module TD.Query.GetDefaultChatPhotoCustomEmojiStickers

-- | Returns default list of custom emoji stickers for placing on a chat
--   photo. Returns <a>Stickers</a>
data GetDefaultChatPhotoCustomEmojiStickers
GetDefaultChatPhotoCustomEmojiStickers :: GetDefaultChatPhotoCustomEmojiStickers
instance GHC.Show.Show TD.Query.GetDefaultChatPhotoCustomEmojiStickers.GetDefaultChatPhotoCustomEmojiStickers
instance GHC.Classes.Eq TD.Query.GetDefaultChatPhotoCustomEmojiStickers.GetDefaultChatPhotoCustomEmojiStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultChatPhotoCustomEmojiStickers.GetDefaultChatPhotoCustomEmojiStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultChatPhotoCustomEmojiStickers.GetDefaultChatPhotoCustomEmojiStickers

module TD.Query.GetDefaultEmojiStatuses

-- | Returns default emoji statuses for self status. Returns
--   <a>EmojiStatuses</a>
data GetDefaultEmojiStatuses
GetDefaultEmojiStatuses :: GetDefaultEmojiStatuses
instance GHC.Show.Show TD.Query.GetDefaultEmojiStatuses.GetDefaultEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetDefaultEmojiStatuses.GetDefaultEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultEmojiStatuses.GetDefaultEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultEmojiStatuses.GetDefaultEmojiStatuses

module TD.Query.GetDefaultMessageAutoDeleteTime

-- | Returns default message auto-delete time setting for new chats.
--   Returns <a>MessageAutoDeleteTime</a>
data GetDefaultMessageAutoDeleteTime
GetDefaultMessageAutoDeleteTime :: GetDefaultMessageAutoDeleteTime
instance GHC.Show.Show TD.Query.GetDefaultMessageAutoDeleteTime.GetDefaultMessageAutoDeleteTime
instance GHC.Classes.Eq TD.Query.GetDefaultMessageAutoDeleteTime.GetDefaultMessageAutoDeleteTime
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultMessageAutoDeleteTime.GetDefaultMessageAutoDeleteTime
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultMessageAutoDeleteTime.GetDefaultMessageAutoDeleteTime

module TD.Query.GetDefaultProfilePhotoCustomEmojiStickers

-- | Returns default list of custom emoji stickers for placing on a profile
--   photo. Returns <a>Stickers</a>
data GetDefaultProfilePhotoCustomEmojiStickers
GetDefaultProfilePhotoCustomEmojiStickers :: GetDefaultProfilePhotoCustomEmojiStickers
instance GHC.Show.Show TD.Query.GetDefaultProfilePhotoCustomEmojiStickers.GetDefaultProfilePhotoCustomEmojiStickers
instance GHC.Classes.Eq TD.Query.GetDefaultProfilePhotoCustomEmojiStickers.GetDefaultProfilePhotoCustomEmojiStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetDefaultProfilePhotoCustomEmojiStickers.GetDefaultProfilePhotoCustomEmojiStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDefaultProfilePhotoCustomEmojiStickers.GetDefaultProfilePhotoCustomEmojiStickers

module TD.Query.GetDisallowedChatEmojiStatuses

-- | Returns the list of emoji statuses, which can't be used as chat emoji
--   status, even they are from a sticker set with
--   is_allowed_as_chat_emoji_status == true. Returns <a>EmojiStatuses</a>
data GetDisallowedChatEmojiStatuses
GetDisallowedChatEmojiStatuses :: GetDisallowedChatEmojiStatuses
instance GHC.Show.Show TD.Query.GetDisallowedChatEmojiStatuses.GetDisallowedChatEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetDisallowedChatEmojiStatuses.GetDisallowedChatEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetDisallowedChatEmojiStatuses.GetDisallowedChatEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetDisallowedChatEmojiStatuses.GetDisallowedChatEmojiStatuses

module TD.Query.GetEmojiCategories

-- | Returns available emojis categories. Returns <a>EmojiCategories</a>
data GetEmojiCategories
GetEmojiCategories :: Maybe EmojiCategoryType -> GetEmojiCategories

-- | Type of emoji categories to return; pass null to get default emoji
--   categories
[_type] :: GetEmojiCategories -> Maybe EmojiCategoryType
instance GHC.Show.Show TD.Query.GetEmojiCategories.GetEmojiCategories
instance GHC.Classes.Eq TD.Query.GetEmojiCategories.GetEmojiCategories
instance TD.Lib.Internal.ShortShow TD.Query.GetEmojiCategories.GetEmojiCategories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetEmojiCategories.GetEmojiCategories

module TD.Query.GetEmojiReaction

-- | Returns information about an emoji reaction. Returns a 404 error if
--   the reaction is not found. Returns <a>EmojiReaction</a>
data GetEmojiReaction
GetEmojiReaction :: Maybe Text -> GetEmojiReaction

-- | Text representation of the reaction
[emoji] :: GetEmojiReaction -> Maybe Text
instance GHC.Show.Show TD.Query.GetEmojiReaction.GetEmojiReaction
instance GHC.Classes.Eq TD.Query.GetEmojiReaction.GetEmojiReaction
instance TD.Lib.Internal.ShortShow TD.Query.GetEmojiReaction.GetEmojiReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetEmojiReaction.GetEmojiReaction

module TD.Query.GetEmojiSuggestionsUrl

-- | Returns an HTTP URL which can be used to automatically log in to the
--   translation platform and suggest new emoji replacements. The URL will
--   be valid for 30 seconds after generation. Returns <a>HttpUrl</a>
data GetEmojiSuggestionsUrl
GetEmojiSuggestionsUrl :: Maybe Text -> GetEmojiSuggestionsUrl

-- | Language code for which the emoji replacements will be suggested
[language_code] :: GetEmojiSuggestionsUrl -> Maybe Text
instance GHC.Show.Show TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl
instance GHC.Classes.Eq TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetEmojiSuggestionsUrl.GetEmojiSuggestionsUrl

module TD.Query.GetExternalLink

-- | Returns an HTTP URL which can be used to automatically authorize the
--   current user on a website after clicking an HTTP link. Use the method
--   getExternalLinkInfo to find whether a prior user confirmation is
--   needed. Returns <a>HttpUrl</a>
data GetExternalLink
GetExternalLink :: Maybe Text -> Maybe Bool -> GetExternalLink

-- | The HTTP link
[link] :: GetExternalLink -> Maybe Text

-- | Pass true if the current user allowed the bot, returned in
--   getExternalLinkInfo, to send them messages
[allow_write_access] :: GetExternalLink -> Maybe Bool
defaultGetExternalLink :: GetExternalLink
instance GHC.Show.Show TD.Query.GetExternalLink.GetExternalLink
instance GHC.Classes.Eq TD.Query.GetExternalLink.GetExternalLink
instance TD.Lib.Internal.ShortShow TD.Query.GetExternalLink.GetExternalLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetExternalLink.GetExternalLink

module TD.Query.GetExternalLinkInfo

-- | Returns information about an action to be done when the current user
--   clicks an external link. Don't use this method for links from secret
--   chats if web page preview is disabled in secret chats. Returns
--   <a>LoginUrlInfo</a>
data GetExternalLinkInfo
GetExternalLinkInfo :: Maybe Text -> GetExternalLinkInfo

-- | The link
[link] :: GetExternalLinkInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetExternalLinkInfo.GetExternalLinkInfo
instance GHC.Classes.Eq TD.Query.GetExternalLinkInfo.GetExternalLinkInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetExternalLinkInfo.GetExternalLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetExternalLinkInfo.GetExternalLinkInfo

module TD.Query.GetFavoriteStickers

-- | Returns favorite stickers. Returns <a>Stickers</a>
data GetFavoriteStickers
GetFavoriteStickers :: GetFavoriteStickers
instance GHC.Show.Show TD.Query.GetFavoriteStickers.GetFavoriteStickers
instance GHC.Classes.Eq TD.Query.GetFavoriteStickers.GetFavoriteStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetFavoriteStickers.GetFavoriteStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFavoriteStickers.GetFavoriteStickers

module TD.Query.GetFile

-- | Returns information about a file; this is an offline request. Returns
--   <a>File</a>
data GetFile
GetFile :: Maybe Int -> GetFile

-- | Identifier of the file to get
[file_id] :: GetFile -> Maybe Int
instance GHC.Show.Show TD.Query.GetFile.GetFile
instance GHC.Classes.Eq TD.Query.GetFile.GetFile
instance TD.Lib.Internal.ShortShow TD.Query.GetFile.GetFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFile.GetFile

module TD.Query.GetFileDownloadedPrefixSize

-- | Returns file downloaded prefix size from a given offset, in bytes.
--   Returns <a>FileDownloadedPrefixSize</a>
data GetFileDownloadedPrefixSize
GetFileDownloadedPrefixSize :: Maybe Int -> Maybe Int -> GetFileDownloadedPrefixSize

-- | Identifier of the file
[file_id] :: GetFileDownloadedPrefixSize -> Maybe Int

-- | Offset from which downloaded prefix size needs to be calculated
[offset] :: GetFileDownloadedPrefixSize -> Maybe Int
defaultGetFileDownloadedPrefixSize :: GetFileDownloadedPrefixSize
instance GHC.Show.Show TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize
instance GHC.Classes.Eq TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize
instance TD.Lib.Internal.ShortShow TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileDownloadedPrefixSize.GetFileDownloadedPrefixSize

module TD.Query.GetFileExtension

-- | Returns the extension of a file, guessed by its MIME type. Returns an
--   empty string on failure. Can be called synchronously. Returns
--   <a>Text</a>
data GetFileExtension
GetFileExtension :: Maybe Text -> GetFileExtension

-- | The MIME type of the file
[mime_type] :: GetFileExtension -> Maybe Text
instance GHC.Show.Show TD.Query.GetFileExtension.GetFileExtension
instance GHC.Classes.Eq TD.Query.GetFileExtension.GetFileExtension
instance TD.Lib.Internal.ShortShow TD.Query.GetFileExtension.GetFileExtension
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileExtension.GetFileExtension

module TD.Query.GetFileMimeType

-- | Returns the MIME type of a file, guessed by its extension. Returns an
--   empty string on failure. Can be called synchronously. Returns
--   <a>Text</a>
data GetFileMimeType
GetFileMimeType :: Maybe Text -> GetFileMimeType

-- | The name of the file or path to the file
[file_name] :: GetFileMimeType -> Maybe Text
instance GHC.Show.Show TD.Query.GetFileMimeType.GetFileMimeType
instance GHC.Classes.Eq TD.Query.GetFileMimeType.GetFileMimeType
instance TD.Lib.Internal.ShortShow TD.Query.GetFileMimeType.GetFileMimeType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetFileMimeType.GetFileMimeType

module TD.Query.GetForumTopic

-- | Returns information about a forum topic. Returns <a>ForumTopic</a>
data GetForumTopic
GetForumTopic :: Maybe Int -> Maybe Int -> GetForumTopic

-- | Identifier of the chat
[chat_id] :: GetForumTopic -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: GetForumTopic -> Maybe Int
defaultGetForumTopic :: GetForumTopic
instance GHC.Show.Show TD.Query.GetForumTopic.GetForumTopic
instance GHC.Classes.Eq TD.Query.GetForumTopic.GetForumTopic
instance TD.Lib.Internal.ShortShow TD.Query.GetForumTopic.GetForumTopic
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetForumTopic.GetForumTopic

module TD.Query.GetForumTopicDefaultIcons

-- | Returns the list of custom emojis, which can be used as forum topic
--   icon by all users. Returns <a>Stickers</a>
data GetForumTopicDefaultIcons
GetForumTopicDefaultIcons :: GetForumTopicDefaultIcons
instance GHC.Show.Show TD.Query.GetForumTopicDefaultIcons.GetForumTopicDefaultIcons
instance GHC.Classes.Eq TD.Query.GetForumTopicDefaultIcons.GetForumTopicDefaultIcons
instance TD.Lib.Internal.ShortShow TD.Query.GetForumTopicDefaultIcons.GetForumTopicDefaultIcons
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetForumTopicDefaultIcons.GetForumTopicDefaultIcons

module TD.Query.GetForumTopicLink

-- | Returns an HTTPS link to a topic in a forum chat. This is an offline
--   request. Returns <a>MessageLink</a>
data GetForumTopicLink
GetForumTopicLink :: Maybe Int -> Maybe Int -> GetForumTopicLink

-- | Identifier of the chat
[chat_id] :: GetForumTopicLink -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: GetForumTopicLink -> Maybe Int
defaultGetForumTopicLink :: GetForumTopicLink
instance GHC.Show.Show TD.Query.GetForumTopicLink.GetForumTopicLink
instance GHC.Classes.Eq TD.Query.GetForumTopicLink.GetForumTopicLink
instance TD.Lib.Internal.ShortShow TD.Query.GetForumTopicLink.GetForumTopicLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetForumTopicLink.GetForumTopicLink

module TD.Query.GetForumTopics

-- | Returns found forum topics in a forum chat. This is a temporary method
--   for getting information about topic list from the server. Returns
--   <a>ForumTopics</a>
data GetForumTopics
GetForumTopics :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetForumTopics

-- | Identifier of the forum chat
[chat_id] :: GetForumTopics -> Maybe Int

-- | Query to search for in the forum topic's name
[query] :: GetForumTopics -> Maybe Text

-- | The date starting from which the results need to be fetched. Use 0 or
--   any date in the future to get results from the last topic
[offset_date] :: GetForumTopics -> Maybe Int

-- | The message identifier of the last message in the last found topic, or
--   0 for the first request
[offset_message_id] :: GetForumTopics -> Maybe Int

-- | The message thread identifier of the last found topic, or 0 for the
--   first request
[offset_message_thread_id] :: GetForumTopics -> Maybe Int

-- | The maximum number of forum topics to be returned; up to 100. For
--   optimal performance, the number of returned forum topics is chosen by
--   TDLib and can be smaller than the specified limit
[limit] :: GetForumTopics -> Maybe Int
defaultGetForumTopics :: GetForumTopics
instance GHC.Show.Show TD.Query.GetForumTopics.GetForumTopics
instance GHC.Classes.Eq TD.Query.GetForumTopics.GetForumTopics
instance TD.Lib.Internal.ShortShow TD.Query.GetForumTopics.GetForumTopics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetForumTopics.GetForumTopics

module TD.Query.GetGameHighScores

-- | Returns the high scores for a game and some part of the high score
--   table in the range of the specified user; for bots only. Returns
--   <a>GameHighScores</a>
data GetGameHighScores
GetGameHighScores :: Maybe Int -> Maybe Int -> Maybe Int -> GetGameHighScores

-- | The chat that contains the message with the game
[chat_id] :: GetGameHighScores -> Maybe Int

-- | Identifier of the message
[message_id] :: GetGameHighScores -> Maybe Int

-- | User identifier
[user_id] :: GetGameHighScores -> Maybe Int
defaultGetGameHighScores :: GetGameHighScores
instance GHC.Show.Show TD.Query.GetGameHighScores.GetGameHighScores
instance GHC.Classes.Eq TD.Query.GetGameHighScores.GetGameHighScores
instance TD.Lib.Internal.ShortShow TD.Query.GetGameHighScores.GetGameHighScores
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGameHighScores.GetGameHighScores

module TD.Query.GetGreetingStickers

-- | Returns greeting stickers from regular sticker sets that can be used
--   for the start page of other users. Returns <a>Stickers</a>
data GetGreetingStickers
GetGreetingStickers :: GetGreetingStickers
instance GHC.Show.Show TD.Query.GetGreetingStickers.GetGreetingStickers
instance GHC.Classes.Eq TD.Query.GetGreetingStickers.GetGreetingStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetGreetingStickers.GetGreetingStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGreetingStickers.GetGreetingStickers

module TD.Query.GetGroupCall

-- | Returns information about a group call. Returns <a>GroupCall</a>
data GetGroupCall
GetGroupCall :: Maybe Int -> GetGroupCall

-- | Group call identifier
[group_call_id] :: GetGroupCall -> Maybe Int
instance GHC.Show.Show TD.Query.GetGroupCall.GetGroupCall
instance GHC.Classes.Eq TD.Query.GetGroupCall.GetGroupCall
instance TD.Lib.Internal.ShortShow TD.Query.GetGroupCall.GetGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCall.GetGroupCall

module TD.Query.GetGroupCallInviteLink

-- | Returns invite link to a video chat in a public chat. Returns
--   <a>HttpUrl</a>
data GetGroupCallInviteLink
GetGroupCallInviteLink :: Maybe Int -> Maybe Bool -> GetGroupCallInviteLink

-- | Group call identifier
[group_call_id] :: GetGroupCallInviteLink -> Maybe Int

-- | Pass true if the invite link needs to contain an invite hash, passing
--   which to joinGroupCall would allow the invited user to unmute
--   themselves. Requires groupCall.can_be_managed group call flag
[can_self_unmute] :: GetGroupCallInviteLink -> Maybe Bool
defaultGetGroupCallInviteLink :: GetGroupCallInviteLink
instance GHC.Show.Show TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink
instance GHC.Classes.Eq TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallInviteLink.GetGroupCallInviteLink

module TD.Query.GetGroupCallStreamSegment

-- | Returns a file with a segment of a group call stream in a modified OGG
--   format for audio or MPEG-4 format for video. Returns <a>FilePart</a>
data GetGroupCallStreamSegment
GetGroupCallStreamSegment :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe GroupCallVideoQuality -> GetGroupCallStreamSegment

-- | Group call identifier
[group_call_id] :: GetGroupCallStreamSegment -> Maybe Int

-- | Point in time when the stream segment begins; Unix timestamp in
--   milliseconds
[time_offset] :: GetGroupCallStreamSegment -> Maybe Int

-- | Segment duration scale; 0-1. Segment's duration is 1000/(2**scale)
--   milliseconds
[scale] :: GetGroupCallStreamSegment -> Maybe Int

-- | Identifier of an audio/video channel to get as received from tgcalls
[channel_id] :: GetGroupCallStreamSegment -> Maybe Int

-- | Video quality as received from tgcalls; pass null to get the worst
--   available quality
[video_quality] :: GetGroupCallStreamSegment -> Maybe GroupCallVideoQuality
defaultGetGroupCallStreamSegment :: GetGroupCallStreamSegment
instance GHC.Show.Show TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment
instance GHC.Classes.Eq TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment
instance TD.Lib.Internal.ShortShow TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallStreamSegment.GetGroupCallStreamSegment

module TD.Query.GetGroupCallStreams

-- | Returns information about available group call streams. Returns
--   <a>GroupCallStreams</a>
data GetGroupCallStreams
GetGroupCallStreams :: Maybe Int -> GetGroupCallStreams

-- | Group call identifier
[group_call_id] :: GetGroupCallStreams -> Maybe Int
instance GHC.Show.Show TD.Query.GetGroupCallStreams.GetGroupCallStreams
instance GHC.Classes.Eq TD.Query.GetGroupCallStreams.GetGroupCallStreams
instance TD.Lib.Internal.ShortShow TD.Query.GetGroupCallStreams.GetGroupCallStreams
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupCallStreams.GetGroupCallStreams

module TD.Query.GetGroupsInCommon

-- | Returns a list of common group chats with a given user. Chats are
--   sorted by their type and creation date. Returns <a>Chats</a>
data GetGroupsInCommon
GetGroupsInCommon :: Maybe Int -> Maybe Int -> Maybe Int -> GetGroupsInCommon

-- | User identifier
[user_id] :: GetGroupsInCommon -> Maybe Int

-- | Chat identifier starting from which to return chats; use 0 for the
--   first request
[offset_chat_id] :: GetGroupsInCommon -> Maybe Int

-- | The maximum number of chats to be returned; up to 100
[limit] :: GetGroupsInCommon -> Maybe Int
defaultGetGroupsInCommon :: GetGroupsInCommon
instance GHC.Show.Show TD.Query.GetGroupsInCommon.GetGroupsInCommon
instance GHC.Classes.Eq TD.Query.GetGroupsInCommon.GetGroupsInCommon
instance TD.Lib.Internal.ShortShow TD.Query.GetGroupsInCommon.GetGroupsInCommon
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetGroupsInCommon.GetGroupsInCommon

module TD.Query.GetImportedContactCount

-- | Returns the total number of imported contacts. Returns <a>Count</a>
data GetImportedContactCount
GetImportedContactCount :: GetImportedContactCount
instance GHC.Show.Show TD.Query.GetImportedContactCount.GetImportedContactCount
instance GHC.Classes.Eq TD.Query.GetImportedContactCount.GetImportedContactCount
instance TD.Lib.Internal.ShortShow TD.Query.GetImportedContactCount.GetImportedContactCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetImportedContactCount.GetImportedContactCount

module TD.Query.GetInactiveSupergroupChats

-- | Returns a list of recently inactive supergroups and channels. Can be
--   used when user reaches limit on the number of joined supergroups and
--   channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be
--   increased with Telegram Premium. Returns <a>Chats</a>
data GetInactiveSupergroupChats
GetInactiveSupergroupChats :: GetInactiveSupergroupChats
instance GHC.Show.Show TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats
instance GHC.Classes.Eq TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats
instance TD.Lib.Internal.ShortShow TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInactiveSupergroupChats.GetInactiveSupergroupChats

module TD.Query.GetInlineGameHighScores

-- | Returns game high scores and some part of the high score table in the
--   range of the specified user; for bots only. Returns
--   <a>GameHighScores</a>
data GetInlineGameHighScores
GetInlineGameHighScores :: Maybe Text -> Maybe Int -> GetInlineGameHighScores

-- | Inline message identifier
[inline_message_id] :: GetInlineGameHighScores -> Maybe Text

-- | User identifier
[user_id] :: GetInlineGameHighScores -> Maybe Int
defaultGetInlineGameHighScores :: GetInlineGameHighScores
instance GHC.Show.Show TD.Query.GetInlineGameHighScores.GetInlineGameHighScores
instance GHC.Classes.Eq TD.Query.GetInlineGameHighScores.GetInlineGameHighScores
instance TD.Lib.Internal.ShortShow TD.Query.GetInlineGameHighScores.GetInlineGameHighScores
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInlineGameHighScores.GetInlineGameHighScores

module TD.Query.GetInlineQueryResults

-- | Sends an inline query to a bot and returns its results. Returns an
--   error with code 502 if the bot fails to answer the query before the
--   query timeout expires. Returns <a>InlineQueryResults</a>
data GetInlineQueryResults
GetInlineQueryResults :: Maybe Int -> Maybe Int -> Maybe Location -> Maybe Text -> Maybe Text -> GetInlineQueryResults

-- | Identifier of the target bot
[bot_user_id] :: GetInlineQueryResults -> Maybe Int

-- | Identifier of the chat where the query was sent
[chat_id] :: GetInlineQueryResults -> Maybe Int

-- | Location of the user; pass null if unknown or the bot doesn't need
--   user's location
[user_location] :: GetInlineQueryResults -> Maybe Location

-- | Text of the query
[query] :: GetInlineQueryResults -> Maybe Text

-- | Offset of the first entry to return; use empty string to get the first
--   chunk of results
[offset] :: GetInlineQueryResults -> Maybe Text
defaultGetInlineQueryResults :: GetInlineQueryResults
instance GHC.Show.Show TD.Query.GetInlineQueryResults.GetInlineQueryResults
instance GHC.Classes.Eq TD.Query.GetInlineQueryResults.GetInlineQueryResults
instance TD.Lib.Internal.ShortShow TD.Query.GetInlineQueryResults.GetInlineQueryResults
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInlineQueryResults.GetInlineQueryResults

module TD.Query.GetInstalledBackgrounds

-- | Returns backgrounds installed by the user. Returns <a>Backgrounds</a>
data GetInstalledBackgrounds
GetInstalledBackgrounds :: Maybe Bool -> GetInstalledBackgrounds

-- | Pass true to order returned backgrounds for a dark theme
[for_dark_theme] :: GetInstalledBackgrounds -> Maybe Bool
instance GHC.Show.Show TD.Query.GetInstalledBackgrounds.GetInstalledBackgrounds
instance GHC.Classes.Eq TD.Query.GetInstalledBackgrounds.GetInstalledBackgrounds
instance TD.Lib.Internal.ShortShow TD.Query.GetInstalledBackgrounds.GetInstalledBackgrounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInstalledBackgrounds.GetInstalledBackgrounds

module TD.Query.GetInstalledStickerSets

-- | Returns a list of installed sticker sets. Returns <a>StickerSets</a>
data GetInstalledStickerSets
GetInstalledStickerSets :: Maybe StickerType -> GetInstalledStickerSets

-- | Type of the sticker sets to return
[sticker_type] :: GetInstalledStickerSets -> Maybe StickerType
instance GHC.Show.Show TD.Query.GetInstalledStickerSets.GetInstalledStickerSets
instance GHC.Classes.Eq TD.Query.GetInstalledStickerSets.GetInstalledStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.GetInstalledStickerSets.GetInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInstalledStickerSets.GetInstalledStickerSets

module TD.Query.GetInternalLink

-- | Returns an HTTPS or a tg: link with the given type. Can be called
--   before authorization. Returns <a>HttpUrl</a>
data GetInternalLink
GetInternalLink :: Maybe InternalLinkType -> Maybe Bool -> GetInternalLink

-- | Expected type of the link
[_type] :: GetInternalLink -> Maybe InternalLinkType

-- | Pass true to create an HTTPS link (only available for some link
--   types); pass false to create a tg: link
[is_http] :: GetInternalLink -> Maybe Bool
defaultGetInternalLink :: GetInternalLink
instance GHC.Show.Show TD.Query.GetInternalLink.GetInternalLink
instance GHC.Classes.Eq TD.Query.GetInternalLink.GetInternalLink
instance TD.Lib.Internal.ShortShow TD.Query.GetInternalLink.GetInternalLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInternalLink.GetInternalLink

module TD.Query.GetInternalLinkType

-- | Returns information about the type of internal link. Returns a 404
--   error if the link is not internal. Can be called before authorization.
--   Returns <a>InternalLinkType</a>
data GetInternalLinkType
GetInternalLinkType :: Maybe Text -> GetInternalLinkType

-- | The link
[link] :: GetInternalLinkType -> Maybe Text
instance GHC.Show.Show TD.Query.GetInternalLinkType.GetInternalLinkType
instance GHC.Classes.Eq TD.Query.GetInternalLinkType.GetInternalLinkType
instance TD.Lib.Internal.ShortShow TD.Query.GetInternalLinkType.GetInternalLinkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetInternalLinkType.GetInternalLinkType

module TD.Query.GetJsonString

-- | Converts a JsonValue object to corresponding JSON-serialized string.
--   Can be called synchronously. Returns <a>Text</a>
data GetJsonString
GetJsonString :: Maybe JsonValue -> GetJsonString

-- | The JsonValue object
[json_value] :: GetJsonString -> Maybe JsonValue
instance GHC.Show.Show TD.Query.GetJsonString.GetJsonString
instance GHC.Classes.Eq TD.Query.GetJsonString.GetJsonString
instance TD.Lib.Internal.ShortShow TD.Query.GetJsonString.GetJsonString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetJsonString.GetJsonString

module TD.Query.GetJsonValue

-- | Converts a JSON-serialized string to corresponding JsonValue object.
--   Can be called synchronously. Returns <a>JsonValue</a>
data GetJsonValue
GetJsonValue :: Maybe Text -> GetJsonValue

-- | The JSON-serialized string
[json] :: GetJsonValue -> Maybe Text
instance GHC.Show.Show TD.Query.GetJsonValue.GetJsonValue
instance GHC.Classes.Eq TD.Query.GetJsonValue.GetJsonValue
instance TD.Lib.Internal.ShortShow TD.Query.GetJsonValue.GetJsonValue
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetJsonValue.GetJsonValue

module TD.Query.GetKeywordEmojis

-- | Return emojis matching the keyword. Supported only if the file
--   database is enabled. Order of results is unspecified. Returns
--   <a>Emojis</a>
data GetKeywordEmojis
GetKeywordEmojis :: Maybe Text -> Maybe [Text] -> GetKeywordEmojis

-- | Text to search for
[text] :: GetKeywordEmojis -> Maybe Text

-- | List of possible IETF language tags of the user's input language; may
--   be empty if unknown
[input_language_codes] :: GetKeywordEmojis -> Maybe [Text]
defaultGetKeywordEmojis :: GetKeywordEmojis
instance GHC.Show.Show TD.Query.GetKeywordEmojis.GetKeywordEmojis
instance GHC.Classes.Eq TD.Query.GetKeywordEmojis.GetKeywordEmojis
instance TD.Lib.Internal.ShortShow TD.Query.GetKeywordEmojis.GetKeywordEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetKeywordEmojis.GetKeywordEmojis

module TD.Query.GetLanguagePackInfo

-- | Returns information about a language pack. Returned language pack
--   identifier may be different from a provided one. Can be called before
--   authorization. Returns <a>LanguagePackInfo</a>
data GetLanguagePackInfo
GetLanguagePackInfo :: Maybe Text -> GetLanguagePackInfo

-- | Language pack identifier
[language_pack_id] :: GetLanguagePackInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetLanguagePackInfo.GetLanguagePackInfo
instance GHC.Classes.Eq TD.Query.GetLanguagePackInfo.GetLanguagePackInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetLanguagePackInfo.GetLanguagePackInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackInfo.GetLanguagePackInfo

module TD.Query.GetLanguagePackString

-- | Returns a string stored in the local database from the specified
--   localization target and language pack by its key. Returns a 404 error
--   if the string is not found. Can be called synchronously. Returns
--   <a>LanguagePackStringValue</a>
data GetLanguagePackString
GetLanguagePackString :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> GetLanguagePackString

-- | Path to the language pack database in which strings are stored
[language_pack_database_path] :: GetLanguagePackString -> Maybe Text

-- | Localization target to which the language pack belongs
[localization_target] :: GetLanguagePackString -> Maybe Text

-- | Language pack identifier
[language_pack_id] :: GetLanguagePackString -> Maybe Text

-- | Language pack key of the string to be returned
[key] :: GetLanguagePackString -> Maybe Text
defaultGetLanguagePackString :: GetLanguagePackString
instance GHC.Show.Show TD.Query.GetLanguagePackString.GetLanguagePackString
instance GHC.Classes.Eq TD.Query.GetLanguagePackString.GetLanguagePackString
instance TD.Lib.Internal.ShortShow TD.Query.GetLanguagePackString.GetLanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackString.GetLanguagePackString

module TD.Query.GetLanguagePackStrings

-- | Returns strings from a language pack in the current localization
--   target by their keys. Can be called before authorization. Returns
--   <a>LanguagePackStrings</a>
data GetLanguagePackStrings
GetLanguagePackStrings :: Maybe Text -> Maybe [Text] -> GetLanguagePackStrings

-- | Language pack identifier of the strings to be returned
[language_pack_id] :: GetLanguagePackStrings -> Maybe Text

-- | Language pack keys of the strings to be returned; leave empty to
--   request all available strings
[keys] :: GetLanguagePackStrings -> Maybe [Text]
defaultGetLanguagePackStrings :: GetLanguagePackStrings
instance GHC.Show.Show TD.Query.GetLanguagePackStrings.GetLanguagePackStrings
instance GHC.Classes.Eq TD.Query.GetLanguagePackStrings.GetLanguagePackStrings
instance TD.Lib.Internal.ShortShow TD.Query.GetLanguagePackStrings.GetLanguagePackStrings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLanguagePackStrings.GetLanguagePackStrings

module TD.Query.GetLocalizationTargetInfo

-- | Returns information about the current localization target. This is an
--   offline request if only_local is true. Can be called before
--   authorization. Returns <a>LocalizationTargetInfo</a>
data GetLocalizationTargetInfo
GetLocalizationTargetInfo :: Maybe Bool -> GetLocalizationTargetInfo

-- | Pass true to get only locally available information without sending
--   network requests
[only_local] :: GetLocalizationTargetInfo -> Maybe Bool
instance GHC.Show.Show TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo
instance GHC.Classes.Eq TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLocalizationTargetInfo.GetLocalizationTargetInfo

module TD.Query.GetLogStream

-- | Returns information about currently used log stream for internal
--   logging of TDLib. Can be called synchronously. Returns
--   <a>LogStream</a>
data GetLogStream
GetLogStream :: GetLogStream
instance GHC.Show.Show TD.Query.GetLogStream.GetLogStream
instance GHC.Classes.Eq TD.Query.GetLogStream.GetLogStream
instance TD.Lib.Internal.ShortShow TD.Query.GetLogStream.GetLogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogStream.GetLogStream

module TD.Query.GetLogTagVerbosityLevel

-- | Returns current verbosity level for a specified TDLib internal log
--   tag. Can be called synchronously. Returns <a>LogVerbosityLevel</a>
data GetLogTagVerbosityLevel
GetLogTagVerbosityLevel :: Maybe Text -> GetLogTagVerbosityLevel

-- | Logging tag to change verbosity level
[tag] :: GetLogTagVerbosityLevel -> Maybe Text
instance GHC.Show.Show TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel
instance GHC.Classes.Eq TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel
instance TD.Lib.Internal.ShortShow TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogTagVerbosityLevel.GetLogTagVerbosityLevel

module TD.Query.GetLogTags

-- | Returns the list of available TDLib internal log tags, for example,
--   ["actor", "binlog", "connections", "notifications", "proxy"]. Can be
--   called synchronously. Returns <a>LogTags</a>
data GetLogTags
GetLogTags :: GetLogTags
instance GHC.Show.Show TD.Query.GetLogTags.GetLogTags
instance GHC.Classes.Eq TD.Query.GetLogTags.GetLogTags
instance TD.Lib.Internal.ShortShow TD.Query.GetLogTags.GetLogTags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogTags.GetLogTags

module TD.Query.GetLogVerbosityLevel

-- | Returns current verbosity level of the internal logging of TDLib. Can
--   be called synchronously. Returns <a>LogVerbosityLevel</a>
data GetLogVerbosityLevel
GetLogVerbosityLevel :: GetLogVerbosityLevel
instance GHC.Show.Show TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel
instance GHC.Classes.Eq TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel
instance TD.Lib.Internal.ShortShow TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLogVerbosityLevel.GetLogVerbosityLevel

module TD.Query.GetLoginUrl

-- | Returns an HTTP URL which can be used to automatically authorize the
--   user on a website after clicking an inline button of type
--   inlineKeyboardButtonTypeLoginUrl. Use the method getLoginUrlInfo to
--   find whether a prior user confirmation is needed. If an error is
--   returned, then the button must be handled as an ordinary URL button.
--   Returns <a>HttpUrl</a>
data GetLoginUrl
GetLoginUrl :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> GetLoginUrl

-- | Chat identifier of the message with the button
[chat_id] :: GetLoginUrl -> Maybe Int

-- | Message identifier of the message with the button
[message_id] :: GetLoginUrl -> Maybe Int

-- | Button identifier
[button_id] :: GetLoginUrl -> Maybe Int

-- | Pass true to allow the bot to send messages to the current user
[allow_write_access] :: GetLoginUrl -> Maybe Bool
defaultGetLoginUrl :: GetLoginUrl
instance GHC.Show.Show TD.Query.GetLoginUrl.GetLoginUrl
instance GHC.Classes.Eq TD.Query.GetLoginUrl.GetLoginUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetLoginUrl.GetLoginUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLoginUrl.GetLoginUrl

module TD.Query.GetLoginUrlInfo

-- | Returns information about a button of type
--   inlineKeyboardButtonTypeLoginUrl. The method needs to be called when
--   the user presses the button. Returns <a>LoginUrlInfo</a>
data GetLoginUrlInfo
GetLoginUrlInfo :: Maybe Int -> Maybe Int -> Maybe Int -> GetLoginUrlInfo

-- | Chat identifier of the message with the button
[chat_id] :: GetLoginUrlInfo -> Maybe Int

-- | Message identifier of the message with the button
[message_id] :: GetLoginUrlInfo -> Maybe Int

-- | Button identifier
[button_id] :: GetLoginUrlInfo -> Maybe Int
defaultGetLoginUrlInfo :: GetLoginUrlInfo
instance GHC.Show.Show TD.Query.GetLoginUrlInfo.GetLoginUrlInfo
instance GHC.Classes.Eq TD.Query.GetLoginUrlInfo.GetLoginUrlInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetLoginUrlInfo.GetLoginUrlInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetLoginUrlInfo.GetLoginUrlInfo

module TD.Query.GetMapThumbnailFile

-- | Returns information about a file with a map thumbnail in PNG format.
--   Only map thumbnail files with size less than 1MB can be downloaded.
--   Returns <a>File</a>
data GetMapThumbnailFile
GetMapThumbnailFile :: Maybe Location -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetMapThumbnailFile

-- | Location of the map center
[location] :: GetMapThumbnailFile -> Maybe Location

-- | Map zoom level; 13-20
[zoom] :: GetMapThumbnailFile -> Maybe Int

-- | Map width in pixels before applying scale; 16-1024
[width] :: GetMapThumbnailFile -> Maybe Int

-- | Map height in pixels before applying scale; 16-1024
[height] :: GetMapThumbnailFile -> Maybe Int

-- | Map scale; 1-3
[scale] :: GetMapThumbnailFile -> Maybe Int

-- | Identifier of a chat in which the thumbnail will be shown. Use 0 if
--   unknown
[chat_id] :: GetMapThumbnailFile -> Maybe Int
defaultGetMapThumbnailFile :: GetMapThumbnailFile
instance GHC.Show.Show TD.Query.GetMapThumbnailFile.GetMapThumbnailFile
instance GHC.Classes.Eq TD.Query.GetMapThumbnailFile.GetMapThumbnailFile
instance TD.Lib.Internal.ShortShow TD.Query.GetMapThumbnailFile.GetMapThumbnailFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMapThumbnailFile.GetMapThumbnailFile

module TD.Query.GetMarkdownText

-- | Replaces text entities with Markdown formatting in a human-friendly
--   format. Entities that can't be represented in Markdown unambiguously
--   are kept as is. Can be called synchronously. Returns
--   <a>FormattedText</a>
data GetMarkdownText
GetMarkdownText :: Maybe FormattedText -> GetMarkdownText

-- | The text
[text] :: GetMarkdownText -> Maybe FormattedText
instance GHC.Show.Show TD.Query.GetMarkdownText.GetMarkdownText
instance GHC.Classes.Eq TD.Query.GetMarkdownText.GetMarkdownText
instance TD.Lib.Internal.ShortShow TD.Query.GetMarkdownText.GetMarkdownText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMarkdownText.GetMarkdownText

module TD.Query.GetMe

-- | Returns the current user. Returns <a>User</a>
data GetMe
GetMe :: GetMe
instance GHC.Show.Show TD.Query.GetMe.GetMe
instance GHC.Classes.Eq TD.Query.GetMe.GetMe
instance TD.Lib.Internal.ShortShow TD.Query.GetMe.GetMe
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMe.GetMe

module TD.Query.GetMenuButton

-- | Returns menu button set by the bot for the given user; for bots only.
--   Returns <a>BotMenuButton</a>
data GetMenuButton
GetMenuButton :: Maybe Int -> GetMenuButton

-- | Identifier of the user or 0 to get the default menu button
[user_id] :: GetMenuButton -> Maybe Int
instance GHC.Show.Show TD.Query.GetMenuButton.GetMenuButton
instance GHC.Classes.Eq TD.Query.GetMenuButton.GetMenuButton
instance TD.Lib.Internal.ShortShow TD.Query.GetMenuButton.GetMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMenuButton.GetMenuButton

module TD.Query.GetMessage

-- | Returns information about a message. Returns <a>Message</a>
data GetMessage
GetMessage :: Maybe Int -> Maybe Int -> GetMessage

-- | Identifier of the chat the message belongs to
[chat_id] :: GetMessage -> Maybe Int

-- | Identifier of the message to get
[message_id] :: GetMessage -> Maybe Int
defaultGetMessage :: GetMessage
instance GHC.Show.Show TD.Query.GetMessage.GetMessage
instance GHC.Classes.Eq TD.Query.GetMessage.GetMessage
instance TD.Lib.Internal.ShortShow TD.Query.GetMessage.GetMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessage.GetMessage

module TD.Query.GetMessageAddedReactions

-- | Returns reactions added for a message, along with their sender.
--   Returns <a>AddedReactions</a>
data GetMessageAddedReactions
GetMessageAddedReactions :: Maybe Int -> Maybe Int -> Maybe ReactionType -> Maybe Text -> Maybe Int -> GetMessageAddedReactions

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageAddedReactions -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageAddedReactions -> Maybe Int

-- | Type of the reactions to return; pass null to return all added
--   reactions
[reaction_type] :: GetMessageAddedReactions -> Maybe ReactionType

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetMessageAddedReactions -> Maybe Text

-- | The maximum number of reactions to be returned; must be positive and
--   can't be greater than 100
[limit] :: GetMessageAddedReactions -> Maybe Int
defaultGetMessageAddedReactions :: GetMessageAddedReactions
instance GHC.Show.Show TD.Query.GetMessageAddedReactions.GetMessageAddedReactions
instance GHC.Classes.Eq TD.Query.GetMessageAddedReactions.GetMessageAddedReactions
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageAddedReactions.GetMessageAddedReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageAddedReactions.GetMessageAddedReactions

module TD.Query.GetMessageAvailableReactions

-- | Returns reactions, which can be added to a message. The list can
--   change after updateActiveEmojiReactions, updateChatAvailableReactions
--   for the chat, or updateMessageInteractionInfo for the message. Returns
--   <a>AvailableReactions</a>
data GetMessageAvailableReactions
GetMessageAvailableReactions :: Maybe Int -> Maybe Int -> Maybe Int -> GetMessageAvailableReactions

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageAvailableReactions -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageAvailableReactions -> Maybe Int

-- | Number of reaction per row, 5-25
[row_size] :: GetMessageAvailableReactions -> Maybe Int
defaultGetMessageAvailableReactions :: GetMessageAvailableReactions
instance GHC.Show.Show TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions
instance GHC.Classes.Eq TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageAvailableReactions.GetMessageAvailableReactions

module TD.Query.GetMessageEmbeddingCode

-- | Returns an HTML code for embedding the message. Available only for
--   messages in supergroups and channels with a username. Returns
--   <a>Text</a>
data GetMessageEmbeddingCode
GetMessageEmbeddingCode :: Maybe Int -> Maybe Int -> Maybe Bool -> GetMessageEmbeddingCode

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageEmbeddingCode -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageEmbeddingCode -> Maybe Int

-- | Pass true to return an HTML code for embedding of the whole media
--   album
[for_album] :: GetMessageEmbeddingCode -> Maybe Bool
defaultGetMessageEmbeddingCode :: GetMessageEmbeddingCode
instance GHC.Show.Show TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode
instance GHC.Classes.Eq TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageEmbeddingCode.GetMessageEmbeddingCode

module TD.Query.GetMessageFileType

-- | Returns information about a file with messages exported from another
--   application. Returns <a>MessageFileType</a>
data GetMessageFileType
GetMessageFileType :: Maybe Text -> GetMessageFileType

-- | Beginning of the message file; up to 100 first lines
[message_file_head] :: GetMessageFileType -> Maybe Text
instance GHC.Show.Show TD.Query.GetMessageFileType.GetMessageFileType
instance GHC.Classes.Eq TD.Query.GetMessageFileType.GetMessageFileType
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageFileType.GetMessageFileType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageFileType.GetMessageFileType

module TD.Query.GetMessageImportConfirmationText

-- | Returns a confirmation text to be shown to the user before starting
--   message import. Returns <a>Text</a>
data GetMessageImportConfirmationText
GetMessageImportConfirmationText :: Maybe Int -> GetMessageImportConfirmationText

-- | Identifier of a chat to which the messages will be imported. It must
--   be an identifier of a private chat with a mutual contact or an
--   identifier of a supergroup chat with can_change_info member right
[chat_id] :: GetMessageImportConfirmationText -> Maybe Int
instance GHC.Show.Show TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText
instance GHC.Classes.Eq TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageImportConfirmationText.GetMessageImportConfirmationText

module TD.Query.GetMessageLink

-- | Returns an HTTPS link to a message in a chat. Available only for
--   already sent messages in supergroups and channels, or if
--   message.can_get_media_timestamp_links and a media timestamp link is
--   generated. This is an offline request. Returns <a>MessageLink</a>
data GetMessageLink
GetMessageLink :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> GetMessageLink

-- | Identifier of the chat to which the message belongs
[chat_id] :: GetMessageLink -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageLink -> Maybe Int

-- | If not 0, timestamp from which the video<i>audio</i>video note<i>voice
--   note</i>story playing must start, in seconds. The media can be in the
--   message content or in its web page preview
[media_timestamp] :: GetMessageLink -> Maybe Int

-- | Pass true to create a link for the whole media album
[for_album] :: GetMessageLink -> Maybe Bool

-- | Pass true to create a link to the message as a channel post comment,
--   in a message thread, or a forum topic
[in_message_thread] :: GetMessageLink -> Maybe Bool
defaultGetMessageLink :: GetMessageLink
instance GHC.Show.Show TD.Query.GetMessageLink.GetMessageLink
instance GHC.Classes.Eq TD.Query.GetMessageLink.GetMessageLink
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageLink.GetMessageLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLink.GetMessageLink

module TD.Query.GetMessageLinkInfo

-- | Returns information about a public or private message link. Can be
--   called for any internal link of the type internalLinkTypeMessage.
--   Returns <a>MessageLinkInfo</a>
data GetMessageLinkInfo
GetMessageLinkInfo :: Maybe Text -> GetMessageLinkInfo

-- | The message link
[url] :: GetMessageLinkInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetMessageLinkInfo.GetMessageLinkInfo
instance GHC.Classes.Eq TD.Query.GetMessageLinkInfo.GetMessageLinkInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageLinkInfo.GetMessageLinkInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLinkInfo.GetMessageLinkInfo

module TD.Query.GetMessageLocally

-- | Returns information about a message, if it is available without
--   sending network request. This is an offline request. Returns
--   <a>Message</a>
data GetMessageLocally
GetMessageLocally :: Maybe Int -> Maybe Int -> GetMessageLocally

-- | Identifier of the chat the message belongs to
[chat_id] :: GetMessageLocally -> Maybe Int

-- | Identifier of the message to get
[message_id] :: GetMessageLocally -> Maybe Int
defaultGetMessageLocally :: GetMessageLocally
instance GHC.Show.Show TD.Query.GetMessageLocally.GetMessageLocally
instance GHC.Classes.Eq TD.Query.GetMessageLocally.GetMessageLocally
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageLocally.GetMessageLocally
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageLocally.GetMessageLocally

module TD.Query.GetMessagePublicForwards

-- | Returns forwarded copies of a channel message to different public
--   channels and public reposts as a story. Can be used only if
--   message.can_get_statistics == true. For optimal performance, the
--   number of returned messages and stories is chosen by TDLib. Returns
--   <a>PublicForwards</a>
data GetMessagePublicForwards
GetMessagePublicForwards :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> GetMessagePublicForwards

-- | Chat identifier of the message
[chat_id] :: GetMessagePublicForwards -> Maybe Int

-- | Message identifier
[message_id] :: GetMessagePublicForwards -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetMessagePublicForwards -> Maybe Text

-- | The maximum number of messages and stories to be returned; must be
--   positive and can't be greater than 100. For optimal performance, the
--   number of returned objects is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetMessagePublicForwards -> Maybe Int
defaultGetMessagePublicForwards :: GetMessagePublicForwards
instance GHC.Show.Show TD.Query.GetMessagePublicForwards.GetMessagePublicForwards
instance GHC.Classes.Eq TD.Query.GetMessagePublicForwards.GetMessagePublicForwards
instance TD.Lib.Internal.ShortShow TD.Query.GetMessagePublicForwards.GetMessagePublicForwards
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessagePublicForwards.GetMessagePublicForwards

module TD.Query.GetMessageReadDate

-- | Returns read date of a recent outgoing message in a private chat. The
--   method can be called if message.can_get_read_date == true and the
--   message is read. Returns <a>MessageReadDate</a>
data GetMessageReadDate
GetMessageReadDate :: Maybe Int -> Maybe Int -> GetMessageReadDate

-- | Chat identifier
[chat_id] :: GetMessageReadDate -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageReadDate -> Maybe Int
defaultGetMessageReadDate :: GetMessageReadDate
instance GHC.Show.Show TD.Query.GetMessageReadDate.GetMessageReadDate
instance GHC.Classes.Eq TD.Query.GetMessageReadDate.GetMessageReadDate
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageReadDate.GetMessageReadDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageReadDate.GetMessageReadDate

module TD.Query.GetMessageStatistics

-- | Returns detailed statistics about a message. Can be used only if
--   message.can_get_statistics == true. Returns <a>MessageStatistics</a>
data GetMessageStatistics
GetMessageStatistics :: Maybe Int -> Maybe Int -> Maybe Bool -> GetMessageStatistics

-- | Chat identifier
[chat_id] :: GetMessageStatistics -> Maybe Int

-- | Message identifier
[message_id] :: GetMessageStatistics -> Maybe Int

-- | Pass true if a dark theme is used by the application
[is_dark] :: GetMessageStatistics -> Maybe Bool
defaultGetMessageStatistics :: GetMessageStatistics
instance GHC.Show.Show TD.Query.GetMessageStatistics.GetMessageStatistics
instance GHC.Classes.Eq TD.Query.GetMessageStatistics.GetMessageStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageStatistics.GetMessageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageStatistics.GetMessageStatistics

module TD.Query.GetMessageThread

-- | Returns information about a message thread. Can be used only if
--   message.can_get_message_thread == true. Returns
--   <a>MessageThreadInfo</a>
data GetMessageThread
GetMessageThread :: Maybe Int -> Maybe Int -> GetMessageThread

-- | Chat identifier
[chat_id] :: GetMessageThread -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageThread -> Maybe Int
defaultGetMessageThread :: GetMessageThread
instance GHC.Show.Show TD.Query.GetMessageThread.GetMessageThread
instance GHC.Classes.Eq TD.Query.GetMessageThread.GetMessageThread
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageThread.GetMessageThread
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageThread.GetMessageThread

module TD.Query.GetMessageThreadHistory

-- | Returns messages in a message thread of a message. Can be used only if
--   message.can_get_message_thread == true. Message thread of a channel
--   message is in the channel's linked supergroup. The messages are
--   returned in a reverse chronological order (i.e., in order of
--   decreasing message_id). For optimal performance, the number of
--   returned messages is chosen by TDLib. Returns <a>Messages</a>
data GetMessageThreadHistory
GetMessageThreadHistory :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetMessageThreadHistory

-- | Chat identifier
[chat_id] :: GetMessageThreadHistory -> Maybe Int

-- | Message identifier, which thread history needs to be returned
[message_id] :: GetMessageThreadHistory -> Maybe Int

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: GetMessageThreadHistory -> Maybe Int

-- | Specify 0 to get results from exactly the message from_message_id or a
--   negative offset up to 99 to get additionally some newer messages
[offset] :: GetMessageThreadHistory -> Maybe Int

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than or equal to -offset. For optimal performance, the
--   number of returned messages is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetMessageThreadHistory -> Maybe Int
defaultGetMessageThreadHistory :: GetMessageThreadHistory
instance GHC.Show.Show TD.Query.GetMessageThreadHistory.GetMessageThreadHistory
instance GHC.Classes.Eq TD.Query.GetMessageThreadHistory.GetMessageThreadHistory
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageThreadHistory.GetMessageThreadHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageThreadHistory.GetMessageThreadHistory

module TD.Query.GetMessageViewers

-- | Returns viewers of a recent outgoing message in a basic group or a
--   supergroup chat. For video notes and voice notes only users, opened
--   content of the message, are returned. The method can be called if
--   message.can_get_viewers == true. Returns <a>MessageViewers</a>
data GetMessageViewers
GetMessageViewers :: Maybe Int -> Maybe Int -> GetMessageViewers

-- | Chat identifier
[chat_id] :: GetMessageViewers -> Maybe Int

-- | Identifier of the message
[message_id] :: GetMessageViewers -> Maybe Int
defaultGetMessageViewers :: GetMessageViewers
instance GHC.Show.Show TD.Query.GetMessageViewers.GetMessageViewers
instance GHC.Classes.Eq TD.Query.GetMessageViewers.GetMessageViewers
instance TD.Lib.Internal.ShortShow TD.Query.GetMessageViewers.GetMessageViewers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessageViewers.GetMessageViewers

module TD.Query.GetMessages

-- | Returns information about messages. If a message is not found, returns
--   null on the corresponding position of the result. Returns
--   <a>Messages</a>
data GetMessages
GetMessages :: Maybe Int -> Maybe [Int] -> GetMessages

-- | Identifier of the chat the messages belong to
[chat_id] :: GetMessages -> Maybe Int

-- | Identifiers of the messages to get
[message_ids] :: GetMessages -> Maybe [Int]
defaultGetMessages :: GetMessages
instance GHC.Show.Show TD.Query.GetMessages.GetMessages
instance GHC.Classes.Eq TD.Query.GetMessages.GetMessages
instance TD.Lib.Internal.ShortShow TD.Query.GetMessages.GetMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetMessages.GetMessages

module TD.Query.GetNetworkStatistics

-- | Returns network data usage statistics. Can be called before
--   authorization. Returns <a>NetworkStatistics</a>
data GetNetworkStatistics
GetNetworkStatistics :: Maybe Bool -> GetNetworkStatistics

-- | Pass true to get statistics only for the current library launch
[only_current] :: GetNetworkStatistics -> Maybe Bool
instance GHC.Show.Show TD.Query.GetNetworkStatistics.GetNetworkStatistics
instance GHC.Classes.Eq TD.Query.GetNetworkStatistics.GetNetworkStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetNetworkStatistics.GetNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetNetworkStatistics.GetNetworkStatistics

module TD.Query.GetNewChatPrivacySettings

-- | Returns privacy settings for new chat creation. Returns
--   <a>NewChatPrivacySettings</a>
data GetNewChatPrivacySettings
GetNewChatPrivacySettings :: GetNewChatPrivacySettings
instance GHC.Show.Show TD.Query.GetNewChatPrivacySettings.GetNewChatPrivacySettings
instance GHC.Classes.Eq TD.Query.GetNewChatPrivacySettings.GetNewChatPrivacySettings
instance TD.Lib.Internal.ShortShow TD.Query.GetNewChatPrivacySettings.GetNewChatPrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetNewChatPrivacySettings.GetNewChatPrivacySettings

module TD.Query.GetOption

-- | Returns the value of an option by its name. (Check the list of
--   available options on <a>https://core.telegram.org/tdlib/options.)</a>
--   Can be called before authorization. Can be called synchronously for
--   options "version" and "commit_hash". Returns <a>OptionValue</a>
data GetOption
GetOption :: Maybe Text -> GetOption

-- | The name of the option
[name] :: GetOption -> Maybe Text
instance GHC.Show.Show TD.Query.GetOption.GetOption
instance GHC.Classes.Eq TD.Query.GetOption.GetOption
instance TD.Lib.Internal.ShortShow TD.Query.GetOption.GetOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetOption.GetOption

module TD.Query.GetOwnedStickerSets

-- | Returns sticker sets owned by the current user. Returns
--   <a>StickerSets</a>
data GetOwnedStickerSets
GetOwnedStickerSets :: Maybe Int -> Maybe Int -> GetOwnedStickerSets

-- | Identifier of the sticker set from which to return owned sticker sets;
--   use 0 to get results from the beginning
[offset_sticker_set_id] :: GetOwnedStickerSets -> Maybe Int

-- | The maximum number of sticker sets to be returned; must be positive
--   and can't be greater than 100. For optimal performance, the number of
--   returned objects is chosen by TDLib and can be smaller than the
--   specified limit
[limit] :: GetOwnedStickerSets -> Maybe Int
defaultGetOwnedStickerSets :: GetOwnedStickerSets
instance GHC.Show.Show TD.Query.GetOwnedStickerSets.GetOwnedStickerSets
instance GHC.Classes.Eq TD.Query.GetOwnedStickerSets.GetOwnedStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.GetOwnedStickerSets.GetOwnedStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetOwnedStickerSets.GetOwnedStickerSets

module TD.Query.GetPassportAuthorizationForm

-- | Returns a Telegram Passport authorization form for sharing data with a
--   service. Returns <a>PassportAuthorizationForm</a>
data GetPassportAuthorizationForm
GetPassportAuthorizationForm :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> GetPassportAuthorizationForm

-- | User identifier of the service's bot
[bot_user_id] :: GetPassportAuthorizationForm -> Maybe Int

-- | Telegram Passport element types requested by the service
[scope] :: GetPassportAuthorizationForm -> Maybe Text

-- | Service's public key
[public_key] :: GetPassportAuthorizationForm -> Maybe Text

-- | Unique request identifier provided by the service
[nonce] :: GetPassportAuthorizationForm -> Maybe Text
defaultGetPassportAuthorizationForm :: GetPassportAuthorizationForm
instance GHC.Show.Show TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm
instance GHC.Classes.Eq TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm
instance TD.Lib.Internal.ShortShow TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportAuthorizationForm.GetPassportAuthorizationForm

module TD.Query.GetPassportAuthorizationFormAvailableElements

-- | Returns already available Telegram Passport elements suitable for
--   completing a Telegram Passport authorization form. Result can be
--   received only once for each authorization form. Returns
--   <a>PassportElementsWithErrors</a>
data GetPassportAuthorizationFormAvailableElements
GetPassportAuthorizationFormAvailableElements :: Maybe Int -> Maybe Text -> GetPassportAuthorizationFormAvailableElements

-- | Authorization form identifier
[authorization_form_id] :: GetPassportAuthorizationFormAvailableElements -> Maybe Int

-- | The 2-step verification password of the current user
[password] :: GetPassportAuthorizationFormAvailableElements -> Maybe Text
defaultGetPassportAuthorizationFormAvailableElements :: GetPassportAuthorizationFormAvailableElements
instance GHC.Show.Show TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements
instance GHC.Classes.Eq TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements
instance TD.Lib.Internal.ShortShow TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportAuthorizationFormAvailableElements.GetPassportAuthorizationFormAvailableElements

module TD.Query.GetPassportElement

-- | Returns one of the available Telegram Passport elements. Returns
--   <a>PassportElement</a>
data GetPassportElement
GetPassportElement :: Maybe PassportElementType -> Maybe Text -> GetPassportElement

-- | Telegram Passport element type
[_type] :: GetPassportElement -> Maybe PassportElementType

-- | The 2-step verification password of the current user
[password] :: GetPassportElement -> Maybe Text
defaultGetPassportElement :: GetPassportElement
instance GHC.Show.Show TD.Query.GetPassportElement.GetPassportElement
instance GHC.Classes.Eq TD.Query.GetPassportElement.GetPassportElement
instance TD.Lib.Internal.ShortShow TD.Query.GetPassportElement.GetPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPassportElement.GetPassportElement

module TD.Query.GetPasswordState

-- | Returns the current state of 2-step verification. Returns
--   <a>PasswordState</a>
data GetPasswordState
GetPasswordState :: GetPasswordState
instance GHC.Show.Show TD.Query.GetPasswordState.GetPasswordState
instance GHC.Classes.Eq TD.Query.GetPasswordState.GetPasswordState
instance TD.Lib.Internal.ShortShow TD.Query.GetPasswordState.GetPasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPasswordState.GetPasswordState

module TD.Query.GetPaymentForm

-- | Returns an invoice payment form. This method must be called when the
--   user presses inline button of the type inlineKeyboardButtonTypeBuy.
--   Returns <a>PaymentForm</a>
data GetPaymentForm
GetPaymentForm :: Maybe InputInvoice -> Maybe ThemeParameters -> GetPaymentForm

-- | The invoice
[input_invoice] :: GetPaymentForm -> Maybe InputInvoice

-- | Preferred payment form theme; pass null to use the default theme
[theme] :: GetPaymentForm -> Maybe ThemeParameters
defaultGetPaymentForm :: GetPaymentForm
instance GHC.Show.Show TD.Query.GetPaymentForm.GetPaymentForm
instance GHC.Classes.Eq TD.Query.GetPaymentForm.GetPaymentForm
instance TD.Lib.Internal.ShortShow TD.Query.GetPaymentForm.GetPaymentForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPaymentForm.GetPaymentForm

module TD.Query.GetPaymentReceipt

-- | Returns information about a successful payment. Returns
--   <a>PaymentReceipt</a>
data GetPaymentReceipt
GetPaymentReceipt :: Maybe Int -> Maybe Int -> GetPaymentReceipt

-- | Chat identifier of the messagePaymentSuccessful message
[chat_id] :: GetPaymentReceipt -> Maybe Int

-- | Message identifier
[message_id] :: GetPaymentReceipt -> Maybe Int
defaultGetPaymentReceipt :: GetPaymentReceipt
instance GHC.Show.Show TD.Query.GetPaymentReceipt.GetPaymentReceipt
instance GHC.Classes.Eq TD.Query.GetPaymentReceipt.GetPaymentReceipt
instance TD.Lib.Internal.ShortShow TD.Query.GetPaymentReceipt.GetPaymentReceipt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPaymentReceipt.GetPaymentReceipt

module TD.Query.GetPhoneNumberInfo

-- | Returns information about a phone number by its prefix. Can be called
--   before authorization. Returns <a>PhoneNumberInfo</a>
data GetPhoneNumberInfo
GetPhoneNumberInfo :: Maybe Text -> GetPhoneNumberInfo

-- | The phone number prefix
[phone_number_prefix] :: GetPhoneNumberInfo -> Maybe Text
instance GHC.Show.Show TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo
instance GHC.Classes.Eq TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPhoneNumberInfo.GetPhoneNumberInfo

module TD.Query.GetPhoneNumberInfoSync

-- | Returns information about a phone number by its prefix synchronously.
--   getCountries must be called at least once after changing localization
--   to the specified language if properly localized country information is
--   expected. Can be called synchronously. Returns <a>PhoneNumberInfo</a>
data GetPhoneNumberInfoSync
GetPhoneNumberInfoSync :: Maybe Text -> Maybe Text -> GetPhoneNumberInfoSync

-- | A two-letter ISO 639-1 language code for country information
--   localization
[language_code] :: GetPhoneNumberInfoSync -> Maybe Text

-- | The phone number prefix
[phone_number_prefix] :: GetPhoneNumberInfoSync -> Maybe Text
defaultGetPhoneNumberInfoSync :: GetPhoneNumberInfoSync
instance GHC.Show.Show TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync
instance GHC.Classes.Eq TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync
instance TD.Lib.Internal.ShortShow TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPhoneNumberInfoSync.GetPhoneNumberInfoSync

module TD.Query.GetPollVoters

-- | Returns message senders voted for the specified option in a
--   non-anonymous polls. For optimal performance, the number of returned
--   users is chosen by TDLib. Returns <a>MessageSenders</a>
data GetPollVoters
GetPollVoters :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetPollVoters

-- | Identifier of the chat to which the poll belongs
[chat_id] :: GetPollVoters -> Maybe Int

-- | Identifier of the message containing the poll
[message_id] :: GetPollVoters -> Maybe Int

-- | 0-based identifier of the answer option
[option_id] :: GetPollVoters -> Maybe Int

-- | Number of voters to skip in the result; must be non-negative
[offset] :: GetPollVoters -> Maybe Int

-- | The maximum number of voters to be returned; must be positive and
--   can't be greater than 50. For optimal performance, the number of
--   returned voters is chosen by TDLib and can be smaller than the
--   specified limit, even if the end of the voter list has not been
--   reached
[limit] :: GetPollVoters -> Maybe Int
defaultGetPollVoters :: GetPollVoters
instance GHC.Show.Show TD.Query.GetPollVoters.GetPollVoters
instance GHC.Classes.Eq TD.Query.GetPollVoters.GetPollVoters
instance TD.Lib.Internal.ShortShow TD.Query.GetPollVoters.GetPollVoters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPollVoters.GetPollVoters

module TD.Query.GetPreferredCountryLanguage

-- | Returns an IETF language tag of the language preferred in the country,
--   which must be used to fill native fields in Telegram Passport personal
--   details. Returns a 404 error if unknown. Returns <a>Text</a>
data GetPreferredCountryLanguage
GetPreferredCountryLanguage :: Maybe Text -> GetPreferredCountryLanguage

-- | A two-letter ISO 3166-1 alpha-2 country code
[country_code] :: GetPreferredCountryLanguage -> Maybe Text
instance GHC.Show.Show TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage
instance GHC.Classes.Eq TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage
instance TD.Lib.Internal.ShortShow TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPreferredCountryLanguage.GetPreferredCountryLanguage

module TD.Query.GetPremiumFeatures

-- | Returns information about features, available to Premium users.
--   Returns <a>PremiumFeatures</a>
data GetPremiumFeatures
GetPremiumFeatures :: Maybe PremiumSource -> GetPremiumFeatures

-- | Source of the request; pass null if the method is called from some
--   non-standard source
[source] :: GetPremiumFeatures -> Maybe PremiumSource
instance GHC.Show.Show TD.Query.GetPremiumFeatures.GetPremiumFeatures
instance GHC.Classes.Eq TD.Query.GetPremiumFeatures.GetPremiumFeatures
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumFeatures.GetPremiumFeatures
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumFeatures.GetPremiumFeatures

module TD.Query.GetPremiumGiftCodePaymentOptions

-- | Returns available options for Telegram Premium gift code or giveaway
--   creation. Returns <a>PremiumGiftCodePaymentOptions</a>
data GetPremiumGiftCodePaymentOptions
GetPremiumGiftCodePaymentOptions :: Maybe Int -> GetPremiumGiftCodePaymentOptions

-- | Identifier of the supergroup or channel chat, which will be
--   automatically boosted by receivers of the gift codes and which is
--   administered by the user; 0 if none
[boosted_chat_id] :: GetPremiumGiftCodePaymentOptions -> Maybe Int
instance GHC.Show.Show TD.Query.GetPremiumGiftCodePaymentOptions.GetPremiumGiftCodePaymentOptions
instance GHC.Classes.Eq TD.Query.GetPremiumGiftCodePaymentOptions.GetPremiumGiftCodePaymentOptions
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumGiftCodePaymentOptions.GetPremiumGiftCodePaymentOptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumGiftCodePaymentOptions.GetPremiumGiftCodePaymentOptions

module TD.Query.GetPremiumGiveawayInfo

-- | Returns information about a Telegram Premium giveaway. Returns
--   <a>PremiumGiveawayInfo</a>
data GetPremiumGiveawayInfo
GetPremiumGiveawayInfo :: Maybe Int -> Maybe Int -> GetPremiumGiveawayInfo

-- | Identifier of the channel chat which started the giveaway
[chat_id] :: GetPremiumGiveawayInfo -> Maybe Int

-- | Identifier of the giveaway or a giveaway winners message in the chat
[message_id] :: GetPremiumGiveawayInfo -> Maybe Int
defaultGetPremiumGiveawayInfo :: GetPremiumGiveawayInfo
instance GHC.Show.Show TD.Query.GetPremiumGiveawayInfo.GetPremiumGiveawayInfo
instance GHC.Classes.Eq TD.Query.GetPremiumGiveawayInfo.GetPremiumGiveawayInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumGiveawayInfo.GetPremiumGiveawayInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumGiveawayInfo.GetPremiumGiveawayInfo

module TD.Query.GetPremiumLimit

-- | Returns information about a limit, increased for Premium users.
--   Returns a 404 error if the limit is unknown. Returns
--   <a>PremiumLimit</a>
data GetPremiumLimit
GetPremiumLimit :: Maybe PremiumLimitType -> GetPremiumLimit

-- | Type of the limit
[limit_type] :: GetPremiumLimit -> Maybe PremiumLimitType
instance GHC.Show.Show TD.Query.GetPremiumLimit.GetPremiumLimit
instance GHC.Classes.Eq TD.Query.GetPremiumLimit.GetPremiumLimit
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumLimit.GetPremiumLimit
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumLimit.GetPremiumLimit

module TD.Query.GetPremiumState

-- | Returns state of Telegram Premium subscription and promotion videos
--   for Premium features. Returns <a>PremiumState</a>
data GetPremiumState
GetPremiumState :: GetPremiumState
instance GHC.Show.Show TD.Query.GetPremiumState.GetPremiumState
instance GHC.Classes.Eq TD.Query.GetPremiumState.GetPremiumState
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumState.GetPremiumState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumState.GetPremiumState

module TD.Query.GetPremiumStickerExamples

-- | Returns examples of premium stickers for demonstration purposes.
--   Returns <a>Stickers</a>
data GetPremiumStickerExamples
GetPremiumStickerExamples :: GetPremiumStickerExamples
instance GHC.Show.Show TD.Query.GetPremiumStickerExamples.GetPremiumStickerExamples
instance GHC.Classes.Eq TD.Query.GetPremiumStickerExamples.GetPremiumStickerExamples
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumStickerExamples.GetPremiumStickerExamples
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumStickerExamples.GetPremiumStickerExamples

module TD.Query.GetPremiumStickers

-- | Returns premium stickers from regular sticker sets. Returns
--   <a>Stickers</a>
data GetPremiumStickers
GetPremiumStickers :: Maybe Int -> GetPremiumStickers

-- | The maximum number of stickers to be returned; 0-100
[limit] :: GetPremiumStickers -> Maybe Int
instance GHC.Show.Show TD.Query.GetPremiumStickers.GetPremiumStickers
instance GHC.Classes.Eq TD.Query.GetPremiumStickers.GetPremiumStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetPremiumStickers.GetPremiumStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPremiumStickers.GetPremiumStickers

module TD.Query.GetProxies

-- | Returns the list of proxies that are currently set up. Can be called
--   before authorization. Returns <a>Proxies</a>
data GetProxies
GetProxies :: GetProxies
instance GHC.Show.Show TD.Query.GetProxies.GetProxies
instance GHC.Classes.Eq TD.Query.GetProxies.GetProxies
instance TD.Lib.Internal.ShortShow TD.Query.GetProxies.GetProxies
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetProxies.GetProxies

module TD.Query.GetProxyLink

-- | Returns an HTTPS link, which can be used to add a proxy. Available
--   only for SOCKS5 and MTProto proxies. Can be called before
--   authorization. Returns <a>HttpUrl</a>
data GetProxyLink
GetProxyLink :: Maybe Int -> GetProxyLink

-- | Proxy identifier
[proxy_id] :: GetProxyLink -> Maybe Int
instance GHC.Show.Show TD.Query.GetProxyLink.GetProxyLink
instance GHC.Classes.Eq TD.Query.GetProxyLink.GetProxyLink
instance TD.Lib.Internal.ShortShow TD.Query.GetProxyLink.GetProxyLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetProxyLink.GetProxyLink

module TD.Query.GetPushReceiverId

-- | Returns a globally unique push notification subscription identifier
--   for identification of an account, which has received a push
--   notification. Can be called synchronously. Returns
--   <a>PushReceiverId</a>
data GetPushReceiverId
GetPushReceiverId :: Maybe Text -> GetPushReceiverId

-- | JSON-encoded push notification payload
[payload] :: GetPushReceiverId -> Maybe Text
instance GHC.Show.Show TD.Query.GetPushReceiverId.GetPushReceiverId
instance GHC.Classes.Eq TD.Query.GetPushReceiverId.GetPushReceiverId
instance TD.Lib.Internal.ShortShow TD.Query.GetPushReceiverId.GetPushReceiverId
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetPushReceiverId.GetPushReceiverId

module TD.Query.GetReadDatePrivacySettings

-- | Returns privacy settings for message read date. Returns
--   <a>ReadDatePrivacySettings</a>
data GetReadDatePrivacySettings
GetReadDatePrivacySettings :: GetReadDatePrivacySettings
instance GHC.Show.Show TD.Query.GetReadDatePrivacySettings.GetReadDatePrivacySettings
instance GHC.Classes.Eq TD.Query.GetReadDatePrivacySettings.GetReadDatePrivacySettings
instance TD.Lib.Internal.ShortShow TD.Query.GetReadDatePrivacySettings.GetReadDatePrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetReadDatePrivacySettings.GetReadDatePrivacySettings

module TD.Query.GetRecentEmojiStatuses

-- | Returns recent emoji statuses for self status. Returns
--   <a>EmojiStatuses</a>
data GetRecentEmojiStatuses
GetRecentEmojiStatuses :: GetRecentEmojiStatuses
instance GHC.Show.Show TD.Query.GetRecentEmojiStatuses.GetRecentEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetRecentEmojiStatuses.GetRecentEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetRecentEmojiStatuses.GetRecentEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentEmojiStatuses.GetRecentEmojiStatuses

module TD.Query.GetRecentInlineBots

-- | Returns up to 20 recently used inline bots in the order of their last
--   usage. Returns <a>Users</a>
data GetRecentInlineBots
GetRecentInlineBots :: GetRecentInlineBots
instance GHC.Show.Show TD.Query.GetRecentInlineBots.GetRecentInlineBots
instance GHC.Classes.Eq TD.Query.GetRecentInlineBots.GetRecentInlineBots
instance TD.Lib.Internal.ShortShow TD.Query.GetRecentInlineBots.GetRecentInlineBots
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentInlineBots.GetRecentInlineBots

module TD.Query.GetRecentStickers

-- | Returns a list of recently used stickers. Returns <a>Stickers</a>
data GetRecentStickers
GetRecentStickers :: Maybe Bool -> GetRecentStickers

-- | Pass true to return stickers and masks that were recently attached to
--   photos or video files; pass false to return recently sent stickers
[is_attached] :: GetRecentStickers -> Maybe Bool
instance GHC.Show.Show TD.Query.GetRecentStickers.GetRecentStickers
instance GHC.Classes.Eq TD.Query.GetRecentStickers.GetRecentStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetRecentStickers.GetRecentStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentStickers.GetRecentStickers

module TD.Query.GetRecentlyOpenedChats

-- | Returns recently opened chats; this is an offline request. Returns
--   chats in the order of last opening. Returns <a>Chats</a>
data GetRecentlyOpenedChats
GetRecentlyOpenedChats :: Maybe Int -> GetRecentlyOpenedChats

-- | The maximum number of chats to be returned
[limit] :: GetRecentlyOpenedChats -> Maybe Int
instance GHC.Show.Show TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats
instance GHC.Classes.Eq TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats
instance TD.Lib.Internal.ShortShow TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentlyOpenedChats.GetRecentlyOpenedChats

module TD.Query.GetRecentlyVisitedTMeUrls

-- | Returns t.me URLs recently visited by a newly registered user. Returns
--   <a>TMeUrls</a>
data GetRecentlyVisitedTMeUrls
GetRecentlyVisitedTMeUrls :: Maybe Text -> GetRecentlyVisitedTMeUrls

-- | Google Play referrer to identify the user
[referrer] :: GetRecentlyVisitedTMeUrls -> Maybe Text
instance GHC.Show.Show TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls
instance GHC.Classes.Eq TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls
instance TD.Lib.Internal.ShortShow TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecentlyVisitedTMeUrls.GetRecentlyVisitedTMeUrls

module TD.Query.GetRecommendedChatFolders

-- | Returns recommended chat folders for the current user. Returns
--   <a>RecommendedChatFolders</a>
data GetRecommendedChatFolders
GetRecommendedChatFolders :: GetRecommendedChatFolders
instance GHC.Show.Show TD.Query.GetRecommendedChatFolders.GetRecommendedChatFolders
instance GHC.Classes.Eq TD.Query.GetRecommendedChatFolders.GetRecommendedChatFolders
instance TD.Lib.Internal.ShortShow TD.Query.GetRecommendedChatFolders.GetRecommendedChatFolders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecommendedChatFolders.GetRecommendedChatFolders

module TD.Query.GetRecommendedChats

-- | Returns a list of channel chats recommended to the current user.
--   Returns <a>Chats</a>
data GetRecommendedChats
GetRecommendedChats :: GetRecommendedChats
instance GHC.Show.Show TD.Query.GetRecommendedChats.GetRecommendedChats
instance GHC.Classes.Eq TD.Query.GetRecommendedChats.GetRecommendedChats
instance TD.Lib.Internal.ShortShow TD.Query.GetRecommendedChats.GetRecommendedChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecommendedChats.GetRecommendedChats

module TD.Query.GetRecoveryEmailAddress

-- | Returns a 2-step verification recovery email address that was
--   previously set up. This method can be used to verify a password
--   provided by the user. Returns <a>RecoveryEmailAddress</a>
data GetRecoveryEmailAddress
GetRecoveryEmailAddress :: Maybe Text -> GetRecoveryEmailAddress

-- | The 2-step verification password for the current user
[password] :: GetRecoveryEmailAddress -> Maybe Text
instance GHC.Show.Show TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress
instance GHC.Classes.Eq TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress
instance TD.Lib.Internal.ShortShow TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRecoveryEmailAddress.GetRecoveryEmailAddress

module TD.Query.GetRemoteFile

-- | Returns information about a file by its remote identifier; this is an
--   offline request. Can be used to register a URL as a file for further
--   uploading, or sending as a message. Even the request succeeds, the
--   file can be used only if it is still accessible to the user. For
--   example, if the file is from a message, then the message must be not
--   deleted and accessible to the user. If the file database is disabled,
--   then the corresponding object with the file must be preloaded by the
--   application. Returns <a>File</a>
data GetRemoteFile
GetRemoteFile :: Maybe Text -> Maybe FileType -> GetRemoteFile

-- | Remote identifier of the file to get
[remote_file_id] :: GetRemoteFile -> Maybe Text

-- | File type; pass null if unknown
[file_type] :: GetRemoteFile -> Maybe FileType
defaultGetRemoteFile :: GetRemoteFile
instance GHC.Show.Show TD.Query.GetRemoteFile.GetRemoteFile
instance GHC.Classes.Eq TD.Query.GetRemoteFile.GetRemoteFile
instance TD.Lib.Internal.ShortShow TD.Query.GetRemoteFile.GetRemoteFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRemoteFile.GetRemoteFile

module TD.Query.GetRepliedMessage

-- | Returns information about a non-bundled message that is replied by a
--   given message. Also, returns the pinned message, the game message, the
--   invoice message, the message with a previously set same background,
--   the giveaway message, and the topic creation message for messages of
--   the types messagePinMessage, messageGameScore,
--   messagePaymentSuccessful, messageChatSetBackground,
--   messagePremiumGiveawayCompleted and topic messages without non-bundled
--   replied message respectively. Returns <a>Message</a>
data GetRepliedMessage
GetRepliedMessage :: Maybe Int -> Maybe Int -> GetRepliedMessage

-- | Identifier of the chat the message belongs to
[chat_id] :: GetRepliedMessage -> Maybe Int

-- | Identifier of the reply message
[message_id] :: GetRepliedMessage -> Maybe Int
defaultGetRepliedMessage :: GetRepliedMessage
instance GHC.Show.Show TD.Query.GetRepliedMessage.GetRepliedMessage
instance GHC.Classes.Eq TD.Query.GetRepliedMessage.GetRepliedMessage
instance TD.Lib.Internal.ShortShow TD.Query.GetRepliedMessage.GetRepliedMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetRepliedMessage.GetRepliedMessage

module TD.Query.GetSavedAnimations

-- | Returns saved animations. Returns <a>Animations</a>
data GetSavedAnimations
GetSavedAnimations :: GetSavedAnimations
instance GHC.Show.Show TD.Query.GetSavedAnimations.GetSavedAnimations
instance GHC.Classes.Eq TD.Query.GetSavedAnimations.GetSavedAnimations
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedAnimations.GetSavedAnimations
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedAnimations.GetSavedAnimations

module TD.Query.GetSavedMessagesTags

-- | Returns tags used in Saved Messages or a Saved Messages topic. Returns
--   <a>SavedMessagesTags</a>
data GetSavedMessagesTags
GetSavedMessagesTags :: Maybe Int -> GetSavedMessagesTags

-- | Identifier of Saved Messages topic which tags will be returned; pass 0
--   to get all Saved Messages tags
[saved_messages_topic_id] :: GetSavedMessagesTags -> Maybe Int
instance GHC.Show.Show TD.Query.GetSavedMessagesTags.GetSavedMessagesTags
instance GHC.Classes.Eq TD.Query.GetSavedMessagesTags.GetSavedMessagesTags
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedMessagesTags.GetSavedMessagesTags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedMessagesTags.GetSavedMessagesTags

module TD.Query.GetSavedMessagesTopicHistory

-- | Returns messages in a Saved Messages topic. The messages are returned
--   in a reverse chronological order (i.e., in order of decreasing
--   message_id). Returns <a>Messages</a>
data GetSavedMessagesTopicHistory
GetSavedMessagesTopicHistory :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> GetSavedMessagesTopicHistory

-- | Identifier of Saved Messages topic which messages will be fetched
[saved_messages_topic_id] :: GetSavedMessagesTopicHistory -> Maybe Int

-- | Identifier of the message starting from which messages must be
--   fetched; use 0 to get results from the last message
[from_message_id] :: GetSavedMessagesTopicHistory -> Maybe Int

-- | Specify 0 to get results from exactly the message from_message_id or a
--   negative offset up to 99 to get additionally some newer messages
[offset] :: GetSavedMessagesTopicHistory -> Maybe Int

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than or equal to -offset. For optimal performance, the
--   number of returned messages is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetSavedMessagesTopicHistory -> Maybe Int
defaultGetSavedMessagesTopicHistory :: GetSavedMessagesTopicHistory
instance GHC.Show.Show TD.Query.GetSavedMessagesTopicHistory.GetSavedMessagesTopicHistory
instance GHC.Classes.Eq TD.Query.GetSavedMessagesTopicHistory.GetSavedMessagesTopicHistory
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedMessagesTopicHistory.GetSavedMessagesTopicHistory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedMessagesTopicHistory.GetSavedMessagesTopicHistory

module TD.Query.GetSavedMessagesTopicMessageByDate

-- | Returns the last message sent in a Saved Messages topic no later than
--   the specified date. Returns <a>Message</a>
data GetSavedMessagesTopicMessageByDate
GetSavedMessagesTopicMessageByDate :: Maybe Int -> Maybe Int -> GetSavedMessagesTopicMessageByDate

-- | Identifier of Saved Messages topic which message will be returned
[saved_messages_topic_id] :: GetSavedMessagesTopicMessageByDate -> Maybe Int

-- | Point in time (Unix timestamp) relative to which to search for
--   messages
[date] :: GetSavedMessagesTopicMessageByDate -> Maybe Int
defaultGetSavedMessagesTopicMessageByDate :: GetSavedMessagesTopicMessageByDate
instance GHC.Show.Show TD.Query.GetSavedMessagesTopicMessageByDate.GetSavedMessagesTopicMessageByDate
instance GHC.Classes.Eq TD.Query.GetSavedMessagesTopicMessageByDate.GetSavedMessagesTopicMessageByDate
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedMessagesTopicMessageByDate.GetSavedMessagesTopicMessageByDate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedMessagesTopicMessageByDate.GetSavedMessagesTopicMessageByDate

module TD.Query.GetSavedNotificationSound

-- | Returns saved notification sound by its identifier. Returns a 404
--   error if there is no saved notification sound with the specified
--   identifier. Returns <a>NotificationSounds</a>
data GetSavedNotificationSound
GetSavedNotificationSound :: Maybe Int -> GetSavedNotificationSound

-- | Identifier of the notification sound
[notification_sound_id] :: GetSavedNotificationSound -> Maybe Int
instance GHC.Show.Show TD.Query.GetSavedNotificationSound.GetSavedNotificationSound
instance GHC.Classes.Eq TD.Query.GetSavedNotificationSound.GetSavedNotificationSound
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedNotificationSound.GetSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedNotificationSound.GetSavedNotificationSound

module TD.Query.GetSavedNotificationSounds

-- | Returns the list of saved notification sounds. If a sound isn't in the
--   list, then default sound needs to be used. Returns
--   <a>NotificationSounds</a>
data GetSavedNotificationSounds
GetSavedNotificationSounds :: GetSavedNotificationSounds
instance GHC.Show.Show TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds
instance GHC.Classes.Eq TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedNotificationSounds.GetSavedNotificationSounds

module TD.Query.GetSavedOrderInfo

-- | Returns saved order information. Returns a 404 error if there is no
--   saved order information. Returns <a>OrderInfo</a>
data GetSavedOrderInfo
GetSavedOrderInfo :: GetSavedOrderInfo
instance GHC.Show.Show TD.Query.GetSavedOrderInfo.GetSavedOrderInfo
instance GHC.Classes.Eq TD.Query.GetSavedOrderInfo.GetSavedOrderInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetSavedOrderInfo.GetSavedOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSavedOrderInfo.GetSavedOrderInfo

module TD.Query.GetScopeNotificationSettings

-- | Returns the notification settings for chats of a given type. Returns
--   <a>ScopeNotificationSettings</a>
data GetScopeNotificationSettings
GetScopeNotificationSettings :: Maybe NotificationSettingsScope -> GetScopeNotificationSettings

-- | Types of chats for which to return the notification settings
--   information
[scope] :: GetScopeNotificationSettings -> Maybe NotificationSettingsScope
instance GHC.Show.Show TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings
instance GHC.Classes.Eq TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetScopeNotificationSettings.GetScopeNotificationSettings

module TD.Query.GetSecretChat

-- | Returns information about a secret chat by its identifier. This is an
--   offline request. Returns <a>SecretChat</a>
data GetSecretChat
GetSecretChat :: Maybe Int -> GetSecretChat

-- | Secret chat identifier
[secret_chat_id] :: GetSecretChat -> Maybe Int
instance GHC.Show.Show TD.Query.GetSecretChat.GetSecretChat
instance GHC.Classes.Eq TD.Query.GetSecretChat.GetSecretChat
instance TD.Lib.Internal.ShortShow TD.Query.GetSecretChat.GetSecretChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSecretChat.GetSecretChat

module TD.Query.GetStatisticalGraph

-- | Loads an asynchronous or a zoomed in statistical graph. Returns
--   <a>StatisticalGraph</a>
data GetStatisticalGraph
GetStatisticalGraph :: Maybe Int -> Maybe Text -> Maybe Int -> GetStatisticalGraph

-- | Chat identifier
[chat_id] :: GetStatisticalGraph -> Maybe Int

-- | The token for graph loading
[token] :: GetStatisticalGraph -> Maybe Text

-- | X-value for zoomed in graph or 0 otherwise
[x] :: GetStatisticalGraph -> Maybe Int
defaultGetStatisticalGraph :: GetStatisticalGraph
instance GHC.Show.Show TD.Query.GetStatisticalGraph.GetStatisticalGraph
instance GHC.Classes.Eq TD.Query.GetStatisticalGraph.GetStatisticalGraph
instance TD.Lib.Internal.ShortShow TD.Query.GetStatisticalGraph.GetStatisticalGraph
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStatisticalGraph.GetStatisticalGraph

module TD.Query.GetStickerEmojis

-- | Returns emoji corresponding to a sticker. The list is only for
--   informational purposes, because a sticker is always sent with a fixed
--   emoji from the corresponding Sticker object. Returns <a>Emojis</a>
data GetStickerEmojis
GetStickerEmojis :: Maybe InputFile -> GetStickerEmojis

-- | Sticker file identifier
[sticker] :: GetStickerEmojis -> Maybe InputFile
instance GHC.Show.Show TD.Query.GetStickerEmojis.GetStickerEmojis
instance GHC.Classes.Eq TD.Query.GetStickerEmojis.GetStickerEmojis
instance TD.Lib.Internal.ShortShow TD.Query.GetStickerEmojis.GetStickerEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickerEmojis.GetStickerEmojis

module TD.Query.GetStickerSet

-- | Returns information about a sticker set by its identifier. Returns
--   <a>StickerSet</a>
data GetStickerSet
GetStickerSet :: Maybe Int -> GetStickerSet

-- | Identifier of the sticker set
[set_id] :: GetStickerSet -> Maybe Int
instance GHC.Show.Show TD.Query.GetStickerSet.GetStickerSet
instance GHC.Classes.Eq TD.Query.GetStickerSet.GetStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.GetStickerSet.GetStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickerSet.GetStickerSet

module TD.Query.GetStickers

-- | Returns stickers from the installed sticker sets that correspond to
--   any of the given emoji or can be found by sticker-specific keywords.
--   If the query is non-empty, then favorite, recently used or trending
--   stickers may also be returned. Returns <a>Stickers</a>
data GetStickers
GetStickers :: Maybe StickerType -> Maybe Text -> Maybe Int -> Maybe Int -> GetStickers

-- | Type of the stickers to return
[sticker_type] :: GetStickers -> Maybe StickerType

-- | Search query; a space-separated list of emoji or a keyword prefix. If
--   empty, returns all known installed stickers
[query] :: GetStickers -> Maybe Text

-- | The maximum number of stickers to be returned
[limit] :: GetStickers -> Maybe Int

-- | Chat identifier for which to return stickers. Available custom emoji
--   stickers may be different for different chats
[chat_id] :: GetStickers -> Maybe Int
defaultGetStickers :: GetStickers
instance GHC.Show.Show TD.Query.GetStickers.GetStickers
instance GHC.Classes.Eq TD.Query.GetStickers.GetStickers
instance TD.Lib.Internal.ShortShow TD.Query.GetStickers.GetStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStickers.GetStickers

module TD.Query.GetStorageStatistics

-- | Returns storage usage statistics. Can be called before authorization.
--   Returns <a>StorageStatistics</a>
data GetStorageStatistics
GetStorageStatistics :: Maybe Int -> GetStorageStatistics

-- | The maximum number of chats with the largest storage usage for which
--   separate statistics need to be returned. All other chats will be
--   grouped in entries with chat_id == 0. If the chat info database is not
--   used, the chat_limit is ignored and is always set to 0
[chat_limit] :: GetStorageStatistics -> Maybe Int
instance GHC.Show.Show TD.Query.GetStorageStatistics.GetStorageStatistics
instance GHC.Classes.Eq TD.Query.GetStorageStatistics.GetStorageStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetStorageStatistics.GetStorageStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStorageStatistics.GetStorageStatistics

module TD.Query.GetStorageStatisticsFast

-- | Quickly returns approximate storage usage statistics. Can be called
--   before authorization. Returns <a>StorageStatisticsFast</a>
data GetStorageStatisticsFast
GetStorageStatisticsFast :: GetStorageStatisticsFast
instance GHC.Show.Show TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast
instance GHC.Classes.Eq TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast
instance TD.Lib.Internal.ShortShow TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStorageStatisticsFast.GetStorageStatisticsFast

module TD.Query.GetStory

-- | Returns a story. Returns <a>Story</a>
data GetStory
GetStory :: Maybe Int -> Maybe Int -> Maybe Bool -> GetStory

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: GetStory -> Maybe Int

-- | Story identifier
[story_id] :: GetStory -> Maybe Int

-- | Pass true to get only locally available information without sending
--   network requests
[only_local] :: GetStory -> Maybe Bool
defaultGetStory :: GetStory
instance GHC.Show.Show TD.Query.GetStory.GetStory
instance GHC.Classes.Eq TD.Query.GetStory.GetStory
instance TD.Lib.Internal.ShortShow TD.Query.GetStory.GetStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStory.GetStory

module TD.Query.GetStoryAvailableReactions

-- | Returns reactions, which can be chosen for a story. Returns
--   <a>AvailableReactions</a>
data GetStoryAvailableReactions
GetStoryAvailableReactions :: Maybe Int -> GetStoryAvailableReactions

-- | Number of reaction per row, 5-25
[row_size] :: GetStoryAvailableReactions -> Maybe Int
instance GHC.Show.Show TD.Query.GetStoryAvailableReactions.GetStoryAvailableReactions
instance GHC.Classes.Eq TD.Query.GetStoryAvailableReactions.GetStoryAvailableReactions
instance TD.Lib.Internal.ShortShow TD.Query.GetStoryAvailableReactions.GetStoryAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStoryAvailableReactions.GetStoryAvailableReactions

module TD.Query.GetStoryInteractions

-- | Returns interactions with a story. The method can be called only for
--   stories posted on behalf of the current user. Returns
--   <a>StoryInteractions</a>
data GetStoryInteractions
GetStoryInteractions :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Int -> GetStoryInteractions

-- | Story identifier
[story_id] :: GetStoryInteractions -> Maybe Int

-- | Query to search for in names, usernames and titles; may be empty to
--   get all relevant interactions
[query] :: GetStoryInteractions -> Maybe Text

-- | Pass true to get only interactions by contacts; pass false to get all
--   relevant interactions
[only_contacts] :: GetStoryInteractions -> Maybe Bool

-- | Pass true to get forwards and reposts first, then reactions, then
--   other views; pass false to get interactions sorted just by interaction
--   date
[prefer_forwards] :: GetStoryInteractions -> Maybe Bool

-- | Pass true to get interactions with reaction first; pass false to get
--   interactions sorted just by interaction date. Ignored if
--   prefer_forwards == true
[prefer_with_reaction] :: GetStoryInteractions -> Maybe Bool

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetStoryInteractions -> Maybe Text

-- | The maximum number of story interactions to return
[limit] :: GetStoryInteractions -> Maybe Int
defaultGetStoryInteractions :: GetStoryInteractions
instance GHC.Show.Show TD.Query.GetStoryInteractions.GetStoryInteractions
instance GHC.Classes.Eq TD.Query.GetStoryInteractions.GetStoryInteractions
instance TD.Lib.Internal.ShortShow TD.Query.GetStoryInteractions.GetStoryInteractions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStoryInteractions.GetStoryInteractions

module TD.Query.GetStoryNotificationSettingsExceptions

-- | Returns the list of chats with non-default notification settings for
--   stories. Returns <a>Chats</a>
data GetStoryNotificationSettingsExceptions
GetStoryNotificationSettingsExceptions :: GetStoryNotificationSettingsExceptions
instance GHC.Show.Show TD.Query.GetStoryNotificationSettingsExceptions.GetStoryNotificationSettingsExceptions
instance GHC.Classes.Eq TD.Query.GetStoryNotificationSettingsExceptions.GetStoryNotificationSettingsExceptions
instance TD.Lib.Internal.ShortShow TD.Query.GetStoryNotificationSettingsExceptions.GetStoryNotificationSettingsExceptions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStoryNotificationSettingsExceptions.GetStoryNotificationSettingsExceptions

module TD.Query.GetStoryPublicForwards

-- | Returns forwards of a story as a message to public chats and reposts
--   by public channels. Can be used only if the story is posted on behalf
--   of the current user or story.can_get_statistics == true. For optimal
--   performance, the number of returned messages and stories is chosen by
--   TDLib. Returns <a>PublicForwards</a>
data GetStoryPublicForwards
GetStoryPublicForwards :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> GetStoryPublicForwards

-- | The identifier of the sender of the story
[story_sender_chat_id] :: GetStoryPublicForwards -> Maybe Int

-- | The identifier of the story
[story_id] :: GetStoryPublicForwards -> Maybe Int

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: GetStoryPublicForwards -> Maybe Text

-- | The maximum number of messages and stories to be returned; must be
--   positive and can't be greater than 100. For optimal performance, the
--   number of returned objects is chosen by TDLib and can be smaller than
--   the specified limit
[limit] :: GetStoryPublicForwards -> Maybe Int
defaultGetStoryPublicForwards :: GetStoryPublicForwards
instance GHC.Show.Show TD.Query.GetStoryPublicForwards.GetStoryPublicForwards
instance GHC.Classes.Eq TD.Query.GetStoryPublicForwards.GetStoryPublicForwards
instance TD.Lib.Internal.ShortShow TD.Query.GetStoryPublicForwards.GetStoryPublicForwards
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStoryPublicForwards.GetStoryPublicForwards

module TD.Query.GetStoryStatistics

-- | Returns detailed statistics about a story. Can be used only if
--   story.can_get_statistics == true. Returns <a>StoryStatistics</a>
data GetStoryStatistics
GetStoryStatistics :: Maybe Int -> Maybe Int -> Maybe Bool -> GetStoryStatistics

-- | Chat identifier
[chat_id] :: GetStoryStatistics -> Maybe Int

-- | Story identifier
[story_id] :: GetStoryStatistics -> Maybe Int

-- | Pass true if a dark theme is used by the application
[is_dark] :: GetStoryStatistics -> Maybe Bool
defaultGetStoryStatistics :: GetStoryStatistics
instance GHC.Show.Show TD.Query.GetStoryStatistics.GetStoryStatistics
instance GHC.Classes.Eq TD.Query.GetStoryStatistics.GetStoryStatistics
instance TD.Lib.Internal.ShortShow TD.Query.GetStoryStatistics.GetStoryStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetStoryStatistics.GetStoryStatistics

module TD.Query.GetSuggestedFileName

-- | Returns suggested name for saving a file in a given directory. Returns
--   <a>Text</a>
data GetSuggestedFileName
GetSuggestedFileName :: Maybe Int -> Maybe Text -> GetSuggestedFileName

-- | Identifier of the file
[file_id] :: GetSuggestedFileName -> Maybe Int

-- | Directory in which the file is supposed to be saved
[directory] :: GetSuggestedFileName -> Maybe Text
defaultGetSuggestedFileName :: GetSuggestedFileName
instance GHC.Show.Show TD.Query.GetSuggestedFileName.GetSuggestedFileName
instance GHC.Classes.Eq TD.Query.GetSuggestedFileName.GetSuggestedFileName
instance TD.Lib.Internal.ShortShow TD.Query.GetSuggestedFileName.GetSuggestedFileName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuggestedFileName.GetSuggestedFileName

module TD.Query.GetSuggestedStickerSetName

-- | Returns a suggested name for a new sticker set with a given title.
--   Returns <a>Text</a>
data GetSuggestedStickerSetName
GetSuggestedStickerSetName :: Maybe Text -> GetSuggestedStickerSetName

-- | Sticker set title; 1-64 characters
[title] :: GetSuggestedStickerSetName -> Maybe Text
instance GHC.Show.Show TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName
instance GHC.Classes.Eq TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName
instance TD.Lib.Internal.ShortShow TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuggestedStickerSetName.GetSuggestedStickerSetName

module TD.Query.GetSuitableDiscussionChats

-- | Returns a list of basic group and supergroup chats, which can be used
--   as a discussion group for a channel. Returned basic group chats must
--   be first upgraded to supergroups before they can be set as a
--   discussion group. To set a returned supergroup as a discussion group,
--   access to its old messages must be enabled using
--   toggleSupergroupIsAllHistoryAvailable first. Returns <a>Chats</a>
data GetSuitableDiscussionChats
GetSuitableDiscussionChats :: GetSuitableDiscussionChats
instance GHC.Show.Show TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats
instance GHC.Classes.Eq TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats
instance TD.Lib.Internal.ShortShow TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuitableDiscussionChats.GetSuitableDiscussionChats

module TD.Query.GetSuitablePersonalChats

-- | Returns a list of channel chats, which can be used as a personal chat.
--   Returns <a>Chats</a>
data GetSuitablePersonalChats
GetSuitablePersonalChats :: GetSuitablePersonalChats
instance GHC.Show.Show TD.Query.GetSuitablePersonalChats.GetSuitablePersonalChats
instance GHC.Classes.Eq TD.Query.GetSuitablePersonalChats.GetSuitablePersonalChats
instance TD.Lib.Internal.ShortShow TD.Query.GetSuitablePersonalChats.GetSuitablePersonalChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSuitablePersonalChats.GetSuitablePersonalChats

module TD.Query.GetSupergroup

-- | Returns information about a supergroup or a channel by its identifier.
--   This is an offline request if the current user is not a bot. Returns
--   <a>Supergroup</a>
data GetSupergroup
GetSupergroup :: Maybe Int -> GetSupergroup

-- | Supergroup or channel identifier
[supergroup_id] :: GetSupergroup -> Maybe Int
instance GHC.Show.Show TD.Query.GetSupergroup.GetSupergroup
instance GHC.Classes.Eq TD.Query.GetSupergroup.GetSupergroup
instance TD.Lib.Internal.ShortShow TD.Query.GetSupergroup.GetSupergroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroup.GetSupergroup

module TD.Query.GetSupergroupFullInfo

-- | Returns full information about a supergroup or a channel by its
--   identifier, cached for up to 1 minute. Returns
--   <a>SupergroupFullInfo</a>
data GetSupergroupFullInfo
GetSupergroupFullInfo :: Maybe Int -> GetSupergroupFullInfo

-- | Supergroup or channel identifier
[supergroup_id] :: GetSupergroupFullInfo -> Maybe Int
instance GHC.Show.Show TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo
instance GHC.Classes.Eq TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroupFullInfo.GetSupergroupFullInfo

module TD.Query.GetSupergroupMembers

-- | Returns information about members or banned users in a supergroup or
--   channel. Can be used only if supergroupFullInfo.can_get_members ==
--   true; additionally, administrator privileges may be required for some
--   filters. Returns <a>ChatMembers</a>
data GetSupergroupMembers
GetSupergroupMembers :: Maybe Int -> Maybe SupergroupMembersFilter -> Maybe Int -> Maybe Int -> GetSupergroupMembers

-- | Identifier of the supergroup or channel
[supergroup_id] :: GetSupergroupMembers -> Maybe Int

-- | The type of users to return; pass null to use
--   supergroupMembersFilterRecent
[_filter] :: GetSupergroupMembers -> Maybe SupergroupMembersFilter

-- | Number of users to skip
[offset] :: GetSupergroupMembers -> Maybe Int

-- | The maximum number of users to be returned; up to 200
[limit] :: GetSupergroupMembers -> Maybe Int
defaultGetSupergroupMembers :: GetSupergroupMembers
instance GHC.Show.Show TD.Query.GetSupergroupMembers.GetSupergroupMembers
instance GHC.Classes.Eq TD.Query.GetSupergroupMembers.GetSupergroupMembers
instance TD.Lib.Internal.ShortShow TD.Query.GetSupergroupMembers.GetSupergroupMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupergroupMembers.GetSupergroupMembers

module TD.Query.GetSupportName

-- | Returns localized name of the Telegram support user; for Telegram
--   support only. Returns <a>Text</a>
data GetSupportName
GetSupportName :: GetSupportName
instance GHC.Show.Show TD.Query.GetSupportName.GetSupportName
instance GHC.Classes.Eq TD.Query.GetSupportName.GetSupportName
instance TD.Lib.Internal.ShortShow TD.Query.GetSupportName.GetSupportName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupportName.GetSupportName

module TD.Query.GetSupportUser

-- | Returns a user that can be contacted to get support. Returns
--   <a>User</a>
data GetSupportUser
GetSupportUser :: GetSupportUser
instance GHC.Show.Show TD.Query.GetSupportUser.GetSupportUser
instance GHC.Classes.Eq TD.Query.GetSupportUser.GetSupportUser
instance TD.Lib.Internal.ShortShow TD.Query.GetSupportUser.GetSupportUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetSupportUser.GetSupportUser

module TD.Query.GetTemporaryPasswordState

-- | Returns information about the current temporary password. Returns
--   <a>TemporaryPasswordState</a>
data GetTemporaryPasswordState
GetTemporaryPasswordState :: GetTemporaryPasswordState
instance GHC.Show.Show TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState
instance GHC.Classes.Eq TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState
instance TD.Lib.Internal.ShortShow TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTemporaryPasswordState.GetTemporaryPasswordState

module TD.Query.GetTextEntities

-- | Returns all entities (mentions, hashtags, cashtags, bot commands, bank
--   card numbers, URLs, and email addresses) found in the text. Can be
--   called synchronously. Returns <a>TextEntities</a>
data GetTextEntities
GetTextEntities :: Maybe Text -> GetTextEntities

-- | The text in which to look for entities
[text] :: GetTextEntities -> Maybe Text
instance GHC.Show.Show TD.Query.GetTextEntities.GetTextEntities
instance GHC.Classes.Eq TD.Query.GetTextEntities.GetTextEntities
instance TD.Lib.Internal.ShortShow TD.Query.GetTextEntities.GetTextEntities
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTextEntities.GetTextEntities

module TD.Query.GetThemeParametersJsonString

-- | Converts a themeParameters object to corresponding JSON-serialized
--   string. Can be called synchronously. Returns <a>Text</a>
data GetThemeParametersJsonString
GetThemeParametersJsonString :: Maybe ThemeParameters -> GetThemeParametersJsonString

-- | Theme parameters to convert to JSON
[theme] :: GetThemeParametersJsonString -> Maybe ThemeParameters
instance GHC.Show.Show TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString
instance GHC.Classes.Eq TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString
instance TD.Lib.Internal.ShortShow TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetThemeParametersJsonString.GetThemeParametersJsonString

module TD.Query.GetThemedChatEmojiStatuses

-- | Returns up to 8 emoji statuses, which must be shown in the emoji
--   status list for chats. Returns <a>EmojiStatuses</a>
data GetThemedChatEmojiStatuses
GetThemedChatEmojiStatuses :: GetThemedChatEmojiStatuses
instance GHC.Show.Show TD.Query.GetThemedChatEmojiStatuses.GetThemedChatEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetThemedChatEmojiStatuses.GetThemedChatEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetThemedChatEmojiStatuses.GetThemedChatEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetThemedChatEmojiStatuses.GetThemedChatEmojiStatuses

module TD.Query.GetThemedEmojiStatuses

-- | Returns up to 8 emoji statuses, which must be shown right after the
--   default Premium Badge in the emoji status list for self status.
--   Returns <a>EmojiStatuses</a>
data GetThemedEmojiStatuses
GetThemedEmojiStatuses :: GetThemedEmojiStatuses
instance GHC.Show.Show TD.Query.GetThemedEmojiStatuses.GetThemedEmojiStatuses
instance GHC.Classes.Eq TD.Query.GetThemedEmojiStatuses.GetThemedEmojiStatuses
instance TD.Lib.Internal.ShortShow TD.Query.GetThemedEmojiStatuses.GetThemedEmojiStatuses
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetThemedEmojiStatuses.GetThemedEmojiStatuses

module TD.Query.GetTimeZones

-- | Returns the list of supported time zones. Returns <a>TimeZones</a>
data GetTimeZones
GetTimeZones :: GetTimeZones
instance GHC.Show.Show TD.Query.GetTimeZones.GetTimeZones
instance GHC.Classes.Eq TD.Query.GetTimeZones.GetTimeZones
instance TD.Lib.Internal.ShortShow TD.Query.GetTimeZones.GetTimeZones
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTimeZones.GetTimeZones

module TD.Query.GetTopChats

-- | Returns a list of frequently used chats. Returns <a>Chats</a>
data GetTopChats
GetTopChats :: Maybe TopChatCategory -> Maybe Int -> GetTopChats

-- | Category of chats to be returned
[category] :: GetTopChats -> Maybe TopChatCategory

-- | The maximum number of chats to be returned; up to 30
[limit] :: GetTopChats -> Maybe Int
defaultGetTopChats :: GetTopChats
instance GHC.Show.Show TD.Query.GetTopChats.GetTopChats
instance GHC.Classes.Eq TD.Query.GetTopChats.GetTopChats
instance TD.Lib.Internal.ShortShow TD.Query.GetTopChats.GetTopChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTopChats.GetTopChats

module TD.Query.GetTrendingStickerSets

-- | Returns a list of trending sticker sets. For optimal performance, the
--   number of returned sticker sets is chosen by TDLib. Returns
--   <a>TrendingStickerSets</a>
data GetTrendingStickerSets
GetTrendingStickerSets :: Maybe StickerType -> Maybe Int -> Maybe Int -> GetTrendingStickerSets

-- | Type of the sticker sets to return
[sticker_type] :: GetTrendingStickerSets -> Maybe StickerType

-- | The offset from which to return the sticker sets; must be non-negative
[offset] :: GetTrendingStickerSets -> Maybe Int

-- | The maximum number of sticker sets to be returned; up to 100. For
--   optimal performance, the number of returned sticker sets is chosen by
--   TDLib and can be smaller than the specified limit, even if the end of
--   the list has not been reached
[limit] :: GetTrendingStickerSets -> Maybe Int
defaultGetTrendingStickerSets :: GetTrendingStickerSets
instance GHC.Show.Show TD.Query.GetTrendingStickerSets.GetTrendingStickerSets
instance GHC.Classes.Eq TD.Query.GetTrendingStickerSets.GetTrendingStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.GetTrendingStickerSets.GetTrendingStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetTrendingStickerSets.GetTrendingStickerSets

module TD.Query.GetUser

-- | Returns information about a user by their identifier. This is an
--   offline request if the current user is not a bot. Returns <a>User</a>
data GetUser
GetUser :: Maybe Int -> GetUser

-- | User identifier
[user_id] :: GetUser -> Maybe Int
instance GHC.Show.Show TD.Query.GetUser.GetUser
instance GHC.Classes.Eq TD.Query.GetUser.GetUser
instance TD.Lib.Internal.ShortShow TD.Query.GetUser.GetUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUser.GetUser

module TD.Query.GetUserChatBoosts

-- | Returns the list of boosts applied to a chat by a given user; requires
--   administrator rights in the chat; for bots only. Returns
--   <a>FoundChatBoosts</a>
data GetUserChatBoosts
GetUserChatBoosts :: Maybe Int -> Maybe Int -> GetUserChatBoosts

-- | Identifier of the chat
[chat_id] :: GetUserChatBoosts -> Maybe Int

-- | Identifier of the user
[user_id] :: GetUserChatBoosts -> Maybe Int
defaultGetUserChatBoosts :: GetUserChatBoosts
instance GHC.Show.Show TD.Query.GetUserChatBoosts.GetUserChatBoosts
instance GHC.Classes.Eq TD.Query.GetUserChatBoosts.GetUserChatBoosts
instance TD.Lib.Internal.ShortShow TD.Query.GetUserChatBoosts.GetUserChatBoosts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserChatBoosts.GetUserChatBoosts

module TD.Query.GetUserFullInfo

-- | Returns full information about a user by their identifier. Returns
--   <a>UserFullInfo</a>
data GetUserFullInfo
GetUserFullInfo :: Maybe Int -> GetUserFullInfo

-- | User identifier
[user_id] :: GetUserFullInfo -> Maybe Int
instance GHC.Show.Show TD.Query.GetUserFullInfo.GetUserFullInfo
instance GHC.Classes.Eq TD.Query.GetUserFullInfo.GetUserFullInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetUserFullInfo.GetUserFullInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserFullInfo.GetUserFullInfo

module TD.Query.GetUserLink

-- | Returns an HTTPS link, which can be used to get information about the
--   current user. Returns <a>UserLink</a>
data GetUserLink
GetUserLink :: GetUserLink
instance GHC.Show.Show TD.Query.GetUserLink.GetUserLink
instance GHC.Classes.Eq TD.Query.GetUserLink.GetUserLink
instance TD.Lib.Internal.ShortShow TD.Query.GetUserLink.GetUserLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserLink.GetUserLink

module TD.Query.GetUserPrivacySettingRules

-- | Returns the current privacy settings. Returns
--   <a>UserPrivacySettingRules</a>
data GetUserPrivacySettingRules
GetUserPrivacySettingRules :: Maybe UserPrivacySetting -> GetUserPrivacySettingRules

-- | The privacy setting
[setting] :: GetUserPrivacySettingRules -> Maybe UserPrivacySetting
instance GHC.Show.Show TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules
instance GHC.Classes.Eq TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules
instance TD.Lib.Internal.ShortShow TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserPrivacySettingRules.GetUserPrivacySettingRules

module TD.Query.GetUserProfilePhotos

-- | Returns the profile photos of a user. Personal and public photo aren't
--   returned. Returns <a>ChatPhotos</a>
data GetUserProfilePhotos
GetUserProfilePhotos :: Maybe Int -> Maybe Int -> Maybe Int -> GetUserProfilePhotos

-- | User identifier
[user_id] :: GetUserProfilePhotos -> Maybe Int

-- | The number of photos to skip; must be non-negative
[offset] :: GetUserProfilePhotos -> Maybe Int

-- | The maximum number of photos to be returned; up to 100
[limit] :: GetUserProfilePhotos -> Maybe Int
defaultGetUserProfilePhotos :: GetUserProfilePhotos
instance GHC.Show.Show TD.Query.GetUserProfilePhotos.GetUserProfilePhotos
instance GHC.Classes.Eq TD.Query.GetUserProfilePhotos.GetUserProfilePhotos
instance TD.Lib.Internal.ShortShow TD.Query.GetUserProfilePhotos.GetUserProfilePhotos
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserProfilePhotos.GetUserProfilePhotos

module TD.Query.GetUserSupportInfo

-- | Returns support information for the given user; for Telegram support
--   only. Returns <a>UserSupportInfo</a>
data GetUserSupportInfo
GetUserSupportInfo :: Maybe Int -> GetUserSupportInfo

-- | User identifier
[user_id] :: GetUserSupportInfo -> Maybe Int
instance GHC.Show.Show TD.Query.GetUserSupportInfo.GetUserSupportInfo
instance GHC.Classes.Eq TD.Query.GetUserSupportInfo.GetUserSupportInfo
instance TD.Lib.Internal.ShortShow TD.Query.GetUserSupportInfo.GetUserSupportInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetUserSupportInfo.GetUserSupportInfo

module TD.Query.GetVideoChatAvailableParticipants

-- | Returns the list of participant identifiers, on whose behalf a video
--   chat in the chat can be joined. Returns <a>MessageSenders</a>
data GetVideoChatAvailableParticipants
GetVideoChatAvailableParticipants :: Maybe Int -> GetVideoChatAvailableParticipants

-- | Chat identifier
[chat_id] :: GetVideoChatAvailableParticipants -> Maybe Int
instance GHC.Show.Show TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants
instance GHC.Classes.Eq TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants
instance TD.Lib.Internal.ShortShow TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetVideoChatAvailableParticipants.GetVideoChatAvailableParticipants

module TD.Query.GetVideoChatRtmpUrl

-- | Returns RTMP URL for streaming to the chat; requires owner privileges.
--   Returns <a>RtmpUrl</a>
data GetVideoChatRtmpUrl
GetVideoChatRtmpUrl :: Maybe Int -> GetVideoChatRtmpUrl

-- | Chat identifier
[chat_id] :: GetVideoChatRtmpUrl -> Maybe Int
instance GHC.Show.Show TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl
instance GHC.Classes.Eq TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetVideoChatRtmpUrl.GetVideoChatRtmpUrl

module TD.Query.GetWebAppLinkUrl

-- | Returns an HTTPS URL of a Web App to open after a link of the type
--   internalLinkTypeWebApp is clicked. Returns <a>HttpUrl</a>
data GetWebAppLinkUrl
GetWebAppLinkUrl :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe ThemeParameters -> Maybe Text -> Maybe Bool -> GetWebAppLinkUrl

-- | Identifier of the chat in which the link was clicked; pass 0 if none
[chat_id] :: GetWebAppLinkUrl -> Maybe Int

-- | Identifier of the target bot
[bot_user_id] :: GetWebAppLinkUrl -> Maybe Int

-- | Short name of the Web App
[web_app_short_name] :: GetWebAppLinkUrl -> Maybe Text

-- | Start parameter from internalLinkTypeWebApp
[start_parameter] :: GetWebAppLinkUrl -> Maybe Text

-- | Preferred Web App theme; pass null to use the default theme
[theme] :: GetWebAppLinkUrl -> Maybe ThemeParameters

-- | Short name of the application; 0-64 English letters, digits, and
--   underscores
[application_name] :: GetWebAppLinkUrl -> Maybe Text

-- | Pass true if the current user allowed the bot to send them messages
[allow_write_access] :: GetWebAppLinkUrl -> Maybe Bool
defaultGetWebAppLinkUrl :: GetWebAppLinkUrl
instance GHC.Show.Show TD.Query.GetWebAppLinkUrl.GetWebAppLinkUrl
instance GHC.Classes.Eq TD.Query.GetWebAppLinkUrl.GetWebAppLinkUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetWebAppLinkUrl.GetWebAppLinkUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebAppLinkUrl.GetWebAppLinkUrl

module TD.Query.GetWebAppUrl

-- | Returns an HTTPS URL of a Web App to open from the side menu, a
--   keyboardButtonTypeWebApp button, an inlineQueryResultsButtonTypeWebApp
--   button, or an internalLinkTypeSideMenuBot link. Returns <a>HttpUrl</a>
data GetWebAppUrl
GetWebAppUrl :: Maybe Int -> Maybe Text -> Maybe ThemeParameters -> Maybe Text -> GetWebAppUrl

-- | Identifier of the target bot
[bot_user_id] :: GetWebAppUrl -> Maybe Int

-- | The URL from a keyboardButtonTypeWebApp button,
--   inlineQueryResultsButtonTypeWebApp button, an
--   internalLinkTypeSideMenuBot link, or an empty when the bot is opened
--   from the side menu
[url] :: GetWebAppUrl -> Maybe Text

-- | Preferred Web App theme; pass null to use the default theme
[theme] :: GetWebAppUrl -> Maybe ThemeParameters

-- | Short name of the application; 0-64 English letters, digits, and
--   underscores
[application_name] :: GetWebAppUrl -> Maybe Text
defaultGetWebAppUrl :: GetWebAppUrl
instance GHC.Show.Show TD.Query.GetWebAppUrl.GetWebAppUrl
instance GHC.Classes.Eq TD.Query.GetWebAppUrl.GetWebAppUrl
instance TD.Lib.Internal.ShortShow TD.Query.GetWebAppUrl.GetWebAppUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebAppUrl.GetWebAppUrl

module TD.Query.GetWebPageInstantView

-- | Returns an instant view version of a web page if available. Returns a
--   404 error if the web page has no instant view page. Returns
--   <a>WebPageInstantView</a>
data GetWebPageInstantView
GetWebPageInstantView :: Maybe Text -> Maybe Bool -> GetWebPageInstantView

-- | The web page URL
[url] :: GetWebPageInstantView -> Maybe Text

-- | Pass true to get full instant view for the web page
[force_full] :: GetWebPageInstantView -> Maybe Bool
defaultGetWebPageInstantView :: GetWebPageInstantView
instance GHC.Show.Show TD.Query.GetWebPageInstantView.GetWebPageInstantView
instance GHC.Classes.Eq TD.Query.GetWebPageInstantView.GetWebPageInstantView
instance TD.Lib.Internal.ShortShow TD.Query.GetWebPageInstantView.GetWebPageInstantView
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebPageInstantView.GetWebPageInstantView

module TD.Query.GetWebPagePreview

-- | Returns a link preview by the text of a message. Do not call this
--   function too often. Returns a 404 error if the text has no link
--   preview. Returns <a>WebPage</a>
data GetWebPagePreview
GetWebPagePreview :: Maybe FormattedText -> Maybe LinkPreviewOptions -> GetWebPagePreview

-- | Message text with formatting
[text] :: GetWebPagePreview -> Maybe FormattedText

-- | Options to be used for generation of the link preview; pass null to
--   use default link preview options
[link_preview_options] :: GetWebPagePreview -> Maybe LinkPreviewOptions
defaultGetWebPagePreview :: GetWebPagePreview
instance GHC.Show.Show TD.Query.GetWebPagePreview.GetWebPagePreview
instance GHC.Classes.Eq TD.Query.GetWebPagePreview.GetWebPagePreview
instance TD.Lib.Internal.ShortShow TD.Query.GetWebPagePreview.GetWebPagePreview
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.GetWebPagePreview.GetWebPagePreview

module TD.Query.HideContactCloseBirthdays

-- | Hides the list of contacts that have close birthdays for 24 hours.
--   Returns <a>Ok</a>
data HideContactCloseBirthdays
HideContactCloseBirthdays :: HideContactCloseBirthdays
instance GHC.Show.Show TD.Query.HideContactCloseBirthdays.HideContactCloseBirthdays
instance GHC.Classes.Eq TD.Query.HideContactCloseBirthdays.HideContactCloseBirthdays
instance TD.Lib.Internal.ShortShow TD.Query.HideContactCloseBirthdays.HideContactCloseBirthdays
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.HideContactCloseBirthdays.HideContactCloseBirthdays

module TD.Query.HideSuggestedAction

-- | Hides a suggested action. Returns <a>Ok</a>
data HideSuggestedAction
HideSuggestedAction :: Maybe SuggestedAction -> HideSuggestedAction

-- | Suggested action to hide
[action] :: HideSuggestedAction -> Maybe SuggestedAction
instance GHC.Show.Show TD.Query.HideSuggestedAction.HideSuggestedAction
instance GHC.Classes.Eq TD.Query.HideSuggestedAction.HideSuggestedAction
instance TD.Lib.Internal.ShortShow TD.Query.HideSuggestedAction.HideSuggestedAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.HideSuggestedAction.HideSuggestedAction

module TD.Query.ImportContacts

-- | Adds new contacts or edits existing contacts by their phone numbers;
--   contacts' user identifiers are ignored. Returns
--   <a>ImportedContacts</a>
data ImportContacts
ImportContacts :: Maybe [Contact] -> ImportContacts

-- | The list of contacts to import or edit; contacts' vCard are ignored
--   and are not imported
[contacts] :: ImportContacts -> Maybe [Contact]
instance GHC.Show.Show TD.Query.ImportContacts.ImportContacts
instance GHC.Classes.Eq TD.Query.ImportContacts.ImportContacts
instance TD.Lib.Internal.ShortShow TD.Query.ImportContacts.ImportContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ImportContacts.ImportContacts

module TD.Query.ImportMessages

-- | Imports messages exported from another app. Returns <a>Ok</a>
data ImportMessages
ImportMessages :: Maybe Int -> Maybe InputFile -> Maybe [InputFile] -> ImportMessages

-- | Identifier of a chat to which the messages will be imported. It must
--   be an identifier of a private chat with a mutual contact or an
--   identifier of a supergroup chat with can_change_info member right
[chat_id] :: ImportMessages -> Maybe Int

-- | File with messages to import. Only inputFileLocal and
--   inputFileGenerated are supported. The file must not be previously
--   uploaded
[message_file] :: ImportMessages -> Maybe InputFile

-- | Files used in the imported messages. Only inputFileLocal and
--   inputFileGenerated are supported. The files must not be previously
--   uploaded
[attached_files] :: ImportMessages -> Maybe [InputFile]
defaultImportMessages :: ImportMessages
instance GHC.Show.Show TD.Query.ImportMessages.ImportMessages
instance GHC.Classes.Eq TD.Query.ImportMessages.ImportMessages
instance TD.Lib.Internal.ShortShow TD.Query.ImportMessages.ImportMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ImportMessages.ImportMessages

module TD.Query.InviteGroupCallParticipants

-- | Invites users to an active group call. Sends a service message of type
--   messageInviteVideoChatParticipants for video chats. Returns <a>Ok</a>
data InviteGroupCallParticipants
InviteGroupCallParticipants :: Maybe Int -> Maybe [Int] -> InviteGroupCallParticipants

-- | Group call identifier
[group_call_id] :: InviteGroupCallParticipants -> Maybe Int

-- | User identifiers. At most 10 users can be invited simultaneously
[user_ids] :: InviteGroupCallParticipants -> Maybe [Int]
defaultInviteGroupCallParticipants :: InviteGroupCallParticipants
instance GHC.Show.Show TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants
instance GHC.Classes.Eq TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants
instance TD.Lib.Internal.ShortShow TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.InviteGroupCallParticipants.InviteGroupCallParticipants

module TD.Query.JoinChat

-- | Adds the current user as a new member to a chat. Private and secret
--   chats can't be joined using this method. May return an error with a
--   message <a>INVITE_REQUEST_SENT</a> if only a join request was created.
--   Returns <a>Ok</a>
data JoinChat
JoinChat :: Maybe Int -> JoinChat

-- | Chat identifier
[chat_id] :: JoinChat -> Maybe Int
instance GHC.Show.Show TD.Query.JoinChat.JoinChat
instance GHC.Classes.Eq TD.Query.JoinChat.JoinChat
instance TD.Lib.Internal.ShortShow TD.Query.JoinChat.JoinChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinChat.JoinChat

module TD.Query.JoinChatByInviteLink

-- | Uses an invite link to add the current user to the chat if possible.
--   May return an error with a message <a>INVITE_REQUEST_SENT</a> if only
--   a join request was created. Returns <a>Chat</a>
data JoinChatByInviteLink
JoinChatByInviteLink :: Maybe Text -> JoinChatByInviteLink

-- | Invite link to use
[invite_link] :: JoinChatByInviteLink -> Maybe Text
instance GHC.Show.Show TD.Query.JoinChatByInviteLink.JoinChatByInviteLink
instance GHC.Classes.Eq TD.Query.JoinChatByInviteLink.JoinChatByInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.JoinChatByInviteLink.JoinChatByInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinChatByInviteLink.JoinChatByInviteLink

module TD.Query.JoinGroupCall

-- | Joins an active group call. Returns join response payload for tgcalls.
--   Returns <a>Text</a>
data JoinGroupCall
JoinGroupCall :: Maybe Int -> Maybe MessageSender -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> JoinGroupCall

-- | Group call identifier
[group_call_id] :: JoinGroupCall -> Maybe Int

-- | Identifier of a group call participant, which will be used to join the
--   call; pass null to join as self; video chats only
[participant_id] :: JoinGroupCall -> Maybe MessageSender

-- | Caller audio channel synchronization source identifier; received from
--   tgcalls
[audio_source_id] :: JoinGroupCall -> Maybe Int

-- | Group call join payload; received from tgcalls
[payload] :: JoinGroupCall -> Maybe Text

-- | Pass true to join the call with muted microphone
[is_muted] :: JoinGroupCall -> Maybe Bool

-- | Pass true if the user's video is enabled
[is_my_video_enabled] :: JoinGroupCall -> Maybe Bool

-- | If non-empty, invite hash to be used to join the group call without
--   being muted by administrators
[invite_hash] :: JoinGroupCall -> Maybe Text
defaultJoinGroupCall :: JoinGroupCall
instance GHC.Show.Show TD.Query.JoinGroupCall.JoinGroupCall
instance GHC.Classes.Eq TD.Query.JoinGroupCall.JoinGroupCall
instance TD.Lib.Internal.ShortShow TD.Query.JoinGroupCall.JoinGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.JoinGroupCall.JoinGroupCall

module TD.Query.LaunchPrepaidPremiumGiveaway

-- | Launches a prepaid Telegram Premium giveaway. Returns <a>Ok</a>
data LaunchPrepaidPremiumGiveaway
LaunchPrepaidPremiumGiveaway :: Maybe Int -> Maybe PremiumGiveawayParameters -> LaunchPrepaidPremiumGiveaway

-- | Unique identifier of the prepaid giveaway
[giveaway_id] :: LaunchPrepaidPremiumGiveaway -> Maybe Int

-- | Giveaway parameters
[parameters] :: LaunchPrepaidPremiumGiveaway -> Maybe PremiumGiveawayParameters
defaultLaunchPrepaidPremiumGiveaway :: LaunchPrepaidPremiumGiveaway
instance GHC.Show.Show TD.Query.LaunchPrepaidPremiumGiveaway.LaunchPrepaidPremiumGiveaway
instance GHC.Classes.Eq TD.Query.LaunchPrepaidPremiumGiveaway.LaunchPrepaidPremiumGiveaway
instance TD.Lib.Internal.ShortShow TD.Query.LaunchPrepaidPremiumGiveaway.LaunchPrepaidPremiumGiveaway
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LaunchPrepaidPremiumGiveaway.LaunchPrepaidPremiumGiveaway

module TD.Query.LeaveChat

-- | Removes the current user from chat members. Private and secret chats
--   can't be left using this method. Returns <a>Ok</a>
data LeaveChat
LeaveChat :: Maybe Int -> LeaveChat

-- | Chat identifier
[chat_id] :: LeaveChat -> Maybe Int
instance GHC.Show.Show TD.Query.LeaveChat.LeaveChat
instance GHC.Classes.Eq TD.Query.LeaveChat.LeaveChat
instance TD.Lib.Internal.ShortShow TD.Query.LeaveChat.LeaveChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LeaveChat.LeaveChat

module TD.Query.LeaveGroupCall

-- | Leaves a group call. Returns <a>Ok</a>
data LeaveGroupCall
LeaveGroupCall :: Maybe Int -> LeaveGroupCall

-- | Group call identifier
[group_call_id] :: LeaveGroupCall -> Maybe Int
instance GHC.Show.Show TD.Query.LeaveGroupCall.LeaveGroupCall
instance GHC.Classes.Eq TD.Query.LeaveGroupCall.LeaveGroupCall
instance TD.Lib.Internal.ShortShow TD.Query.LeaveGroupCall.LeaveGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LeaveGroupCall.LeaveGroupCall

module TD.Query.LoadActiveStories

-- | Loads more active stories from a story list. The loaded stories will
--   be sent through updates. Active stories are sorted by the pair
--   (active_stories.order, active_stories.story_sender_chat_id) in
--   descending order. Returns a 404 error if all active stories have been
--   loaded. Returns <a>Ok</a>
data LoadActiveStories
LoadActiveStories :: Maybe StoryList -> LoadActiveStories

-- | The story list in which to load active stories
[story_list] :: LoadActiveStories -> Maybe StoryList
instance GHC.Show.Show TD.Query.LoadActiveStories.LoadActiveStories
instance GHC.Classes.Eq TD.Query.LoadActiveStories.LoadActiveStories
instance TD.Lib.Internal.ShortShow TD.Query.LoadActiveStories.LoadActiveStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadActiveStories.LoadActiveStories

module TD.Query.LoadChats

-- | Loads more chats from a chat list. The loaded chats and their
--   positions in the chat list will be sent through updates. Chats are
--   sorted by the pair (chat.position.order, chat.id) in descending order.
--   Returns a 404 error if all chats have been loaded. Returns <a>Ok</a>
data LoadChats
LoadChats :: Maybe ChatList -> Maybe Int -> LoadChats

-- | The chat list in which to load chats; pass null to load chats from the
--   main chat list
[chat_list] :: LoadChats -> Maybe ChatList

-- | The maximum number of chats to be loaded. For optimal performance, the
--   number of loaded chats is chosen by TDLib and can be smaller than the
--   specified limit, even if the end of the list is not reached
[limit] :: LoadChats -> Maybe Int
defaultLoadChats :: LoadChats
instance GHC.Show.Show TD.Query.LoadChats.LoadChats
instance GHC.Classes.Eq TD.Query.LoadChats.LoadChats
instance TD.Lib.Internal.ShortShow TD.Query.LoadChats.LoadChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadChats.LoadChats

module TD.Query.LoadGroupCallParticipants

-- | Loads more participants of a group call. The loaded participants will
--   be received through updates. Use the field
--   groupCall.loaded_all_participants to check whether all participants
--   have already been loaded. Returns <a>Ok</a>
data LoadGroupCallParticipants
LoadGroupCallParticipants :: Maybe Int -> Maybe Int -> LoadGroupCallParticipants

-- | Group call identifier. The group call must be previously received
--   through getGroupCall and must be joined or being joined
[group_call_id] :: LoadGroupCallParticipants -> Maybe Int

-- | The maximum number of participants to load; up to 100
[limit] :: LoadGroupCallParticipants -> Maybe Int
defaultLoadGroupCallParticipants :: LoadGroupCallParticipants
instance GHC.Show.Show TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants
instance GHC.Classes.Eq TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants
instance TD.Lib.Internal.ShortShow TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadGroupCallParticipants.LoadGroupCallParticipants

module TD.Query.LoadQuickReplyShortcutMessages

-- | Loads quick reply messages that can be sent by a given quick reply
--   shortcut. The loaded messages will be sent through
--   updateQuickReplyShortcutMessages. Returns <a>Ok</a>
data LoadQuickReplyShortcutMessages
LoadQuickReplyShortcutMessages :: Maybe Int -> LoadQuickReplyShortcutMessages

-- | Unique identifier of the quick reply shortcut
[shortcut_id] :: LoadQuickReplyShortcutMessages -> Maybe Int
instance GHC.Show.Show TD.Query.LoadQuickReplyShortcutMessages.LoadQuickReplyShortcutMessages
instance GHC.Classes.Eq TD.Query.LoadQuickReplyShortcutMessages.LoadQuickReplyShortcutMessages
instance TD.Lib.Internal.ShortShow TD.Query.LoadQuickReplyShortcutMessages.LoadQuickReplyShortcutMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadQuickReplyShortcutMessages.LoadQuickReplyShortcutMessages

module TD.Query.LoadQuickReplyShortcuts

-- | Loads quick reply shortcuts created by the current user. The loaded
--   topics will be sent through updateQuickReplyShortcuts. Returns
--   <a>Ok</a>
data LoadQuickReplyShortcuts
LoadQuickReplyShortcuts :: LoadQuickReplyShortcuts
instance GHC.Show.Show TD.Query.LoadQuickReplyShortcuts.LoadQuickReplyShortcuts
instance GHC.Classes.Eq TD.Query.LoadQuickReplyShortcuts.LoadQuickReplyShortcuts
instance TD.Lib.Internal.ShortShow TD.Query.LoadQuickReplyShortcuts.LoadQuickReplyShortcuts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadQuickReplyShortcuts.LoadQuickReplyShortcuts

module TD.Query.LoadSavedMessagesTopics

-- | Loads more Saved Messages topics. The loaded topics will be sent
--   through updateSavedMessagesTopic. Topics are sorted by their
--   topic.order in descending order. Returns a 404 error if all topics
--   have been loaded. Returns <a>Ok</a>
data LoadSavedMessagesTopics
LoadSavedMessagesTopics :: Maybe Int -> LoadSavedMessagesTopics

-- | The maximum number of topics to be loaded. For optimal performance,
--   the number of loaded topics is chosen by TDLib and can be smaller than
--   the specified limit, even if the end of the list is not reached
[limit] :: LoadSavedMessagesTopics -> Maybe Int
instance GHC.Show.Show TD.Query.LoadSavedMessagesTopics.LoadSavedMessagesTopics
instance GHC.Classes.Eq TD.Query.LoadSavedMessagesTopics.LoadSavedMessagesTopics
instance TD.Lib.Internal.ShortShow TD.Query.LoadSavedMessagesTopics.LoadSavedMessagesTopics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LoadSavedMessagesTopics.LoadSavedMessagesTopics

module TD.Query.LogOut

-- | Closes the TDLib instance after a proper logout. Requires an available
--   network connection. All local data will be destroyed. After the logout
--   completes, updateAuthorizationState with authorizationStateClosed will
--   be sent. Returns <a>Ok</a>
data LogOut
LogOut :: LogOut
instance GHC.Show.Show TD.Query.LogOut.LogOut
instance GHC.Classes.Eq TD.Query.LogOut.LogOut
instance TD.Lib.Internal.ShortShow TD.Query.LogOut.LogOut
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.LogOut.LogOut

module TD.Query.OpenChat

-- | Informs TDLib that the chat is opened by the user. Many useful
--   activities depend on the chat being opened or closed (e.g., in
--   supergroups and channels all updates are received only for opened
--   chats). Returns <a>Ok</a>
data OpenChat
OpenChat :: Maybe Int -> OpenChat

-- | Chat identifier
[chat_id] :: OpenChat -> Maybe Int
instance GHC.Show.Show TD.Query.OpenChat.OpenChat
instance GHC.Classes.Eq TD.Query.OpenChat.OpenChat
instance TD.Lib.Internal.ShortShow TD.Query.OpenChat.OpenChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenChat.OpenChat

module TD.Query.OpenChatSimilarChat

-- | Informs TDLib that a chat was opened from the list of similar chats.
--   The method is independent of openChat and closeChat methods. Returns
--   <a>Ok</a>
data OpenChatSimilarChat
OpenChatSimilarChat :: Maybe Int -> Maybe Int -> OpenChatSimilarChat

-- | Identifier of the original chat, which similar chats were requested
[chat_id] :: OpenChatSimilarChat -> Maybe Int

-- | Identifier of the opened chat
[opened_chat_id] :: OpenChatSimilarChat -> Maybe Int
defaultOpenChatSimilarChat :: OpenChatSimilarChat
instance GHC.Show.Show TD.Query.OpenChatSimilarChat.OpenChatSimilarChat
instance GHC.Classes.Eq TD.Query.OpenChatSimilarChat.OpenChatSimilarChat
instance TD.Lib.Internal.ShortShow TD.Query.OpenChatSimilarChat.OpenChatSimilarChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenChatSimilarChat.OpenChatSimilarChat

module TD.Query.OpenMessageContent

-- | Informs TDLib that the message content has been opened (e.g., the user
--   has opened a photo, video, document, location or venue, or has
--   listened to an audio file or voice note message). An
--   updateMessageContentOpened update will be generated if something has
--   changed. Returns <a>Ok</a>
data OpenMessageContent
OpenMessageContent :: Maybe Int -> Maybe Int -> OpenMessageContent

-- | Chat identifier of the message
[chat_id] :: OpenMessageContent -> Maybe Int

-- | Identifier of the message with the opened content
[message_id] :: OpenMessageContent -> Maybe Int
defaultOpenMessageContent :: OpenMessageContent
instance GHC.Show.Show TD.Query.OpenMessageContent.OpenMessageContent
instance GHC.Classes.Eq TD.Query.OpenMessageContent.OpenMessageContent
instance TD.Lib.Internal.ShortShow TD.Query.OpenMessageContent.OpenMessageContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenMessageContent.OpenMessageContent

module TD.Query.OpenStory

-- | Informs TDLib that a story is opened and is being viewed by the user.
--   Returns <a>Ok</a>
data OpenStory
OpenStory :: Maybe Int -> Maybe Int -> OpenStory

-- | The identifier of the sender of the opened story
[story_sender_chat_id] :: OpenStory -> Maybe Int

-- | The identifier of the story
[story_id] :: OpenStory -> Maybe Int
defaultOpenStory :: OpenStory
instance GHC.Show.Show TD.Query.OpenStory.OpenStory
instance GHC.Classes.Eq TD.Query.OpenStory.OpenStory
instance TD.Lib.Internal.ShortShow TD.Query.OpenStory.OpenStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenStory.OpenStory

module TD.Query.OpenWebApp

-- | Informs TDLib that a Web App is being opened from the attachment menu,
--   a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or
--   an inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation
--   alert about data sent to the bot must be shown once. Returns
--   <a>WebAppInfo</a>
data OpenWebApp
OpenWebApp :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe ThemeParameters -> Maybe Text -> Maybe Int -> Maybe InputMessageReplyTo -> OpenWebApp

-- | Identifier of the chat in which the Web App is opened. The Web App
--   can't be opened in secret chats
[chat_id] :: OpenWebApp -> Maybe Int

-- | Identifier of the bot, providing the Web App
[bot_user_id] :: OpenWebApp -> Maybe Int

-- | The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton
--   button, an internalLinkTypeAttachmentMenuBot link, or an empty string
--   otherwise
[url] :: OpenWebApp -> Maybe Text

-- | Preferred Web App theme; pass null to use the default theme
[theme] :: OpenWebApp -> Maybe ThemeParameters

-- | Short name of the application; 0-64 English letters, digits, and
--   underscores
[application_name] :: OpenWebApp -> Maybe Text

-- | If not 0, the message thread identifier in which the message will be
--   sent
[message_thread_id] :: OpenWebApp -> Maybe Int

-- | Information about the message or story to be replied in the message
--   sent by the Web App; pass null if none
[reply_to] :: OpenWebApp -> Maybe InputMessageReplyTo
defaultOpenWebApp :: OpenWebApp
instance GHC.Show.Show TD.Query.OpenWebApp.OpenWebApp
instance GHC.Classes.Eq TD.Query.OpenWebApp.OpenWebApp
instance TD.Lib.Internal.ShortShow TD.Query.OpenWebApp.OpenWebApp
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OpenWebApp.OpenWebApp

module TD.Query.OptimizeStorage

-- | Optimizes storage usage, i.e. deletes some files and returns new
--   storage usage statistics. Secret thumbnails can't be deleted. Returns
--   <a>StorageStatistics</a>
data OptimizeStorage
OptimizeStorage :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe [FileType] -> Maybe [Int] -> Maybe [Int] -> Maybe Bool -> Maybe Int -> OptimizeStorage

-- | Limit on the total size of files after deletion, in bytes. Pass -1 to
--   use the default limit
[size] :: OptimizeStorage -> Maybe Int

-- | Limit on the time that has passed since the last time a file was
--   accessed (or creation time for some filesystems). Pass -1 to use the
--   default limit
[ttl] :: OptimizeStorage -> Maybe Int

-- | Limit on the total number of files after deletion. Pass -1 to use the
--   default limit
[count] :: OptimizeStorage -> Maybe Int

-- | The amount of time after the creation of a file during which it can't
--   be deleted, in seconds. Pass -1 to use the default value
[immunity_delay] :: OptimizeStorage -> Maybe Int

-- | If non-empty, only files with the given types are considered. By
--   default, all types except thumbnails, profile photos, stickers and
--   wallpapers are deleted
[file_types] :: OptimizeStorage -> Maybe [FileType]

-- | If non-empty, only files from the given chats are considered. Use 0 as
--   chat identifier to delete files not belonging to any chat (e.g.,
--   profile photos)
[chat_ids] :: OptimizeStorage -> Maybe [Int]

-- | If non-empty, files from the given chats are excluded. Use 0 as chat
--   identifier to exclude all files not belonging to any chat (e.g.,
--   profile photos)
[exclude_chat_ids] :: OptimizeStorage -> Maybe [Int]

-- | Pass true if statistics about the files that were deleted must be
--   returned instead of the whole storage usage statistics. Affects only
--   returned statistics
[return_deleted_file_statistics] :: OptimizeStorage -> Maybe Bool

-- | Same as in getStorageStatistics. Affects only returned statistics
[chat_limit] :: OptimizeStorage -> Maybe Int
defaultOptimizeStorage :: OptimizeStorage
instance GHC.Show.Show TD.Query.OptimizeStorage.OptimizeStorage
instance GHC.Classes.Eq TD.Query.OptimizeStorage.OptimizeStorage
instance TD.Lib.Internal.ShortShow TD.Query.OptimizeStorage.OptimizeStorage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.OptimizeStorage.OptimizeStorage

module TD.Query.ParseMarkdown

-- | Parses Markdown entities in a human-friendly format, ignoring markup
--   errors. Can be called synchronously. Returns <a>FormattedText</a>
data ParseMarkdown
ParseMarkdown :: Maybe FormattedText -> ParseMarkdown

-- | The text to parse. For example, "<b>italic</b> ~~strikethrough~~
--   ||spoiler|| **bold** <tt>code</tt> `<tt>`pre`</tt>` <b>[italic</b>
--   text_url](telegram.org) <b>italic**bold italic</b>bold**"
[text] :: ParseMarkdown -> Maybe FormattedText
instance GHC.Show.Show TD.Query.ParseMarkdown.ParseMarkdown
instance GHC.Classes.Eq TD.Query.ParseMarkdown.ParseMarkdown
instance TD.Lib.Internal.ShortShow TD.Query.ParseMarkdown.ParseMarkdown
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ParseMarkdown.ParseMarkdown

module TD.Query.ParseTextEntities

-- | Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji,
--   BlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities from
--   a marked-up text. Can be called synchronously. Returns
--   <a>FormattedText</a>
data ParseTextEntities
ParseTextEntities :: Maybe Text -> Maybe TextParseMode -> ParseTextEntities

-- | The text to parse
[text] :: ParseTextEntities -> Maybe Text

-- | Text parse mode
[parse_mode] :: ParseTextEntities -> Maybe TextParseMode
defaultParseTextEntities :: ParseTextEntities
instance GHC.Show.Show TD.Query.ParseTextEntities.ParseTextEntities
instance GHC.Classes.Eq TD.Query.ParseTextEntities.ParseTextEntities
instance TD.Lib.Internal.ShortShow TD.Query.ParseTextEntities.ParseTextEntities
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ParseTextEntities.ParseTextEntities

module TD.Query.PinChatMessage

-- | Pins a message in a chat; requires can_pin_messages member right if
--   the chat is a basic group or supergroup, or can_edit_messages
--   administrator right if the chat is a channel. Returns <a>Ok</a>
data PinChatMessage
PinChatMessage :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> PinChatMessage

-- | Identifier of the chat
[chat_id] :: PinChatMessage -> Maybe Int

-- | Identifier of the new pinned message
[message_id] :: PinChatMessage -> Maybe Int

-- | Pass true to disable notification about the pinned message.
--   Notifications are always disabled in channels and private chats
[disable_notification] :: PinChatMessage -> Maybe Bool

-- | Pass true to pin the message only for self; private chats only
[only_for_self] :: PinChatMessage -> Maybe Bool
defaultPinChatMessage :: PinChatMessage
instance GHC.Show.Show TD.Query.PinChatMessage.PinChatMessage
instance GHC.Classes.Eq TD.Query.PinChatMessage.PinChatMessage
instance TD.Lib.Internal.ShortShow TD.Query.PinChatMessage.PinChatMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.PinChatMessage.PinChatMessage

module TD.Query.PingProxy

-- | Computes time needed to receive a response from a Telegram server
--   through a proxy. Can be called before authorization. Returns
--   <a>Seconds</a>
data PingProxy
PingProxy :: Maybe Int -> PingProxy

-- | Proxy identifier. Use 0 to ping a Telegram server without a proxy
[proxy_id] :: PingProxy -> Maybe Int
instance GHC.Show.Show TD.Query.PingProxy.PingProxy
instance GHC.Classes.Eq TD.Query.PingProxy.PingProxy
instance TD.Lib.Internal.ShortShow TD.Query.PingProxy.PingProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.PingProxy.PingProxy

module TD.Query.PreliminaryUploadFile

-- | Preliminary uploads a file to the cloud before sending it in a
--   message, which can be useful for uploading of being recorded voice and
--   video notes. In all other cases there is no need to preliminary upload
--   a file. Updates updateFile will be used to notify about upload
--   progress. The upload will not be completed until the file is sent in a
--   message. Returns <a>File</a>
data PreliminaryUploadFile
PreliminaryUploadFile :: Maybe InputFile -> Maybe FileType -> Maybe Int -> PreliminaryUploadFile

-- | File to upload
[file] :: PreliminaryUploadFile -> Maybe InputFile

-- | File type; pass null if unknown
[file_type] :: PreliminaryUploadFile -> Maybe FileType

-- | Priority of the upload (1-32). The higher the priority, the earlier
--   the file will be uploaded. If the priorities of two files are equal,
--   then the first one for which preliminaryUploadFile was called will be
--   uploaded first
[priority] :: PreliminaryUploadFile -> Maybe Int
defaultPreliminaryUploadFile :: PreliminaryUploadFile
instance GHC.Show.Show TD.Query.PreliminaryUploadFile.PreliminaryUploadFile
instance GHC.Classes.Eq TD.Query.PreliminaryUploadFile.PreliminaryUploadFile
instance TD.Lib.Internal.ShortShow TD.Query.PreliminaryUploadFile.PreliminaryUploadFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.PreliminaryUploadFile.PreliminaryUploadFile

module TD.Query.ProcessChatFolderNewChats

-- | Process new chats added to a shareable chat folder by its owner.
--   Returns <a>Ok</a>
data ProcessChatFolderNewChats
ProcessChatFolderNewChats :: Maybe Int -> Maybe [Int] -> ProcessChatFolderNewChats

-- | Chat folder identifier
[chat_folder_id] :: ProcessChatFolderNewChats -> Maybe Int

-- | Identifiers of the new chats, which are added to the chat folder. The
--   chats are automatically joined if they aren't joined yet
[added_chat_ids] :: ProcessChatFolderNewChats -> Maybe [Int]
defaultProcessChatFolderNewChats :: ProcessChatFolderNewChats
instance GHC.Show.Show TD.Query.ProcessChatFolderNewChats.ProcessChatFolderNewChats
instance GHC.Classes.Eq TD.Query.ProcessChatFolderNewChats.ProcessChatFolderNewChats
instance TD.Lib.Internal.ShortShow TD.Query.ProcessChatFolderNewChats.ProcessChatFolderNewChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessChatFolderNewChats.ProcessChatFolderNewChats

module TD.Query.ProcessChatJoinRequest

-- | Handles a pending join request in a chat. Returns <a>Ok</a>
data ProcessChatJoinRequest
ProcessChatJoinRequest :: Maybe Int -> Maybe Int -> Maybe Bool -> ProcessChatJoinRequest

-- | Chat identifier
[chat_id] :: ProcessChatJoinRequest -> Maybe Int

-- | Identifier of the user that sent the request
[user_id] :: ProcessChatJoinRequest -> Maybe Int

-- | Pass true to approve the request; pass false to decline it
[approve] :: ProcessChatJoinRequest -> Maybe Bool
defaultProcessChatJoinRequest :: ProcessChatJoinRequest
instance GHC.Show.Show TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest
instance GHC.Classes.Eq TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest
instance TD.Lib.Internal.ShortShow TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessChatJoinRequest.ProcessChatJoinRequest

module TD.Query.ProcessChatJoinRequests

-- | Handles all pending join requests for a given link in a chat. Returns
--   <a>Ok</a>
data ProcessChatJoinRequests
ProcessChatJoinRequests :: Maybe Int -> Maybe Text -> Maybe Bool -> ProcessChatJoinRequests

-- | Chat identifier
[chat_id] :: ProcessChatJoinRequests -> Maybe Int

-- | Invite link for which to process join requests. If empty, all join
--   requests will be processed. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links
[invite_link] :: ProcessChatJoinRequests -> Maybe Text

-- | Pass true to approve all requests; pass false to decline them
[approve] :: ProcessChatJoinRequests -> Maybe Bool
defaultProcessChatJoinRequests :: ProcessChatJoinRequests
instance GHC.Show.Show TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests
instance GHC.Classes.Eq TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests
instance TD.Lib.Internal.ShortShow TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessChatJoinRequests.ProcessChatJoinRequests

module TD.Query.ProcessPushNotification

-- | Handles a push notification. Returns error with code 406 if the push
--   notification is not supported and connection to the server is required
--   to fetch new data. Can be called before authorization. Returns
--   <a>Ok</a>
data ProcessPushNotification
ProcessPushNotification :: Maybe Text -> ProcessPushNotification

-- | JSON-encoded push notification payload with all fields sent by the
--   server, and "google.sent_time" and "google.notification.sound" fields
--   added
[payload] :: ProcessPushNotification -> Maybe Text
instance GHC.Show.Show TD.Query.ProcessPushNotification.ProcessPushNotification
instance GHC.Classes.Eq TD.Query.ProcessPushNotification.ProcessPushNotification
instance TD.Lib.Internal.ShortShow TD.Query.ProcessPushNotification.ProcessPushNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ProcessPushNotification.ProcessPushNotification

module TD.Query.RateSpeechRecognition

-- | Rates recognized speech in a video note or a voice note message.
--   Returns <a>Ok</a>
data RateSpeechRecognition
RateSpeechRecognition :: Maybe Int -> Maybe Int -> Maybe Bool -> RateSpeechRecognition

-- | Identifier of the chat to which the message belongs
[chat_id] :: RateSpeechRecognition -> Maybe Int

-- | Identifier of the message
[message_id] :: RateSpeechRecognition -> Maybe Int

-- | Pass true if the speech recognition is good
[is_good] :: RateSpeechRecognition -> Maybe Bool
defaultRateSpeechRecognition :: RateSpeechRecognition
instance GHC.Show.Show TD.Query.RateSpeechRecognition.RateSpeechRecognition
instance GHC.Classes.Eq TD.Query.RateSpeechRecognition.RateSpeechRecognition
instance TD.Lib.Internal.ShortShow TD.Query.RateSpeechRecognition.RateSpeechRecognition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RateSpeechRecognition.RateSpeechRecognition

module TD.Query.ReadAllChatMentions

-- | Marks all mentions in a chat as read. Returns <a>Ok</a>
data ReadAllChatMentions
ReadAllChatMentions :: Maybe Int -> ReadAllChatMentions

-- | Chat identifier
[chat_id] :: ReadAllChatMentions -> Maybe Int
instance GHC.Show.Show TD.Query.ReadAllChatMentions.ReadAllChatMentions
instance GHC.Classes.Eq TD.Query.ReadAllChatMentions.ReadAllChatMentions
instance TD.Lib.Internal.ShortShow TD.Query.ReadAllChatMentions.ReadAllChatMentions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllChatMentions.ReadAllChatMentions

module TD.Query.ReadAllChatReactions

-- | Marks all reactions in a chat or a forum topic as read. Returns
--   <a>Ok</a>
data ReadAllChatReactions
ReadAllChatReactions :: Maybe Int -> ReadAllChatReactions

-- | Chat identifier
[chat_id] :: ReadAllChatReactions -> Maybe Int
instance GHC.Show.Show TD.Query.ReadAllChatReactions.ReadAllChatReactions
instance GHC.Classes.Eq TD.Query.ReadAllChatReactions.ReadAllChatReactions
instance TD.Lib.Internal.ShortShow TD.Query.ReadAllChatReactions.ReadAllChatReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllChatReactions.ReadAllChatReactions

module TD.Query.ReadAllMessageThreadMentions

-- | Marks all mentions in a forum topic as read. Returns <a>Ok</a>
data ReadAllMessageThreadMentions
ReadAllMessageThreadMentions :: Maybe Int -> Maybe Int -> ReadAllMessageThreadMentions

-- | Chat identifier
[chat_id] :: ReadAllMessageThreadMentions -> Maybe Int

-- | Message thread identifier in which mentions are marked as read
[message_thread_id] :: ReadAllMessageThreadMentions -> Maybe Int
defaultReadAllMessageThreadMentions :: ReadAllMessageThreadMentions
instance GHC.Show.Show TD.Query.ReadAllMessageThreadMentions.ReadAllMessageThreadMentions
instance GHC.Classes.Eq TD.Query.ReadAllMessageThreadMentions.ReadAllMessageThreadMentions
instance TD.Lib.Internal.ShortShow TD.Query.ReadAllMessageThreadMentions.ReadAllMessageThreadMentions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllMessageThreadMentions.ReadAllMessageThreadMentions

module TD.Query.ReadAllMessageThreadReactions

-- | Marks all reactions in a forum topic as read. Returns <a>Ok</a>
data ReadAllMessageThreadReactions
ReadAllMessageThreadReactions :: Maybe Int -> Maybe Int -> ReadAllMessageThreadReactions

-- | Chat identifier
[chat_id] :: ReadAllMessageThreadReactions -> Maybe Int

-- | Message thread identifier in which reactions are marked as read
[message_thread_id] :: ReadAllMessageThreadReactions -> Maybe Int
defaultReadAllMessageThreadReactions :: ReadAllMessageThreadReactions
instance GHC.Show.Show TD.Query.ReadAllMessageThreadReactions.ReadAllMessageThreadReactions
instance GHC.Classes.Eq TD.Query.ReadAllMessageThreadReactions.ReadAllMessageThreadReactions
instance TD.Lib.Internal.ShortShow TD.Query.ReadAllMessageThreadReactions.ReadAllMessageThreadReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadAllMessageThreadReactions.ReadAllMessageThreadReactions

module TD.Query.ReadChatList

-- | Traverse all chats in a chat list and marks all messages in the chats
--   as read. Returns <a>Ok</a>
data ReadChatList
ReadChatList :: Maybe ChatList -> ReadChatList

-- | Chat list in which to mark all chats as read
[chat_list] :: ReadChatList -> Maybe ChatList
instance GHC.Show.Show TD.Query.ReadChatList.ReadChatList
instance GHC.Classes.Eq TD.Query.ReadChatList.ReadChatList
instance TD.Lib.Internal.ShortShow TD.Query.ReadChatList.ReadChatList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadChatList.ReadChatList

module TD.Query.ReadFilePart

-- | Reads a part of a file from the TDLib file cache and returns read
--   bytes. This method is intended to be used only if the application has
--   no direct access to TDLib's file system, because it is usually slower
--   than a direct read from the file. Returns <a>FilePart</a>
data ReadFilePart
ReadFilePart :: Maybe Int -> Maybe Int -> Maybe Int -> ReadFilePart

-- | Identifier of the file. The file must be located in the TDLib file
--   cache
[file_id] :: ReadFilePart -> Maybe Int

-- | The offset from which to read the file
[offset] :: ReadFilePart -> Maybe Int

-- | Number of bytes to read. An error will be returned if there are not
--   enough bytes available in the file from the specified position. Pass 0
--   to read all available data from the specified position
[count] :: ReadFilePart -> Maybe Int
defaultReadFilePart :: ReadFilePart
instance GHC.Show.Show TD.Query.ReadFilePart.ReadFilePart
instance GHC.Classes.Eq TD.Query.ReadFilePart.ReadFilePart
instance TD.Lib.Internal.ShortShow TD.Query.ReadFilePart.ReadFilePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReadFilePart.ReadFilePart

module TD.Query.ReaddQuickReplyShortcutMessages

-- | Readds quick reply messages which failed to add. Can be called only
--   for messages for which messageSendingStateFailed.can_retry is true and
--   after specified in messageSendingStateFailed.retry_after time passed.
--   If a message is readded, the corresponding failed to send message is
--   deleted. Returns the sent messages in the same order as the message
--   identifiers passed in message_ids. If a message can't be readded, null
--   will be returned instead of the message. Returns
--   <a>QuickReplyMessages</a>
data ReaddQuickReplyShortcutMessages
ReaddQuickReplyShortcutMessages :: Maybe Text -> Maybe [Int] -> ReaddQuickReplyShortcutMessages

-- | Name of the target shortcut
[shortcut_name] :: ReaddQuickReplyShortcutMessages -> Maybe Text

-- | Identifiers of the quick reply messages to readd. Message identifiers
--   must be in a strictly increasing order
[message_ids] :: ReaddQuickReplyShortcutMessages -> Maybe [Int]
defaultReaddQuickReplyShortcutMessages :: ReaddQuickReplyShortcutMessages
instance GHC.Show.Show TD.Query.ReaddQuickReplyShortcutMessages.ReaddQuickReplyShortcutMessages
instance GHC.Classes.Eq TD.Query.ReaddQuickReplyShortcutMessages.ReaddQuickReplyShortcutMessages
instance TD.Lib.Internal.ShortShow TD.Query.ReaddQuickReplyShortcutMessages.ReaddQuickReplyShortcutMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReaddQuickReplyShortcutMessages.ReaddQuickReplyShortcutMessages

module TD.Query.RecognizeSpeech

-- | Recognizes speech in a video note or a voice note message. The message
--   must be successfully sent, must not be scheduled, and must be from a
--   non-secret chat. Returns <a>Ok</a>
data RecognizeSpeech
RecognizeSpeech :: Maybe Int -> Maybe Int -> RecognizeSpeech

-- | Identifier of the chat to which the message belongs
[chat_id] :: RecognizeSpeech -> Maybe Int

-- | Identifier of the message
[message_id] :: RecognizeSpeech -> Maybe Int
defaultRecognizeSpeech :: RecognizeSpeech
instance GHC.Show.Show TD.Query.RecognizeSpeech.RecognizeSpeech
instance GHC.Classes.Eq TD.Query.RecognizeSpeech.RecognizeSpeech
instance TD.Lib.Internal.ShortShow TD.Query.RecognizeSpeech.RecognizeSpeech
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecognizeSpeech.RecognizeSpeech

module TD.Query.RecoverAuthenticationPassword

-- | Recovers the 2-step verification password with a password recovery
--   code sent to an email address that was previously set up. Works only
--   when the current authorization state is
--   authorizationStateWaitPassword. Returns <a>Ok</a>
data RecoverAuthenticationPassword
RecoverAuthenticationPassword :: Maybe Text -> Maybe Text -> Maybe Text -> RecoverAuthenticationPassword

-- | Recovery code to check
[recovery_code] :: RecoverAuthenticationPassword -> Maybe Text

-- | New 2-step verification password of the user; may be empty to remove
--   the password
[new_password] :: RecoverAuthenticationPassword -> Maybe Text

-- | New password hint; may be empty
[new_hint] :: RecoverAuthenticationPassword -> Maybe Text
defaultRecoverAuthenticationPassword :: RecoverAuthenticationPassword
instance GHC.Show.Show TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword
instance GHC.Classes.Eq TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword
instance TD.Lib.Internal.ShortShow TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecoverAuthenticationPassword.RecoverAuthenticationPassword

module TD.Query.RecoverPassword

-- | Recovers the 2-step verification password using a recovery code sent
--   to an email address that was previously set up. Returns
--   <a>PasswordState</a>
data RecoverPassword
RecoverPassword :: Maybe Text -> Maybe Text -> Maybe Text -> RecoverPassword

-- | Recovery code to check
[recovery_code] :: RecoverPassword -> Maybe Text

-- | New 2-step verification password of the user; may be empty to remove
--   the password
[new_password] :: RecoverPassword -> Maybe Text

-- | New password hint; may be empty
[new_hint] :: RecoverPassword -> Maybe Text
defaultRecoverPassword :: RecoverPassword
instance GHC.Show.Show TD.Query.RecoverPassword.RecoverPassword
instance GHC.Classes.Eq TD.Query.RecoverPassword.RecoverPassword
instance TD.Lib.Internal.ShortShow TD.Query.RecoverPassword.RecoverPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RecoverPassword.RecoverPassword

module TD.Query.RegisterDevice

-- | Registers the currently used device for receiving push notifications.
--   Returns a globally unique identifier of the push notification
--   subscription. Returns <a>PushReceiverId</a>
data RegisterDevice
RegisterDevice :: Maybe DeviceToken -> Maybe [Int] -> RegisterDevice

-- | Device token
[device_token] :: RegisterDevice -> Maybe DeviceToken

-- | List of user identifiers of other users currently using the
--   application
[other_user_ids] :: RegisterDevice -> Maybe [Int]
defaultRegisterDevice :: RegisterDevice
instance GHC.Show.Show TD.Query.RegisterDevice.RegisterDevice
instance GHC.Classes.Eq TD.Query.RegisterDevice.RegisterDevice
instance TD.Lib.Internal.ShortShow TD.Query.RegisterDevice.RegisterDevice
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RegisterDevice.RegisterDevice

module TD.Query.RegisterUser

-- | Finishes user registration. Works only when the current authorization
--   state is authorizationStateWaitRegistration. Returns <a>Ok</a>
data RegisterUser
RegisterUser :: Maybe Text -> Maybe Text -> Maybe Bool -> RegisterUser

-- | The first name of the user; 1-64 characters
[first_name] :: RegisterUser -> Maybe Text

-- | The last name of the user; 0-64 characters
[last_name] :: RegisterUser -> Maybe Text

-- | Pass true to disable notification about the current user joining
--   Telegram for other users that added them to contact list
[disable_notification] :: RegisterUser -> Maybe Bool
defaultRegisterUser :: RegisterUser
instance GHC.Show.Show TD.Query.RegisterUser.RegisterUser
instance GHC.Classes.Eq TD.Query.RegisterUser.RegisterUser
instance TD.Lib.Internal.ShortShow TD.Query.RegisterUser.RegisterUser
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RegisterUser.RegisterUser

module TD.Query.RemoveAllFilesFromDownloads

-- | Removes all files from the file download list. Returns <a>Ok</a>
data RemoveAllFilesFromDownloads
RemoveAllFilesFromDownloads :: Maybe Bool -> Maybe Bool -> Maybe Bool -> RemoveAllFilesFromDownloads

-- | Pass true to remove only active downloads, including paused
[only_active] :: RemoveAllFilesFromDownloads -> Maybe Bool

-- | Pass true to remove only completed downloads
[only_completed] :: RemoveAllFilesFromDownloads -> Maybe Bool

-- | Pass true to delete the file from the TDLib file cache
[delete_from_cache] :: RemoveAllFilesFromDownloads -> Maybe Bool
defaultRemoveAllFilesFromDownloads :: RemoveAllFilesFromDownloads
instance GHC.Show.Show TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads
instance GHC.Classes.Eq TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads
instance TD.Lib.Internal.ShortShow TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveAllFilesFromDownloads.RemoveAllFilesFromDownloads

module TD.Query.RemoveBusinessConnectedBotFromChat

-- | Removes the connected business bot from a specific chat by adding the
--   chat to businessRecipients.excluded_chat_ids. Returns <a>Ok</a>
data RemoveBusinessConnectedBotFromChat
RemoveBusinessConnectedBotFromChat :: Maybe Int -> RemoveBusinessConnectedBotFromChat

-- | Chat identifier
[chat_id] :: RemoveBusinessConnectedBotFromChat -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveBusinessConnectedBotFromChat.RemoveBusinessConnectedBotFromChat
instance GHC.Classes.Eq TD.Query.RemoveBusinessConnectedBotFromChat.RemoveBusinessConnectedBotFromChat
instance TD.Lib.Internal.ShortShow TD.Query.RemoveBusinessConnectedBotFromChat.RemoveBusinessConnectedBotFromChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveBusinessConnectedBotFromChat.RemoveBusinessConnectedBotFromChat

module TD.Query.RemoveChatActionBar

-- | Removes a chat action bar without any other action. Returns <a>Ok</a>
data RemoveChatActionBar
RemoveChatActionBar :: Maybe Int -> RemoveChatActionBar

-- | Chat identifier
[chat_id] :: RemoveChatActionBar -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveChatActionBar.RemoveChatActionBar
instance GHC.Classes.Eq TD.Query.RemoveChatActionBar.RemoveChatActionBar
instance TD.Lib.Internal.ShortShow TD.Query.RemoveChatActionBar.RemoveChatActionBar
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveChatActionBar.RemoveChatActionBar

module TD.Query.RemoveContacts

-- | Removes users from the contact list. Returns <a>Ok</a>
data RemoveContacts
RemoveContacts :: Maybe [Int] -> RemoveContacts

-- | Identifiers of users to be deleted
[user_ids] :: RemoveContacts -> Maybe [Int]
instance GHC.Show.Show TD.Query.RemoveContacts.RemoveContacts
instance GHC.Classes.Eq TD.Query.RemoveContacts.RemoveContacts
instance TD.Lib.Internal.ShortShow TD.Query.RemoveContacts.RemoveContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveContacts.RemoveContacts

module TD.Query.RemoveFavoriteSticker

-- | Removes a sticker from the list of favorite stickers. Returns
--   <a>Ok</a>
data RemoveFavoriteSticker
RemoveFavoriteSticker :: Maybe InputFile -> RemoveFavoriteSticker

-- | Sticker file to delete from the list
[sticker] :: RemoveFavoriteSticker -> Maybe InputFile
instance GHC.Show.Show TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker
instance GHC.Classes.Eq TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker
instance TD.Lib.Internal.ShortShow TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveFavoriteSticker.RemoveFavoriteSticker

module TD.Query.RemoveFileFromDownloads

-- | Removes a file from the file download list. Returns <a>Ok</a>
data RemoveFileFromDownloads
RemoveFileFromDownloads :: Maybe Int -> Maybe Bool -> RemoveFileFromDownloads

-- | Identifier of the downloaded file
[file_id] :: RemoveFileFromDownloads -> Maybe Int

-- | Pass true to delete the file from the TDLib file cache
[delete_from_cache] :: RemoveFileFromDownloads -> Maybe Bool
defaultRemoveFileFromDownloads :: RemoveFileFromDownloads
instance GHC.Show.Show TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads
instance GHC.Classes.Eq TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads
instance TD.Lib.Internal.ShortShow TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveFileFromDownloads.RemoveFileFromDownloads

module TD.Query.RemoveInstalledBackground

-- | Removes background from the list of installed backgrounds. Returns
--   <a>Ok</a>
data RemoveInstalledBackground
RemoveInstalledBackground :: Maybe Int -> RemoveInstalledBackground

-- | The background identifier
[background_id] :: RemoveInstalledBackground -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveInstalledBackground.RemoveInstalledBackground
instance GHC.Classes.Eq TD.Query.RemoveInstalledBackground.RemoveInstalledBackground
instance TD.Lib.Internal.ShortShow TD.Query.RemoveInstalledBackground.RemoveInstalledBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveInstalledBackground.RemoveInstalledBackground

module TD.Query.RemoveMessageReaction

-- | Removes a reaction from a message. A chosen reaction can always be
--   removed. Returns <a>Ok</a>
data RemoveMessageReaction
RemoveMessageReaction :: Maybe Int -> Maybe Int -> Maybe ReactionType -> RemoveMessageReaction

-- | Identifier of the chat to which the message belongs
[chat_id] :: RemoveMessageReaction -> Maybe Int

-- | Identifier of the message
[message_id] :: RemoveMessageReaction -> Maybe Int

-- | Type of the reaction to remove
[reaction_type] :: RemoveMessageReaction -> Maybe ReactionType
defaultRemoveMessageReaction :: RemoveMessageReaction
instance GHC.Show.Show TD.Query.RemoveMessageReaction.RemoveMessageReaction
instance GHC.Classes.Eq TD.Query.RemoveMessageReaction.RemoveMessageReaction
instance TD.Lib.Internal.ShortShow TD.Query.RemoveMessageReaction.RemoveMessageReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveMessageReaction.RemoveMessageReaction

module TD.Query.RemoveNotification

-- | Removes an active notification from notification list. Needs to be
--   called only if the notification is removed by the current user.
--   Returns <a>Ok</a>
data RemoveNotification
RemoveNotification :: Maybe Int -> Maybe Int -> RemoveNotification

-- | Identifier of notification group to which the notification belongs
[notification_group_id] :: RemoveNotification -> Maybe Int

-- | Identifier of removed notification
[notification_id] :: RemoveNotification -> Maybe Int
defaultRemoveNotification :: RemoveNotification
instance GHC.Show.Show TD.Query.RemoveNotification.RemoveNotification
instance GHC.Classes.Eq TD.Query.RemoveNotification.RemoveNotification
instance TD.Lib.Internal.ShortShow TD.Query.RemoveNotification.RemoveNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveNotification.RemoveNotification

module TD.Query.RemoveNotificationGroup

-- | Removes a group of active notifications. Needs to be called only if
--   the notification group is removed by the current user. Returns
--   <a>Ok</a>
data RemoveNotificationGroup
RemoveNotificationGroup :: Maybe Int -> Maybe Int -> RemoveNotificationGroup

-- | Notification group identifier
[notification_group_id] :: RemoveNotificationGroup -> Maybe Int

-- | The maximum identifier of removed notifications
[max_notification_id] :: RemoveNotificationGroup -> Maybe Int
defaultRemoveNotificationGroup :: RemoveNotificationGroup
instance GHC.Show.Show TD.Query.RemoveNotificationGroup.RemoveNotificationGroup
instance GHC.Classes.Eq TD.Query.RemoveNotificationGroup.RemoveNotificationGroup
instance TD.Lib.Internal.ShortShow TD.Query.RemoveNotificationGroup.RemoveNotificationGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveNotificationGroup.RemoveNotificationGroup

module TD.Query.RemoveProxy

-- | Removes a proxy server. Can be called before authorization. Returns
--   <a>Ok</a>
data RemoveProxy
RemoveProxy :: Maybe Int -> RemoveProxy

-- | Proxy identifier
[proxy_id] :: RemoveProxy -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveProxy.RemoveProxy
instance GHC.Classes.Eq TD.Query.RemoveProxy.RemoveProxy
instance TD.Lib.Internal.ShortShow TD.Query.RemoveProxy.RemoveProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveProxy.RemoveProxy

module TD.Query.RemoveRecentHashtag

-- | Removes a hashtag from the list of recently used hashtags. Returns
--   <a>Ok</a>
data RemoveRecentHashtag
RemoveRecentHashtag :: Maybe Text -> RemoveRecentHashtag

-- | Hashtag to delete
[hashtag] :: RemoveRecentHashtag -> Maybe Text
instance GHC.Show.Show TD.Query.RemoveRecentHashtag.RemoveRecentHashtag
instance GHC.Classes.Eq TD.Query.RemoveRecentHashtag.RemoveRecentHashtag
instance TD.Lib.Internal.ShortShow TD.Query.RemoveRecentHashtag.RemoveRecentHashtag
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentHashtag.RemoveRecentHashtag

module TD.Query.RemoveRecentSticker

-- | Removes a sticker from the list of recently used stickers. Returns
--   <a>Ok</a>
data RemoveRecentSticker
RemoveRecentSticker :: Maybe Bool -> Maybe InputFile -> RemoveRecentSticker

-- | Pass true to remove the sticker from the list of stickers recently
--   attached to photo or video files; pass false to remove the sticker
--   from the list of recently sent stickers
[is_attached] :: RemoveRecentSticker -> Maybe Bool

-- | Sticker file to delete
[sticker] :: RemoveRecentSticker -> Maybe InputFile
defaultRemoveRecentSticker :: RemoveRecentSticker
instance GHC.Show.Show TD.Query.RemoveRecentSticker.RemoveRecentSticker
instance GHC.Classes.Eq TD.Query.RemoveRecentSticker.RemoveRecentSticker
instance TD.Lib.Internal.ShortShow TD.Query.RemoveRecentSticker.RemoveRecentSticker
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentSticker.RemoveRecentSticker

module TD.Query.RemoveRecentlyFoundChat

-- | Removes a chat from the list of recently found chats. Returns
--   <a>Ok</a>
data RemoveRecentlyFoundChat
RemoveRecentlyFoundChat :: Maybe Int -> RemoveRecentlyFoundChat

-- | Identifier of the chat to be removed
[chat_id] :: RemoveRecentlyFoundChat -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat
instance GHC.Classes.Eq TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat
instance TD.Lib.Internal.ShortShow TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveRecentlyFoundChat.RemoveRecentlyFoundChat

module TD.Query.RemoveSavedAnimation

-- | Removes an animation from the list of saved animations. Returns
--   <a>Ok</a>
data RemoveSavedAnimation
RemoveSavedAnimation :: Maybe InputFile -> RemoveSavedAnimation

-- | Animation file to be removed
[animation] :: RemoveSavedAnimation -> Maybe InputFile
instance GHC.Show.Show TD.Query.RemoveSavedAnimation.RemoveSavedAnimation
instance GHC.Classes.Eq TD.Query.RemoveSavedAnimation.RemoveSavedAnimation
instance TD.Lib.Internal.ShortShow TD.Query.RemoveSavedAnimation.RemoveSavedAnimation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveSavedAnimation.RemoveSavedAnimation

module TD.Query.RemoveSavedNotificationSound

-- | Removes a notification sound from the list of saved notification
--   sounds. Returns <a>Ok</a>
data RemoveSavedNotificationSound
RemoveSavedNotificationSound :: Maybe Int -> RemoveSavedNotificationSound

-- | Identifier of the notification sound
[notification_sound_id] :: RemoveSavedNotificationSound -> Maybe Int
instance GHC.Show.Show TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound
instance GHC.Classes.Eq TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound
instance TD.Lib.Internal.ShortShow TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveSavedNotificationSound.RemoveSavedNotificationSound

module TD.Query.RemoveStickerFromSet

-- | Removes a sticker from the set to which it belongs. The sticker set
--   must be owned by the current user. Returns <a>Ok</a>
data RemoveStickerFromSet
RemoveStickerFromSet :: Maybe InputFile -> RemoveStickerFromSet

-- | Sticker to remove from the set
[sticker] :: RemoveStickerFromSet -> Maybe InputFile
instance GHC.Show.Show TD.Query.RemoveStickerFromSet.RemoveStickerFromSet
instance GHC.Classes.Eq TD.Query.RemoveStickerFromSet.RemoveStickerFromSet
instance TD.Lib.Internal.ShortShow TD.Query.RemoveStickerFromSet.RemoveStickerFromSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveStickerFromSet.RemoveStickerFromSet

module TD.Query.RemoveTopChat

-- | Removes a chat from the list of frequently used chats. Supported only
--   if the chat info database is enabled. Returns <a>Ok</a>
data RemoveTopChat
RemoveTopChat :: Maybe TopChatCategory -> Maybe Int -> RemoveTopChat

-- | Category of frequently used chats
[category] :: RemoveTopChat -> Maybe TopChatCategory

-- | Chat identifier
[chat_id] :: RemoveTopChat -> Maybe Int
defaultRemoveTopChat :: RemoveTopChat
instance GHC.Show.Show TD.Query.RemoveTopChat.RemoveTopChat
instance GHC.Classes.Eq TD.Query.RemoveTopChat.RemoveTopChat
instance TD.Lib.Internal.ShortShow TD.Query.RemoveTopChat.RemoveTopChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RemoveTopChat.RemoveTopChat

module TD.Query.ReorderActiveUsernames

-- | Changes order of active usernames of the current user. Returns
--   <a>Ok</a>
data ReorderActiveUsernames
ReorderActiveUsernames :: Maybe [Text] -> ReorderActiveUsernames

-- | The new order of active usernames. All currently active usernames must
--   be specified
[usernames] :: ReorderActiveUsernames -> Maybe [Text]
instance GHC.Show.Show TD.Query.ReorderActiveUsernames.ReorderActiveUsernames
instance GHC.Classes.Eq TD.Query.ReorderActiveUsernames.ReorderActiveUsernames
instance TD.Lib.Internal.ShortShow TD.Query.ReorderActiveUsernames.ReorderActiveUsernames
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderActiveUsernames.ReorderActiveUsernames

module TD.Query.ReorderBotActiveUsernames

-- | Changes order of active usernames of a bot. Can be called only if
--   userTypeBot.can_be_edited == true. Returns <a>Ok</a>
data ReorderBotActiveUsernames
ReorderBotActiveUsernames :: Maybe Int -> Maybe [Text] -> ReorderBotActiveUsernames

-- | Identifier of the target bot
[bot_user_id] :: ReorderBotActiveUsernames -> Maybe Int

-- | The new order of active usernames. All currently active usernames must
--   be specified
[usernames] :: ReorderBotActiveUsernames -> Maybe [Text]
defaultReorderBotActiveUsernames :: ReorderBotActiveUsernames
instance GHC.Show.Show TD.Query.ReorderBotActiveUsernames.ReorderBotActiveUsernames
instance GHC.Classes.Eq TD.Query.ReorderBotActiveUsernames.ReorderBotActiveUsernames
instance TD.Lib.Internal.ShortShow TD.Query.ReorderBotActiveUsernames.ReorderBotActiveUsernames
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderBotActiveUsernames.ReorderBotActiveUsernames

module TD.Query.ReorderChatFolders

-- | Changes the order of chat folders. Returns <a>Ok</a>
data ReorderChatFolders
ReorderChatFolders :: Maybe [Int] -> Maybe Int -> ReorderChatFolders

-- | Identifiers of chat folders in the new correct order
[chat_folder_ids] :: ReorderChatFolders -> Maybe [Int]

-- | Position of the main chat list among chat folders, 0-based. Can be
--   non-zero only for Premium users
[main_chat_list_position] :: ReorderChatFolders -> Maybe Int
defaultReorderChatFolders :: ReorderChatFolders
instance GHC.Show.Show TD.Query.ReorderChatFolders.ReorderChatFolders
instance GHC.Classes.Eq TD.Query.ReorderChatFolders.ReorderChatFolders
instance TD.Lib.Internal.ShortShow TD.Query.ReorderChatFolders.ReorderChatFolders
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderChatFolders.ReorderChatFolders

module TD.Query.ReorderInstalledStickerSets

-- | Changes the order of installed sticker sets. Returns <a>Ok</a>
data ReorderInstalledStickerSets
ReorderInstalledStickerSets :: Maybe StickerType -> Maybe [Int] -> ReorderInstalledStickerSets

-- | Type of the sticker sets to reorder
[sticker_type] :: ReorderInstalledStickerSets -> Maybe StickerType

-- | Identifiers of installed sticker sets in the new correct order
[sticker_set_ids] :: ReorderInstalledStickerSets -> Maybe [Int]
defaultReorderInstalledStickerSets :: ReorderInstalledStickerSets
instance GHC.Show.Show TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets
instance GHC.Classes.Eq TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderInstalledStickerSets.ReorderInstalledStickerSets

module TD.Query.ReorderQuickReplyShortcuts

-- | Changes the order of quick reply shortcuts. Returns <a>Ok</a>
data ReorderQuickReplyShortcuts
ReorderQuickReplyShortcuts :: Maybe [Int] -> ReorderQuickReplyShortcuts

-- | The new order of quick reply shortcuts
[shortcut_ids] :: ReorderQuickReplyShortcuts -> Maybe [Int]
instance GHC.Show.Show TD.Query.ReorderQuickReplyShortcuts.ReorderQuickReplyShortcuts
instance GHC.Classes.Eq TD.Query.ReorderQuickReplyShortcuts.ReorderQuickReplyShortcuts
instance TD.Lib.Internal.ShortShow TD.Query.ReorderQuickReplyShortcuts.ReorderQuickReplyShortcuts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderQuickReplyShortcuts.ReorderQuickReplyShortcuts

module TD.Query.ReorderSupergroupActiveUsernames

-- | Changes order of active usernames of a supergroup or channel, requires
--   owner privileges in the supergroup or channel. Returns <a>Ok</a>
data ReorderSupergroupActiveUsernames
ReorderSupergroupActiveUsernames :: Maybe Int -> Maybe [Text] -> ReorderSupergroupActiveUsernames

-- | Identifier of the supergroup or channel
[supergroup_id] :: ReorderSupergroupActiveUsernames -> Maybe Int

-- | The new order of active usernames. All currently active usernames must
--   be specified
[usernames] :: ReorderSupergroupActiveUsernames -> Maybe [Text]
defaultReorderSupergroupActiveUsernames :: ReorderSupergroupActiveUsernames
instance GHC.Show.Show TD.Query.ReorderSupergroupActiveUsernames.ReorderSupergroupActiveUsernames
instance GHC.Classes.Eq TD.Query.ReorderSupergroupActiveUsernames.ReorderSupergroupActiveUsernames
instance TD.Lib.Internal.ShortShow TD.Query.ReorderSupergroupActiveUsernames.ReorderSupergroupActiveUsernames
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReorderSupergroupActiveUsernames.ReorderSupergroupActiveUsernames

module TD.Query.ReplacePrimaryChatInviteLink

-- | Replaces current primary invite link for a chat with a new primary
--   invite link. Available for basic groups, supergroups, and channels.
--   Requires administrator privileges and can_invite_users right. Returns
--   <a>ChatInviteLink</a>
data ReplacePrimaryChatInviteLink
ReplacePrimaryChatInviteLink :: Maybe Int -> ReplacePrimaryChatInviteLink

-- | Chat identifier
[chat_id] :: ReplacePrimaryChatInviteLink -> Maybe Int
instance GHC.Show.Show TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink
instance GHC.Classes.Eq TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReplacePrimaryChatInviteLink.ReplacePrimaryChatInviteLink

module TD.Query.ReplaceStickerInSet

-- | Replaces existing sticker in a set. The function is equivalent to
--   removeStickerFromSet, then addStickerToSet, then
--   setStickerPositionInSet. Returns <a>Ok</a>
data ReplaceStickerInSet
ReplaceStickerInSet :: Maybe Int -> Maybe Text -> Maybe InputFile -> Maybe InputSticker -> ReplaceStickerInSet

-- | Sticker set owner; ignored for regular users
[user_id] :: ReplaceStickerInSet -> Maybe Int

-- | Sticker set name. The sticker set must be owned by the current user
[name] :: ReplaceStickerInSet -> Maybe Text

-- | Sticker to remove from the set
[old_sticker] :: ReplaceStickerInSet -> Maybe InputFile

-- | Sticker to add to the set
[new_sticker] :: ReplaceStickerInSet -> Maybe InputSticker
defaultReplaceStickerInSet :: ReplaceStickerInSet
instance GHC.Show.Show TD.Query.ReplaceStickerInSet.ReplaceStickerInSet
instance GHC.Classes.Eq TD.Query.ReplaceStickerInSet.ReplaceStickerInSet
instance TD.Lib.Internal.ShortShow TD.Query.ReplaceStickerInSet.ReplaceStickerInSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReplaceStickerInSet.ReplaceStickerInSet

module TD.Query.ReplaceVideoChatRtmpUrl

-- | Replaces the current RTMP URL for streaming to the chat; requires
--   owner privileges. Returns <a>RtmpUrl</a>
data ReplaceVideoChatRtmpUrl
ReplaceVideoChatRtmpUrl :: Maybe Int -> ReplaceVideoChatRtmpUrl

-- | Chat identifier
[chat_id] :: ReplaceVideoChatRtmpUrl -> Maybe Int
instance GHC.Show.Show TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl
instance GHC.Classes.Eq TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl
instance TD.Lib.Internal.ShortShow TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReplaceVideoChatRtmpUrl.ReplaceVideoChatRtmpUrl

module TD.Query.ReportAuthenticationCodeMissing

-- | Reports that authentication code wasn't delivered via SMS; for
--   official mobile apps only. Works only when the current authorization
--   state is authorizationStateWaitCode. Returns <a>Ok</a>
data ReportAuthenticationCodeMissing
ReportAuthenticationCodeMissing :: Maybe Text -> ReportAuthenticationCodeMissing

-- | Current mobile network code
[mobile_network_code] :: ReportAuthenticationCodeMissing -> Maybe Text
instance GHC.Show.Show TD.Query.ReportAuthenticationCodeMissing.ReportAuthenticationCodeMissing
instance GHC.Classes.Eq TD.Query.ReportAuthenticationCodeMissing.ReportAuthenticationCodeMissing
instance TD.Lib.Internal.ShortShow TD.Query.ReportAuthenticationCodeMissing.ReportAuthenticationCodeMissing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportAuthenticationCodeMissing.ReportAuthenticationCodeMissing

module TD.Query.ReportChat

-- | Reports a chat to the Telegram moderators. A chat can be reported only
--   from the chat action bar, or if chat.can_be_reported. Returns
--   <a>Ok</a>
data ReportChat
ReportChat :: Maybe Int -> Maybe [Int] -> Maybe ReportReason -> Maybe Text -> ReportChat

-- | Chat identifier
[chat_id] :: ReportChat -> Maybe Int

-- | Identifiers of reported messages; may be empty to report the whole
--   chat
[message_ids] :: ReportChat -> Maybe [Int]

-- | The reason for reporting the chat
[reason] :: ReportChat -> Maybe ReportReason

-- | Additional report details; 0-1024 characters
[text] :: ReportChat -> Maybe Text
defaultReportChat :: ReportChat
instance GHC.Show.Show TD.Query.ReportChat.ReportChat
instance GHC.Classes.Eq TD.Query.ReportChat.ReportChat
instance TD.Lib.Internal.ShortShow TD.Query.ReportChat.ReportChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportChat.ReportChat

module TD.Query.ReportChatPhoto

-- | Reports a chat photo to the Telegram moderators. A chat photo can be
--   reported only if chat.can_be_reported. Returns <a>Ok</a>
data ReportChatPhoto
ReportChatPhoto :: Maybe Int -> Maybe Int -> Maybe ReportReason -> Maybe Text -> ReportChatPhoto

-- | Chat identifier
[chat_id] :: ReportChatPhoto -> Maybe Int

-- | Identifier of the photo to report. Only full photos from chatPhoto can
--   be reported
[file_id] :: ReportChatPhoto -> Maybe Int

-- | The reason for reporting the chat photo
[reason] :: ReportChatPhoto -> Maybe ReportReason

-- | Additional report details; 0-1024 characters
[text] :: ReportChatPhoto -> Maybe Text
defaultReportChatPhoto :: ReportChatPhoto
instance GHC.Show.Show TD.Query.ReportChatPhoto.ReportChatPhoto
instance GHC.Classes.Eq TD.Query.ReportChatPhoto.ReportChatPhoto
instance TD.Lib.Internal.ShortShow TD.Query.ReportChatPhoto.ReportChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportChatPhoto.ReportChatPhoto

module TD.Query.ReportChatSponsoredMessage

-- | Reports a sponsored message to Telegram moderators. Returns
--   <a>ReportChatSponsoredMessageResult</a>
data ReportChatSponsoredMessage
ReportChatSponsoredMessage :: Maybe Int -> Maybe Int -> Maybe ByteString -> ReportChatSponsoredMessage

-- | Chat identifier of the sponsored message
[chat_id] :: ReportChatSponsoredMessage -> Maybe Int

-- | Identifier of the sponsored message
[message_id] :: ReportChatSponsoredMessage -> Maybe Int

-- | Option identifier chosen by the user; leave empty for the initial
--   request
[option_id] :: ReportChatSponsoredMessage -> Maybe ByteString
defaultReportChatSponsoredMessage :: ReportChatSponsoredMessage
instance GHC.Show.Show TD.Query.ReportChatSponsoredMessage.ReportChatSponsoredMessage
instance GHC.Classes.Eq TD.Query.ReportChatSponsoredMessage.ReportChatSponsoredMessage
instance TD.Lib.Internal.ShortShow TD.Query.ReportChatSponsoredMessage.ReportChatSponsoredMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportChatSponsoredMessage.ReportChatSponsoredMessage

module TD.Query.ReportMessageReactions

-- | Reports reactions set on a message to the Telegram moderators.
--   Reactions on a message can be reported only if
--   message.can_report_reactions. Returns <a>Ok</a>
data ReportMessageReactions
ReportMessageReactions :: Maybe Int -> Maybe Int -> Maybe MessageSender -> ReportMessageReactions

-- | Chat identifier
[chat_id] :: ReportMessageReactions -> Maybe Int

-- | Message identifier
[message_id] :: ReportMessageReactions -> Maybe Int

-- | Identifier of the sender, which added the reaction
[sender_id] :: ReportMessageReactions -> Maybe MessageSender
defaultReportMessageReactions :: ReportMessageReactions
instance GHC.Show.Show TD.Query.ReportMessageReactions.ReportMessageReactions
instance GHC.Classes.Eq TD.Query.ReportMessageReactions.ReportMessageReactions
instance TD.Lib.Internal.ShortShow TD.Query.ReportMessageReactions.ReportMessageReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportMessageReactions.ReportMessageReactions

module TD.Query.ReportPhoneNumberCodeMissing

-- | Reports that authentication code wasn't delivered via SMS to the
--   specified phone number; for official mobile apps only. Returns
--   <a>Ok</a>
data ReportPhoneNumberCodeMissing
ReportPhoneNumberCodeMissing :: Maybe Text -> ReportPhoneNumberCodeMissing

-- | Current mobile network code
[mobile_network_code] :: ReportPhoneNumberCodeMissing -> Maybe Text
instance GHC.Show.Show TD.Query.ReportPhoneNumberCodeMissing.ReportPhoneNumberCodeMissing
instance GHC.Classes.Eq TD.Query.ReportPhoneNumberCodeMissing.ReportPhoneNumberCodeMissing
instance TD.Lib.Internal.ShortShow TD.Query.ReportPhoneNumberCodeMissing.ReportPhoneNumberCodeMissing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportPhoneNumberCodeMissing.ReportPhoneNumberCodeMissing

module TD.Query.ReportStory

-- | Reports a story to the Telegram moderators. Returns <a>Ok</a>
data ReportStory
ReportStory :: Maybe Int -> Maybe Int -> Maybe ReportReason -> Maybe Text -> ReportStory

-- | The identifier of the sender of the story to report
[story_sender_chat_id] :: ReportStory -> Maybe Int

-- | The identifier of the story to report
[story_id] :: ReportStory -> Maybe Int

-- | The reason for reporting the story
[reason] :: ReportStory -> Maybe ReportReason

-- | Additional report details; 0-1024 characters
[text] :: ReportStory -> Maybe Text
defaultReportStory :: ReportStory
instance GHC.Show.Show TD.Query.ReportStory.ReportStory
instance GHC.Classes.Eq TD.Query.ReportStory.ReportStory
instance TD.Lib.Internal.ShortShow TD.Query.ReportStory.ReportStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportStory.ReportStory

module TD.Query.ReportSupergroupAntiSpamFalsePositive

-- | Reports a false deletion of a message by aggressive anti-spam checks;
--   requires administrator rights in the supergroup. Can be called only
--   for messages from chatEventMessageDeleted with
--   can_report_anti_spam_false_positive == true. Returns <a>Ok</a>
data ReportSupergroupAntiSpamFalsePositive
ReportSupergroupAntiSpamFalsePositive :: Maybe Int -> Maybe Int -> ReportSupergroupAntiSpamFalsePositive

-- | Supergroup identifier
[supergroup_id] :: ReportSupergroupAntiSpamFalsePositive -> Maybe Int

-- | Identifier of the erroneously deleted message
[message_id] :: ReportSupergroupAntiSpamFalsePositive -> Maybe Int
defaultReportSupergroupAntiSpamFalsePositive :: ReportSupergroupAntiSpamFalsePositive
instance GHC.Show.Show TD.Query.ReportSupergroupAntiSpamFalsePositive.ReportSupergroupAntiSpamFalsePositive
instance GHC.Classes.Eq TD.Query.ReportSupergroupAntiSpamFalsePositive.ReportSupergroupAntiSpamFalsePositive
instance TD.Lib.Internal.ShortShow TD.Query.ReportSupergroupAntiSpamFalsePositive.ReportSupergroupAntiSpamFalsePositive
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportSupergroupAntiSpamFalsePositive.ReportSupergroupAntiSpamFalsePositive

module TD.Query.ReportSupergroupSpam

-- | Reports messages in a supergroup as spam; requires administrator
--   rights in the supergroup. Returns <a>Ok</a>
data ReportSupergroupSpam
ReportSupergroupSpam :: Maybe Int -> Maybe [Int] -> ReportSupergroupSpam

-- | Supergroup identifier
[supergroup_id] :: ReportSupergroupSpam -> Maybe Int

-- | Identifiers of messages to report
[message_ids] :: ReportSupergroupSpam -> Maybe [Int]
defaultReportSupergroupSpam :: ReportSupergroupSpam
instance GHC.Show.Show TD.Query.ReportSupergroupSpam.ReportSupergroupSpam
instance GHC.Classes.Eq TD.Query.ReportSupergroupSpam.ReportSupergroupSpam
instance TD.Lib.Internal.ShortShow TD.Query.ReportSupergroupSpam.ReportSupergroupSpam
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ReportSupergroupSpam.ReportSupergroupSpam

module TD.Query.RequestAuthenticationPasswordRecovery

-- | Requests to send a 2-step verification password recovery code to an
--   email address that was previously set up. Works only when the current
--   authorization state is authorizationStateWaitPassword. Returns
--   <a>Ok</a>
data RequestAuthenticationPasswordRecovery
RequestAuthenticationPasswordRecovery :: RequestAuthenticationPasswordRecovery
instance GHC.Show.Show TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery
instance GHC.Classes.Eq TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery
instance TD.Lib.Internal.ShortShow TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestAuthenticationPasswordRecovery.RequestAuthenticationPasswordRecovery

module TD.Query.RequestPasswordRecovery

-- | Requests to send a 2-step verification password recovery code to an
--   email address that was previously set up. Returns
--   <a>EmailAddressAuthenticationCodeInfo</a>
data RequestPasswordRecovery
RequestPasswordRecovery :: RequestPasswordRecovery
instance GHC.Show.Show TD.Query.RequestPasswordRecovery.RequestPasswordRecovery
instance GHC.Classes.Eq TD.Query.RequestPasswordRecovery.RequestPasswordRecovery
instance TD.Lib.Internal.ShortShow TD.Query.RequestPasswordRecovery.RequestPasswordRecovery
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestPasswordRecovery.RequestPasswordRecovery

module TD.Query.RequestQrCodeAuthentication

-- | Requests QR code authentication by scanning a QR code on another
--   logged in device. Works only when the current authorization state is
--   authorizationStateWaitPhoneNumber, or if there is no pending
--   authentication query and the current authorization state is
--   authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode,
--   authorizationStateWaitCode, authorizationStateWaitRegistration, or
--   authorizationStateWaitPassword. Returns <a>Ok</a>
data RequestQrCodeAuthentication
RequestQrCodeAuthentication :: Maybe [Int] -> RequestQrCodeAuthentication

-- | List of user identifiers of other users currently using the
--   application
[other_user_ids] :: RequestQrCodeAuthentication -> Maybe [Int]
instance GHC.Show.Show TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication
instance GHC.Classes.Eq TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication
instance TD.Lib.Internal.ShortShow TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RequestQrCodeAuthentication.RequestQrCodeAuthentication

module TD.Query.ResendAuthenticationCode

-- | Resends an authentication code to the user. Works only when the
--   current authorization state is authorizationStateWaitCode, the
--   next_code_type of the result is not null and the server-specified
--   timeout has passed, or when the current authorization state is
--   authorizationStateWaitEmailCode. Returns <a>Ok</a>
data ResendAuthenticationCode
ResendAuthenticationCode :: ResendAuthenticationCode
instance GHC.Show.Show TD.Query.ResendAuthenticationCode.ResendAuthenticationCode
instance GHC.Classes.Eq TD.Query.ResendAuthenticationCode.ResendAuthenticationCode
instance TD.Lib.Internal.ShortShow TD.Query.ResendAuthenticationCode.ResendAuthenticationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendAuthenticationCode.ResendAuthenticationCode

module TD.Query.ResendEmailAddressVerificationCode

-- | Resends the code to verify an email address to be added to a user's
--   Telegram Passport. Returns <a>EmailAddressAuthenticationCodeInfo</a>
data ResendEmailAddressVerificationCode
ResendEmailAddressVerificationCode :: ResendEmailAddressVerificationCode
instance GHC.Show.Show TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode
instance GHC.Classes.Eq TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode
instance TD.Lib.Internal.ShortShow TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendEmailAddressVerificationCode.ResendEmailAddressVerificationCode

module TD.Query.ResendLoginEmailAddressCode

-- | Resends the login email address verification code. Returns
--   <a>EmailAddressAuthenticationCodeInfo</a>
data ResendLoginEmailAddressCode
ResendLoginEmailAddressCode :: ResendLoginEmailAddressCode
instance GHC.Show.Show TD.Query.ResendLoginEmailAddressCode.ResendLoginEmailAddressCode
instance GHC.Classes.Eq TD.Query.ResendLoginEmailAddressCode.ResendLoginEmailAddressCode
instance TD.Lib.Internal.ShortShow TD.Query.ResendLoginEmailAddressCode.ResendLoginEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendLoginEmailAddressCode.ResendLoginEmailAddressCode

module TD.Query.ResendMessages

-- | Resends messages which failed to send. Can be called only for messages
--   for which messageSendingStateFailed.can_retry is true and after
--   specified in messageSendingStateFailed.retry_after time passed. If a
--   message is re-sent, the corresponding failed to send message is
--   deleted. Returns the sent messages in the same order as the message
--   identifiers passed in message_ids. If a message can't be re-sent, null
--   will be returned instead of the message. Returns <a>Messages</a>
data ResendMessages
ResendMessages :: Maybe Int -> Maybe [Int] -> Maybe InputTextQuote -> ResendMessages

-- | Identifier of the chat to send messages
[chat_id] :: ResendMessages -> Maybe Int

-- | Identifiers of the messages to resend. Message identifiers must be in
--   a strictly increasing order
[message_ids] :: ResendMessages -> Maybe [Int]

-- | New manually chosen quote from the message to be replied; pass null if
--   none. Ignored if more than one message is re-sent, or if
--   messageSendingStateFailed.need_another_reply_quote == false
[quote] :: ResendMessages -> Maybe InputTextQuote
defaultResendMessages :: ResendMessages
instance GHC.Show.Show TD.Query.ResendMessages.ResendMessages
instance GHC.Classes.Eq TD.Query.ResendMessages.ResendMessages
instance TD.Lib.Internal.ShortShow TD.Query.ResendMessages.ResendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendMessages.ResendMessages

module TD.Query.ResendPhoneNumberCode

-- | Resends the authentication code sent to a phone number. Works only if
--   the previously received authenticationCodeInfo next_code_type was not
--   null and the server-specified timeout has passed. Returns
--   <a>AuthenticationCodeInfo</a>
data ResendPhoneNumberCode
ResendPhoneNumberCode :: ResendPhoneNumberCode
instance GHC.Show.Show TD.Query.ResendPhoneNumberCode.ResendPhoneNumberCode
instance GHC.Classes.Eq TD.Query.ResendPhoneNumberCode.ResendPhoneNumberCode
instance TD.Lib.Internal.ShortShow TD.Query.ResendPhoneNumberCode.ResendPhoneNumberCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendPhoneNumberCode.ResendPhoneNumberCode

module TD.Query.ResendRecoveryEmailAddressCode

-- | Resends the 2-step verification recovery email address verification
--   code. Returns <a>PasswordState</a>
data ResendRecoveryEmailAddressCode
ResendRecoveryEmailAddressCode :: ResendRecoveryEmailAddressCode
instance GHC.Show.Show TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode
instance GHC.Classes.Eq TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode
instance TD.Lib.Internal.ShortShow TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResendRecoveryEmailAddressCode.ResendRecoveryEmailAddressCode

module TD.Query.ResetAllNotificationSettings

-- | Resets all chat and scope notification settings to their default
--   values. By default, all chats are unmuted and message previews are
--   shown. Returns <a>Ok</a>
data ResetAllNotificationSettings
ResetAllNotificationSettings :: ResetAllNotificationSettings
instance GHC.Show.Show TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings
instance GHC.Classes.Eq TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetAllNotificationSettings.ResetAllNotificationSettings

module TD.Query.ResetAuthenticationEmailAddress

-- | Resets the login email address. May return an error with a message
--   <a>TASK_ALREADY_EXISTS</a> if reset is still pending. Works only when
--   the current authorization state is authorizationStateWaitEmailCode and
--   authorization_state.can_reset_email_address == true. Returns <a>Ok</a>
data ResetAuthenticationEmailAddress
ResetAuthenticationEmailAddress :: ResetAuthenticationEmailAddress
instance GHC.Show.Show TD.Query.ResetAuthenticationEmailAddress.ResetAuthenticationEmailAddress
instance GHC.Classes.Eq TD.Query.ResetAuthenticationEmailAddress.ResetAuthenticationEmailAddress
instance TD.Lib.Internal.ShortShow TD.Query.ResetAuthenticationEmailAddress.ResetAuthenticationEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetAuthenticationEmailAddress.ResetAuthenticationEmailAddress

module TD.Query.ResetInstalledBackgrounds

-- | Resets list of installed backgrounds to its default value. Returns
--   <a>Ok</a>
data ResetInstalledBackgrounds
ResetInstalledBackgrounds :: ResetInstalledBackgrounds
instance GHC.Show.Show TD.Query.ResetInstalledBackgrounds.ResetInstalledBackgrounds
instance GHC.Classes.Eq TD.Query.ResetInstalledBackgrounds.ResetInstalledBackgrounds
instance TD.Lib.Internal.ShortShow TD.Query.ResetInstalledBackgrounds.ResetInstalledBackgrounds
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetInstalledBackgrounds.ResetInstalledBackgrounds

module TD.Query.ResetNetworkStatistics

-- | Resets all network data usage statistics to zero. Can be called before
--   authorization. Returns <a>Ok</a>
data ResetNetworkStatistics
ResetNetworkStatistics :: ResetNetworkStatistics
instance GHC.Show.Show TD.Query.ResetNetworkStatistics.ResetNetworkStatistics
instance GHC.Classes.Eq TD.Query.ResetNetworkStatistics.ResetNetworkStatistics
instance TD.Lib.Internal.ShortShow TD.Query.ResetNetworkStatistics.ResetNetworkStatistics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetNetworkStatistics.ResetNetworkStatistics

module TD.Query.ResetPassword

-- | Removes 2-step verification password without previous password and
--   access to recovery email address. The password can't be reset
--   immediately and the request needs to be repeated after the specified
--   time. Returns <a>ResetPasswordResult</a>
data ResetPassword
ResetPassword :: ResetPassword
instance GHC.Show.Show TD.Query.ResetPassword.ResetPassword
instance GHC.Classes.Eq TD.Query.ResetPassword.ResetPassword
instance TD.Lib.Internal.ShortShow TD.Query.ResetPassword.ResetPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ResetPassword.ResetPassword

module TD.Query.RevokeChatInviteLink

-- | Revokes invite link for a chat. Available for basic groups,
--   supergroups, and channels. Requires administrator privileges and
--   can_invite_users right in the chat for own links and owner privileges
--   for other links. If a primary link is revoked, then additionally to
--   the revoked link returns new primary link. Returns
--   <a>ChatInviteLinks</a>
data RevokeChatInviteLink
RevokeChatInviteLink :: Maybe Int -> Maybe Text -> RevokeChatInviteLink

-- | Chat identifier
[chat_id] :: RevokeChatInviteLink -> Maybe Int

-- | Invite link to be revoked
[invite_link] :: RevokeChatInviteLink -> Maybe Text
defaultRevokeChatInviteLink :: RevokeChatInviteLink
instance GHC.Show.Show TD.Query.RevokeChatInviteLink.RevokeChatInviteLink
instance GHC.Classes.Eq TD.Query.RevokeChatInviteLink.RevokeChatInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.RevokeChatInviteLink.RevokeChatInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RevokeChatInviteLink.RevokeChatInviteLink

module TD.Query.RevokeGroupCallInviteLink

-- | Revokes invite link for a group call. Requires
--   groupCall.can_be_managed group call flag. Returns <a>Ok</a>
data RevokeGroupCallInviteLink
RevokeGroupCallInviteLink :: Maybe Int -> RevokeGroupCallInviteLink

-- | Group call identifier
[group_call_id] :: RevokeGroupCallInviteLink -> Maybe Int
instance GHC.Show.Show TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink
instance GHC.Classes.Eq TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink
instance TD.Lib.Internal.ShortShow TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.RevokeGroupCallInviteLink.RevokeGroupCallInviteLink

module TD.Query.SaveApplicationLogEvent

-- | Saves application log event on the server. Can be called before
--   authorization. Returns <a>Ok</a>
data SaveApplicationLogEvent
SaveApplicationLogEvent :: Maybe Text -> Maybe Int -> Maybe JsonValue -> SaveApplicationLogEvent

-- | Event type
[_type] :: SaveApplicationLogEvent -> Maybe Text

-- | Optional chat identifier, associated with the event
[chat_id] :: SaveApplicationLogEvent -> Maybe Int

-- | The log event data
[_data] :: SaveApplicationLogEvent -> Maybe JsonValue
defaultSaveApplicationLogEvent :: SaveApplicationLogEvent
instance GHC.Show.Show TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent
instance GHC.Classes.Eq TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent
instance TD.Lib.Internal.ShortShow TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SaveApplicationLogEvent.SaveApplicationLogEvent

module TD.Query.SearchBackground

-- | Searches for a background by its name. Returns <a>Background</a>
data SearchBackground
SearchBackground :: Maybe Text -> SearchBackground

-- | The name of the background
[name] :: SearchBackground -> Maybe Text
instance GHC.Show.Show TD.Query.SearchBackground.SearchBackground
instance GHC.Classes.Eq TD.Query.SearchBackground.SearchBackground
instance TD.Lib.Internal.ShortShow TD.Query.SearchBackground.SearchBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchBackground.SearchBackground

module TD.Query.SearchCallMessages

-- | Searches for call messages. Returns the results in reverse
--   chronological order (i.e., in order of decreasing message_id). For
--   optimal performance, the number of returned messages is chosen by
--   TDLib. Returns <a>FoundMessages</a>
data SearchCallMessages
SearchCallMessages :: Maybe Text -> Maybe Int -> Maybe Bool -> SearchCallMessages

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchCallMessages -> Maybe Text

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchCallMessages -> Maybe Int

-- | Pass true to search only for messages with missed/declined calls
[only_missed] :: SearchCallMessages -> Maybe Bool
defaultSearchCallMessages :: SearchCallMessages
instance GHC.Show.Show TD.Query.SearchCallMessages.SearchCallMessages
instance GHC.Classes.Eq TD.Query.SearchCallMessages.SearchCallMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchCallMessages.SearchCallMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchCallMessages.SearchCallMessages

module TD.Query.SearchChatMembers

-- | Searches for a specified query in the first name, last name and
--   usernames of the members of a specified chat. Requires administrator
--   rights if the chat is a channel. Returns <a>ChatMembers</a>
data SearchChatMembers
SearchChatMembers :: Maybe Int -> Maybe Text -> Maybe Int -> Maybe ChatMembersFilter -> SearchChatMembers

-- | Chat identifier
[chat_id] :: SearchChatMembers -> Maybe Int

-- | Query to search for
[query] :: SearchChatMembers -> Maybe Text

-- | The maximum number of users to be returned; up to 200
[limit] :: SearchChatMembers -> Maybe Int

-- | The type of users to search for; pass null to search among all chat
--   members
[_filter] :: SearchChatMembers -> Maybe ChatMembersFilter
defaultSearchChatMembers :: SearchChatMembers
instance GHC.Show.Show TD.Query.SearchChatMembers.SearchChatMembers
instance GHC.Classes.Eq TD.Query.SearchChatMembers.SearchChatMembers
instance TD.Lib.Internal.ShortShow TD.Query.SearchChatMembers.SearchChatMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatMembers.SearchChatMembers

module TD.Query.SearchChatMessages

-- | Searches for messages with given words in the chat. Returns the
--   results in reverse chronological order, i.e. in order of decreasing
--   message_id. Cannot be used in secret chats with a non-empty query
--   (searchSecretMessages must be used instead), or without an enabled
--   message database. For optimal performance, the number of returned
--   messages is chosen by TDLib and can be smaller than the specified
--   limit. A combination of query, sender_id, filter and message_thread_id
--   search criteria is expected to be supported, only if it is required
--   for Telegram official application implementation. Returns
--   <a>FoundChatMessages</a>
data SearchChatMessages
SearchChatMessages :: Maybe Int -> Maybe Text -> Maybe MessageSender -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> SearchChatMessages

-- | Identifier of the chat in which to search messages
[chat_id] :: SearchChatMessages -> Maybe Int

-- | Query to search for
[query] :: SearchChatMessages -> Maybe Text

-- | Identifier of the sender of messages to search for; pass null to
--   search for messages from any sender. Not supported in secret chats
[sender_id] :: SearchChatMessages -> Maybe MessageSender

-- | Identifier of the message starting from which history must be fetched;
--   use 0 to get results from the last message
[from_message_id] :: SearchChatMessages -> Maybe Int

-- | Specify 0 to get results from exactly the message from_message_id or a
--   negative offset to get the specified message and some newer messages
[offset] :: SearchChatMessages -> Maybe Int

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than -offset. For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit
[limit] :: SearchChatMessages -> Maybe Int

-- | Additional filter for messages to search; pass null to search for all
--   messages
[_filter] :: SearchChatMessages -> Maybe SearchMessagesFilter

-- | If not 0, only messages in the specified thread will be returned;
--   supergroups only
[message_thread_id] :: SearchChatMessages -> Maybe Int

-- | If not 0, only messages in the specified Saved Messages topic will be
--   returned; pass 0 to return all messages, or for chats other than Saved
--   Messages
[saved_messages_topic_id] :: SearchChatMessages -> Maybe Int
defaultSearchChatMessages :: SearchChatMessages
instance GHC.Show.Show TD.Query.SearchChatMessages.SearchChatMessages
instance GHC.Classes.Eq TD.Query.SearchChatMessages.SearchChatMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchChatMessages.SearchChatMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatMessages.SearchChatMessages

module TD.Query.SearchChatRecentLocationMessages

-- | Returns information about the recent locations of chat members that
--   were sent to the chat. Returns up to 1 location message per user.
--   Returns <a>Messages</a>
data SearchChatRecentLocationMessages
SearchChatRecentLocationMessages :: Maybe Int -> Maybe Int -> SearchChatRecentLocationMessages

-- | Chat identifier
[chat_id] :: SearchChatRecentLocationMessages -> Maybe Int

-- | The maximum number of messages to be returned
[limit] :: SearchChatRecentLocationMessages -> Maybe Int
defaultSearchChatRecentLocationMessages :: SearchChatRecentLocationMessages
instance GHC.Show.Show TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages
instance GHC.Classes.Eq TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatRecentLocationMessages.SearchChatRecentLocationMessages

module TD.Query.SearchChats

-- | Searches for the specified query in the title and username of already
--   known chats; this is an offline request. Returns chats in the order
--   seen in the main chat list. Returns <a>Chats</a>
data SearchChats
SearchChats :: Maybe Text -> Maybe Int -> SearchChats

-- | Query to search for. If the query is empty, returns up to 50 recently
--   found chats
[query] :: SearchChats -> Maybe Text

-- | The maximum number of chats to be returned
[limit] :: SearchChats -> Maybe Int
defaultSearchChats :: SearchChats
instance GHC.Show.Show TD.Query.SearchChats.SearchChats
instance GHC.Classes.Eq TD.Query.SearchChats.SearchChats
instance TD.Lib.Internal.ShortShow TD.Query.SearchChats.SearchChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChats.SearchChats

module TD.Query.SearchChatsNearby

-- | Returns a list of users and location-based supergroups nearby. The
--   list of users nearby will be updated for 60 seconds after the request
--   by the updates updateUsersNearby. The request must be sent again every
--   25 seconds with adjusted location to not miss new chats. Returns
--   <a>ChatsNearby</a>
data SearchChatsNearby
SearchChatsNearby :: Maybe Location -> SearchChatsNearby

-- | Current user location
[location] :: SearchChatsNearby -> Maybe Location
instance GHC.Show.Show TD.Query.SearchChatsNearby.SearchChatsNearby
instance GHC.Classes.Eq TD.Query.SearchChatsNearby.SearchChatsNearby
instance TD.Lib.Internal.ShortShow TD.Query.SearchChatsNearby.SearchChatsNearby
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatsNearby.SearchChatsNearby

module TD.Query.SearchChatsOnServer

-- | Searches for the specified query in the title and username of already
--   known chats via request to the server. Returns chats in the order seen
--   in the main chat list. Returns <a>Chats</a>
data SearchChatsOnServer
SearchChatsOnServer :: Maybe Text -> Maybe Int -> SearchChatsOnServer

-- | Query to search for
[query] :: SearchChatsOnServer -> Maybe Text

-- | The maximum number of chats to be returned
[limit] :: SearchChatsOnServer -> Maybe Int
defaultSearchChatsOnServer :: SearchChatsOnServer
instance GHC.Show.Show TD.Query.SearchChatsOnServer.SearchChatsOnServer
instance GHC.Classes.Eq TD.Query.SearchChatsOnServer.SearchChatsOnServer
instance TD.Lib.Internal.ShortShow TD.Query.SearchChatsOnServer.SearchChatsOnServer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchChatsOnServer.SearchChatsOnServer

module TD.Query.SearchContacts

-- | Searches for the specified query in the first names, last names and
--   usernames of the known user contacts. Returns <a>Users</a>
data SearchContacts
SearchContacts :: Maybe Text -> Maybe Int -> SearchContacts

-- | Query to search for; may be empty to return all contacts
[query] :: SearchContacts -> Maybe Text

-- | The maximum number of users to be returned
[limit] :: SearchContacts -> Maybe Int
defaultSearchContacts :: SearchContacts
instance GHC.Show.Show TD.Query.SearchContacts.SearchContacts
instance GHC.Classes.Eq TD.Query.SearchContacts.SearchContacts
instance TD.Lib.Internal.ShortShow TD.Query.SearchContacts.SearchContacts
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchContacts.SearchContacts

module TD.Query.SearchEmojis

-- | Searches for emojis by keywords. Supported only if the file database
--   is enabled. Order of results is unspecified. Returns
--   <a>EmojiKeywords</a>
data SearchEmojis
SearchEmojis :: Maybe Text -> Maybe [Text] -> SearchEmojis

-- | Text to search for
[text] :: SearchEmojis -> Maybe Text

-- | List of possible IETF language tags of the user's input language; may
--   be empty if unknown
[input_language_codes] :: SearchEmojis -> Maybe [Text]
defaultSearchEmojis :: SearchEmojis
instance GHC.Show.Show TD.Query.SearchEmojis.SearchEmojis
instance GHC.Classes.Eq TD.Query.SearchEmojis.SearchEmojis
instance TD.Lib.Internal.ShortShow TD.Query.SearchEmojis.SearchEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchEmojis.SearchEmojis

module TD.Query.SearchFileDownloads

-- | Searches for files in the file download list or recently downloaded
--   files from the list. Returns <a>FoundFileDownloads</a>
data SearchFileDownloads
SearchFileDownloads :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe Int -> SearchFileDownloads

-- | Query to search for; may be empty to return all downloaded files
[query] :: SearchFileDownloads -> Maybe Text

-- | Pass true to search only for active downloads, including paused
[only_active] :: SearchFileDownloads -> Maybe Bool

-- | Pass true to search only for completed downloads
[only_completed] :: SearchFileDownloads -> Maybe Bool

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchFileDownloads -> Maybe Text

-- | The maximum number of files to be returned
[limit] :: SearchFileDownloads -> Maybe Int
defaultSearchFileDownloads :: SearchFileDownloads
instance GHC.Show.Show TD.Query.SearchFileDownloads.SearchFileDownloads
instance GHC.Classes.Eq TD.Query.SearchFileDownloads.SearchFileDownloads
instance TD.Lib.Internal.ShortShow TD.Query.SearchFileDownloads.SearchFileDownloads
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchFileDownloads.SearchFileDownloads

module TD.Query.SearchHashtags

-- | Searches for recently used hashtags by their prefix. Returns
--   <a>Hashtags</a>
data SearchHashtags
SearchHashtags :: Maybe Text -> Maybe Int -> SearchHashtags

-- | Hashtag prefix to search for
[prefix] :: SearchHashtags -> Maybe Text

-- | The maximum number of hashtags to be returned
[limit] :: SearchHashtags -> Maybe Int
defaultSearchHashtags :: SearchHashtags
instance GHC.Show.Show TD.Query.SearchHashtags.SearchHashtags
instance GHC.Classes.Eq TD.Query.SearchHashtags.SearchHashtags
instance TD.Lib.Internal.ShortShow TD.Query.SearchHashtags.SearchHashtags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchHashtags.SearchHashtags

module TD.Query.SearchInstalledStickerSets

-- | Searches for installed sticker sets by looking for specified query in
--   their title and name. Returns <a>StickerSets</a>
data SearchInstalledStickerSets
SearchInstalledStickerSets :: Maybe StickerType -> Maybe Text -> Maybe Int -> SearchInstalledStickerSets

-- | Type of the sticker sets to search for
[sticker_type] :: SearchInstalledStickerSets -> Maybe StickerType

-- | Query to search for
[query] :: SearchInstalledStickerSets -> Maybe Text

-- | The maximum number of sticker sets to return
[limit] :: SearchInstalledStickerSets -> Maybe Int
defaultSearchInstalledStickerSets :: SearchInstalledStickerSets
instance GHC.Show.Show TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets
instance GHC.Classes.Eq TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchInstalledStickerSets.SearchInstalledStickerSets

module TD.Query.SearchMessages

-- | Searches for messages in all chats except secret chats. Returns the
--   results in reverse chronological order (i.e., in order of decreasing
--   (date, chat_id, message_id)). For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit. Returns <a>FoundMessages</a>
data SearchMessages
SearchMessages :: Maybe ChatList -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe SearchMessagesFilter -> Maybe Int -> Maybe Int -> SearchMessages

-- | Chat list in which to search messages; pass null to search in all
--   chats regardless of their chat list. Only Main and Archive chat lists
--   are supported
[chat_list] :: SearchMessages -> Maybe ChatList

-- | Pass true to search only for messages in channels
[only_in_channels] :: SearchMessages -> Maybe Bool

-- | Query to search for
[query] :: SearchMessages -> Maybe Text

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchMessages -> Maybe Text

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchMessages -> Maybe Int

-- | Additional filter for messages to search; pass null to search for all
--   messages. Filters searchMessagesFilterMention,
--   searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction,
--   searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are
--   unsupported in this function
[_filter] :: SearchMessages -> Maybe SearchMessagesFilter

-- | If not 0, the minimum date of the messages to return
[min_date] :: SearchMessages -> Maybe Int

-- | If not 0, the maximum date of the messages to return
[max_date] :: SearchMessages -> Maybe Int
defaultSearchMessages :: SearchMessages
instance GHC.Show.Show TD.Query.SearchMessages.SearchMessages
instance GHC.Classes.Eq TD.Query.SearchMessages.SearchMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchMessages.SearchMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchMessages.SearchMessages

module TD.Query.SearchOutgoingDocumentMessages

-- | Searches for outgoing messages with content of the type
--   messageDocument in all chats except secret chats. Returns the results
--   in reverse chronological order. Returns <a>FoundMessages</a>
data SearchOutgoingDocumentMessages
SearchOutgoingDocumentMessages :: Maybe Text -> Maybe Int -> SearchOutgoingDocumentMessages

-- | Query to search for in document file name and message caption
[query] :: SearchOutgoingDocumentMessages -> Maybe Text

-- | The maximum number of messages to be returned; up to 100
[limit] :: SearchOutgoingDocumentMessages -> Maybe Int
defaultSearchOutgoingDocumentMessages :: SearchOutgoingDocumentMessages
instance GHC.Show.Show TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages
instance GHC.Classes.Eq TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchOutgoingDocumentMessages.SearchOutgoingDocumentMessages

module TD.Query.SearchPublicChat

-- | Searches a public chat by its username. Currently, only private chats,
--   supergroups and channels can be public. Returns the chat if found;
--   otherwise, an error is returned. Returns <a>Chat</a>
data SearchPublicChat
SearchPublicChat :: Maybe Text -> SearchPublicChat

-- | Username to be resolved
[username] :: SearchPublicChat -> Maybe Text
instance GHC.Show.Show TD.Query.SearchPublicChat.SearchPublicChat
instance GHC.Classes.Eq TD.Query.SearchPublicChat.SearchPublicChat
instance TD.Lib.Internal.ShortShow TD.Query.SearchPublicChat.SearchPublicChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchPublicChat.SearchPublicChat

module TD.Query.SearchPublicChats

-- | Searches public chats by looking for specified query in their username
--   and title. Currently, only private chats, supergroups and channels can
--   be public. Returns a meaningful number of results. Excludes private
--   chats with contacts and chats from the chat list from the results.
--   Returns <a>Chats</a>
data SearchPublicChats
SearchPublicChats :: Maybe Text -> SearchPublicChats

-- | Query to search for
[query] :: SearchPublicChats -> Maybe Text
instance GHC.Show.Show TD.Query.SearchPublicChats.SearchPublicChats
instance GHC.Classes.Eq TD.Query.SearchPublicChats.SearchPublicChats
instance TD.Lib.Internal.ShortShow TD.Query.SearchPublicChats.SearchPublicChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchPublicChats.SearchPublicChats

module TD.Query.SearchQuote

-- | Searches for a given quote in a text. Returns found quote start
--   position in UTF-16 code units. Returns a 404 error if the quote is not
--   found. Can be called synchronously. Returns <a>FoundPosition</a>
data SearchQuote
SearchQuote :: Maybe FormattedText -> Maybe FormattedText -> Maybe Int -> SearchQuote

-- | Text in which to search for the quote
[text] :: SearchQuote -> Maybe FormattedText

-- | Quote to search for
[quote] :: SearchQuote -> Maybe FormattedText

-- | Approximate quote position in UTF-16 code units
[quote_position] :: SearchQuote -> Maybe Int
defaultSearchQuote :: SearchQuote
instance GHC.Show.Show TD.Query.SearchQuote.SearchQuote
instance GHC.Classes.Eq TD.Query.SearchQuote.SearchQuote
instance TD.Lib.Internal.ShortShow TD.Query.SearchQuote.SearchQuote
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchQuote.SearchQuote

module TD.Query.SearchRecentlyFoundChats

-- | Searches for the specified query in the title and username of up to 50
--   recently found chats; this is an offline request. Returns <a>Chats</a>
data SearchRecentlyFoundChats
SearchRecentlyFoundChats :: Maybe Text -> Maybe Int -> SearchRecentlyFoundChats

-- | Query to search for
[query] :: SearchRecentlyFoundChats -> Maybe Text

-- | The maximum number of chats to be returned
[limit] :: SearchRecentlyFoundChats -> Maybe Int
defaultSearchRecentlyFoundChats :: SearchRecentlyFoundChats
instance GHC.Show.Show TD.Query.SearchRecentlyFoundChats.SearchRecentlyFoundChats
instance GHC.Classes.Eq TD.Query.SearchRecentlyFoundChats.SearchRecentlyFoundChats
instance TD.Lib.Internal.ShortShow TD.Query.SearchRecentlyFoundChats.SearchRecentlyFoundChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchRecentlyFoundChats.SearchRecentlyFoundChats

module TD.Query.SearchSavedMessages

-- | Searches for messages tagged by the given reaction and with the given
--   words in the Saved Messages chat; for Telegram Premium users only.
--   Returns the results in reverse chronological order, i.e. in order of
--   decreasing message_id For optimal performance, the number of returned
--   messages is chosen by TDLib and can be smaller than the specified
--   limit. Returns <a>FoundChatMessages</a>
data SearchSavedMessages
SearchSavedMessages :: Maybe Int -> Maybe ReactionType -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Int -> SearchSavedMessages

-- | If not 0, only messages in the specified Saved Messages topic will be
--   considered; pass 0 to consider all messages
[saved_messages_topic_id] :: SearchSavedMessages -> Maybe Int

-- | Tag to search for; pass null to return all suitable messages
[tag] :: SearchSavedMessages -> Maybe ReactionType

-- | Query to search for
[query] :: SearchSavedMessages -> Maybe Text

-- | Identifier of the message starting from which messages must be
--   fetched; use 0 to get results from the last message
[from_message_id] :: SearchSavedMessages -> Maybe Int

-- | Specify 0 to get results from exactly the message from_message_id or a
--   negative offset to get the specified message and some newer messages
[offset] :: SearchSavedMessages -> Maybe Int

-- | The maximum number of messages to be returned; must be positive and
--   can't be greater than 100. If the offset is negative, the limit must
--   be greater than -offset. For optimal performance, the number of
--   returned messages is chosen by TDLib and can be smaller than the
--   specified limit
[limit] :: SearchSavedMessages -> Maybe Int
defaultSearchSavedMessages :: SearchSavedMessages
instance GHC.Show.Show TD.Query.SearchSavedMessages.SearchSavedMessages
instance GHC.Classes.Eq TD.Query.SearchSavedMessages.SearchSavedMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchSavedMessages.SearchSavedMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchSavedMessages.SearchSavedMessages

module TD.Query.SearchSecretMessages

-- | Searches for messages in secret chats. Returns the results in reverse
--   chronological order. For optimal performance, the number of returned
--   messages is chosen by TDLib. Returns <a>FoundMessages</a>
data SearchSecretMessages
SearchSecretMessages :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe SearchMessagesFilter -> SearchSecretMessages

-- | Identifier of the chat in which to search. Specify 0 to search in all
--   secret chats
[chat_id] :: SearchSecretMessages -> Maybe Int

-- | Query to search for. If empty, searchChatMessages must be used instead
[query] :: SearchSecretMessages -> Maybe Text

-- | Offset of the first entry to return as received from the previous
--   request; use empty string to get the first chunk of results
[offset] :: SearchSecretMessages -> Maybe Text

-- | The maximum number of messages to be returned; up to 100. For optimal
--   performance, the number of returned messages is chosen by TDLib and
--   can be smaller than the specified limit
[limit] :: SearchSecretMessages -> Maybe Int

-- | Additional filter for messages to search; pass null to search for all
--   messages
[_filter] :: SearchSecretMessages -> Maybe SearchMessagesFilter
defaultSearchSecretMessages :: SearchSecretMessages
instance GHC.Show.Show TD.Query.SearchSecretMessages.SearchSecretMessages
instance GHC.Classes.Eq TD.Query.SearchSecretMessages.SearchSecretMessages
instance TD.Lib.Internal.ShortShow TD.Query.SearchSecretMessages.SearchSecretMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchSecretMessages.SearchSecretMessages

module TD.Query.SearchStickerSet

-- | Searches for a sticker set by its name. Returns <a>StickerSet</a>
data SearchStickerSet
SearchStickerSet :: Maybe Text -> SearchStickerSet

-- | Name of the sticker set
[name] :: SearchStickerSet -> Maybe Text
instance GHC.Show.Show TD.Query.SearchStickerSet.SearchStickerSet
instance GHC.Classes.Eq TD.Query.SearchStickerSet.SearchStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.SearchStickerSet.SearchStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickerSet.SearchStickerSet

module TD.Query.SearchStickerSets

-- | Searches for sticker sets by looking for specified query in their
--   title and name. Excludes installed sticker sets from the results.
--   Returns <a>StickerSets</a>
data SearchStickerSets
SearchStickerSets :: Maybe StickerType -> Maybe Text -> SearchStickerSets

-- | Type of the sticker sets to return
[sticker_type] :: SearchStickerSets -> Maybe StickerType

-- | Query to search for
[query] :: SearchStickerSets -> Maybe Text
defaultSearchStickerSets :: SearchStickerSets
instance GHC.Show.Show TD.Query.SearchStickerSets.SearchStickerSets
instance GHC.Classes.Eq TD.Query.SearchStickerSets.SearchStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.SearchStickerSets.SearchStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickerSets.SearchStickerSets

module TD.Query.SearchStickers

-- | Searches for stickers from public sticker sets that correspond to any
--   of the given emoji. Returns <a>Stickers</a>
data SearchStickers
SearchStickers :: Maybe StickerType -> Maybe Text -> Maybe Int -> SearchStickers

-- | Type of the stickers to return
[sticker_type] :: SearchStickers -> Maybe StickerType

-- | Space-separated list of emoji to search for; must be non-empty
[emojis] :: SearchStickers -> Maybe Text

-- | The maximum number of stickers to be returned; 0-100
[limit] :: SearchStickers -> Maybe Int
defaultSearchStickers :: SearchStickers
instance GHC.Show.Show TD.Query.SearchStickers.SearchStickers
instance GHC.Classes.Eq TD.Query.SearchStickers.SearchStickers
instance TD.Lib.Internal.ShortShow TD.Query.SearchStickers.SearchStickers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStickers.SearchStickers

module TD.Query.SearchStringsByPrefix

-- | Searches specified query by word prefixes in the provided strings.
--   Returns 0-based positions of strings that matched. Can be called
--   synchronously. Returns <a>FoundPositions</a>
data SearchStringsByPrefix
SearchStringsByPrefix :: Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Bool -> SearchStringsByPrefix

-- | The strings to search in for the query
[strings] :: SearchStringsByPrefix -> Maybe [Text]

-- | Query to search for
[query] :: SearchStringsByPrefix -> Maybe Text

-- | The maximum number of objects to return
[limit] :: SearchStringsByPrefix -> Maybe Int

-- | Pass true to receive no results for an empty query
[return_none_for_empty_query] :: SearchStringsByPrefix -> Maybe Bool
defaultSearchStringsByPrefix :: SearchStringsByPrefix
instance GHC.Show.Show TD.Query.SearchStringsByPrefix.SearchStringsByPrefix
instance GHC.Classes.Eq TD.Query.SearchStringsByPrefix.SearchStringsByPrefix
instance TD.Lib.Internal.ShortShow TD.Query.SearchStringsByPrefix.SearchStringsByPrefix
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchStringsByPrefix.SearchStringsByPrefix

module TD.Query.SearchUserByPhoneNumber

-- | Searches a user by their phone number. Returns a 404 error if the user
--   can't be found. Returns <a>User</a>
data SearchUserByPhoneNumber
SearchUserByPhoneNumber :: Maybe Text -> SearchUserByPhoneNumber

-- | Phone number to search for
[phone_number] :: SearchUserByPhoneNumber -> Maybe Text
instance GHC.Show.Show TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber
instance GHC.Classes.Eq TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber
instance TD.Lib.Internal.ShortShow TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchUserByPhoneNumber.SearchUserByPhoneNumber

module TD.Query.SearchUserByToken

-- | Searches a user by a token from the user's link. Returns <a>User</a>
data SearchUserByToken
SearchUserByToken :: Maybe Text -> SearchUserByToken

-- | Token to search for
[token] :: SearchUserByToken -> Maybe Text
instance GHC.Show.Show TD.Query.SearchUserByToken.SearchUserByToken
instance GHC.Classes.Eq TD.Query.SearchUserByToken.SearchUserByToken
instance TD.Lib.Internal.ShortShow TD.Query.SearchUserByToken.SearchUserByToken
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchUserByToken.SearchUserByToken

module TD.Query.SearchWebApp

-- | Returns information about a Web App by its short name. Returns a 404
--   error if the Web App is not found. Returns <a>FoundWebApp</a>
data SearchWebApp
SearchWebApp :: Maybe Int -> Maybe Text -> SearchWebApp

-- | Identifier of the target bot
[bot_user_id] :: SearchWebApp -> Maybe Int

-- | Short name of the Web App
[web_app_short_name] :: SearchWebApp -> Maybe Text
defaultSearchWebApp :: SearchWebApp
instance GHC.Show.Show TD.Query.SearchWebApp.SearchWebApp
instance GHC.Classes.Eq TD.Query.SearchWebApp.SearchWebApp
instance TD.Lib.Internal.ShortShow TD.Query.SearchWebApp.SearchWebApp
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SearchWebApp.SearchWebApp

module TD.Query.SendAuthenticationFirebaseSms

-- | Sends Firebase Authentication SMS to the phone number of the user.
--   Works only when the current authorization state is
--   authorizationStateWaitCode and the server returned code of the type
--   authenticationCodeTypeFirebaseAndroid or
--   authenticationCodeTypeFirebaseIos. Returns <a>Ok</a>
data SendAuthenticationFirebaseSms
SendAuthenticationFirebaseSms :: Maybe Text -> SendAuthenticationFirebaseSms

-- | SafetyNet Attestation API token for the Android application, or secret
--   from push notification for the iOS application
[token] :: SendAuthenticationFirebaseSms -> Maybe Text
instance GHC.Show.Show TD.Query.SendAuthenticationFirebaseSms.SendAuthenticationFirebaseSms
instance GHC.Classes.Eq TD.Query.SendAuthenticationFirebaseSms.SendAuthenticationFirebaseSms
instance TD.Lib.Internal.ShortShow TD.Query.SendAuthenticationFirebaseSms.SendAuthenticationFirebaseSms
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendAuthenticationFirebaseSms.SendAuthenticationFirebaseSms

module TD.Query.SendBotStartMessage

-- | Invites a bot to a chat (if it is not yet a member) and sends it the
--   /start command; requires can_invite_users member right. Bots can't be
--   invited to a private chat other than the chat with the bot. Bots can't
--   be invited to channels (although they can be added as admins) and
--   secret chats. Returns the sent message. Returns <a>Message</a>
data SendBotStartMessage
SendBotStartMessage :: Maybe Int -> Maybe Int -> Maybe Text -> SendBotStartMessage

-- | Identifier of the bot
[bot_user_id] :: SendBotStartMessage -> Maybe Int

-- | Identifier of the target chat
[chat_id] :: SendBotStartMessage -> Maybe Int

-- | A hidden parameter sent to the bot for deep linking purposes
--   (https:/<i>core.telegram.org</i>bots#deep-linking)
[parameter] :: SendBotStartMessage -> Maybe Text
defaultSendBotStartMessage :: SendBotStartMessage
instance GHC.Show.Show TD.Query.SendBotStartMessage.SendBotStartMessage
instance GHC.Classes.Eq TD.Query.SendBotStartMessage.SendBotStartMessage
instance TD.Lib.Internal.ShortShow TD.Query.SendBotStartMessage.SendBotStartMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendBotStartMessage.SendBotStartMessage

module TD.Query.SendBusinessMessage

-- | Sends a message on behalf of a business account; for bots only.
--   Returns the message after it was sent. Returns <a>BusinessMessage</a>
data SendBusinessMessage
SendBusinessMessage :: Maybe Text -> Maybe Int -> Maybe InputMessageReplyTo -> Maybe Bool -> Maybe Bool -> Maybe ReplyMarkup -> Maybe InputMessageContent -> SendBusinessMessage

-- | Unique identifier of business connection on behalf of which to send
--   the request
[business_connection_id] :: SendBusinessMessage -> Maybe Text

-- | Target chat
[chat_id] :: SendBusinessMessage -> Maybe Int

-- | Information about the message to be replied; pass null if none
[reply_to] :: SendBusinessMessage -> Maybe InputMessageReplyTo

-- | Pass true to disable notification for the message
[disable_notification] :: SendBusinessMessage -> Maybe Bool

-- | Pass true if the content of the message must be protected from
--   forwarding and saving
[protect_content] :: SendBusinessMessage -> Maybe Bool

-- | Markup for replying to the message; pass null if none
[reply_markup] :: SendBusinessMessage -> Maybe ReplyMarkup

-- | The content of the message to be sent
[input_message_content] :: SendBusinessMessage -> Maybe InputMessageContent
defaultSendBusinessMessage :: SendBusinessMessage
instance GHC.Show.Show TD.Query.SendBusinessMessage.SendBusinessMessage
instance GHC.Classes.Eq TD.Query.SendBusinessMessage.SendBusinessMessage
instance TD.Lib.Internal.ShortShow TD.Query.SendBusinessMessage.SendBusinessMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendBusinessMessage.SendBusinessMessage

module TD.Query.SendBusinessMessageAlbum

-- | Sends 2-10 messages grouped together into an album on behalf of a
--   business account; for bots only. Currently, only audio, document,
--   photo and video messages can be grouped into an album. Documents and
--   audio files can be only grouped in an album with messages of the same
--   type. Returns sent messages. Returns <a>BusinessMessages</a>
data SendBusinessMessageAlbum
SendBusinessMessageAlbum :: Maybe Text -> Maybe Int -> Maybe InputMessageReplyTo -> Maybe Bool -> Maybe Bool -> Maybe [InputMessageContent] -> SendBusinessMessageAlbum

-- | Unique identifier of business connection on behalf of which to send
--   the request
[business_connection_id] :: SendBusinessMessageAlbum -> Maybe Text

-- | Target chat
[chat_id] :: SendBusinessMessageAlbum -> Maybe Int

-- | Information about the message to be replied; pass null if none
[reply_to] :: SendBusinessMessageAlbum -> Maybe InputMessageReplyTo

-- | Pass true to disable notification for the message
[disable_notification] :: SendBusinessMessageAlbum -> Maybe Bool

-- | Pass true if the content of the message must be protected from
--   forwarding and saving
[protect_content] :: SendBusinessMessageAlbum -> Maybe Bool

-- | Contents of messages to be sent. At most 10 messages can be added to
--   an album
[input_message_contents] :: SendBusinessMessageAlbum -> Maybe [InputMessageContent]
defaultSendBusinessMessageAlbum :: SendBusinessMessageAlbum
instance GHC.Show.Show TD.Query.SendBusinessMessageAlbum.SendBusinessMessageAlbum
instance GHC.Classes.Eq TD.Query.SendBusinessMessageAlbum.SendBusinessMessageAlbum
instance TD.Lib.Internal.ShortShow TD.Query.SendBusinessMessageAlbum.SendBusinessMessageAlbum
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendBusinessMessageAlbum.SendBusinessMessageAlbum

module TD.Query.SendCallDebugInformation

-- | Sends debug information for a call to Telegram servers. Returns
--   <a>Ok</a>
data SendCallDebugInformation
SendCallDebugInformation :: Maybe Int -> Maybe Text -> SendCallDebugInformation

-- | Call identifier
[call_id] :: SendCallDebugInformation -> Maybe Int

-- | Debug information in application-specific format
[debug_information] :: SendCallDebugInformation -> Maybe Text
defaultSendCallDebugInformation :: SendCallDebugInformation
instance GHC.Show.Show TD.Query.SendCallDebugInformation.SendCallDebugInformation
instance GHC.Classes.Eq TD.Query.SendCallDebugInformation.SendCallDebugInformation
instance TD.Lib.Internal.ShortShow TD.Query.SendCallDebugInformation.SendCallDebugInformation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallDebugInformation.SendCallDebugInformation

module TD.Query.SendCallLog

-- | Sends log file for a call to Telegram servers. Returns <a>Ok</a>
data SendCallLog
SendCallLog :: Maybe Int -> Maybe InputFile -> SendCallLog

-- | Call identifier
[call_id] :: SendCallLog -> Maybe Int

-- | Call log file. Only inputFileLocal and inputFileGenerated are
--   supported
[log_file] :: SendCallLog -> Maybe InputFile
defaultSendCallLog :: SendCallLog
instance GHC.Show.Show TD.Query.SendCallLog.SendCallLog
instance GHC.Classes.Eq TD.Query.SendCallLog.SendCallLog
instance TD.Lib.Internal.ShortShow TD.Query.SendCallLog.SendCallLog
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallLog.SendCallLog

module TD.Query.SendCallRating

-- | Sends a call rating. Returns <a>Ok</a>
data SendCallRating
SendCallRating :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe [CallProblem] -> SendCallRating

-- | Call identifier
[call_id] :: SendCallRating -> Maybe Int

-- | Call rating; 1-5
[rating] :: SendCallRating -> Maybe Int

-- | An optional user comment if the rating is less than 5
[comment] :: SendCallRating -> Maybe Text

-- | List of the exact types of problems with the call, specified by the
--   user
[problems] :: SendCallRating -> Maybe [CallProblem]
defaultSendCallRating :: SendCallRating
instance GHC.Show.Show TD.Query.SendCallRating.SendCallRating
instance GHC.Classes.Eq TD.Query.SendCallRating.SendCallRating
instance TD.Lib.Internal.ShortShow TD.Query.SendCallRating.SendCallRating
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallRating.SendCallRating

module TD.Query.SendCallSignalingData

-- | Sends call signaling data. Returns <a>Ok</a>
data SendCallSignalingData
SendCallSignalingData :: Maybe Int -> Maybe ByteString -> SendCallSignalingData

-- | Call identifier
[call_id] :: SendCallSignalingData -> Maybe Int

-- | The data
[_data] :: SendCallSignalingData -> Maybe ByteString
defaultSendCallSignalingData :: SendCallSignalingData
instance GHC.Show.Show TD.Query.SendCallSignalingData.SendCallSignalingData
instance GHC.Classes.Eq TD.Query.SendCallSignalingData.SendCallSignalingData
instance TD.Lib.Internal.ShortShow TD.Query.SendCallSignalingData.SendCallSignalingData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCallSignalingData.SendCallSignalingData

module TD.Query.SendChatAction

-- | Sends a notification about user activity in a chat. Returns <a>Ok</a>
data SendChatAction
SendChatAction :: Maybe Int -> Maybe Int -> Maybe Text -> Maybe ChatAction -> SendChatAction

-- | Chat identifier
[chat_id] :: SendChatAction -> Maybe Int

-- | If not 0, the message thread identifier in which the action was
--   performed
[message_thread_id] :: SendChatAction -> Maybe Int

-- | Unique identifier of business connection on behalf of which to send
--   the request; for bots only
[business_connection_id] :: SendChatAction -> Maybe Text

-- | The action description; pass null to cancel the currently active
--   action
[action] :: SendChatAction -> Maybe ChatAction
defaultSendChatAction :: SendChatAction
instance GHC.Show.Show TD.Query.SendChatAction.SendChatAction
instance GHC.Classes.Eq TD.Query.SendChatAction.SendChatAction
instance TD.Lib.Internal.ShortShow TD.Query.SendChatAction.SendChatAction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendChatAction.SendChatAction

module TD.Query.SendCustomRequest

-- | Sends a custom request; for bots only. Returns
--   <a>CustomRequestResult</a>
data SendCustomRequest
SendCustomRequest :: Maybe Text -> Maybe Text -> SendCustomRequest

-- | The method name
[method] :: SendCustomRequest -> Maybe Text

-- | JSON-serialized method parameters
[parameters] :: SendCustomRequest -> Maybe Text
defaultSendCustomRequest :: SendCustomRequest
instance GHC.Show.Show TD.Query.SendCustomRequest.SendCustomRequest
instance GHC.Classes.Eq TD.Query.SendCustomRequest.SendCustomRequest
instance TD.Lib.Internal.ShortShow TD.Query.SendCustomRequest.SendCustomRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendCustomRequest.SendCustomRequest

module TD.Query.SendEmailAddressVerificationCode

-- | Sends a code to verify an email address to be added to a user's
--   Telegram Passport. Returns <a>EmailAddressAuthenticationCodeInfo</a>
data SendEmailAddressVerificationCode
SendEmailAddressVerificationCode :: Maybe Text -> SendEmailAddressVerificationCode

-- | Email address
[email_address] :: SendEmailAddressVerificationCode -> Maybe Text
instance GHC.Show.Show TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode
instance GHC.Classes.Eq TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode
instance TD.Lib.Internal.ShortShow TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendEmailAddressVerificationCode.SendEmailAddressVerificationCode

module TD.Query.SendInlineQueryResultMessage

-- | Sends the result of an inline query as a message. Returns the sent
--   message. Always clears a chat draft message. Returns <a>Message</a>
data SendInlineQueryResultMessage
SendInlineQueryResultMessage :: Maybe Int -> Maybe Int -> Maybe InputMessageReplyTo -> Maybe MessageSendOptions -> Maybe Int -> Maybe Text -> Maybe Bool -> SendInlineQueryResultMessage

-- | Target chat
[chat_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | If not 0, the message thread identifier in which the message will be
--   sent
[message_thread_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | Information about the message or story to be replied; pass null if
--   none
[reply_to] :: SendInlineQueryResultMessage -> Maybe InputMessageReplyTo

-- | Options to be used to send the message; pass null to use default
--   options
[options] :: SendInlineQueryResultMessage -> Maybe MessageSendOptions

-- | Identifier of the inline query
[query_id] :: SendInlineQueryResultMessage -> Maybe Int

-- | Identifier of the inline query result
[result_id] :: SendInlineQueryResultMessage -> Maybe Text

-- | Pass true to hide the bot, via which the message is sent. Can be used
--   only for bots getOption("animation_search_bot_username"),
--   getOption("photo_search_bot_username"), and
--   getOption("venue_search_bot_username")
[hide_via_bot] :: SendInlineQueryResultMessage -> Maybe Bool
defaultSendInlineQueryResultMessage :: SendInlineQueryResultMessage
instance GHC.Show.Show TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage
instance GHC.Classes.Eq TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage
instance TD.Lib.Internal.ShortShow TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendInlineQueryResultMessage.SendInlineQueryResultMessage

module TD.Query.SendMessage

-- | Sends a message. Returns the sent message. Returns <a>Message</a>
data SendMessage
SendMessage :: Maybe Int -> Maybe Int -> Maybe InputMessageReplyTo -> Maybe MessageSendOptions -> Maybe ReplyMarkup -> Maybe InputMessageContent -> SendMessage

-- | Target chat
[chat_id] :: SendMessage -> Maybe Int

-- | If not 0, the message thread identifier in which the message will be
--   sent
[message_thread_id] :: SendMessage -> Maybe Int

-- | Information about the message or story to be replied; pass null if
--   none
[reply_to] :: SendMessage -> Maybe InputMessageReplyTo

-- | Options to be used to send the message; pass null to use default
--   options
[options] :: SendMessage -> Maybe MessageSendOptions

-- | Markup for replying to the message; pass null if none; for bots only
[reply_markup] :: SendMessage -> Maybe ReplyMarkup

-- | The content of the message to be sent
[input_message_content] :: SendMessage -> Maybe InputMessageContent
defaultSendMessage :: SendMessage
instance GHC.Show.Show TD.Query.SendMessage.SendMessage
instance GHC.Classes.Eq TD.Query.SendMessage.SendMessage
instance TD.Lib.Internal.ShortShow TD.Query.SendMessage.SendMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendMessage.SendMessage

module TD.Query.SendMessageAlbum

-- | Sends 2-10 messages grouped together into an album. Currently, only
--   audio, document, photo and video messages can be grouped into an
--   album. Documents and audio files can be only grouped in an album with
--   messages of the same type. Returns sent messages. Returns
--   <a>Messages</a>
data SendMessageAlbum
SendMessageAlbum :: Maybe Int -> Maybe Int -> Maybe InputMessageReplyTo -> Maybe MessageSendOptions -> Maybe [InputMessageContent] -> SendMessageAlbum

-- | Target chat
[chat_id] :: SendMessageAlbum -> Maybe Int

-- | If not 0, the message thread identifier in which the messages will be
--   sent
[message_thread_id] :: SendMessageAlbum -> Maybe Int

-- | Information about the message or story to be replied; pass null if
--   none
[reply_to] :: SendMessageAlbum -> Maybe InputMessageReplyTo

-- | Options to be used to send the messages; pass null to use default
--   options
[options] :: SendMessageAlbum -> Maybe MessageSendOptions

-- | Contents of messages to be sent. At most 10 messages can be added to
--   an album
[input_message_contents] :: SendMessageAlbum -> Maybe [InputMessageContent]
defaultSendMessageAlbum :: SendMessageAlbum
instance GHC.Show.Show TD.Query.SendMessageAlbum.SendMessageAlbum
instance GHC.Classes.Eq TD.Query.SendMessageAlbum.SendMessageAlbum
instance TD.Lib.Internal.ShortShow TD.Query.SendMessageAlbum.SendMessageAlbum
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendMessageAlbum.SendMessageAlbum

module TD.Query.SendPassportAuthorizationForm

-- | Sends a Telegram Passport authorization form, effectively sharing data
--   with the service. This method must be called after
--   getPassportAuthorizationFormAvailableElements if some previously
--   available elements are going to be reused. Returns <a>Ok</a>
data SendPassportAuthorizationForm
SendPassportAuthorizationForm :: Maybe Int -> Maybe [PassportElementType] -> SendPassportAuthorizationForm

-- | Authorization form identifier
[authorization_form_id] :: SendPassportAuthorizationForm -> Maybe Int

-- | Types of Telegram Passport elements chosen by user to complete the
--   authorization form
[types] :: SendPassportAuthorizationForm -> Maybe [PassportElementType]
defaultSendPassportAuthorizationForm :: SendPassportAuthorizationForm
instance GHC.Show.Show TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm
instance GHC.Classes.Eq TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm
instance TD.Lib.Internal.ShortShow TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPassportAuthorizationForm.SendPassportAuthorizationForm

module TD.Query.SendPaymentForm

-- | Sends a filled-out payment form to the bot for final verification.
--   Returns <a>PaymentResult</a>
data SendPaymentForm
SendPaymentForm :: Maybe InputInvoice -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe InputCredentials -> Maybe Int -> SendPaymentForm

-- | The invoice
[input_invoice] :: SendPaymentForm -> Maybe InputInvoice

-- | Payment form identifier returned by getPaymentForm
[payment_form_id] :: SendPaymentForm -> Maybe Int

-- | Identifier returned by validateOrderInfo, or an empty string
[order_info_id] :: SendPaymentForm -> Maybe Text

-- | Identifier of a chosen shipping option, if applicable
[shipping_option_id] :: SendPaymentForm -> Maybe Text

-- | The credentials chosen by user for payment
[credentials] :: SendPaymentForm -> Maybe InputCredentials

-- | Chosen by the user amount of tip in the smallest units of the currency
[tip_amount] :: SendPaymentForm -> Maybe Int
defaultSendPaymentForm :: SendPaymentForm
instance GHC.Show.Show TD.Query.SendPaymentForm.SendPaymentForm
instance GHC.Classes.Eq TD.Query.SendPaymentForm.SendPaymentForm
instance TD.Lib.Internal.ShortShow TD.Query.SendPaymentForm.SendPaymentForm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPaymentForm.SendPaymentForm

module TD.Query.SendPhoneNumberCode

-- | Sends a code to the specified phone number. Aborts previous phone
--   number verification if there was one. On success, returns information
--   about the sent code. Returns <a>AuthenticationCodeInfo</a>
data SendPhoneNumberCode
SendPhoneNumberCode :: Maybe Text -> Maybe PhoneNumberAuthenticationSettings -> Maybe PhoneNumberCodeType -> SendPhoneNumberCode

-- | The phone number, in international format
[phone_number] :: SendPhoneNumberCode -> Maybe Text

-- | Settings for the authentication of the user's phone number; pass null
--   to use default settings
[settings] :: SendPhoneNumberCode -> Maybe PhoneNumberAuthenticationSettings

-- | Type of the request for which the code is sent
[_type] :: SendPhoneNumberCode -> Maybe PhoneNumberCodeType
defaultSendPhoneNumberCode :: SendPhoneNumberCode
instance GHC.Show.Show TD.Query.SendPhoneNumberCode.SendPhoneNumberCode
instance GHC.Classes.Eq TD.Query.SendPhoneNumberCode.SendPhoneNumberCode
instance TD.Lib.Internal.ShortShow TD.Query.SendPhoneNumberCode.SendPhoneNumberCode
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPhoneNumberCode.SendPhoneNumberCode

module TD.Query.SendPhoneNumberFirebaseSms

-- | Sends Firebase Authentication SMS to the specified phone number. Works
--   only when received a code of the type
--   authenticationCodeTypeFirebaseAndroid or
--   authenticationCodeTypeFirebaseIos. Returns <a>Ok</a>
data SendPhoneNumberFirebaseSms
SendPhoneNumberFirebaseSms :: Maybe Text -> SendPhoneNumberFirebaseSms

-- | SafetyNet Attestation API token for the Android application, or secret
--   from push notification for the iOS application
[token] :: SendPhoneNumberFirebaseSms -> Maybe Text
instance GHC.Show.Show TD.Query.SendPhoneNumberFirebaseSms.SendPhoneNumberFirebaseSms
instance GHC.Classes.Eq TD.Query.SendPhoneNumberFirebaseSms.SendPhoneNumberFirebaseSms
instance TD.Lib.Internal.ShortShow TD.Query.SendPhoneNumberFirebaseSms.SendPhoneNumberFirebaseSms
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendPhoneNumberFirebaseSms.SendPhoneNumberFirebaseSms

module TD.Query.SendQuickReplyShortcutMessages

-- | Sends messages from a quick reply shortcut. Requires Telegram Business
--   subscription. Returns <a>Messages</a>
data SendQuickReplyShortcutMessages
SendQuickReplyShortcutMessages :: Maybe Int -> Maybe Int -> Maybe Int -> SendQuickReplyShortcutMessages

-- | Identifier of the chat to which to send messages. The chat must be a
--   private chat with a regular user
[chat_id] :: SendQuickReplyShortcutMessages -> Maybe Int

-- | Unique identifier of the quick reply shortcut
[shortcut_id] :: SendQuickReplyShortcutMessages -> Maybe Int

-- | Non-persistent identifier, which will be returned back in
--   messageSendingStatePending object and can be used to match sent
--   messages and corresponding updateNewMessage updates
[sending_id] :: SendQuickReplyShortcutMessages -> Maybe Int
defaultSendQuickReplyShortcutMessages :: SendQuickReplyShortcutMessages
instance GHC.Show.Show TD.Query.SendQuickReplyShortcutMessages.SendQuickReplyShortcutMessages
instance GHC.Classes.Eq TD.Query.SendQuickReplyShortcutMessages.SendQuickReplyShortcutMessages
instance TD.Lib.Internal.ShortShow TD.Query.SendQuickReplyShortcutMessages.SendQuickReplyShortcutMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendQuickReplyShortcutMessages.SendQuickReplyShortcutMessages

module TD.Query.SendStory

-- | Sends a new story to a chat; requires can_post_stories right for
--   supergroup and channel chats. Returns a temporary story. Returns
--   <a>Story</a>
data SendStory
SendStory :: Maybe Int -> Maybe InputStoryContent -> Maybe InputStoryAreas -> Maybe FormattedText -> Maybe StoryPrivacySettings -> Maybe Int -> Maybe StoryFullId -> Maybe Bool -> Maybe Bool -> SendStory

-- | Identifier of the chat that will post the story
[chat_id] :: SendStory -> Maybe Int

-- | Content of the story
[content] :: SendStory -> Maybe InputStoryContent

-- | Clickable rectangle areas to be shown on the story media; pass null if
--   none
[areas] :: SendStory -> Maybe InputStoryAreas

-- | Story caption; pass null to use an empty caption;
--   0-getOption("story_caption_length_max") characters; can have entities
--   only if getOption("can_use_text_entities_in_story_caption")
[caption] :: SendStory -> Maybe FormattedText

-- | The privacy settings for the story; ignored for stories sent to
--   supergroup and channel chats
[privacy_settings] :: SendStory -> Maybe StoryPrivacySettings

-- | Period after which the story is moved to archive, in seconds; must be
--   one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium
--   users, and 86400 otherwise
[active_period] :: SendStory -> Maybe Int

-- | Full identifier of the original story, which content was used to
--   create the story
[from_story_full_id] :: SendStory -> Maybe StoryFullId

-- | Pass true to keep the story accessible after expiration
[is_posted_to_chat_page] :: SendStory -> Maybe Bool

-- | Pass true if the content of the story must be protected from
--   forwarding and screenshotting
[protect_content] :: SendStory -> Maybe Bool
defaultSendStory :: SendStory
instance GHC.Show.Show TD.Query.SendStory.SendStory
instance GHC.Classes.Eq TD.Query.SendStory.SendStory
instance TD.Lib.Internal.ShortShow TD.Query.SendStory.SendStory
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendStory.SendStory

module TD.Query.SendWebAppCustomRequest

-- | Sends a custom request from a Web App. Returns
--   <a>CustomRequestResult</a>
data SendWebAppCustomRequest
SendWebAppCustomRequest :: Maybe Int -> Maybe Text -> Maybe Text -> SendWebAppCustomRequest

-- | Identifier of the bot
[bot_user_id] :: SendWebAppCustomRequest -> Maybe Int

-- | The method name
[method] :: SendWebAppCustomRequest -> Maybe Text

-- | JSON-serialized method parameters
[parameters] :: SendWebAppCustomRequest -> Maybe Text
defaultSendWebAppCustomRequest :: SendWebAppCustomRequest
instance GHC.Show.Show TD.Query.SendWebAppCustomRequest.SendWebAppCustomRequest
instance GHC.Classes.Eq TD.Query.SendWebAppCustomRequest.SendWebAppCustomRequest
instance TD.Lib.Internal.ShortShow TD.Query.SendWebAppCustomRequest.SendWebAppCustomRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendWebAppCustomRequest.SendWebAppCustomRequest

module TD.Query.SendWebAppData

-- | Sends data received from a keyboardButtonTypeWebApp Web App to a bot.
--   Returns <a>Ok</a>
data SendWebAppData
SendWebAppData :: Maybe Int -> Maybe Text -> Maybe Text -> SendWebAppData

-- | Identifier of the target bot
[bot_user_id] :: SendWebAppData -> Maybe Int

-- | Text of the keyboardButtonTypeWebApp button, which opened the Web App
[button_text] :: SendWebAppData -> Maybe Text

-- | The data
[_data] :: SendWebAppData -> Maybe Text
defaultSendWebAppData :: SendWebAppData
instance GHC.Show.Show TD.Query.SendWebAppData.SendWebAppData
instance GHC.Classes.Eq TD.Query.SendWebAppData.SendWebAppData
instance TD.Lib.Internal.ShortShow TD.Query.SendWebAppData.SendWebAppData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SendWebAppData.SendWebAppData

module TD.Query.SetAccentColor

-- | Changes accent color and background custom emoji for the current user;
--   for Telegram Premium users only. Returns <a>Ok</a>
data SetAccentColor
SetAccentColor :: Maybe Int -> Maybe Int -> SetAccentColor

-- | Identifier of the accent color to use
[accent_color_id] :: SetAccentColor -> Maybe Int

-- | Identifier of a custom emoji to be shown on the reply header and link
--   preview background; 0 if none
[background_custom_emoji_id] :: SetAccentColor -> Maybe Int
defaultSetAccentColor :: SetAccentColor
instance GHC.Show.Show TD.Query.SetAccentColor.SetAccentColor
instance GHC.Classes.Eq TD.Query.SetAccentColor.SetAccentColor
instance TD.Lib.Internal.ShortShow TD.Query.SetAccentColor.SetAccentColor
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAccentColor.SetAccentColor

module TD.Query.SetAccountTtl

-- | Changes the period of inactivity after which the account of the
--   current user will automatically be deleted. Returns <a>Ok</a>
data SetAccountTtl
SetAccountTtl :: Maybe AccountTtl -> SetAccountTtl

-- | New account TTL
[ttl] :: SetAccountTtl -> Maybe AccountTtl
instance GHC.Show.Show TD.Query.SetAccountTtl.SetAccountTtl
instance GHC.Classes.Eq TD.Query.SetAccountTtl.SetAccountTtl
instance TD.Lib.Internal.ShortShow TD.Query.SetAccountTtl.SetAccountTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAccountTtl.SetAccountTtl

module TD.Query.SetAlarm

-- | Succeeds after a specified amount of time has passed. Can be called
--   before initialization. Returns <a>Ok</a>
data SetAlarm
SetAlarm :: Maybe Double -> SetAlarm

-- | Number of seconds before the function returns
[seconds] :: SetAlarm -> Maybe Double
instance GHC.Show.Show TD.Query.SetAlarm.SetAlarm
instance GHC.Classes.Eq TD.Query.SetAlarm.SetAlarm
instance TD.Lib.Internal.ShortShow TD.Query.SetAlarm.SetAlarm
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAlarm.SetAlarm

module TD.Query.SetArchiveChatListSettings

-- | Changes settings for automatic moving of chats to and from the Archive
--   chat lists. Returns <a>Ok</a>
data SetArchiveChatListSettings
SetArchiveChatListSettings :: Maybe ArchiveChatListSettings -> SetArchiveChatListSettings

-- | New settings
[settings] :: SetArchiveChatListSettings -> Maybe ArchiveChatListSettings
instance GHC.Show.Show TD.Query.SetArchiveChatListSettings.SetArchiveChatListSettings
instance GHC.Classes.Eq TD.Query.SetArchiveChatListSettings.SetArchiveChatListSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetArchiveChatListSettings.SetArchiveChatListSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetArchiveChatListSettings.SetArchiveChatListSettings

module TD.Query.SetAuthenticationEmailAddress

-- | Sets the email address of the user and sends an authentication code to
--   the email address. Works only when the current authorization state is
--   authorizationStateWaitEmailAddress. Returns <a>Ok</a>
data SetAuthenticationEmailAddress
SetAuthenticationEmailAddress :: Maybe Text -> SetAuthenticationEmailAddress

-- | The email address of the user
[email_address] :: SetAuthenticationEmailAddress -> Maybe Text
instance GHC.Show.Show TD.Query.SetAuthenticationEmailAddress.SetAuthenticationEmailAddress
instance GHC.Classes.Eq TD.Query.SetAuthenticationEmailAddress.SetAuthenticationEmailAddress
instance TD.Lib.Internal.ShortShow TD.Query.SetAuthenticationEmailAddress.SetAuthenticationEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAuthenticationEmailAddress.SetAuthenticationEmailAddress

module TD.Query.SetAuthenticationPhoneNumber

-- | Sets the phone number of the user and sends an authentication code to
--   the user. Works only when the current authorization state is
--   authorizationStateWaitPhoneNumber, or if there is no pending
--   authentication query and the current authorization state is
--   authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode,
--   authorizationStateWaitCode, authorizationStateWaitRegistration, or
--   authorizationStateWaitPassword. Returns <a>Ok</a>
data SetAuthenticationPhoneNumber
SetAuthenticationPhoneNumber :: Maybe Text -> Maybe PhoneNumberAuthenticationSettings -> SetAuthenticationPhoneNumber

-- | The phone number of the user, in international format
[phone_number] :: SetAuthenticationPhoneNumber -> Maybe Text

-- | Settings for the authentication of the user's phone number; pass null
--   to use default settings
[settings] :: SetAuthenticationPhoneNumber -> Maybe PhoneNumberAuthenticationSettings
defaultSetAuthenticationPhoneNumber :: SetAuthenticationPhoneNumber
instance GHC.Show.Show TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber
instance GHC.Classes.Eq TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber
instance TD.Lib.Internal.ShortShow TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAuthenticationPhoneNumber.SetAuthenticationPhoneNumber

module TD.Query.SetAutoDownloadSettings

-- | Sets auto-download settings. Returns <a>Ok</a>
data SetAutoDownloadSettings
SetAutoDownloadSettings :: Maybe AutoDownloadSettings -> Maybe NetworkType -> SetAutoDownloadSettings

-- | New user auto-download settings
[settings] :: SetAutoDownloadSettings -> Maybe AutoDownloadSettings

-- | Type of the network for which the new settings are relevant
[_type] :: SetAutoDownloadSettings -> Maybe NetworkType
defaultSetAutoDownloadSettings :: SetAutoDownloadSettings
instance GHC.Show.Show TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings
instance GHC.Classes.Eq TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAutoDownloadSettings.SetAutoDownloadSettings

module TD.Query.SetAutosaveSettings

-- | Sets autosave settings for the given scope. The method is guaranteed
--   to work only after at least one call to getAutosaveSettings. Returns
--   <a>Ok</a>
data SetAutosaveSettings
SetAutosaveSettings :: Maybe AutosaveSettingsScope -> Maybe ScopeAutosaveSettings -> SetAutosaveSettings

-- | Autosave settings scope
[scope] :: SetAutosaveSettings -> Maybe AutosaveSettingsScope

-- | New autosave settings for the scope; pass null to set autosave
--   settings to default
[settings] :: SetAutosaveSettings -> Maybe ScopeAutosaveSettings
defaultSetAutosaveSettings :: SetAutosaveSettings
instance GHC.Show.Show TD.Query.SetAutosaveSettings.SetAutosaveSettings
instance GHC.Classes.Eq TD.Query.SetAutosaveSettings.SetAutosaveSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetAutosaveSettings.SetAutosaveSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetAutosaveSettings.SetAutosaveSettings

module TD.Query.SetBio

-- | Changes the bio of the current user. Returns <a>Ok</a>
data SetBio
SetBio :: Maybe Text -> SetBio

-- | The new value of the user bio; 0-getOption("bio_length_max")
--   characters without line feeds
[bio] :: SetBio -> Maybe Text
instance GHC.Show.Show TD.Query.SetBio.SetBio
instance GHC.Classes.Eq TD.Query.SetBio.SetBio
instance TD.Lib.Internal.ShortShow TD.Query.SetBio.SetBio
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBio.SetBio

module TD.Query.SetBirthdate

-- | Changes the birthdate of the current user. Returns <a>Ok</a>
data SetBirthdate
SetBirthdate :: Maybe Birthdate -> SetBirthdate

-- | The new value of the current user's birthdate; pass null to remove the
--   birthdate
[birthdate] :: SetBirthdate -> Maybe Birthdate
instance GHC.Show.Show TD.Query.SetBirthdate.SetBirthdate
instance GHC.Classes.Eq TD.Query.SetBirthdate.SetBirthdate
instance TD.Lib.Internal.ShortShow TD.Query.SetBirthdate.SetBirthdate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBirthdate.SetBirthdate

module TD.Query.SetBotInfoDescription

-- | Sets the text shown in the chat with a bot if the chat is empty. Can
--   be called only if userTypeBot.can_be_edited == true. Returns <a>Ok</a>
data SetBotInfoDescription
SetBotInfoDescription :: Maybe Int -> Maybe Text -> Maybe Text -> SetBotInfoDescription

-- | Identifier of the target bot
[bot_user_id] :: SetBotInfoDescription -> Maybe Int

-- | A two-letter ISO 639-1 language code. If empty, the description will
--   be shown to all users for whose languages there is no dedicated
--   description
[language_code] :: SetBotInfoDescription -> Maybe Text
[description] :: SetBotInfoDescription -> Maybe Text
defaultSetBotInfoDescription :: SetBotInfoDescription
instance GHC.Show.Show TD.Query.SetBotInfoDescription.SetBotInfoDescription
instance GHC.Classes.Eq TD.Query.SetBotInfoDescription.SetBotInfoDescription
instance TD.Lib.Internal.ShortShow TD.Query.SetBotInfoDescription.SetBotInfoDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotInfoDescription.SetBotInfoDescription

module TD.Query.SetBotInfoShortDescription

-- | Sets the text shown on a bot's profile page and sent together with the
--   link when users share the bot. Can be called only if
--   userTypeBot.can_be_edited == true. Returns <a>Ok</a>
data SetBotInfoShortDescription
SetBotInfoShortDescription :: Maybe Int -> Maybe Text -> Maybe Text -> SetBotInfoShortDescription

-- | Identifier of the target bot
[bot_user_id] :: SetBotInfoShortDescription -> Maybe Int

-- | A two-letter ISO 639-1 language code. If empty, the short description
--   will be shown to all users for whose languages there is no dedicated
--   description
[language_code] :: SetBotInfoShortDescription -> Maybe Text

-- | New bot's short description on the specified language
[short_description] :: SetBotInfoShortDescription -> Maybe Text
defaultSetBotInfoShortDescription :: SetBotInfoShortDescription
instance GHC.Show.Show TD.Query.SetBotInfoShortDescription.SetBotInfoShortDescription
instance GHC.Classes.Eq TD.Query.SetBotInfoShortDescription.SetBotInfoShortDescription
instance TD.Lib.Internal.ShortShow TD.Query.SetBotInfoShortDescription.SetBotInfoShortDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotInfoShortDescription.SetBotInfoShortDescription

module TD.Query.SetBotName

-- | Sets the name of a bot. Can be called only if
--   userTypeBot.can_be_edited == true. Returns <a>Ok</a>
data SetBotName
SetBotName :: Maybe Int -> Maybe Text -> Maybe Text -> SetBotName

-- | Identifier of the target bot
[bot_user_id] :: SetBotName -> Maybe Int

-- | A two-letter ISO 639-1 language code. If empty, the name will be shown
--   to all users for whose languages there is no dedicated name
[language_code] :: SetBotName -> Maybe Text

-- | New bot's name on the specified language; 0-64 characters; must be
--   non-empty if language code is empty
[name] :: SetBotName -> Maybe Text
defaultSetBotName :: SetBotName
instance GHC.Show.Show TD.Query.SetBotName.SetBotName
instance GHC.Classes.Eq TD.Query.SetBotName.SetBotName
instance TD.Lib.Internal.ShortShow TD.Query.SetBotName.SetBotName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotName.SetBotName

module TD.Query.SetBotProfilePhoto

-- | Changes a profile photo for a bot. Returns <a>Ok</a>
data SetBotProfilePhoto
SetBotProfilePhoto :: Maybe Int -> Maybe InputChatPhoto -> SetBotProfilePhoto

-- | Identifier of the target bot
[bot_user_id] :: SetBotProfilePhoto -> Maybe Int

-- | Profile photo to set; pass null to delete the chat photo
[photo] :: SetBotProfilePhoto -> Maybe InputChatPhoto
defaultSetBotProfilePhoto :: SetBotProfilePhoto
instance GHC.Show.Show TD.Query.SetBotProfilePhoto.SetBotProfilePhoto
instance GHC.Classes.Eq TD.Query.SetBotProfilePhoto.SetBotProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Query.SetBotProfilePhoto.SetBotProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotProfilePhoto.SetBotProfilePhoto

module TD.Query.SetBotUpdatesStatus

-- | Informs the server about the number of pending bot updates if they
--   haven't been processed for a long time; for bots only. Returns
--   <a>Ok</a>
data SetBotUpdatesStatus
SetBotUpdatesStatus :: Maybe Int -> Maybe Text -> SetBotUpdatesStatus

-- | The number of pending updates
[pending_update_count] :: SetBotUpdatesStatus -> Maybe Int

-- | The last error message
[error_message] :: SetBotUpdatesStatus -> Maybe Text
defaultSetBotUpdatesStatus :: SetBotUpdatesStatus
instance GHC.Show.Show TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus
instance GHC.Classes.Eq TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus
instance TD.Lib.Internal.ShortShow TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBotUpdatesStatus.SetBotUpdatesStatus

module TD.Query.SetBusinessAwayMessageSettings

-- | Changes the business away message settings of the current user.
--   Requires Telegram Business subscription. Returns <a>Ok</a>
data SetBusinessAwayMessageSettings
SetBusinessAwayMessageSettings :: Maybe BusinessAwayMessageSettings -> SetBusinessAwayMessageSettings

-- | The new settings for the away message of the business; pass null to
--   disable the away message
[away_message_settings] :: SetBusinessAwayMessageSettings -> Maybe BusinessAwayMessageSettings
instance GHC.Show.Show TD.Query.SetBusinessAwayMessageSettings.SetBusinessAwayMessageSettings
instance GHC.Classes.Eq TD.Query.SetBusinessAwayMessageSettings.SetBusinessAwayMessageSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessAwayMessageSettings.SetBusinessAwayMessageSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessAwayMessageSettings.SetBusinessAwayMessageSettings

module TD.Query.SetBusinessConnectedBot

-- | Adds or changes business bot that is connected to the current user
--   account. Returns <a>Ok</a>
data SetBusinessConnectedBot
SetBusinessConnectedBot :: Maybe BusinessConnectedBot -> SetBusinessConnectedBot

-- | Connection settings for the bot
[bot] :: SetBusinessConnectedBot -> Maybe BusinessConnectedBot
instance GHC.Show.Show TD.Query.SetBusinessConnectedBot.SetBusinessConnectedBot
instance GHC.Classes.Eq TD.Query.SetBusinessConnectedBot.SetBusinessConnectedBot
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessConnectedBot.SetBusinessConnectedBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessConnectedBot.SetBusinessConnectedBot

module TD.Query.SetBusinessGreetingMessageSettings

-- | Changes the business greeting message settings of the current user.
--   Requires Telegram Business subscription. Returns <a>Ok</a>
data SetBusinessGreetingMessageSettings
SetBusinessGreetingMessageSettings :: Maybe BusinessGreetingMessageSettings -> SetBusinessGreetingMessageSettings

-- | The new settings for the greeting message of the business; pass null
--   to disable the greeting message
[greeting_message_settings] :: SetBusinessGreetingMessageSettings -> Maybe BusinessGreetingMessageSettings
instance GHC.Show.Show TD.Query.SetBusinessGreetingMessageSettings.SetBusinessGreetingMessageSettings
instance GHC.Classes.Eq TD.Query.SetBusinessGreetingMessageSettings.SetBusinessGreetingMessageSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessGreetingMessageSettings.SetBusinessGreetingMessageSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessGreetingMessageSettings.SetBusinessGreetingMessageSettings

module TD.Query.SetBusinessLocation

-- | Changes the business location of the current user. Requires Telegram
--   Business subscription. Returns <a>Ok</a>
data SetBusinessLocation
SetBusinessLocation :: Maybe BusinessLocation -> SetBusinessLocation

-- | The new location of the business; pass null to remove the location
[location] :: SetBusinessLocation -> Maybe BusinessLocation
instance GHC.Show.Show TD.Query.SetBusinessLocation.SetBusinessLocation
instance GHC.Classes.Eq TD.Query.SetBusinessLocation.SetBusinessLocation
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessLocation.SetBusinessLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessLocation.SetBusinessLocation

module TD.Query.SetBusinessOpeningHours

-- | Changes the business opening hours of the current user. Requires
--   Telegram Business subscription. Returns <a>Ok</a>
data SetBusinessOpeningHours
SetBusinessOpeningHours :: Maybe BusinessOpeningHours -> SetBusinessOpeningHours

-- | The new opening hours of the business; pass null to remove the opening
--   hours; up to 28 time intervals can be specified
[opening_hours] :: SetBusinessOpeningHours -> Maybe BusinessOpeningHours
instance GHC.Show.Show TD.Query.SetBusinessOpeningHours.SetBusinessOpeningHours
instance GHC.Classes.Eq TD.Query.SetBusinessOpeningHours.SetBusinessOpeningHours
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessOpeningHours.SetBusinessOpeningHours
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessOpeningHours.SetBusinessOpeningHours

module TD.Query.SetBusinessStartPage

-- | Changes the business start page of the current user. Requires Telegram
--   Business subscription. Returns <a>Ok</a>
data SetBusinessStartPage
SetBusinessStartPage :: Maybe InputBusinessStartPage -> SetBusinessStartPage

-- | The new start page of the business; pass null to remove custom start
--   page
[start_page] :: SetBusinessStartPage -> Maybe InputBusinessStartPage
instance GHC.Show.Show TD.Query.SetBusinessStartPage.SetBusinessStartPage
instance GHC.Classes.Eq TD.Query.SetBusinessStartPage.SetBusinessStartPage
instance TD.Lib.Internal.ShortShow TD.Query.SetBusinessStartPage.SetBusinessStartPage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetBusinessStartPage.SetBusinessStartPage

module TD.Query.SetChatAccentColor

-- | Changes accent color and background custom emoji of a channel chat.
--   Requires can_change_info administrator right. Returns <a>Ok</a>
data SetChatAccentColor
SetChatAccentColor :: Maybe Int -> Maybe Int -> Maybe Int -> SetChatAccentColor

-- | Chat identifier
[chat_id] :: SetChatAccentColor -> Maybe Int

-- | Identifier of the accent color to use. The chat must have at least
--   accentColor.min_channel_chat_boost_level boost level to pass the
--   corresponding color
[accent_color_id] :: SetChatAccentColor -> Maybe Int

-- | Identifier of a custom emoji to be shown on the reply header and link
--   preview background; 0 if none. Use
--   chatBoostLevelFeatures.can_set_background_custom_emoji to check
--   whether a custom emoji can be set
[background_custom_emoji_id] :: SetChatAccentColor -> Maybe Int
defaultSetChatAccentColor :: SetChatAccentColor
instance GHC.Show.Show TD.Query.SetChatAccentColor.SetChatAccentColor
instance GHC.Classes.Eq TD.Query.SetChatAccentColor.SetChatAccentColor
instance TD.Lib.Internal.ShortShow TD.Query.SetChatAccentColor.SetChatAccentColor
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatAccentColor.SetChatAccentColor

module TD.Query.SetChatActiveStoriesList

-- | Changes story list in which stories from the chat are shown. Returns
--   <a>Ok</a>
data SetChatActiveStoriesList
SetChatActiveStoriesList :: Maybe Int -> Maybe StoryList -> SetChatActiveStoriesList

-- | Identifier of the chat that posted stories
[chat_id] :: SetChatActiveStoriesList -> Maybe Int

-- | New list for active stories posted by the chat
[story_list] :: SetChatActiveStoriesList -> Maybe StoryList
defaultSetChatActiveStoriesList :: SetChatActiveStoriesList
instance GHC.Show.Show TD.Query.SetChatActiveStoriesList.SetChatActiveStoriesList
instance GHC.Classes.Eq TD.Query.SetChatActiveStoriesList.SetChatActiveStoriesList
instance TD.Lib.Internal.ShortShow TD.Query.SetChatActiveStoriesList.SetChatActiveStoriesList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatActiveStoriesList.SetChatActiveStoriesList

module TD.Query.SetChatAvailableReactions

-- | Changes reactions, available in a chat. Available for basic groups,
--   supergroups, and channels. Requires can_change_info member right.
--   Returns <a>Ok</a>
data SetChatAvailableReactions
SetChatAvailableReactions :: Maybe Int -> Maybe ChatAvailableReactions -> SetChatAvailableReactions

-- | Identifier of the chat
[chat_id] :: SetChatAvailableReactions -> Maybe Int

-- | Reactions available in the chat. All explicitly specified emoji
--   reactions must be active. In channel chats up to the chat's boost
--   level custom emoji reactions can be explicitly specified
[available_reactions] :: SetChatAvailableReactions -> Maybe ChatAvailableReactions
defaultSetChatAvailableReactions :: SetChatAvailableReactions
instance GHC.Show.Show TD.Query.SetChatAvailableReactions.SetChatAvailableReactions
instance GHC.Classes.Eq TD.Query.SetChatAvailableReactions.SetChatAvailableReactions
instance TD.Lib.Internal.ShortShow TD.Query.SetChatAvailableReactions.SetChatAvailableReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatAvailableReactions.SetChatAvailableReactions

module TD.Query.SetChatBackground

-- | Sets the background in a specific chat. Supported only in private and
--   secret chats with non-deleted users, and in chats with sufficient
--   boost level and can_change_info administrator right. Returns <a>Ok</a>
data SetChatBackground
SetChatBackground :: Maybe Int -> Maybe InputBackground -> Maybe BackgroundType -> Maybe Int -> Maybe Bool -> SetChatBackground

-- | Chat identifier
[chat_id] :: SetChatBackground -> Maybe Int

-- | The input background to use; pass null to create a new filled or chat
--   theme background
[background] :: SetChatBackground -> Maybe InputBackground

-- | Background type; pass null to use default background type for the
--   chosen background; backgroundTypeChatTheme isn't supported for private
--   and secret chats. Use
--   chatBoostLevelFeatures.chat_theme_background_count and
--   chatBoostLevelFeatures.can_set_custom_background to check whether the
--   background type can be set in the boosted chat
[_type] :: SetChatBackground -> Maybe BackgroundType

-- | Dimming of the background in dark themes, as a percentage; 0-100.
--   Applied only to Wallpaper and Fill types of background
[dark_theme_dimming] :: SetChatBackground -> Maybe Int

-- | Pass true to set background only for self; pass false to set
--   background for all chat users. Always false for backgrounds set in
--   boosted chats. Background can be set for both users only by Telegram
--   Premium users and if set background isn't of the type
--   inputBackgroundPrevious
[only_for_self] :: SetChatBackground -> Maybe Bool
defaultSetChatBackground :: SetChatBackground
instance GHC.Show.Show TD.Query.SetChatBackground.SetChatBackground
instance GHC.Classes.Eq TD.Query.SetChatBackground.SetChatBackground
instance TD.Lib.Internal.ShortShow TD.Query.SetChatBackground.SetChatBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatBackground.SetChatBackground

module TD.Query.SetChatClientData

-- | Changes application-specific data associated with a chat. Returns
--   <a>Ok</a>
data SetChatClientData
SetChatClientData :: Maybe Int -> Maybe Text -> SetChatClientData

-- | Chat identifier
[chat_id] :: SetChatClientData -> Maybe Int

-- | New value of client_data
[client_data] :: SetChatClientData -> Maybe Text
defaultSetChatClientData :: SetChatClientData
instance GHC.Show.Show TD.Query.SetChatClientData.SetChatClientData
instance GHC.Classes.Eq TD.Query.SetChatClientData.SetChatClientData
instance TD.Lib.Internal.ShortShow TD.Query.SetChatClientData.SetChatClientData
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatClientData.SetChatClientData

module TD.Query.SetChatDescription

-- | Changes information about a chat. Available for basic groups,
--   supergroups, and channels. Requires can_change_info member right.
--   Returns <a>Ok</a>
data SetChatDescription
SetChatDescription :: Maybe Int -> Maybe Text -> SetChatDescription

-- | Identifier of the chat
[chat_id] :: SetChatDescription -> Maybe Int
[description] :: SetChatDescription -> Maybe Text
defaultSetChatDescription :: SetChatDescription
instance GHC.Show.Show TD.Query.SetChatDescription.SetChatDescription
instance GHC.Classes.Eq TD.Query.SetChatDescription.SetChatDescription
instance TD.Lib.Internal.ShortShow TD.Query.SetChatDescription.SetChatDescription
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDescription.SetChatDescription

module TD.Query.SetChatDiscussionGroup

-- | Changes the discussion group of a channel chat; requires
--   can_change_info administrator right in the channel if it is specified.
--   Returns <a>Ok</a>
data SetChatDiscussionGroup
SetChatDiscussionGroup :: Maybe Int -> Maybe Int -> SetChatDiscussionGroup

-- | Identifier of the channel chat. Pass 0 to remove a link from the
--   supergroup passed in the second argument to a linked channel chat
--   (requires can_pin_messages member right in the supergroup)
[chat_id] :: SetChatDiscussionGroup -> Maybe Int

-- | Identifier of a new channel's discussion group. Use 0 to remove the
--   discussion group. Use the method getSuitableDiscussionChats to find
--   all suitable groups. Basic group chats must be first upgraded to
--   supergroup chats. If new chat members don't have access to old
--   messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable
--   must be used first to change that
[discussion_chat_id] :: SetChatDiscussionGroup -> Maybe Int
defaultSetChatDiscussionGroup :: SetChatDiscussionGroup
instance GHC.Show.Show TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup
instance GHC.Classes.Eq TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup
instance TD.Lib.Internal.ShortShow TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDiscussionGroup.SetChatDiscussionGroup

module TD.Query.SetChatDraftMessage

-- | Changes the draft message in a chat. Returns <a>Ok</a>
data SetChatDraftMessage
SetChatDraftMessage :: Maybe Int -> Maybe Int -> Maybe DraftMessage -> SetChatDraftMessage

-- | Chat identifier
[chat_id] :: SetChatDraftMessage -> Maybe Int

-- | If not 0, the message thread identifier in which the draft was changed
[message_thread_id] :: SetChatDraftMessage -> Maybe Int

-- | New draft message; pass null to remove the draft. All files in draft
--   message content must be of the type inputFileLocal. Media thumbnails
--   and captions are ignored
[draft_message] :: SetChatDraftMessage -> Maybe DraftMessage
defaultSetChatDraftMessage :: SetChatDraftMessage
instance GHC.Show.Show TD.Query.SetChatDraftMessage.SetChatDraftMessage
instance GHC.Classes.Eq TD.Query.SetChatDraftMessage.SetChatDraftMessage
instance TD.Lib.Internal.ShortShow TD.Query.SetChatDraftMessage.SetChatDraftMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatDraftMessage.SetChatDraftMessage

module TD.Query.SetChatEmojiStatus

-- | Changes the emoji status of a chat. Use
--   chatBoostLevelFeatures.can_set_emoji_status to check whether an emoji
--   status can be set. Requires can_change_info administrator right.
--   Returns <a>Ok</a>
data SetChatEmojiStatus
SetChatEmojiStatus :: Maybe Int -> Maybe EmojiStatus -> SetChatEmojiStatus

-- | Chat identifier
[chat_id] :: SetChatEmojiStatus -> Maybe Int

-- | New emoji status; pass null to remove emoji status
[emoji_status] :: SetChatEmojiStatus -> Maybe EmojiStatus
defaultSetChatEmojiStatus :: SetChatEmojiStatus
instance GHC.Show.Show TD.Query.SetChatEmojiStatus.SetChatEmojiStatus
instance GHC.Classes.Eq TD.Query.SetChatEmojiStatus.SetChatEmojiStatus
instance TD.Lib.Internal.ShortShow TD.Query.SetChatEmojiStatus.SetChatEmojiStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatEmojiStatus.SetChatEmojiStatus

module TD.Query.SetChatLocation

-- | Changes the location of a chat. Available only for some location-based
--   supergroups, use supergroupFullInfo.can_set_location to check whether
--   the method is allowed to use. Returns <a>Ok</a>
data SetChatLocation
SetChatLocation :: Maybe Int -> Maybe ChatLocation -> SetChatLocation

-- | Chat identifier
[chat_id] :: SetChatLocation -> Maybe Int

-- | New location for the chat; must be valid and not null
[location] :: SetChatLocation -> Maybe ChatLocation
defaultSetChatLocation :: SetChatLocation
instance GHC.Show.Show TD.Query.SetChatLocation.SetChatLocation
instance GHC.Classes.Eq TD.Query.SetChatLocation.SetChatLocation
instance TD.Lib.Internal.ShortShow TD.Query.SetChatLocation.SetChatLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatLocation.SetChatLocation

module TD.Query.SetChatMemberStatus

-- | Changes the status of a chat member; requires can_invite_users member
--   right to add a chat member, can_promote_members administrator right to
--   change administrator rights of the member, and can_restrict_members
--   administrator right to change restrictions of a user. This function is
--   currently not suitable for transferring chat ownership; use
--   transferChatOwnership instead. Use addChatMember or banChatMember if
--   some additional parameters needs to be passed. Returns <a>Ok</a>
data SetChatMemberStatus
SetChatMemberStatus :: Maybe Int -> Maybe MessageSender -> Maybe ChatMemberStatus -> SetChatMemberStatus

-- | Chat identifier
[chat_id] :: SetChatMemberStatus -> Maybe Int

-- | Member identifier. Chats can be only banned and unbanned in
--   supergroups and channels
[member_id] :: SetChatMemberStatus -> Maybe MessageSender

-- | The new status of the member in the chat
[status] :: SetChatMemberStatus -> Maybe ChatMemberStatus
defaultSetChatMemberStatus :: SetChatMemberStatus
instance GHC.Show.Show TD.Query.SetChatMemberStatus.SetChatMemberStatus
instance GHC.Classes.Eq TD.Query.SetChatMemberStatus.SetChatMemberStatus
instance TD.Lib.Internal.ShortShow TD.Query.SetChatMemberStatus.SetChatMemberStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMemberStatus.SetChatMemberStatus

module TD.Query.SetChatMessageAutoDeleteTime

-- | Changes the message auto-delete or self-destruct (for secret chats)
--   time in a chat. Requires change_info administrator right in basic
--   groups, supergroups and channels Message auto-delete time can't be
--   changed in a chat with the current user (Saved Messages) and the chat
--   777000 (Telegram).. Returns <a>Ok</a>
data SetChatMessageAutoDeleteTime
SetChatMessageAutoDeleteTime :: Maybe Int -> Maybe Int -> SetChatMessageAutoDeleteTime

-- | Chat identifier
[chat_id] :: SetChatMessageAutoDeleteTime -> Maybe Int

-- | New time value, in seconds; unless the chat is secret, it must be from
--   0 up to 365 * 86400 and be divisible by 86400. If 0, then messages
--   aren't deleted automatically
[message_auto_delete_time] :: SetChatMessageAutoDeleteTime -> Maybe Int
defaultSetChatMessageAutoDeleteTime :: SetChatMessageAutoDeleteTime
instance GHC.Show.Show TD.Query.SetChatMessageAutoDeleteTime.SetChatMessageAutoDeleteTime
instance GHC.Classes.Eq TD.Query.SetChatMessageAutoDeleteTime.SetChatMessageAutoDeleteTime
instance TD.Lib.Internal.ShortShow TD.Query.SetChatMessageAutoDeleteTime.SetChatMessageAutoDeleteTime
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMessageAutoDeleteTime.SetChatMessageAutoDeleteTime

module TD.Query.SetChatMessageSender

-- | Selects a message sender to send messages in a chat. Returns <a>Ok</a>
data SetChatMessageSender
SetChatMessageSender :: Maybe Int -> Maybe MessageSender -> SetChatMessageSender

-- | Chat identifier
[chat_id] :: SetChatMessageSender -> Maybe Int

-- | New message sender for the chat
[message_sender_id] :: SetChatMessageSender -> Maybe MessageSender
defaultSetChatMessageSender :: SetChatMessageSender
instance GHC.Show.Show TD.Query.SetChatMessageSender.SetChatMessageSender
instance GHC.Classes.Eq TD.Query.SetChatMessageSender.SetChatMessageSender
instance TD.Lib.Internal.ShortShow TD.Query.SetChatMessageSender.SetChatMessageSender
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatMessageSender.SetChatMessageSender

module TD.Query.SetChatNotificationSettings

-- | Changes the notification settings of a chat. Notification settings of
--   a chat with the current user (Saved Messages) can't be changed.
--   Returns <a>Ok</a>
data SetChatNotificationSettings
SetChatNotificationSettings :: Maybe Int -> Maybe ChatNotificationSettings -> SetChatNotificationSettings

-- | Chat identifier
[chat_id] :: SetChatNotificationSettings -> Maybe Int

-- | New notification settings for the chat. If the chat is muted for more
--   than 366 days, it is considered to be muted forever
[notification_settings] :: SetChatNotificationSettings -> Maybe ChatNotificationSettings
defaultSetChatNotificationSettings :: SetChatNotificationSettings
instance GHC.Show.Show TD.Query.SetChatNotificationSettings.SetChatNotificationSettings
instance GHC.Classes.Eq TD.Query.SetChatNotificationSettings.SetChatNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetChatNotificationSettings.SetChatNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatNotificationSettings.SetChatNotificationSettings

module TD.Query.SetChatPermissions

-- | Changes the chat members permissions. Supported only for basic groups
--   and supergroups. Requires can_restrict_members administrator right.
--   Returns <a>Ok</a>
data SetChatPermissions
SetChatPermissions :: Maybe Int -> Maybe ChatPermissions -> SetChatPermissions

-- | Chat identifier
[chat_id] :: SetChatPermissions -> Maybe Int

-- | New non-administrator members permissions in the chat
[permissions] :: SetChatPermissions -> Maybe ChatPermissions
defaultSetChatPermissions :: SetChatPermissions
instance GHC.Show.Show TD.Query.SetChatPermissions.SetChatPermissions
instance GHC.Classes.Eq TD.Query.SetChatPermissions.SetChatPermissions
instance TD.Lib.Internal.ShortShow TD.Query.SetChatPermissions.SetChatPermissions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatPermissions.SetChatPermissions

module TD.Query.SetChatPhoto

-- | Changes the photo of a chat. Supported only for basic groups,
--   supergroups and channels. Requires can_change_info member right.
--   Returns <a>Ok</a>
data SetChatPhoto
SetChatPhoto :: Maybe Int -> Maybe InputChatPhoto -> SetChatPhoto

-- | Chat identifier
[chat_id] :: SetChatPhoto -> Maybe Int

-- | New chat photo; pass null to delete the chat photo
[photo] :: SetChatPhoto -> Maybe InputChatPhoto
defaultSetChatPhoto :: SetChatPhoto
instance GHC.Show.Show TD.Query.SetChatPhoto.SetChatPhoto
instance GHC.Classes.Eq TD.Query.SetChatPhoto.SetChatPhoto
instance TD.Lib.Internal.ShortShow TD.Query.SetChatPhoto.SetChatPhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatPhoto.SetChatPhoto

module TD.Query.SetChatPinnedStories

-- | Changes the list of pinned stories on a chat page; requires
--   can_edit_stories right in the chat. Returns <a>Ok</a>
data SetChatPinnedStories
SetChatPinnedStories :: Maybe Int -> Maybe [Int] -> SetChatPinnedStories

-- | Identifier of the chat that posted the stories
[chat_id] :: SetChatPinnedStories -> Maybe Int

-- | New list of pinned stories. All stories must be posted to the chat
--   page first. There can be up to getOption("pinned_story_count_max")
--   pinned stories on a chat page
[story_ids] :: SetChatPinnedStories -> Maybe [Int]
defaultSetChatPinnedStories :: SetChatPinnedStories
instance GHC.Show.Show TD.Query.SetChatPinnedStories.SetChatPinnedStories
instance GHC.Classes.Eq TD.Query.SetChatPinnedStories.SetChatPinnedStories
instance TD.Lib.Internal.ShortShow TD.Query.SetChatPinnedStories.SetChatPinnedStories
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatPinnedStories.SetChatPinnedStories

module TD.Query.SetChatProfileAccentColor

-- | Changes accent color and background custom emoji for profile of a
--   supergroup or channel chat. Requires can_change_info administrator
--   right. Returns <a>Ok</a>
data SetChatProfileAccentColor
SetChatProfileAccentColor :: Maybe Int -> Maybe Int -> Maybe Int -> SetChatProfileAccentColor

-- | Chat identifier
[chat_id] :: SetChatProfileAccentColor -> Maybe Int

-- | Identifier of the accent color to use for profile; pass -1 if none.
--   The chat must have at least
--   profileAccentColor.min_supergroup_chat_boost_level for supergroups or
--   profileAccentColor.min_channel_chat_boost_level for channels boost
--   level to pass the corresponding color
[profile_accent_color_id] :: SetChatProfileAccentColor -> Maybe Int

-- | Identifier of a custom emoji to be shown on the chat's profile photo
--   background; 0 if none. Use
--   chatBoostLevelFeatures.can_set_profile_background_custom_emoji to
--   check whether a custom emoji can be set
[profile_background_custom_emoji_id] :: SetChatProfileAccentColor -> Maybe Int
defaultSetChatProfileAccentColor :: SetChatProfileAccentColor
instance GHC.Show.Show TD.Query.SetChatProfileAccentColor.SetChatProfileAccentColor
instance GHC.Classes.Eq TD.Query.SetChatProfileAccentColor.SetChatProfileAccentColor
instance TD.Lib.Internal.ShortShow TD.Query.SetChatProfileAccentColor.SetChatProfileAccentColor
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatProfileAccentColor.SetChatProfileAccentColor

module TD.Query.SetChatSlowModeDelay

-- | Changes the slow mode delay of a chat. Available only for supergroups;
--   requires can_restrict_members right. Returns <a>Ok</a>
data SetChatSlowModeDelay
SetChatSlowModeDelay :: Maybe Int -> Maybe Int -> SetChatSlowModeDelay

-- | Chat identifier
[chat_id] :: SetChatSlowModeDelay -> Maybe Int

-- | New slow mode delay for the chat, in seconds; must be one of 0, 10,
--   30, 60, 300, 900, 3600
[slow_mode_delay] :: SetChatSlowModeDelay -> Maybe Int
defaultSetChatSlowModeDelay :: SetChatSlowModeDelay
instance GHC.Show.Show TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay
instance GHC.Classes.Eq TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay
instance TD.Lib.Internal.ShortShow TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatSlowModeDelay.SetChatSlowModeDelay

module TD.Query.SetChatTheme

-- | Changes the chat theme. Supported only in private and secret chats.
--   Returns <a>Ok</a>
data SetChatTheme
SetChatTheme :: Maybe Int -> Maybe Text -> SetChatTheme

-- | Chat identifier
[chat_id] :: SetChatTheme -> Maybe Int

-- | Name of the new chat theme; pass an empty string to return the default
--   theme
[theme_name] :: SetChatTheme -> Maybe Text
defaultSetChatTheme :: SetChatTheme
instance GHC.Show.Show TD.Query.SetChatTheme.SetChatTheme
instance GHC.Classes.Eq TD.Query.SetChatTheme.SetChatTheme
instance TD.Lib.Internal.ShortShow TD.Query.SetChatTheme.SetChatTheme
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatTheme.SetChatTheme

module TD.Query.SetChatTitle

-- | Changes the chat title. Supported only for basic groups, supergroups
--   and channels. Requires can_change_info member right. Returns <a>Ok</a>
data SetChatTitle
SetChatTitle :: Maybe Int -> Maybe Text -> SetChatTitle

-- | Chat identifier
[chat_id] :: SetChatTitle -> Maybe Int

-- | New title of the chat; 1-128 characters
[title] :: SetChatTitle -> Maybe Text
defaultSetChatTitle :: SetChatTitle
instance GHC.Show.Show TD.Query.SetChatTitle.SetChatTitle
instance GHC.Classes.Eq TD.Query.SetChatTitle.SetChatTitle
instance TD.Lib.Internal.ShortShow TD.Query.SetChatTitle.SetChatTitle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetChatTitle.SetChatTitle

module TD.Query.SetCloseFriends

-- | Changes the list of close friends of the current user. Returns
--   <a>Ok</a>
data SetCloseFriends
SetCloseFriends :: Maybe [Int] -> SetCloseFriends

-- | User identifiers of close friends; the users must be contacts of the
--   current user
[user_ids] :: SetCloseFriends -> Maybe [Int]
instance GHC.Show.Show TD.Query.SetCloseFriends.SetCloseFriends
instance GHC.Classes.Eq TD.Query.SetCloseFriends.SetCloseFriends
instance TD.Lib.Internal.ShortShow TD.Query.SetCloseFriends.SetCloseFriends
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCloseFriends.SetCloseFriends

module TD.Query.SetCommands

-- | Sets the list of commands supported by the bot for the given user
--   scope and language; for bots only. Returns <a>Ok</a>
data SetCommands
SetCommands :: Maybe BotCommandScope -> Maybe Text -> Maybe [BotCommand] -> SetCommands

-- | The scope to which the commands are relevant; pass null to change
--   commands in the default bot command scope
[scope] :: SetCommands -> Maybe BotCommandScope

-- | A two-letter ISO 639-1 language code. If empty, the commands will be
--   applied to all users from the given scope, for which language there
--   are no dedicated commands
[language_code] :: SetCommands -> Maybe Text

-- | List of the bot's commands
[commands] :: SetCommands -> Maybe [BotCommand]
defaultSetCommands :: SetCommands
instance GHC.Show.Show TD.Query.SetCommands.SetCommands
instance GHC.Classes.Eq TD.Query.SetCommands.SetCommands
instance TD.Lib.Internal.ShortShow TD.Query.SetCommands.SetCommands
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCommands.SetCommands

module TD.Query.SetCustomEmojiStickerSetThumbnail

-- | Sets a custom emoji sticker set thumbnail. Returns <a>Ok</a>
data SetCustomEmojiStickerSetThumbnail
SetCustomEmojiStickerSetThumbnail :: Maybe Text -> Maybe Int -> SetCustomEmojiStickerSetThumbnail

-- | Sticker set name. The sticker set must be owned by the current user
[name] :: SetCustomEmojiStickerSetThumbnail -> Maybe Text

-- | Identifier of the custom emoji from the sticker set, which will be set
--   as sticker set thumbnail; pass 0 to remove the sticker set thumbnail
[custom_emoji_id] :: SetCustomEmojiStickerSetThumbnail -> Maybe Int
defaultSetCustomEmojiStickerSetThumbnail :: SetCustomEmojiStickerSetThumbnail
instance GHC.Show.Show TD.Query.SetCustomEmojiStickerSetThumbnail.SetCustomEmojiStickerSetThumbnail
instance GHC.Classes.Eq TD.Query.SetCustomEmojiStickerSetThumbnail.SetCustomEmojiStickerSetThumbnail
instance TD.Lib.Internal.ShortShow TD.Query.SetCustomEmojiStickerSetThumbnail.SetCustomEmojiStickerSetThumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCustomEmojiStickerSetThumbnail.SetCustomEmojiStickerSetThumbnail

module TD.Query.SetCustomLanguagePack

-- | Adds or changes a custom local language pack to the current
--   localization target. Returns <a>Ok</a>
data SetCustomLanguagePack
SetCustomLanguagePack :: Maybe LanguagePackInfo -> Maybe [LanguagePackString] -> SetCustomLanguagePack

-- | Information about the language pack. Language pack identifier must
--   start with <tt>X</tt>, consist only of English letters, digits and
--   hyphens, and must not exceed 64 characters. Can be called before
--   authorization
[info] :: SetCustomLanguagePack -> Maybe LanguagePackInfo

-- | Strings of the new language pack
[strings] :: SetCustomLanguagePack -> Maybe [LanguagePackString]
defaultSetCustomLanguagePack :: SetCustomLanguagePack
instance GHC.Show.Show TD.Query.SetCustomLanguagePack.SetCustomLanguagePack
instance GHC.Classes.Eq TD.Query.SetCustomLanguagePack.SetCustomLanguagePack
instance TD.Lib.Internal.ShortShow TD.Query.SetCustomLanguagePack.SetCustomLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCustomLanguagePack.SetCustomLanguagePack

module TD.Query.SetCustomLanguagePackString

-- | Adds, edits or deletes a string in a custom local language pack. Can
--   be called before authorization. Returns <a>Ok</a>
data SetCustomLanguagePackString
SetCustomLanguagePackString :: Maybe Text -> Maybe LanguagePackString -> SetCustomLanguagePackString

-- | Identifier of a previously added custom local language pack in the
--   current localization target
[language_pack_id] :: SetCustomLanguagePackString -> Maybe Text

-- | New language pack string
[new_string] :: SetCustomLanguagePackString -> Maybe LanguagePackString
defaultSetCustomLanguagePackString :: SetCustomLanguagePackString
instance GHC.Show.Show TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString
instance GHC.Classes.Eq TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString
instance TD.Lib.Internal.ShortShow TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetCustomLanguagePackString.SetCustomLanguagePackString

module TD.Query.SetDatabaseEncryptionKey

-- | Changes the database encryption key. Usually the encryption key is
--   never changed and is stored in some OS keychain. Returns <a>Ok</a>
data SetDatabaseEncryptionKey
SetDatabaseEncryptionKey :: Maybe ByteString -> SetDatabaseEncryptionKey

-- | New encryption key
[new_encryption_key] :: SetDatabaseEncryptionKey -> Maybe ByteString
instance GHC.Show.Show TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey
instance GHC.Classes.Eq TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey
instance TD.Lib.Internal.ShortShow TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDatabaseEncryptionKey.SetDatabaseEncryptionKey

module TD.Query.SetDefaultBackground

-- | Sets default background for chats; adds the background to the list of
--   installed backgrounds. Returns <a>Background</a>
data SetDefaultBackground
SetDefaultBackground :: Maybe InputBackground -> Maybe BackgroundType -> Maybe Bool -> SetDefaultBackground

-- | The input background to use; pass null to create a new filled
--   background
[background] :: SetDefaultBackground -> Maybe InputBackground

-- | Background type; pass null to use the default type of the remote
--   background; backgroundTypeChatTheme isn't supported
[_type] :: SetDefaultBackground -> Maybe BackgroundType

-- | Pass true if the background is set for a dark theme
[for_dark_theme] :: SetDefaultBackground -> Maybe Bool
defaultSetDefaultBackground :: SetDefaultBackground
instance GHC.Show.Show TD.Query.SetDefaultBackground.SetDefaultBackground
instance GHC.Classes.Eq TD.Query.SetDefaultBackground.SetDefaultBackground
instance TD.Lib.Internal.ShortShow TD.Query.SetDefaultBackground.SetDefaultBackground
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultBackground.SetDefaultBackground

module TD.Query.SetDefaultChannelAdministratorRights

-- | Sets default administrator rights for adding the bot to channel chats;
--   for bots only. Returns <a>Ok</a>
data SetDefaultChannelAdministratorRights
SetDefaultChannelAdministratorRights :: Maybe ChatAdministratorRights -> SetDefaultChannelAdministratorRights

-- | Default administrator rights for adding the bot to channels; pass null
--   to remove default rights
[default_channel_administrator_rights] :: SetDefaultChannelAdministratorRights -> Maybe ChatAdministratorRights
instance GHC.Show.Show TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights
instance GHC.Classes.Eq TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights
instance TD.Lib.Internal.ShortShow TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultChannelAdministratorRights.SetDefaultChannelAdministratorRights

module TD.Query.SetDefaultGroupAdministratorRights

-- | Sets default administrator rights for adding the bot to basic group
--   and supergroup chats; for bots only. Returns <a>Ok</a>
data SetDefaultGroupAdministratorRights
SetDefaultGroupAdministratorRights :: Maybe ChatAdministratorRights -> SetDefaultGroupAdministratorRights

-- | Default administrator rights for adding the bot to basic group and
--   supergroup chats; pass null to remove default rights
[default_group_administrator_rights] :: SetDefaultGroupAdministratorRights -> Maybe ChatAdministratorRights
instance GHC.Show.Show TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights
instance GHC.Classes.Eq TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights
instance TD.Lib.Internal.ShortShow TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultGroupAdministratorRights.SetDefaultGroupAdministratorRights

module TD.Query.SetDefaultMessageAutoDeleteTime

-- | Changes the default message auto-delete time for new chats. Returns
--   <a>Ok</a>
data SetDefaultMessageAutoDeleteTime
SetDefaultMessageAutoDeleteTime :: Maybe MessageAutoDeleteTime -> SetDefaultMessageAutoDeleteTime

-- | New default message auto-delete time; must be from 0 up to 365 * 86400
--   and be divisible by 86400. If 0, then messages aren't deleted
--   automatically
[message_auto_delete_time] :: SetDefaultMessageAutoDeleteTime -> Maybe MessageAutoDeleteTime
instance GHC.Show.Show TD.Query.SetDefaultMessageAutoDeleteTime.SetDefaultMessageAutoDeleteTime
instance GHC.Classes.Eq TD.Query.SetDefaultMessageAutoDeleteTime.SetDefaultMessageAutoDeleteTime
instance TD.Lib.Internal.ShortShow TD.Query.SetDefaultMessageAutoDeleteTime.SetDefaultMessageAutoDeleteTime
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultMessageAutoDeleteTime.SetDefaultMessageAutoDeleteTime

module TD.Query.SetDefaultReactionType

-- | Changes type of default reaction for the current user. Returns
--   <a>Ok</a>
data SetDefaultReactionType
SetDefaultReactionType :: Maybe ReactionType -> SetDefaultReactionType

-- | New type of the default reaction
[reaction_type] :: SetDefaultReactionType -> Maybe ReactionType
instance GHC.Show.Show TD.Query.SetDefaultReactionType.SetDefaultReactionType
instance GHC.Classes.Eq TD.Query.SetDefaultReactionType.SetDefaultReactionType
instance TD.Lib.Internal.ShortShow TD.Query.SetDefaultReactionType.SetDefaultReactionType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetDefaultReactionType.SetDefaultReactionType

module TD.Query.SetEmojiStatus

-- | Changes the emoji status of the current user; for Telegram Premium
--   users only. Returns <a>Ok</a>
data SetEmojiStatus
SetEmojiStatus :: Maybe EmojiStatus -> SetEmojiStatus

-- | New emoji status; pass null to switch to the default badge
[emoji_status] :: SetEmojiStatus -> Maybe EmojiStatus
instance GHC.Show.Show TD.Query.SetEmojiStatus.SetEmojiStatus
instance GHC.Classes.Eq TD.Query.SetEmojiStatus.SetEmojiStatus
instance TD.Lib.Internal.ShortShow TD.Query.SetEmojiStatus.SetEmojiStatus
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetEmojiStatus.SetEmojiStatus

module TD.Query.SetFileGenerationProgress

-- | Informs TDLib on a file generation progress. Returns <a>Ok</a>
data SetFileGenerationProgress
SetFileGenerationProgress :: Maybe Int -> Maybe Int -> Maybe Int -> SetFileGenerationProgress

-- | The identifier of the generation process
[generation_id] :: SetFileGenerationProgress -> Maybe Int

-- | Expected size of the generated file, in bytes; 0 if unknown
[expected_size] :: SetFileGenerationProgress -> Maybe Int

-- | The number of bytes already generated
[local_prefix_size] :: SetFileGenerationProgress -> Maybe Int
defaultSetFileGenerationProgress :: SetFileGenerationProgress
instance GHC.Show.Show TD.Query.SetFileGenerationProgress.SetFileGenerationProgress
instance GHC.Classes.Eq TD.Query.SetFileGenerationProgress.SetFileGenerationProgress
instance TD.Lib.Internal.ShortShow TD.Query.SetFileGenerationProgress.SetFileGenerationProgress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetFileGenerationProgress.SetFileGenerationProgress

module TD.Query.SetForumTopicNotificationSettings

-- | Changes the notification settings of a forum topic. Returns <a>Ok</a>
data SetForumTopicNotificationSettings
SetForumTopicNotificationSettings :: Maybe Int -> Maybe Int -> Maybe ChatNotificationSettings -> SetForumTopicNotificationSettings

-- | Chat identifier
[chat_id] :: SetForumTopicNotificationSettings -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: SetForumTopicNotificationSettings -> Maybe Int

-- | New notification settings for the forum topic. If the topic is muted
--   for more than 366 days, it is considered to be muted forever
[notification_settings] :: SetForumTopicNotificationSettings -> Maybe ChatNotificationSettings
defaultSetForumTopicNotificationSettings :: SetForumTopicNotificationSettings
instance GHC.Show.Show TD.Query.SetForumTopicNotificationSettings.SetForumTopicNotificationSettings
instance GHC.Classes.Eq TD.Query.SetForumTopicNotificationSettings.SetForumTopicNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetForumTopicNotificationSettings.SetForumTopicNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetForumTopicNotificationSettings.SetForumTopicNotificationSettings

module TD.Query.SetGameScore

-- | Updates the game score of the specified user in the game; for bots
--   only. Returns <a>Message</a>
data SetGameScore
SetGameScore :: Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Bool -> SetGameScore

-- | The chat to which the message with the game belongs
[chat_id] :: SetGameScore -> Maybe Int

-- | Identifier of the message
[message_id] :: SetGameScore -> Maybe Int

-- | Pass true to edit the game message to include the current scoreboard
[edit_message] :: SetGameScore -> Maybe Bool

-- | User identifier
[user_id] :: SetGameScore -> Maybe Int

-- | The new score
[score] :: SetGameScore -> Maybe Int

-- | Pass true to update the score even if it decreases. If the score is 0,
--   the user will be deleted from the high score table
[force] :: SetGameScore -> Maybe Bool
defaultSetGameScore :: SetGameScore
instance GHC.Show.Show TD.Query.SetGameScore.SetGameScore
instance GHC.Classes.Eq TD.Query.SetGameScore.SetGameScore
instance TD.Lib.Internal.ShortShow TD.Query.SetGameScore.SetGameScore
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGameScore.SetGameScore

module TD.Query.SetGroupCallParticipantIsSpeaking

-- | Informs TDLib that speaking state of a participant of an active group
--   has changed. Returns <a>Ok</a>
data SetGroupCallParticipantIsSpeaking
SetGroupCallParticipantIsSpeaking :: Maybe Int -> Maybe Int -> Maybe Bool -> SetGroupCallParticipantIsSpeaking

-- | Group call identifier
[group_call_id] :: SetGroupCallParticipantIsSpeaking -> Maybe Int

-- | Group call participant's synchronization audio source identifier, or 0
--   for the current user
[audio_source] :: SetGroupCallParticipantIsSpeaking -> Maybe Int

-- | Pass true if the user is speaking
[is_speaking] :: SetGroupCallParticipantIsSpeaking -> Maybe Bool
defaultSetGroupCallParticipantIsSpeaking :: SetGroupCallParticipantIsSpeaking
instance GHC.Show.Show TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking
instance GHC.Classes.Eq TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking
instance TD.Lib.Internal.ShortShow TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallParticipantIsSpeaking.SetGroupCallParticipantIsSpeaking

module TD.Query.SetGroupCallParticipantVolumeLevel

-- | Changes volume level of a participant of an active group call. If the
--   current user can manage the group call, then the participant's volume
--   level will be changed for all users with the default volume level.
--   Returns <a>Ok</a>
data SetGroupCallParticipantVolumeLevel
SetGroupCallParticipantVolumeLevel :: Maybe Int -> Maybe MessageSender -> Maybe Int -> SetGroupCallParticipantVolumeLevel

-- | Group call identifier
[group_call_id] :: SetGroupCallParticipantVolumeLevel -> Maybe Int

-- | Participant identifier
[participant_id] :: SetGroupCallParticipantVolumeLevel -> Maybe MessageSender

-- | New participant's volume level; 1-20000 in hundreds of percents
[volume_level] :: SetGroupCallParticipantVolumeLevel -> Maybe Int
defaultSetGroupCallParticipantVolumeLevel :: SetGroupCallParticipantVolumeLevel
instance GHC.Show.Show TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel
instance GHC.Classes.Eq TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel
instance TD.Lib.Internal.ShortShow TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallParticipantVolumeLevel.SetGroupCallParticipantVolumeLevel

module TD.Query.SetGroupCallTitle

-- | Sets group call title. Requires groupCall.can_be_managed group call
--   flag. Returns <a>Ok</a>
data SetGroupCallTitle
SetGroupCallTitle :: Maybe Int -> Maybe Text -> SetGroupCallTitle

-- | Group call identifier
[group_call_id] :: SetGroupCallTitle -> Maybe Int

-- | New group call title; 1-64 characters
[title] :: SetGroupCallTitle -> Maybe Text
defaultSetGroupCallTitle :: SetGroupCallTitle
instance GHC.Show.Show TD.Query.SetGroupCallTitle.SetGroupCallTitle
instance GHC.Classes.Eq TD.Query.SetGroupCallTitle.SetGroupCallTitle
instance TD.Lib.Internal.ShortShow TD.Query.SetGroupCallTitle.SetGroupCallTitle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetGroupCallTitle.SetGroupCallTitle

module TD.Query.SetInactiveSessionTtl

-- | Changes the period of inactivity after which sessions will
--   automatically be terminated. Returns <a>Ok</a>
data SetInactiveSessionTtl
SetInactiveSessionTtl :: Maybe Int -> SetInactiveSessionTtl

-- | New number of days of inactivity before sessions will be automatically
--   terminated; 1-366 days
[inactive_session_ttl_days] :: SetInactiveSessionTtl -> Maybe Int
instance GHC.Show.Show TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl
instance GHC.Classes.Eq TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl
instance TD.Lib.Internal.ShortShow TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetInactiveSessionTtl.SetInactiveSessionTtl

module TD.Query.SetInlineGameScore

-- | Updates the game score of the specified user in a game; for bots only.
--   Returns <a>Ok</a>
data SetInlineGameScore
SetInlineGameScore :: Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Bool -> SetInlineGameScore

-- | Inline message identifier
[inline_message_id] :: SetInlineGameScore -> Maybe Text

-- | Pass true to edit the game message to include the current scoreboard
[edit_message] :: SetInlineGameScore -> Maybe Bool

-- | User identifier
[user_id] :: SetInlineGameScore -> Maybe Int

-- | The new score
[score] :: SetInlineGameScore -> Maybe Int

-- | Pass true to update the score even if it decreases. If the score is 0,
--   the user will be deleted from the high score table
[force] :: SetInlineGameScore -> Maybe Bool
defaultSetInlineGameScore :: SetInlineGameScore
instance GHC.Show.Show TD.Query.SetInlineGameScore.SetInlineGameScore
instance GHC.Classes.Eq TD.Query.SetInlineGameScore.SetInlineGameScore
instance TD.Lib.Internal.ShortShow TD.Query.SetInlineGameScore.SetInlineGameScore
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetInlineGameScore.SetInlineGameScore

module TD.Query.SetLocation

-- | Changes the location of the current user. Needs to be called if
--   getOption("is_location_visible") is true and location changes for more
--   than 1 kilometer. Must not be called if the user has a business
--   location. Returns <a>Ok</a>
data SetLocation
SetLocation :: Maybe Location -> SetLocation

-- | The new location of the user
[location] :: SetLocation -> Maybe Location
instance GHC.Show.Show TD.Query.SetLocation.SetLocation
instance GHC.Classes.Eq TD.Query.SetLocation.SetLocation
instance TD.Lib.Internal.ShortShow TD.Query.SetLocation.SetLocation
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLocation.SetLocation

module TD.Query.SetLogStream

-- | Sets new log stream for internal logging of TDLib. Can be called
--   synchronously. Returns <a>Ok</a>
data SetLogStream
SetLogStream :: Maybe LogStream -> SetLogStream

-- | New log stream
[log_stream] :: SetLogStream -> Maybe LogStream
instance GHC.Show.Show TD.Query.SetLogStream.SetLogStream
instance GHC.Classes.Eq TD.Query.SetLogStream.SetLogStream
instance TD.Lib.Internal.ShortShow TD.Query.SetLogStream.SetLogStream
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogStream.SetLogStream

module TD.Query.SetLogTagVerbosityLevel

-- | Sets the verbosity level for a specified TDLib internal log tag. Can
--   be called synchronously. Returns <a>Ok</a>
data SetLogTagVerbosityLevel
SetLogTagVerbosityLevel :: Maybe Text -> Maybe Int -> SetLogTagVerbosityLevel

-- | Logging tag to change verbosity level
[tag] :: SetLogTagVerbosityLevel -> Maybe Text

-- | New verbosity level; 1-1024
[new_verbosity_level] :: SetLogTagVerbosityLevel -> Maybe Int
defaultSetLogTagVerbosityLevel :: SetLogTagVerbosityLevel
instance GHC.Show.Show TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel
instance GHC.Classes.Eq TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel
instance TD.Lib.Internal.ShortShow TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogTagVerbosityLevel.SetLogTagVerbosityLevel

module TD.Query.SetLogVerbosityLevel

-- | Sets the verbosity level of the internal logging of TDLib. Can be
--   called synchronously. Returns <a>Ok</a>
data SetLogVerbosityLevel
SetLogVerbosityLevel :: Maybe Int -> SetLogVerbosityLevel

-- | New value of the verbosity level for logging. Value 0 corresponds to
--   fatal errors, value 1 corresponds to errors, value 2 corresponds to
--   warnings and debug warnings, value 3 corresponds to informational,
--   value 4 corresponds to debug, value 5 corresponds to verbose debug,
--   value greater than 5 and up to 1023 can be used to enable even more
--   logging
[new_verbosity_level] :: SetLogVerbosityLevel -> Maybe Int
instance GHC.Show.Show TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel
instance GHC.Classes.Eq TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel
instance TD.Lib.Internal.ShortShow TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLogVerbosityLevel.SetLogVerbosityLevel

module TD.Query.SetLoginEmailAddress

-- | Changes the login email address of the user. The email address can be
--   changed only if the current user already has login email and
--   passwordState.login_email_address_pattern is non-empty. The change
--   will not be applied until the new login email address is confirmed
--   with checkLoginEmailAddressCode. To use Apple ID/Google ID instead of
--   an email address, call checkLoginEmailAddressCode directly. Returns
--   <a>EmailAddressAuthenticationCodeInfo</a>
data SetLoginEmailAddress
SetLoginEmailAddress :: Maybe Text -> SetLoginEmailAddress

-- | New login email address
[new_login_email_address] :: SetLoginEmailAddress -> Maybe Text
instance GHC.Show.Show TD.Query.SetLoginEmailAddress.SetLoginEmailAddress
instance GHC.Classes.Eq TD.Query.SetLoginEmailAddress.SetLoginEmailAddress
instance TD.Lib.Internal.ShortShow TD.Query.SetLoginEmailAddress.SetLoginEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetLoginEmailAddress.SetLoginEmailAddress

module TD.Query.SetMenuButton

-- | Sets menu button for the given user or for all users; for bots only.
--   Returns <a>Ok</a>
data SetMenuButton
SetMenuButton :: Maybe Int -> Maybe BotMenuButton -> SetMenuButton

-- | Identifier of the user or 0 to set menu button for all users
[user_id] :: SetMenuButton -> Maybe Int

-- | New menu button
[menu_button] :: SetMenuButton -> Maybe BotMenuButton
defaultSetMenuButton :: SetMenuButton
instance GHC.Show.Show TD.Query.SetMenuButton.SetMenuButton
instance GHC.Classes.Eq TD.Query.SetMenuButton.SetMenuButton
instance TD.Lib.Internal.ShortShow TD.Query.SetMenuButton.SetMenuButton
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetMenuButton.SetMenuButton

module TD.Query.SetMessageReactions

-- | Sets reactions on a message; for bots only. Returns <a>Ok</a>
data SetMessageReactions
SetMessageReactions :: Maybe Int -> Maybe Int -> Maybe [ReactionType] -> Maybe Bool -> SetMessageReactions

-- | Identifier of the chat to which the message belongs
[chat_id] :: SetMessageReactions -> Maybe Int

-- | Identifier of the message
[message_id] :: SetMessageReactions -> Maybe Int

-- | Types of the reaction to set
[reaction_types] :: SetMessageReactions -> Maybe [ReactionType]

-- | Pass true if the reactions are added with a big animation
[is_big] :: SetMessageReactions -> Maybe Bool
defaultSetMessageReactions :: SetMessageReactions
instance GHC.Show.Show TD.Query.SetMessageReactions.SetMessageReactions
instance GHC.Classes.Eq TD.Query.SetMessageReactions.SetMessageReactions
instance TD.Lib.Internal.ShortShow TD.Query.SetMessageReactions.SetMessageReactions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetMessageReactions.SetMessageReactions

module TD.Query.SetMessageSenderBlockList

-- | Changes the block list of a message sender. Currently, only users and
--   supergroup chats can be blocked. Returns <a>Ok</a>
data SetMessageSenderBlockList
SetMessageSenderBlockList :: Maybe MessageSender -> Maybe BlockList -> SetMessageSenderBlockList

-- | Identifier of a message sender to block/unblock
[sender_id] :: SetMessageSenderBlockList -> Maybe MessageSender

-- | New block list for the message sender; pass null to unblock the
--   message sender
[block_list] :: SetMessageSenderBlockList -> Maybe BlockList
defaultSetMessageSenderBlockList :: SetMessageSenderBlockList
instance GHC.Show.Show TD.Query.SetMessageSenderBlockList.SetMessageSenderBlockList
instance GHC.Classes.Eq TD.Query.SetMessageSenderBlockList.SetMessageSenderBlockList
instance TD.Lib.Internal.ShortShow TD.Query.SetMessageSenderBlockList.SetMessageSenderBlockList
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetMessageSenderBlockList.SetMessageSenderBlockList

module TD.Query.SetName

-- | Changes the first and last name of the current user. Returns <a>Ok</a>
data SetName
SetName :: Maybe Text -> Maybe Text -> SetName

-- | The new value of the first name for the current user; 1-64 characters
[first_name] :: SetName -> Maybe Text

-- | The new value of the optional last name for the current user; 0-64
--   characters
[last_name] :: SetName -> Maybe Text
defaultSetName :: SetName
instance GHC.Show.Show TD.Query.SetName.SetName
instance GHC.Classes.Eq TD.Query.SetName.SetName
instance TD.Lib.Internal.ShortShow TD.Query.SetName.SetName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetName.SetName

module TD.Query.SetNetworkType

-- | Sets the current network type. Can be called before authorization.
--   Calling this method forces all network connections to reopen,
--   mitigating the delay in switching between different networks, so it
--   must be called whenever the network is changed, even if the network
--   type remains the same. Network type is used to check whether the
--   library can use the network at all and also for collecting detailed
--   network data usage statistics. Returns <a>Ok</a>
data SetNetworkType
SetNetworkType :: Maybe NetworkType -> SetNetworkType

-- | The new network type; pass null to set network type to
--   networkTypeOther
[_type] :: SetNetworkType -> Maybe NetworkType
instance GHC.Show.Show TD.Query.SetNetworkType.SetNetworkType
instance GHC.Classes.Eq TD.Query.SetNetworkType.SetNetworkType
instance TD.Lib.Internal.ShortShow TD.Query.SetNetworkType.SetNetworkType
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetNetworkType.SetNetworkType

module TD.Query.SetNewChatPrivacySettings

-- | Changes privacy settings for new chat creation; can be used only if
--   getOption("can_set_new_chat_privacy_settings"). Returns <a>Ok</a>
data SetNewChatPrivacySettings
SetNewChatPrivacySettings :: Maybe NewChatPrivacySettings -> SetNewChatPrivacySettings

-- | New settings
[settings] :: SetNewChatPrivacySettings -> Maybe NewChatPrivacySettings
instance GHC.Show.Show TD.Query.SetNewChatPrivacySettings.SetNewChatPrivacySettings
instance GHC.Classes.Eq TD.Query.SetNewChatPrivacySettings.SetNewChatPrivacySettings
instance TD.Lib.Internal.ShortShow TD.Query.SetNewChatPrivacySettings.SetNewChatPrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetNewChatPrivacySettings.SetNewChatPrivacySettings

module TD.Query.SetOption

-- | Sets the value of an option. (Check the list of available options on
--   <a>https://core.telegram.org/tdlib/options.)</a> Only writable options
--   can be set. Can be called before authorization. Returns <a>Ok</a>
data SetOption
SetOption :: Maybe Text -> Maybe OptionValue -> SetOption

-- | The name of the option
[name] :: SetOption -> Maybe Text

-- | The new value of the option; pass null to reset option value to a
--   default value
[value] :: SetOption -> Maybe OptionValue
defaultSetOption :: SetOption
instance GHC.Show.Show TD.Query.SetOption.SetOption
instance GHC.Classes.Eq TD.Query.SetOption.SetOption
instance TD.Lib.Internal.ShortShow TD.Query.SetOption.SetOption
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetOption.SetOption

module TD.Query.SetPassportElement

-- | Adds an element to the user's Telegram Passport. May return an error
--   with a message <a>PHONE_VERIFICATION_NEEDED</a> or
--   <a>EMAIL_VERIFICATION_NEEDED</a> if the chosen phone number or the
--   chosen email address must be verified first. Returns
--   <a>PassportElement</a>
data SetPassportElement
SetPassportElement :: Maybe InputPassportElement -> Maybe Text -> SetPassportElement

-- | Input Telegram Passport element
[element] :: SetPassportElement -> Maybe InputPassportElement

-- | The 2-step verification password of the current user
[password] :: SetPassportElement -> Maybe Text
defaultSetPassportElement :: SetPassportElement
instance GHC.Show.Show TD.Query.SetPassportElement.SetPassportElement
instance GHC.Classes.Eq TD.Query.SetPassportElement.SetPassportElement
instance TD.Lib.Internal.ShortShow TD.Query.SetPassportElement.SetPassportElement
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassportElement.SetPassportElement

module TD.Query.SetPassportElementErrors

-- | Informs the user that some of the elements in their Telegram Passport
--   contain errors; for bots only. The user will not be able to resend the
--   elements, until the errors are fixed. Returns <a>Ok</a>
data SetPassportElementErrors
SetPassportElementErrors :: Maybe Int -> Maybe [InputPassportElementError] -> SetPassportElementErrors

-- | User identifier
[user_id] :: SetPassportElementErrors -> Maybe Int

-- | The errors
[errors] :: SetPassportElementErrors -> Maybe [InputPassportElementError]
defaultSetPassportElementErrors :: SetPassportElementErrors
instance GHC.Show.Show TD.Query.SetPassportElementErrors.SetPassportElementErrors
instance GHC.Classes.Eq TD.Query.SetPassportElementErrors.SetPassportElementErrors
instance TD.Lib.Internal.ShortShow TD.Query.SetPassportElementErrors.SetPassportElementErrors
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassportElementErrors.SetPassportElementErrors

module TD.Query.SetPassword

-- | Changes the 2-step verification password for the current user. If a
--   new recovery email address is specified, then the change will not be
--   applied until the new recovery email address is confirmed. Returns
--   <a>PasswordState</a>
data SetPassword
SetPassword :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> SetPassword

-- | Previous 2-step verification password of the user
[old_password] :: SetPassword -> Maybe Text

-- | New 2-step verification password of the user; may be empty to remove
--   the password
[new_password] :: SetPassword -> Maybe Text

-- | New password hint; may be empty
[new_hint] :: SetPassword -> Maybe Text

-- | Pass true to change also the recovery email address
[set_recovery_email_address] :: SetPassword -> Maybe Bool

-- | New recovery email address; may be empty
[new_recovery_email_address] :: SetPassword -> Maybe Text
defaultSetPassword :: SetPassword
instance GHC.Show.Show TD.Query.SetPassword.SetPassword
instance GHC.Classes.Eq TD.Query.SetPassword.SetPassword
instance TD.Lib.Internal.ShortShow TD.Query.SetPassword.SetPassword
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPassword.SetPassword

module TD.Query.SetPersonalChat

-- | Changes the personal chat of the current user. Returns <a>Ok</a>
data SetPersonalChat
SetPersonalChat :: Maybe Int -> SetPersonalChat

-- | Identifier of the new personal chat; pass 0 to remove the chat. Use
--   getSuitablePersonalChats to get suitable chats
[chat_id] :: SetPersonalChat -> Maybe Int
instance GHC.Show.Show TD.Query.SetPersonalChat.SetPersonalChat
instance GHC.Classes.Eq TD.Query.SetPersonalChat.SetPersonalChat
instance TD.Lib.Internal.ShortShow TD.Query.SetPersonalChat.SetPersonalChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPersonalChat.SetPersonalChat

module TD.Query.SetPinnedChats

-- | Changes the order of pinned chats. Returns <a>Ok</a>
data SetPinnedChats
SetPinnedChats :: Maybe ChatList -> Maybe [Int] -> SetPinnedChats

-- | Chat list in which to change the order of pinned chats
[chat_list] :: SetPinnedChats -> Maybe ChatList

-- | The new list of pinned chats
[chat_ids] :: SetPinnedChats -> Maybe [Int]
defaultSetPinnedChats :: SetPinnedChats
instance GHC.Show.Show TD.Query.SetPinnedChats.SetPinnedChats
instance GHC.Classes.Eq TD.Query.SetPinnedChats.SetPinnedChats
instance TD.Lib.Internal.ShortShow TD.Query.SetPinnedChats.SetPinnedChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPinnedChats.SetPinnedChats

module TD.Query.SetPinnedForumTopics

-- | Changes the order of pinned forum topics; requires can_manage_topics
--   right in the supergroup. Returns <a>Ok</a>
data SetPinnedForumTopics
SetPinnedForumTopics :: Maybe Int -> Maybe [Int] -> SetPinnedForumTopics

-- | Chat identifier
[chat_id] :: SetPinnedForumTopics -> Maybe Int

-- | The new list of pinned forum topics
[message_thread_ids] :: SetPinnedForumTopics -> Maybe [Int]
defaultSetPinnedForumTopics :: SetPinnedForumTopics
instance GHC.Show.Show TD.Query.SetPinnedForumTopics.SetPinnedForumTopics
instance GHC.Classes.Eq TD.Query.SetPinnedForumTopics.SetPinnedForumTopics
instance TD.Lib.Internal.ShortShow TD.Query.SetPinnedForumTopics.SetPinnedForumTopics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPinnedForumTopics.SetPinnedForumTopics

module TD.Query.SetPinnedSavedMessagesTopics

-- | Changes the order of pinned Saved Messages topics. Returns <a>Ok</a>
data SetPinnedSavedMessagesTopics
SetPinnedSavedMessagesTopics :: Maybe [Int] -> SetPinnedSavedMessagesTopics

-- | Identifiers of the new pinned Saved Messages topics
[saved_messages_topic_ids] :: SetPinnedSavedMessagesTopics -> Maybe [Int]
instance GHC.Show.Show TD.Query.SetPinnedSavedMessagesTopics.SetPinnedSavedMessagesTopics
instance GHC.Classes.Eq TD.Query.SetPinnedSavedMessagesTopics.SetPinnedSavedMessagesTopics
instance TD.Lib.Internal.ShortShow TD.Query.SetPinnedSavedMessagesTopics.SetPinnedSavedMessagesTopics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPinnedSavedMessagesTopics.SetPinnedSavedMessagesTopics

module TD.Query.SetPollAnswer

-- | Changes the user answer to a poll. A poll in quiz mode can be answered
--   only once. Returns <a>Ok</a>
data SetPollAnswer
SetPollAnswer :: Maybe Int -> Maybe Int -> Maybe [Int] -> SetPollAnswer

-- | Identifier of the chat to which the poll belongs
[chat_id] :: SetPollAnswer -> Maybe Int

-- | Identifier of the message containing the poll
[message_id] :: SetPollAnswer -> Maybe Int

-- | 0-based identifiers of answer options, chosen by the user. User can
--   choose more than 1 answer option only is the poll allows multiple
--   answers
[option_ids] :: SetPollAnswer -> Maybe [Int]
defaultSetPollAnswer :: SetPollAnswer
instance GHC.Show.Show TD.Query.SetPollAnswer.SetPollAnswer
instance GHC.Classes.Eq TD.Query.SetPollAnswer.SetPollAnswer
instance TD.Lib.Internal.ShortShow TD.Query.SetPollAnswer.SetPollAnswer
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetPollAnswer.SetPollAnswer

module TD.Query.SetProfileAccentColor

-- | Changes accent color and background custom emoji for profile of the
--   current user; for Telegram Premium users only. Returns <a>Ok</a>
data SetProfileAccentColor
SetProfileAccentColor :: Maybe Int -> Maybe Int -> SetProfileAccentColor

-- | Identifier of the accent color to use for profile; pass -1 if none
[profile_accent_color_id] :: SetProfileAccentColor -> Maybe Int

-- | Identifier of a custom emoji to be shown on the user's profile photo
--   background; 0 if none
[profile_background_custom_emoji_id] :: SetProfileAccentColor -> Maybe Int
defaultSetProfileAccentColor :: SetProfileAccentColor
instance GHC.Show.Show TD.Query.SetProfileAccentColor.SetProfileAccentColor
instance GHC.Classes.Eq TD.Query.SetProfileAccentColor.SetProfileAccentColor
instance TD.Lib.Internal.ShortShow TD.Query.SetProfileAccentColor.SetProfileAccentColor
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetProfileAccentColor.SetProfileAccentColor

module TD.Query.SetProfilePhoto

-- | Changes a profile photo for the current user. Returns <a>Ok</a>
data SetProfilePhoto
SetProfilePhoto :: Maybe InputChatPhoto -> Maybe Bool -> SetProfilePhoto

-- | Profile photo to set
[photo] :: SetProfilePhoto -> Maybe InputChatPhoto

-- | Pass true to set a public photo, which will be visible even the main
--   photo is hidden by privacy settings
[is_public] :: SetProfilePhoto -> Maybe Bool
defaultSetProfilePhoto :: SetProfilePhoto
instance GHC.Show.Show TD.Query.SetProfilePhoto.SetProfilePhoto
instance GHC.Classes.Eq TD.Query.SetProfilePhoto.SetProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Query.SetProfilePhoto.SetProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetProfilePhoto.SetProfilePhoto

module TD.Query.SetQuickReplyShortcutName

-- | Changes name of a quick reply shortcut. Returns <a>Ok</a>
data SetQuickReplyShortcutName
SetQuickReplyShortcutName :: Maybe Int -> Maybe Text -> SetQuickReplyShortcutName

-- | Unique identifier of the quick reply shortcut
[shortcut_id] :: SetQuickReplyShortcutName -> Maybe Int

-- | New name for the shortcut. Use checkQuickReplyShortcutName to check
--   its validness
[name] :: SetQuickReplyShortcutName -> Maybe Text
defaultSetQuickReplyShortcutName :: SetQuickReplyShortcutName
instance GHC.Show.Show TD.Query.SetQuickReplyShortcutName.SetQuickReplyShortcutName
instance GHC.Classes.Eq TD.Query.SetQuickReplyShortcutName.SetQuickReplyShortcutName
instance TD.Lib.Internal.ShortShow TD.Query.SetQuickReplyShortcutName.SetQuickReplyShortcutName
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetQuickReplyShortcutName.SetQuickReplyShortcutName

module TD.Query.SetReactionNotificationSettings

-- | Changes notification settings for reactions. Returns <a>Ok</a>
data SetReactionNotificationSettings
SetReactionNotificationSettings :: Maybe ReactionNotificationSettings -> SetReactionNotificationSettings

-- | The new notification settings for reactions
[notification_settings] :: SetReactionNotificationSettings -> Maybe ReactionNotificationSettings
instance GHC.Show.Show TD.Query.SetReactionNotificationSettings.SetReactionNotificationSettings
instance GHC.Classes.Eq TD.Query.SetReactionNotificationSettings.SetReactionNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetReactionNotificationSettings.SetReactionNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetReactionNotificationSettings.SetReactionNotificationSettings

module TD.Query.SetReadDatePrivacySettings

-- | Changes privacy settings for message read date. Returns <a>Ok</a>
data SetReadDatePrivacySettings
SetReadDatePrivacySettings :: Maybe ReadDatePrivacySettings -> SetReadDatePrivacySettings

-- | New settings
[settings] :: SetReadDatePrivacySettings -> Maybe ReadDatePrivacySettings
instance GHC.Show.Show TD.Query.SetReadDatePrivacySettings.SetReadDatePrivacySettings
instance GHC.Classes.Eq TD.Query.SetReadDatePrivacySettings.SetReadDatePrivacySettings
instance TD.Lib.Internal.ShortShow TD.Query.SetReadDatePrivacySettings.SetReadDatePrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetReadDatePrivacySettings.SetReadDatePrivacySettings

module TD.Query.SetRecoveryEmailAddress

-- | Changes the 2-step verification recovery email address of the user. If
--   a new recovery email address is specified, then the change will not be
--   applied until the new recovery email address is confirmed. If
--   new_recovery_email_address is the same as the email address that is
--   currently set up, this call succeeds immediately and aborts all other
--   requests waiting for an email confirmation. Returns
--   <a>PasswordState</a>
data SetRecoveryEmailAddress
SetRecoveryEmailAddress :: Maybe Text -> Maybe Text -> SetRecoveryEmailAddress

-- | The 2-step verification password of the current user
[password] :: SetRecoveryEmailAddress -> Maybe Text

-- | New recovery email address
[new_recovery_email_address] :: SetRecoveryEmailAddress -> Maybe Text
defaultSetRecoveryEmailAddress :: SetRecoveryEmailAddress
instance GHC.Show.Show TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress
instance GHC.Classes.Eq TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress
instance TD.Lib.Internal.ShortShow TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetRecoveryEmailAddress.SetRecoveryEmailAddress

module TD.Query.SetSavedMessagesTagLabel

-- | Changes label of a Saved Messages tag; for Telegram Premium users
--   only. Returns <a>Ok</a>
data SetSavedMessagesTagLabel
SetSavedMessagesTagLabel :: Maybe ReactionType -> Maybe Text -> SetSavedMessagesTagLabel

-- | The tag which label will be changed
[tag] :: SetSavedMessagesTagLabel -> Maybe ReactionType

-- | New label for the tag; 0-12 characters
[label] :: SetSavedMessagesTagLabel -> Maybe Text
defaultSetSavedMessagesTagLabel :: SetSavedMessagesTagLabel
instance GHC.Show.Show TD.Query.SetSavedMessagesTagLabel.SetSavedMessagesTagLabel
instance GHC.Classes.Eq TD.Query.SetSavedMessagesTagLabel.SetSavedMessagesTagLabel
instance TD.Lib.Internal.ShortShow TD.Query.SetSavedMessagesTagLabel.SetSavedMessagesTagLabel
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSavedMessagesTagLabel.SetSavedMessagesTagLabel

module TD.Query.SetScopeNotificationSettings

-- | Changes notification settings for chats of a given type. Returns
--   <a>Ok</a>
data SetScopeNotificationSettings
SetScopeNotificationSettings :: Maybe NotificationSettingsScope -> Maybe ScopeNotificationSettings -> SetScopeNotificationSettings

-- | Types of chats for which to change the notification settings
[scope] :: SetScopeNotificationSettings -> Maybe NotificationSettingsScope

-- | The new notification settings for the given scope
[notification_settings] :: SetScopeNotificationSettings -> Maybe ScopeNotificationSettings
defaultSetScopeNotificationSettings :: SetScopeNotificationSettings
instance GHC.Show.Show TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings
instance GHC.Classes.Eq TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings
instance TD.Lib.Internal.ShortShow TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetScopeNotificationSettings.SetScopeNotificationSettings

module TD.Query.SetStickerEmojis

-- | Changes the list of emoji corresponding to a sticker. The sticker must
--   belong to a regular or custom emoji sticker set that is owned by the
--   current user. Returns <a>Ok</a>
data SetStickerEmojis
SetStickerEmojis :: Maybe InputFile -> Maybe Text -> SetStickerEmojis

-- | Sticker
[sticker] :: SetStickerEmojis -> Maybe InputFile

-- | New string with 1-20 emoji corresponding to the sticker
[emojis] :: SetStickerEmojis -> Maybe Text
defaultSetStickerEmojis :: SetStickerEmojis
instance GHC.Show.Show TD.Query.SetStickerEmojis.SetStickerEmojis
instance GHC.Classes.Eq TD.Query.SetStickerEmojis.SetStickerEmojis
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerEmojis.SetStickerEmojis
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerEmojis.SetStickerEmojis

module TD.Query.SetStickerKeywords

-- | Changes the list of keywords of a sticker. The sticker must belong to
--   a regular or custom emoji sticker set that is owned by the current
--   user. Returns <a>Ok</a>
data SetStickerKeywords
SetStickerKeywords :: Maybe InputFile -> Maybe [Text] -> SetStickerKeywords

-- | Sticker
[sticker] :: SetStickerKeywords -> Maybe InputFile

-- | List of up to 20 keywords with total length up to 64 characters, which
--   can be used to find the sticker
[keywords] :: SetStickerKeywords -> Maybe [Text]
defaultSetStickerKeywords :: SetStickerKeywords
instance GHC.Show.Show TD.Query.SetStickerKeywords.SetStickerKeywords
instance GHC.Classes.Eq TD.Query.SetStickerKeywords.SetStickerKeywords
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerKeywords.SetStickerKeywords
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerKeywords.SetStickerKeywords

module TD.Query.SetStickerMaskPosition

-- | Changes the mask position of a mask sticker. The sticker must belong
--   to a mask sticker set that is owned by the current user. Returns
--   <a>Ok</a>
data SetStickerMaskPosition
SetStickerMaskPosition :: Maybe InputFile -> Maybe MaskPosition -> SetStickerMaskPosition

-- | Sticker
[sticker] :: SetStickerMaskPosition -> Maybe InputFile

-- | Position where the mask is placed; pass null to remove mask position
[mask_position] :: SetStickerMaskPosition -> Maybe MaskPosition
defaultSetStickerMaskPosition :: SetStickerMaskPosition
instance GHC.Show.Show TD.Query.SetStickerMaskPosition.SetStickerMaskPosition
instance GHC.Classes.Eq TD.Query.SetStickerMaskPosition.SetStickerMaskPosition
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerMaskPosition.SetStickerMaskPosition
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerMaskPosition.SetStickerMaskPosition

module TD.Query.SetStickerPositionInSet

-- | Changes the position of a sticker in the set to which it belongs. The
--   sticker set must be owned by the current user. Returns <a>Ok</a>
data SetStickerPositionInSet
SetStickerPositionInSet :: Maybe InputFile -> Maybe Int -> SetStickerPositionInSet

-- | Sticker
[sticker] :: SetStickerPositionInSet -> Maybe InputFile

-- | New position of the sticker in the set, 0-based
[position] :: SetStickerPositionInSet -> Maybe Int
defaultSetStickerPositionInSet :: SetStickerPositionInSet
instance GHC.Show.Show TD.Query.SetStickerPositionInSet.SetStickerPositionInSet
instance GHC.Classes.Eq TD.Query.SetStickerPositionInSet.SetStickerPositionInSet
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerPositionInSet.SetStickerPositionInSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerPositionInSet.SetStickerPositionInSet

module TD.Query.SetStickerSetThumbnail

-- | Sets a sticker set thumbnail. Returns <a>Ok</a>
data SetStickerSetThumbnail
SetStickerSetThumbnail :: Maybe Int -> Maybe Text -> Maybe InputFile -> Maybe StickerFormat -> SetStickerSetThumbnail

-- | Sticker set owner; ignored for regular users
[user_id] :: SetStickerSetThumbnail -> Maybe Int

-- | Sticker set name. The sticker set must be owned by the current user
[name] :: SetStickerSetThumbnail -> Maybe Text

-- | Thumbnail to set; pass null to remove the sticker set thumbnail
[thumbnail] :: SetStickerSetThumbnail -> Maybe InputFile

-- | Format of the thumbnail; pass null if thumbnail is removed
[format] :: SetStickerSetThumbnail -> Maybe StickerFormat
defaultSetStickerSetThumbnail :: SetStickerSetThumbnail
instance GHC.Show.Show TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail
instance GHC.Classes.Eq TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerSetThumbnail.SetStickerSetThumbnail

module TD.Query.SetStickerSetTitle

-- | Sets a sticker set title. Returns <a>Ok</a>
data SetStickerSetTitle
SetStickerSetTitle :: Maybe Text -> Maybe Text -> SetStickerSetTitle

-- | Sticker set name. The sticker set must be owned by the current user
[name] :: SetStickerSetTitle -> Maybe Text

-- | New sticker set title
[title] :: SetStickerSetTitle -> Maybe Text
defaultSetStickerSetTitle :: SetStickerSetTitle
instance GHC.Show.Show TD.Query.SetStickerSetTitle.SetStickerSetTitle
instance GHC.Classes.Eq TD.Query.SetStickerSetTitle.SetStickerSetTitle
instance TD.Lib.Internal.ShortShow TD.Query.SetStickerSetTitle.SetStickerSetTitle
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStickerSetTitle.SetStickerSetTitle

module TD.Query.SetStoryPrivacySettings

-- | Changes privacy settings of a story. The method can be called only for
--   stories posted on behalf of the current user and if
--   story.can_be_edited == true. Returns <a>Ok</a>
data SetStoryPrivacySettings
SetStoryPrivacySettings :: Maybe Int -> Maybe StoryPrivacySettings -> SetStoryPrivacySettings

-- | Identifier of the story
[story_id] :: SetStoryPrivacySettings -> Maybe Int

-- | The new privacy settigs for the story
[privacy_settings] :: SetStoryPrivacySettings -> Maybe StoryPrivacySettings
defaultSetStoryPrivacySettings :: SetStoryPrivacySettings
instance GHC.Show.Show TD.Query.SetStoryPrivacySettings.SetStoryPrivacySettings
instance GHC.Classes.Eq TD.Query.SetStoryPrivacySettings.SetStoryPrivacySettings
instance TD.Lib.Internal.ShortShow TD.Query.SetStoryPrivacySettings.SetStoryPrivacySettings
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStoryPrivacySettings.SetStoryPrivacySettings

module TD.Query.SetStoryReaction

-- | Changes chosen reaction on a story that has already been sent. Returns
--   <a>Ok</a>
data SetStoryReaction
SetStoryReaction :: Maybe Int -> Maybe Int -> Maybe ReactionType -> Maybe Bool -> SetStoryReaction

-- | The identifier of the sender of the story
[story_sender_chat_id] :: SetStoryReaction -> Maybe Int

-- | The identifier of the story
[story_id] :: SetStoryReaction -> Maybe Int

-- | Type of the reaction to set; pass null to remove the reaction.
--   <tt>reactionTypeCustomEmoji</tt> reactions can be used only by
--   Telegram Premium users
[reaction_type] :: SetStoryReaction -> Maybe ReactionType

-- | Pass true if the reaction needs to be added to recent reactions
[update_recent_reactions] :: SetStoryReaction -> Maybe Bool
defaultSetStoryReaction :: SetStoryReaction
instance GHC.Show.Show TD.Query.SetStoryReaction.SetStoryReaction
instance GHC.Classes.Eq TD.Query.SetStoryReaction.SetStoryReaction
instance TD.Lib.Internal.ShortShow TD.Query.SetStoryReaction.SetStoryReaction
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetStoryReaction.SetStoryReaction

module TD.Query.SetSupergroupCustomEmojiStickerSet

-- | Changes the custom emoji sticker set of a supergroup; requires
--   can_change_info administrator right. The chat must have at least
--   chatBoostFeatures.min_custom_emoji_sticker_set_boost_level boost level
--   to pass the corresponding color. Returns <a>Ok</a>
data SetSupergroupCustomEmojiStickerSet
SetSupergroupCustomEmojiStickerSet :: Maybe Int -> Maybe Int -> SetSupergroupCustomEmojiStickerSet

-- | Identifier of the supergroup
[supergroup_id] :: SetSupergroupCustomEmojiStickerSet -> Maybe Int

-- | New value of the custom emoji sticker set identifier for the
--   supergroup. Use 0 to remove the custom emoji sticker set in the
--   supergroup
[custom_emoji_sticker_set_id] :: SetSupergroupCustomEmojiStickerSet -> Maybe Int
defaultSetSupergroupCustomEmojiStickerSet :: SetSupergroupCustomEmojiStickerSet
instance GHC.Show.Show TD.Query.SetSupergroupCustomEmojiStickerSet.SetSupergroupCustomEmojiStickerSet
instance GHC.Classes.Eq TD.Query.SetSupergroupCustomEmojiStickerSet.SetSupergroupCustomEmojiStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.SetSupergroupCustomEmojiStickerSet.SetSupergroupCustomEmojiStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupCustomEmojiStickerSet.SetSupergroupCustomEmojiStickerSet

module TD.Query.SetSupergroupStickerSet

-- | Changes the sticker set of a supergroup; requires can_change_info
--   administrator right. Returns <a>Ok</a>
data SetSupergroupStickerSet
SetSupergroupStickerSet :: Maybe Int -> Maybe Int -> SetSupergroupStickerSet

-- | Identifier of the supergroup
[supergroup_id] :: SetSupergroupStickerSet -> Maybe Int

-- | New value of the supergroup sticker set identifier. Use 0 to remove
--   the supergroup sticker set
[sticker_set_id] :: SetSupergroupStickerSet -> Maybe Int
defaultSetSupergroupStickerSet :: SetSupergroupStickerSet
instance GHC.Show.Show TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet
instance GHC.Classes.Eq TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet
instance TD.Lib.Internal.ShortShow TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupStickerSet.SetSupergroupStickerSet

module TD.Query.SetSupergroupUnrestrictBoostCount

-- | Changes the number of times the supergroup must be boosted by a user
--   to ignore slow mode and chat permission restrictions; requires
--   can_restrict_members administrator right. Returns <a>Ok</a>
data SetSupergroupUnrestrictBoostCount
SetSupergroupUnrestrictBoostCount :: Maybe Int -> Maybe Int -> SetSupergroupUnrestrictBoostCount

-- | Identifier of the supergroup
[supergroup_id] :: SetSupergroupUnrestrictBoostCount -> Maybe Int

-- | New value of the unrestrict_boost_count supergroup setting; 0-8. Use 0
--   to remove the setting
[unrestrict_boost_count] :: SetSupergroupUnrestrictBoostCount -> Maybe Int
defaultSetSupergroupUnrestrictBoostCount :: SetSupergroupUnrestrictBoostCount
instance GHC.Show.Show TD.Query.SetSupergroupUnrestrictBoostCount.SetSupergroupUnrestrictBoostCount
instance GHC.Classes.Eq TD.Query.SetSupergroupUnrestrictBoostCount.SetSupergroupUnrestrictBoostCount
instance TD.Lib.Internal.ShortShow TD.Query.SetSupergroupUnrestrictBoostCount.SetSupergroupUnrestrictBoostCount
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupUnrestrictBoostCount.SetSupergroupUnrestrictBoostCount

module TD.Query.SetSupergroupUsername

-- | Changes the editable username of a supergroup or channel, requires
--   owner privileges in the supergroup or channel. Returns <a>Ok</a>
data SetSupergroupUsername
SetSupergroupUsername :: Maybe Int -> Maybe Text -> SetSupergroupUsername

-- | Identifier of the supergroup or channel
[supergroup_id] :: SetSupergroupUsername -> Maybe Int

-- | New value of the username. Use an empty string to remove the username.
--   The username can't be completely removed if there is another active or
--   disabled username
[username] :: SetSupergroupUsername -> Maybe Text
defaultSetSupergroupUsername :: SetSupergroupUsername
instance GHC.Show.Show TD.Query.SetSupergroupUsername.SetSupergroupUsername
instance GHC.Classes.Eq TD.Query.SetSupergroupUsername.SetSupergroupUsername
instance TD.Lib.Internal.ShortShow TD.Query.SetSupergroupUsername.SetSupergroupUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetSupergroupUsername.SetSupergroupUsername

module TD.Query.SetTdlibParameters

-- | Sets the parameters for TDLib initialization. Works only when the
--   current authorization state is authorizationStateWaitTdlibParameters.
--   Returns <a>Ok</a>
data SetTdlibParameters
SetTdlibParameters :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe ByteString -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> SetTdlibParameters

-- | Pass true to use Telegram test environment instead of the production
--   environment
[use_test_dc] :: SetTdlibParameters -> Maybe Bool

-- | The path to the directory for the persistent database; if empty, the
--   current working directory will be used
[database_directory] :: SetTdlibParameters -> Maybe Text

-- | The path to the directory for storing files; if empty,
--   database_directory will be used
[files_directory] :: SetTdlibParameters -> Maybe Text

-- | Encryption key for the database. If the encryption key is invalid,
--   then an error with code 401 will be returned
[database_encryption_key] :: SetTdlibParameters -> Maybe ByteString

-- | Pass true to keep information about downloaded and uploaded files
--   between application restarts
[use_file_database] :: SetTdlibParameters -> Maybe Bool

-- | Pass true to keep cache of users, basic groups, supergroups, channels
--   and secret chats between restarts. Implies use_file_database
[use_chat_info_database] :: SetTdlibParameters -> Maybe Bool

-- | Pass true to keep cache of chats and messages between restarts.
--   Implies use_chat_info_database
[use_message_database] :: SetTdlibParameters -> Maybe Bool

-- | Pass true to enable support for secret chats
[use_secret_chats] :: SetTdlibParameters -> Maybe Bool

-- | Application identifier for Telegram API access, which can be obtained
--   at <a>https://my.telegram.org</a>
[api_id] :: SetTdlibParameters -> Maybe Int

-- | Application identifier hash for Telegram API access, which can be
--   obtained at <a>https://my.telegram.org</a>
[api_hash] :: SetTdlibParameters -> Maybe Text

-- | IETF language tag of the user's operating system language; must be
--   non-empty
[system_language_code] :: SetTdlibParameters -> Maybe Text

-- | Model of the device the application is being run on; must be non-empty
[device_model] :: SetTdlibParameters -> Maybe Text

-- | Version of the operating system the application is being run on. If
--   empty, the version is automatically detected by TDLib
[system_version] :: SetTdlibParameters -> Maybe Text

-- | Application version; must be non-empty
[application_version] :: SetTdlibParameters -> Maybe Text
defaultSetTdlibParameters :: SetTdlibParameters
instance GHC.Show.Show TD.Query.SetTdlibParameters.SetTdlibParameters
instance GHC.Classes.Eq TD.Query.SetTdlibParameters.SetTdlibParameters
instance TD.Lib.Internal.ShortShow TD.Query.SetTdlibParameters.SetTdlibParameters
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetTdlibParameters.SetTdlibParameters

module TD.Query.SetUserPersonalProfilePhoto

-- | Changes a personal profile photo of a contact user. Returns <a>Ok</a>
data SetUserPersonalProfilePhoto
SetUserPersonalProfilePhoto :: Maybe Int -> Maybe InputChatPhoto -> SetUserPersonalProfilePhoto

-- | User identifier
[user_id] :: SetUserPersonalProfilePhoto -> Maybe Int

-- | Profile photo to set; pass null to delete the photo;
--   inputChatPhotoPrevious isn't supported in this function
[photo] :: SetUserPersonalProfilePhoto -> Maybe InputChatPhoto
defaultSetUserPersonalProfilePhoto :: SetUserPersonalProfilePhoto
instance GHC.Show.Show TD.Query.SetUserPersonalProfilePhoto.SetUserPersonalProfilePhoto
instance GHC.Classes.Eq TD.Query.SetUserPersonalProfilePhoto.SetUserPersonalProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Query.SetUserPersonalProfilePhoto.SetUserPersonalProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUserPersonalProfilePhoto.SetUserPersonalProfilePhoto

module TD.Query.SetUserPrivacySettingRules

-- | Changes user privacy settings. Returns <a>Ok</a>
data SetUserPrivacySettingRules
SetUserPrivacySettingRules :: Maybe UserPrivacySetting -> Maybe UserPrivacySettingRules -> SetUserPrivacySettingRules

-- | The privacy setting
[setting] :: SetUserPrivacySettingRules -> Maybe UserPrivacySetting

-- | The new privacy rules
[rules] :: SetUserPrivacySettingRules -> Maybe UserPrivacySettingRules
defaultSetUserPrivacySettingRules :: SetUserPrivacySettingRules
instance GHC.Show.Show TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules
instance GHC.Classes.Eq TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules
instance TD.Lib.Internal.ShortShow TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUserPrivacySettingRules.SetUserPrivacySettingRules

module TD.Query.SetUserSupportInfo

-- | Sets support information for the given user; for Telegram support
--   only. Returns <a>UserSupportInfo</a>
data SetUserSupportInfo
SetUserSupportInfo :: Maybe Int -> Maybe FormattedText -> SetUserSupportInfo

-- | User identifier
[user_id] :: SetUserSupportInfo -> Maybe Int

-- | New information message
[message] :: SetUserSupportInfo -> Maybe FormattedText
defaultSetUserSupportInfo :: SetUserSupportInfo
instance GHC.Show.Show TD.Query.SetUserSupportInfo.SetUserSupportInfo
instance GHC.Classes.Eq TD.Query.SetUserSupportInfo.SetUserSupportInfo
instance TD.Lib.Internal.ShortShow TD.Query.SetUserSupportInfo.SetUserSupportInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUserSupportInfo.SetUserSupportInfo

module TD.Query.SetUsername

-- | Changes the editable username of the current user. Returns <a>Ok</a>
data SetUsername
SetUsername :: Maybe Text -> SetUsername

-- | The new value of the username. Use an empty string to remove the
--   username. The username can't be completely removed if there is another
--   active or disabled username
[username] :: SetUsername -> Maybe Text
instance GHC.Show.Show TD.Query.SetUsername.SetUsername
instance GHC.Classes.Eq TD.Query.SetUsername.SetUsername
instance TD.Lib.Internal.ShortShow TD.Query.SetUsername.SetUsername
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetUsername.SetUsername

module TD.Query.SetVideoChatDefaultParticipant

-- | Changes default participant identifier, on whose behalf a video chat
--   in the chat will be joined. Returns <a>Ok</a>
data SetVideoChatDefaultParticipant
SetVideoChatDefaultParticipant :: Maybe Int -> Maybe MessageSender -> SetVideoChatDefaultParticipant

-- | Chat identifier
[chat_id] :: SetVideoChatDefaultParticipant -> Maybe Int

-- | Default group call participant identifier to join the video chats
[default_participant_id] :: SetVideoChatDefaultParticipant -> Maybe MessageSender
defaultSetVideoChatDefaultParticipant :: SetVideoChatDefaultParticipant
instance GHC.Show.Show TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant
instance GHC.Classes.Eq TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant
instance TD.Lib.Internal.ShortShow TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SetVideoChatDefaultParticipant.SetVideoChatDefaultParticipant

module TD.Query.ShareChatWithBot

-- | Shares a chat after pressing a keyboardButtonTypeRequestChat button
--   with the bot. Returns <a>Ok</a>
data ShareChatWithBot
ShareChatWithBot :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe Bool -> ShareChatWithBot

-- | Identifier of the chat with the bot
[chat_id] :: ShareChatWithBot -> Maybe Int

-- | Identifier of the message with the button
[message_id] :: ShareChatWithBot -> Maybe Int

-- | Identifier of the button
[button_id] :: ShareChatWithBot -> Maybe Int

-- | Identifier of the shared chat
[shared_chat_id] :: ShareChatWithBot -> Maybe Int

-- | Pass true to check that the chat can be shared by the button instead
--   of actually sharing it. Doesn't check bot_is_member and
--   bot_administrator_rights restrictions. If the bot must be a member,
--   then all chats from getGroupsInCommon and all chats, where the user
--   can add the bot, are suitable. In the latter case the bot will be
--   automatically added to the chat. If the bot must be an administrator,
--   then all chats, where the bot already has requested rights or can be
--   added to administrators by the user, are suitable. In the latter case
--   the bot will be automatically granted requested rights
[only_check] :: ShareChatWithBot -> Maybe Bool
defaultShareChatWithBot :: ShareChatWithBot
instance GHC.Show.Show TD.Query.ShareChatWithBot.ShareChatWithBot
instance GHC.Classes.Eq TD.Query.ShareChatWithBot.ShareChatWithBot
instance TD.Lib.Internal.ShortShow TD.Query.ShareChatWithBot.ShareChatWithBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ShareChatWithBot.ShareChatWithBot

module TD.Query.SharePhoneNumber

-- | Shares the phone number of the current user with a mutual contact.
--   Supposed to be called when the user clicks on
--   chatActionBarSharePhoneNumber. Returns <a>Ok</a>
data SharePhoneNumber
SharePhoneNumber :: Maybe Int -> SharePhoneNumber

-- | Identifier of the user with whom to share the phone number. The user
--   must be a mutual contact
[user_id] :: SharePhoneNumber -> Maybe Int
instance GHC.Show.Show TD.Query.SharePhoneNumber.SharePhoneNumber
instance GHC.Classes.Eq TD.Query.SharePhoneNumber.SharePhoneNumber
instance TD.Lib.Internal.ShortShow TD.Query.SharePhoneNumber.SharePhoneNumber
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SharePhoneNumber.SharePhoneNumber

module TD.Query.ShareUsersWithBot

-- | Shares users after pressing a keyboardButtonTypeRequestUsers button
--   with the bot. Returns <a>Ok</a>
data ShareUsersWithBot
ShareUsersWithBot :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe Bool -> ShareUsersWithBot

-- | Identifier of the chat with the bot
[chat_id] :: ShareUsersWithBot -> Maybe Int

-- | Identifier of the message with the button
[message_id] :: ShareUsersWithBot -> Maybe Int

-- | Identifier of the button
[button_id] :: ShareUsersWithBot -> Maybe Int

-- | Identifiers of the shared users
[shared_user_ids] :: ShareUsersWithBot -> Maybe [Int]

-- | Pass true to check that the users can be shared by the button instead
--   of actually sharing them
[only_check] :: ShareUsersWithBot -> Maybe Bool
defaultShareUsersWithBot :: ShareUsersWithBot
instance GHC.Show.Show TD.Query.ShareUsersWithBot.ShareUsersWithBot
instance GHC.Classes.Eq TD.Query.ShareUsersWithBot.ShareUsersWithBot
instance TD.Lib.Internal.ShortShow TD.Query.ShareUsersWithBot.ShareUsersWithBot
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ShareUsersWithBot.ShareUsersWithBot

module TD.Query.StartGroupCallRecording

-- | Starts recording of an active group call. Requires
--   groupCall.can_be_managed group call flag. Returns <a>Ok</a>
data StartGroupCallRecording
StartGroupCallRecording :: Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> StartGroupCallRecording

-- | Group call identifier
[group_call_id] :: StartGroupCallRecording -> Maybe Int

-- | Group call recording title; 0-64 characters
[title] :: StartGroupCallRecording -> Maybe Text

-- | Pass true to record a video file instead of an audio file
[record_video] :: StartGroupCallRecording -> Maybe Bool

-- | Pass true to use portrait orientation for video instead of landscape
--   one
[use_portrait_orientation] :: StartGroupCallRecording -> Maybe Bool
defaultStartGroupCallRecording :: StartGroupCallRecording
instance GHC.Show.Show TD.Query.StartGroupCallRecording.StartGroupCallRecording
instance GHC.Classes.Eq TD.Query.StartGroupCallRecording.StartGroupCallRecording
instance TD.Lib.Internal.ShortShow TD.Query.StartGroupCallRecording.StartGroupCallRecording
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartGroupCallRecording.StartGroupCallRecording

module TD.Query.StartGroupCallScreenSharing

-- | Starts screen sharing in a joined group call. Returns join response
--   payload for tgcalls. Returns <a>Text</a>
data StartGroupCallScreenSharing
StartGroupCallScreenSharing :: Maybe Int -> Maybe Int -> Maybe Text -> StartGroupCallScreenSharing

-- | Group call identifier
[group_call_id] :: StartGroupCallScreenSharing -> Maybe Int

-- | Screen sharing audio channel synchronization source identifier;
--   received from tgcalls
[audio_source_id] :: StartGroupCallScreenSharing -> Maybe Int

-- | Group call join payload; received from tgcalls
[payload] :: StartGroupCallScreenSharing -> Maybe Text
defaultStartGroupCallScreenSharing :: StartGroupCallScreenSharing
instance GHC.Show.Show TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing
instance GHC.Classes.Eq TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing
instance TD.Lib.Internal.ShortShow TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartGroupCallScreenSharing.StartGroupCallScreenSharing

module TD.Query.StartScheduledGroupCall

-- | Starts a scheduled group call. Returns <a>Ok</a>
data StartScheduledGroupCall
StartScheduledGroupCall :: Maybe Int -> StartScheduledGroupCall

-- | Group call identifier
[group_call_id] :: StartScheduledGroupCall -> Maybe Int
instance GHC.Show.Show TD.Query.StartScheduledGroupCall.StartScheduledGroupCall
instance GHC.Classes.Eq TD.Query.StartScheduledGroupCall.StartScheduledGroupCall
instance TD.Lib.Internal.ShortShow TD.Query.StartScheduledGroupCall.StartScheduledGroupCall
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StartScheduledGroupCall.StartScheduledGroupCall

module TD.Query.StopPoll

-- | Stops a poll. A poll in a message can be stopped when the message has
--   can_be_edited flag is set. Returns <a>Ok</a>
data StopPoll
StopPoll :: Maybe Int -> Maybe Int -> Maybe ReplyMarkup -> StopPoll

-- | Identifier of the chat to which the poll belongs
[chat_id] :: StopPoll -> Maybe Int

-- | Identifier of the message containing the poll
[message_id] :: StopPoll -> Maybe Int

-- | The new message reply markup; pass null if none; for bots only
[reply_markup] :: StopPoll -> Maybe ReplyMarkup
defaultStopPoll :: StopPoll
instance GHC.Show.Show TD.Query.StopPoll.StopPoll
instance GHC.Classes.Eq TD.Query.StopPoll.StopPoll
instance TD.Lib.Internal.ShortShow TD.Query.StopPoll.StopPoll
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.StopPoll.StopPoll

module TD.Query.SuggestUserProfilePhoto

-- | Suggests a profile photo to another regular user with common messages.
--   Returns <a>Ok</a>
data SuggestUserProfilePhoto
SuggestUserProfilePhoto :: Maybe Int -> Maybe InputChatPhoto -> SuggestUserProfilePhoto

-- | User identifier
[user_id] :: SuggestUserProfilePhoto -> Maybe Int

-- | Profile photo to suggest; inputChatPhotoPrevious isn't supported in
--   this function
[photo] :: SuggestUserProfilePhoto -> Maybe InputChatPhoto
defaultSuggestUserProfilePhoto :: SuggestUserProfilePhoto
instance GHC.Show.Show TD.Query.SuggestUserProfilePhoto.SuggestUserProfilePhoto
instance GHC.Classes.Eq TD.Query.SuggestUserProfilePhoto.SuggestUserProfilePhoto
instance TD.Lib.Internal.ShortShow TD.Query.SuggestUserProfilePhoto.SuggestUserProfilePhoto
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SuggestUserProfilePhoto.SuggestUserProfilePhoto

module TD.Query.SynchronizeLanguagePack

-- | Fetches the latest versions of all strings from a language pack in the
--   current localization target from the server. This method doesn't need
--   to be called explicitly for the current used/base language packs. Can
--   be called before authorization. Returns <a>Ok</a>
data SynchronizeLanguagePack
SynchronizeLanguagePack :: Maybe Text -> SynchronizeLanguagePack

-- | Language pack identifier
[language_pack_id] :: SynchronizeLanguagePack -> Maybe Text
instance GHC.Show.Show TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack
instance GHC.Classes.Eq TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack
instance TD.Lib.Internal.ShortShow TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.SynchronizeLanguagePack.SynchronizeLanguagePack

module TD.Query.TerminateAllOtherSessions

-- | Terminates all other sessions of the current user. Returns <a>Ok</a>
data TerminateAllOtherSessions
TerminateAllOtherSessions :: TerminateAllOtherSessions
instance GHC.Show.Show TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions
instance GHC.Classes.Eq TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions
instance TD.Lib.Internal.ShortShow TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TerminateAllOtherSessions.TerminateAllOtherSessions

module TD.Query.TerminateSession

-- | Terminates a session of the current user. Returns <a>Ok</a>
data TerminateSession
TerminateSession :: Maybe Int -> TerminateSession

-- | Session identifier
[session_id] :: TerminateSession -> Maybe Int
instance GHC.Show.Show TD.Query.TerminateSession.TerminateSession
instance GHC.Classes.Eq TD.Query.TerminateSession.TerminateSession
instance TD.Lib.Internal.ShortShow TD.Query.TerminateSession.TerminateSession
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TerminateSession.TerminateSession

module TD.Query.TestCallBytes

-- | Returns the received bytes; for testing only. This is an offline
--   method. Can be called before authorization. Returns <a>TestBytes</a>
data TestCallBytes
TestCallBytes :: Maybe ByteString -> TestCallBytes

-- | Bytes to return
[x] :: TestCallBytes -> Maybe ByteString
instance GHC.Show.Show TD.Query.TestCallBytes.TestCallBytes
instance GHC.Classes.Eq TD.Query.TestCallBytes.TestCallBytes
instance TD.Lib.Internal.ShortShow TD.Query.TestCallBytes.TestCallBytes
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallBytes.TestCallBytes

module TD.Query.TestCallEmpty

-- | Does nothing; for testing only. This is an offline method. Can be
--   called before authorization. Returns <a>Ok</a>
data TestCallEmpty
TestCallEmpty :: TestCallEmpty
instance GHC.Show.Show TD.Query.TestCallEmpty.TestCallEmpty
instance GHC.Classes.Eq TD.Query.TestCallEmpty.TestCallEmpty
instance TD.Lib.Internal.ShortShow TD.Query.TestCallEmpty.TestCallEmpty
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallEmpty.TestCallEmpty

module TD.Query.TestCallString

-- | Returns the received string; for testing only. This is an offline
--   method. Can be called before authorization. Returns <a>TestString</a>
data TestCallString
TestCallString :: Maybe Text -> TestCallString

-- | String to return
[x] :: TestCallString -> Maybe Text
instance GHC.Show.Show TD.Query.TestCallString.TestCallString
instance GHC.Classes.Eq TD.Query.TestCallString.TestCallString
instance TD.Lib.Internal.ShortShow TD.Query.TestCallString.TestCallString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallString.TestCallString

module TD.Query.TestCallVectorInt

-- | Returns the received vector of numbers; for testing only. This is an
--   offline method. Can be called before authorization. Returns
--   <a>TestVectorInt</a>
data TestCallVectorInt
TestCallVectorInt :: Maybe [Int] -> TestCallVectorInt

-- | Vector of numbers to return
[x] :: TestCallVectorInt -> Maybe [Int]
instance GHC.Show.Show TD.Query.TestCallVectorInt.TestCallVectorInt
instance GHC.Classes.Eq TD.Query.TestCallVectorInt.TestCallVectorInt
instance TD.Lib.Internal.ShortShow TD.Query.TestCallVectorInt.TestCallVectorInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorInt.TestCallVectorInt

module TD.Query.TestCallVectorIntObject

-- | Returns the received vector of objects containing a number; for
--   testing only. This is an offline method. Can be called before
--   authorization. Returns <a>TestVectorIntObject</a>
data TestCallVectorIntObject
TestCallVectorIntObject :: Maybe [TestInt] -> TestCallVectorIntObject

-- | Vector of objects to return
[x] :: TestCallVectorIntObject -> Maybe [TestInt]
instance GHC.Show.Show TD.Query.TestCallVectorIntObject.TestCallVectorIntObject
instance GHC.Classes.Eq TD.Query.TestCallVectorIntObject.TestCallVectorIntObject
instance TD.Lib.Internal.ShortShow TD.Query.TestCallVectorIntObject.TestCallVectorIntObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorIntObject.TestCallVectorIntObject

module TD.Query.TestCallVectorString

-- | Returns the received vector of strings; for testing only. This is an
--   offline method. Can be called before authorization. Returns
--   <a>TestVectorString</a>
data TestCallVectorString
TestCallVectorString :: Maybe [Text] -> TestCallVectorString

-- | Vector of strings to return
[x] :: TestCallVectorString -> Maybe [Text]
instance GHC.Show.Show TD.Query.TestCallVectorString.TestCallVectorString
instance GHC.Classes.Eq TD.Query.TestCallVectorString.TestCallVectorString
instance TD.Lib.Internal.ShortShow TD.Query.TestCallVectorString.TestCallVectorString
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorString.TestCallVectorString

module TD.Query.TestCallVectorStringObject

-- | Returns the received vector of objects containing a string; for
--   testing only. This is an offline method. Can be called before
--   authorization. Returns <a>TestVectorStringObject</a>
data TestCallVectorStringObject
TestCallVectorStringObject :: Maybe [TestString] -> TestCallVectorStringObject

-- | Vector of objects to return
[x] :: TestCallVectorStringObject -> Maybe [TestString]
instance GHC.Show.Show TD.Query.TestCallVectorStringObject.TestCallVectorStringObject
instance GHC.Classes.Eq TD.Query.TestCallVectorStringObject.TestCallVectorStringObject
instance TD.Lib.Internal.ShortShow TD.Query.TestCallVectorStringObject.TestCallVectorStringObject
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestCallVectorStringObject.TestCallVectorStringObject

module TD.Query.TestGetDifference

-- | Forces an updates.getDifference call to the Telegram servers; for
--   testing only. Returns <a>Ok</a>
data TestGetDifference
TestGetDifference :: TestGetDifference
instance GHC.Show.Show TD.Query.TestGetDifference.TestGetDifference
instance GHC.Classes.Eq TD.Query.TestGetDifference.TestGetDifference
instance TD.Lib.Internal.ShortShow TD.Query.TestGetDifference.TestGetDifference
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestGetDifference.TestGetDifference

module TD.Query.TestNetwork

-- | Sends a simple network request to the Telegram servers; for testing
--   only. Can be called before authorization. Returns <a>Ok</a>
data TestNetwork
TestNetwork :: TestNetwork
instance GHC.Show.Show TD.Query.TestNetwork.TestNetwork
instance GHC.Classes.Eq TD.Query.TestNetwork.TestNetwork
instance TD.Lib.Internal.ShortShow TD.Query.TestNetwork.TestNetwork
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestNetwork.TestNetwork

module TD.Query.TestProxy

-- | Sends a simple network request to the Telegram servers via proxy; for
--   testing only. Can be called before authorization. Returns <a>Ok</a>
data TestProxy
TestProxy :: Maybe Text -> Maybe Int -> Maybe ProxyType -> Maybe Int -> Maybe Double -> TestProxy

-- | Proxy server domain or IP address
[server] :: TestProxy -> Maybe Text

-- | Proxy server port
[port] :: TestProxy -> Maybe Int

-- | Proxy type
[_type] :: TestProxy -> Maybe ProxyType

-- | Identifier of a datacenter with which to test connection
[dc_id] :: TestProxy -> Maybe Int

-- | The maximum overall timeout for the request
[timeout] :: TestProxy -> Maybe Double
defaultTestProxy :: TestProxy
instance GHC.Show.Show TD.Query.TestProxy.TestProxy
instance GHC.Classes.Eq TD.Query.TestProxy.TestProxy
instance TD.Lib.Internal.ShortShow TD.Query.TestProxy.TestProxy
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestProxy.TestProxy

module TD.Query.TestReturnError

-- | Returns the specified error and ensures that the Error object is used;
--   for testing only. Can be called synchronously. Returns <a>Error</a>
data TestReturnError
TestReturnError :: Maybe Error -> TestReturnError

-- | The error to be returned
[_error] :: TestReturnError -> Maybe Error
instance GHC.Show.Show TD.Query.TestReturnError.TestReturnError
instance GHC.Classes.Eq TD.Query.TestReturnError.TestReturnError
instance TD.Lib.Internal.ShortShow TD.Query.TestReturnError.TestReturnError
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestReturnError.TestReturnError

module TD.Query.TestSquareInt

-- | Returns the squared received number; for testing only. This is an
--   offline method. Can be called before authorization. Returns
--   <a>TestInt</a>
data TestSquareInt
TestSquareInt :: Maybe Int -> TestSquareInt

-- | Number to square
[x] :: TestSquareInt -> Maybe Int
instance GHC.Show.Show TD.Query.TestSquareInt.TestSquareInt
instance GHC.Classes.Eq TD.Query.TestSquareInt.TestSquareInt
instance TD.Lib.Internal.ShortShow TD.Query.TestSquareInt.TestSquareInt
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestSquareInt.TestSquareInt

module TD.Query.TestUseUpdate

-- | Does nothing and ensures that the Update object is used; for testing
--   only. This is an offline method. Can be called before authorization.
--   Returns <a>Update</a>
data TestUseUpdate
TestUseUpdate :: TestUseUpdate
instance GHC.Show.Show TD.Query.TestUseUpdate.TestUseUpdate
instance GHC.Classes.Eq TD.Query.TestUseUpdate.TestUseUpdate
instance TD.Lib.Internal.ShortShow TD.Query.TestUseUpdate.TestUseUpdate
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TestUseUpdate.TestUseUpdate

module TD.Query.ToggleAllDownloadsArePaused

-- | Changes pause state of all files in the file download list. Returns
--   <a>Ok</a>
data ToggleAllDownloadsArePaused
ToggleAllDownloadsArePaused :: Maybe Bool -> ToggleAllDownloadsArePaused

-- | Pass true to pause all downloads; pass false to unpause them
[are_paused] :: ToggleAllDownloadsArePaused -> Maybe Bool
instance GHC.Show.Show TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused
instance GHC.Classes.Eq TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused
instance TD.Lib.Internal.ShortShow TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleAllDownloadsArePaused.ToggleAllDownloadsArePaused

module TD.Query.ToggleBotIsAddedToAttachmentMenu

-- | Adds or removes a bot to attachment and side menu. Bot can be added to
--   the menu, only if userTypeBot.can_be_added_to_attachment_menu == true.
--   Returns <a>Ok</a>
data ToggleBotIsAddedToAttachmentMenu
ToggleBotIsAddedToAttachmentMenu :: Maybe Int -> Maybe Bool -> Maybe Bool -> ToggleBotIsAddedToAttachmentMenu

-- | Bot's user identifier
[bot_user_id] :: ToggleBotIsAddedToAttachmentMenu -> Maybe Int

-- | Pass true to add the bot to attachment menu; pass false to remove the
--   bot from attachment menu
[is_added] :: ToggleBotIsAddedToAttachmentMenu -> Maybe Bool

-- | Pass true if the current user allowed the bot to send them messages.
--   Ignored if is_added is false
[allow_write_access] :: ToggleBotIsAddedToAttachmentMenu -> Maybe Bool
defaultToggleBotIsAddedToAttachmentMenu :: ToggleBotIsAddedToAttachmentMenu
instance GHC.Show.Show TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu
instance GHC.Classes.Eq TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu
instance TD.Lib.Internal.ShortShow TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleBotIsAddedToAttachmentMenu.ToggleBotIsAddedToAttachmentMenu

module TD.Query.ToggleBotUsernameIsActive

-- | Changes active state for a username of a bot. The editable username
--   can't be disabled. May return an error with a message
--   <a>USERNAMES_ACTIVE_TOO_MUCH</a> if the maximum number of active
--   usernames has been reached. Can be called only if
--   userTypeBot.can_be_edited == true. Returns <a>Ok</a>
data ToggleBotUsernameIsActive
ToggleBotUsernameIsActive :: Maybe Int -> Maybe Text -> Maybe Bool -> ToggleBotUsernameIsActive

-- | Identifier of the target bot
[bot_user_id] :: ToggleBotUsernameIsActive -> Maybe Int

-- | The username to change
[username] :: ToggleBotUsernameIsActive -> Maybe Text

-- | Pass true to activate the username; pass false to disable it
[is_active] :: ToggleBotUsernameIsActive -> Maybe Bool
defaultToggleBotUsernameIsActive :: ToggleBotUsernameIsActive
instance GHC.Show.Show TD.Query.ToggleBotUsernameIsActive.ToggleBotUsernameIsActive
instance GHC.Classes.Eq TD.Query.ToggleBotUsernameIsActive.ToggleBotUsernameIsActive
instance TD.Lib.Internal.ShortShow TD.Query.ToggleBotUsernameIsActive.ToggleBotUsernameIsActive
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleBotUsernameIsActive.ToggleBotUsernameIsActive

module TD.Query.ToggleBusinessConnectedBotChatIsPaused

-- | Pauses or resumes the connected business bot in a specific chat.
--   Returns <a>Ok</a>
data ToggleBusinessConnectedBotChatIsPaused
ToggleBusinessConnectedBotChatIsPaused :: Maybe Int -> Maybe Bool -> ToggleBusinessConnectedBotChatIsPaused

-- | Chat identifier
[chat_id] :: ToggleBusinessConnectedBotChatIsPaused -> Maybe Int

-- | Pass true to pause the connected bot in the chat; pass false to resume
--   the bot
[is_paused] :: ToggleBusinessConnectedBotChatIsPaused -> Maybe Bool
defaultToggleBusinessConnectedBotChatIsPaused :: ToggleBusinessConnectedBotChatIsPaused
instance GHC.Show.Show TD.Query.ToggleBusinessConnectedBotChatIsPaused.ToggleBusinessConnectedBotChatIsPaused
instance GHC.Classes.Eq TD.Query.ToggleBusinessConnectedBotChatIsPaused.ToggleBusinessConnectedBotChatIsPaused
instance TD.Lib.Internal.ShortShow TD.Query.ToggleBusinessConnectedBotChatIsPaused.ToggleBusinessConnectedBotChatIsPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleBusinessConnectedBotChatIsPaused.ToggleBusinessConnectedBotChatIsPaused

module TD.Query.ToggleChatDefaultDisableNotification

-- | Changes the value of the default disable_notification parameter, used
--   when a message is sent to a chat. Returns <a>Ok</a>
data ToggleChatDefaultDisableNotification
ToggleChatDefaultDisableNotification :: Maybe Int -> Maybe Bool -> ToggleChatDefaultDisableNotification

-- | Chat identifier
[chat_id] :: ToggleChatDefaultDisableNotification -> Maybe Int

-- | New value of default_disable_notification
[default_disable_notification] :: ToggleChatDefaultDisableNotification -> Maybe Bool
defaultToggleChatDefaultDisableNotification :: ToggleChatDefaultDisableNotification
instance GHC.Show.Show TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification
instance GHC.Classes.Eq TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatDefaultDisableNotification.ToggleChatDefaultDisableNotification

module TD.Query.ToggleChatFolderTags

-- | Toggles whether chat folder tags are enabled. Returns <a>Ok</a>
data ToggleChatFolderTags
ToggleChatFolderTags :: Maybe Bool -> ToggleChatFolderTags

-- | Pass true to enable folder tags; pass false to disable them
[are_tags_enabled] :: ToggleChatFolderTags -> Maybe Bool
instance GHC.Show.Show TD.Query.ToggleChatFolderTags.ToggleChatFolderTags
instance GHC.Classes.Eq TD.Query.ToggleChatFolderTags.ToggleChatFolderTags
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatFolderTags.ToggleChatFolderTags
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatFolderTags.ToggleChatFolderTags

module TD.Query.ToggleChatHasProtectedContent

-- | Changes the ability of users to save, forward, or copy chat content.
--   Supported only for basic groups, supergroups and channels. Requires
--   owner privileges. Returns <a>Ok</a>
data ToggleChatHasProtectedContent
ToggleChatHasProtectedContent :: Maybe Int -> Maybe Bool -> ToggleChatHasProtectedContent

-- | Chat identifier
[chat_id] :: ToggleChatHasProtectedContent -> Maybe Int

-- | New value of has_protected_content
[has_protected_content] :: ToggleChatHasProtectedContent -> Maybe Bool
defaultToggleChatHasProtectedContent :: ToggleChatHasProtectedContent
instance GHC.Show.Show TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent
instance GHC.Classes.Eq TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatHasProtectedContent.ToggleChatHasProtectedContent

module TD.Query.ToggleChatIsMarkedAsUnread

-- | Changes the marked as unread state of a chat. Returns <a>Ok</a>
data ToggleChatIsMarkedAsUnread
ToggleChatIsMarkedAsUnread :: Maybe Int -> Maybe Bool -> ToggleChatIsMarkedAsUnread

-- | Chat identifier
[chat_id] :: ToggleChatIsMarkedAsUnread -> Maybe Int

-- | New value of is_marked_as_unread
[is_marked_as_unread] :: ToggleChatIsMarkedAsUnread -> Maybe Bool
defaultToggleChatIsMarkedAsUnread :: ToggleChatIsMarkedAsUnread
instance GHC.Show.Show TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread
instance GHC.Classes.Eq TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatIsMarkedAsUnread.ToggleChatIsMarkedAsUnread

module TD.Query.ToggleChatIsPinned

-- | Changes the pinned state of a chat. There can be up to
--   getOption("pinned_chat_count_max")<i>getOption("pinned_archived_chat_count_max")
--   pinned non-secret chats and the same number of secret chats in the
--   main</i>archive chat list. The limit can be increased with Telegram
--   Premium. Returns <a>Ok</a>
data ToggleChatIsPinned
ToggleChatIsPinned :: Maybe ChatList -> Maybe Int -> Maybe Bool -> ToggleChatIsPinned

-- | Chat list in which to change the pinned state of the chat
[chat_list] :: ToggleChatIsPinned -> Maybe ChatList

-- | Chat identifier
[chat_id] :: ToggleChatIsPinned -> Maybe Int

-- | Pass true to pin the chat; pass false to unpin it
[is_pinned] :: ToggleChatIsPinned -> Maybe Bool
defaultToggleChatIsPinned :: ToggleChatIsPinned
instance GHC.Show.Show TD.Query.ToggleChatIsPinned.ToggleChatIsPinned
instance GHC.Classes.Eq TD.Query.ToggleChatIsPinned.ToggleChatIsPinned
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatIsPinned.ToggleChatIsPinned
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatIsPinned.ToggleChatIsPinned

module TD.Query.ToggleChatIsTranslatable

-- | Changes the translatable state of a chat. Returns <a>Ok</a>
data ToggleChatIsTranslatable
ToggleChatIsTranslatable :: Maybe Int -> Maybe Bool -> ToggleChatIsTranslatable

-- | Chat identifier
[chat_id] :: ToggleChatIsTranslatable -> Maybe Int

-- | New value of is_translatable
[is_translatable] :: ToggleChatIsTranslatable -> Maybe Bool
defaultToggleChatIsTranslatable :: ToggleChatIsTranslatable
instance GHC.Show.Show TD.Query.ToggleChatIsTranslatable.ToggleChatIsTranslatable
instance GHC.Classes.Eq TD.Query.ToggleChatIsTranslatable.ToggleChatIsTranslatable
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatIsTranslatable.ToggleChatIsTranslatable
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatIsTranslatable.ToggleChatIsTranslatable

module TD.Query.ToggleChatViewAsTopics

-- | Changes the view_as_topics setting of a forum chat or Saved Messages.
--   Returns <a>Ok</a>
data ToggleChatViewAsTopics
ToggleChatViewAsTopics :: Maybe Int -> Maybe Bool -> ToggleChatViewAsTopics

-- | Chat identifier
[chat_id] :: ToggleChatViewAsTopics -> Maybe Int

-- | New value of view_as_topics
[view_as_topics] :: ToggleChatViewAsTopics -> Maybe Bool
defaultToggleChatViewAsTopics :: ToggleChatViewAsTopics
instance GHC.Show.Show TD.Query.ToggleChatViewAsTopics.ToggleChatViewAsTopics
instance GHC.Classes.Eq TD.Query.ToggleChatViewAsTopics.ToggleChatViewAsTopics
instance TD.Lib.Internal.ShortShow TD.Query.ToggleChatViewAsTopics.ToggleChatViewAsTopics
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleChatViewAsTopics.ToggleChatViewAsTopics

module TD.Query.ToggleDownloadIsPaused

-- | Changes pause state of a file in the file download list. Returns
--   <a>Ok</a>
data ToggleDownloadIsPaused
ToggleDownloadIsPaused :: Maybe Int -> Maybe Bool -> ToggleDownloadIsPaused

-- | Identifier of the downloaded file
[file_id] :: ToggleDownloadIsPaused -> Maybe Int

-- | Pass true if the download is paused
[is_paused] :: ToggleDownloadIsPaused -> Maybe Bool
defaultToggleDownloadIsPaused :: ToggleDownloadIsPaused
instance GHC.Show.Show TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused
instance GHC.Classes.Eq TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused
instance TD.Lib.Internal.ShortShow TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleDownloadIsPaused.ToggleDownloadIsPaused

module TD.Query.ToggleForumTopicIsClosed

-- | Toggles whether a topic is closed in a forum supergroup chat; requires
--   can_manage_topics right in the supergroup unless the user is creator
--   of the topic. Returns <a>Ok</a>
data ToggleForumTopicIsClosed
ToggleForumTopicIsClosed :: Maybe Int -> Maybe Int -> Maybe Bool -> ToggleForumTopicIsClosed

-- | Identifier of the chat
[chat_id] :: ToggleForumTopicIsClosed -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: ToggleForumTopicIsClosed -> Maybe Int

-- | Pass true to close the topic; pass false to reopen it
[is_closed] :: ToggleForumTopicIsClosed -> Maybe Bool
defaultToggleForumTopicIsClosed :: ToggleForumTopicIsClosed
instance GHC.Show.Show TD.Query.ToggleForumTopicIsClosed.ToggleForumTopicIsClosed
instance GHC.Classes.Eq TD.Query.ToggleForumTopicIsClosed.ToggleForumTopicIsClosed
instance TD.Lib.Internal.ShortShow TD.Query.ToggleForumTopicIsClosed.ToggleForumTopicIsClosed
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleForumTopicIsClosed.ToggleForumTopicIsClosed

module TD.Query.ToggleForumTopicIsPinned

-- | Changes the pinned state of a forum topic; requires can_manage_topics
--   right in the supergroup. There can be up to
--   getOption("pinned_forum_topic_count_max") pinned forum topics. Returns
--   <a>Ok</a>
data ToggleForumTopicIsPinned
ToggleForumTopicIsPinned :: Maybe Int -> Maybe Int -> Maybe Bool -> ToggleForumTopicIsPinned

-- | Chat identifier
[chat_id] :: ToggleForumTopicIsPinned -> Maybe Int

-- | Message thread identifier of the forum topic
[message_thread_id] :: ToggleForumTopicIsPinned -> Maybe Int

-- | Pass true to pin the topic; pass false to unpin it
[is_pinned] :: ToggleForumTopicIsPinned -> Maybe Bool
defaultToggleForumTopicIsPinned :: ToggleForumTopicIsPinned
instance GHC.Show.Show TD.Query.ToggleForumTopicIsPinned.ToggleForumTopicIsPinned
instance GHC.Classes.Eq TD.Query.ToggleForumTopicIsPinned.ToggleForumTopicIsPinned
instance TD.Lib.Internal.ShortShow TD.Query.ToggleForumTopicIsPinned.ToggleForumTopicIsPinned
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleForumTopicIsPinned.ToggleForumTopicIsPinned

module TD.Query.ToggleGeneralForumTopicIsHidden

-- | Toggles whether a General topic is hidden in a forum supergroup chat;
--   requires can_manage_topics right in the supergroup. Returns <a>Ok</a>
data ToggleGeneralForumTopicIsHidden
ToggleGeneralForumTopicIsHidden :: Maybe Int -> Maybe Bool -> ToggleGeneralForumTopicIsHidden

-- | Identifier of the chat
[chat_id] :: ToggleGeneralForumTopicIsHidden -> Maybe Int

-- | Pass true to hide and close the General topic; pass false to unhide it
[is_hidden] :: ToggleGeneralForumTopicIsHidden -> Maybe Bool
defaultToggleGeneralForumTopicIsHidden :: ToggleGeneralForumTopicIsHidden
instance GHC.Show.Show TD.Query.ToggleGeneralForumTopicIsHidden.ToggleGeneralForumTopicIsHidden
instance GHC.Classes.Eq TD.Query.ToggleGeneralForumTopicIsHidden.ToggleGeneralForumTopicIsHidden
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGeneralForumTopicIsHidden.ToggleGeneralForumTopicIsHidden
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGeneralForumTopicIsHidden.ToggleGeneralForumTopicIsHidden

module TD.Query.ToggleGroupCallEnabledStartNotification

-- | Toggles whether the current user will receive a notification when the
--   group call starts; scheduled group calls only. Returns <a>Ok</a>
data ToggleGroupCallEnabledStartNotification
ToggleGroupCallEnabledStartNotification :: Maybe Int -> Maybe Bool -> ToggleGroupCallEnabledStartNotification

-- | Group call identifier
[group_call_id] :: ToggleGroupCallEnabledStartNotification -> Maybe Int

-- | New value of the enabled_start_notification setting
[enabled_start_notification] :: ToggleGroupCallEnabledStartNotification -> Maybe Bool
defaultToggleGroupCallEnabledStartNotification :: ToggleGroupCallEnabledStartNotification
instance GHC.Show.Show TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification
instance GHC.Classes.Eq TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallEnabledStartNotification.ToggleGroupCallEnabledStartNotification

module TD.Query.ToggleGroupCallIsMyVideoEnabled

-- | Toggles whether current user's video is enabled. Returns <a>Ok</a>
data ToggleGroupCallIsMyVideoEnabled
ToggleGroupCallIsMyVideoEnabled :: Maybe Int -> Maybe Bool -> ToggleGroupCallIsMyVideoEnabled

-- | Group call identifier
[group_call_id] :: ToggleGroupCallIsMyVideoEnabled -> Maybe Int

-- | Pass true if the current user's video is enabled
[is_my_video_enabled] :: ToggleGroupCallIsMyVideoEnabled -> Maybe Bool
defaultToggleGroupCallIsMyVideoEnabled :: ToggleGroupCallIsMyVideoEnabled
instance GHC.Show.Show TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled
instance GHC.Classes.Eq TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallIsMyVideoEnabled.ToggleGroupCallIsMyVideoEnabled

module TD.Query.ToggleGroupCallIsMyVideoPaused

-- | Toggles whether current user's video is paused. Returns <a>Ok</a>
data ToggleGroupCallIsMyVideoPaused
ToggleGroupCallIsMyVideoPaused :: Maybe Int -> Maybe Bool -> ToggleGroupCallIsMyVideoPaused

-- | Group call identifier
[group_call_id] :: ToggleGroupCallIsMyVideoPaused -> Maybe Int

-- | Pass true if the current user's video is paused
[is_my_video_paused] :: ToggleGroupCallIsMyVideoPaused -> Maybe Bool
defaultToggleGroupCallIsMyVideoPaused :: ToggleGroupCallIsMyVideoPaused
instance GHC.Show.Show TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused
instance GHC.Classes.Eq TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallIsMyVideoPaused.ToggleGroupCallIsMyVideoPaused

module TD.Query.ToggleGroupCallMuteNewParticipants

-- | Toggles whether new participants of a group call can be unmuted only
--   by administrators of the group call. Requires
--   groupCall.can_toggle_mute_new_participants group call flag. Returns
--   <a>Ok</a>
data ToggleGroupCallMuteNewParticipants
ToggleGroupCallMuteNewParticipants :: Maybe Int -> Maybe Bool -> ToggleGroupCallMuteNewParticipants

-- | Group call identifier
[group_call_id] :: ToggleGroupCallMuteNewParticipants -> Maybe Int

-- | New value of the mute_new_participants setting
[mute_new_participants] :: ToggleGroupCallMuteNewParticipants -> Maybe Bool
defaultToggleGroupCallMuteNewParticipants :: ToggleGroupCallMuteNewParticipants
instance GHC.Show.Show TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants
instance GHC.Classes.Eq TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallMuteNewParticipants.ToggleGroupCallMuteNewParticipants

module TD.Query.ToggleGroupCallParticipantIsHandRaised

-- | Toggles whether a group call participant hand is rased. Returns
--   <a>Ok</a>
data ToggleGroupCallParticipantIsHandRaised
ToggleGroupCallParticipantIsHandRaised :: Maybe Int -> Maybe MessageSender -> Maybe Bool -> ToggleGroupCallParticipantIsHandRaised

-- | Group call identifier
[group_call_id] :: ToggleGroupCallParticipantIsHandRaised -> Maybe Int

-- | Participant identifier
[participant_id] :: ToggleGroupCallParticipantIsHandRaised -> Maybe MessageSender

-- | Pass true if the user's hand needs to be raised. Only self hand can be
--   raised. Requires groupCall.can_be_managed group call flag to lower
--   other's hand
[is_hand_raised] :: ToggleGroupCallParticipantIsHandRaised -> Maybe Bool
defaultToggleGroupCallParticipantIsHandRaised :: ToggleGroupCallParticipantIsHandRaised
instance GHC.Show.Show TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised
instance GHC.Classes.Eq TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallParticipantIsHandRaised.ToggleGroupCallParticipantIsHandRaised

module TD.Query.ToggleGroupCallParticipantIsMuted

-- | Toggles whether a participant of an active group call is muted,
--   unmuted, or allowed to unmute themselves. Returns <a>Ok</a>
data ToggleGroupCallParticipantIsMuted
ToggleGroupCallParticipantIsMuted :: Maybe Int -> Maybe MessageSender -> Maybe Bool -> ToggleGroupCallParticipantIsMuted

-- | Group call identifier
[group_call_id] :: ToggleGroupCallParticipantIsMuted -> Maybe Int

-- | Participant identifier
[participant_id] :: ToggleGroupCallParticipantIsMuted -> Maybe MessageSender

-- | Pass true to mute the user; pass false to unmute them
[is_muted] :: ToggleGroupCallParticipantIsMuted -> Maybe Bool
defaultToggleGroupCallParticipantIsMuted :: ToggleGroupCallParticipantIsMuted
instance GHC.Show.Show TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted
instance GHC.Classes.Eq TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallParticipantIsMuted.ToggleGroupCallParticipantIsMuted

module TD.Query.ToggleGroupCallScreenSharingIsPaused

-- | Pauses or unpauses screen sharing in a joined group call. Returns
--   <a>Ok</a>
data ToggleGroupCallScreenSharingIsPaused
ToggleGroupCallScreenSharingIsPaused :: Maybe Int -> Maybe Bool -> ToggleGroupCallScreenSharingIsPaused

-- | Group call identifier
[group_call_id] :: ToggleGroupCallScreenSharingIsPaused -> Maybe Int

-- | Pass true to pause screen sharing; pass false to unpause it
[is_paused] :: ToggleGroupCallScreenSharingIsPaused -> Maybe Bool
defaultToggleGroupCallScreenSharingIsPaused :: ToggleGroupCallScreenSharingIsPaused
instance GHC.Show.Show TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused
instance GHC.Classes.Eq TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused
instance TD.Lib.Internal.ShortShow TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleGroupCallScreenSharingIsPaused.ToggleGroupCallScreenSharingIsPaused

module TD.Query.ToggleHasSponsoredMessagesEnabled

-- | Toggles whether the current user has sponsored messages enabled. The
--   setting has no effect for users without Telegram Premium for which
--   sponsored messages are always enabled. Returns <a>Ok</a>
data ToggleHasSponsoredMessagesEnabled
ToggleHasSponsoredMessagesEnabled :: Maybe Bool -> ToggleHasSponsoredMessagesEnabled

-- | Pass true to enable sponsored messages for the current user; false to
--   disable them
[has_sponsored_messages_enabled] :: ToggleHasSponsoredMessagesEnabled -> Maybe Bool
instance GHC.Show.Show TD.Query.ToggleHasSponsoredMessagesEnabled.ToggleHasSponsoredMessagesEnabled
instance GHC.Classes.Eq TD.Query.ToggleHasSponsoredMessagesEnabled.ToggleHasSponsoredMessagesEnabled
instance TD.Lib.Internal.ShortShow TD.Query.ToggleHasSponsoredMessagesEnabled.ToggleHasSponsoredMessagesEnabled
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleHasSponsoredMessagesEnabled.ToggleHasSponsoredMessagesEnabled

module TD.Query.ToggleSavedMessagesTopicIsPinned

-- | Changes the pinned state of a Saved Messages topic. There can be up to
--   getOption("pinned_saved_messages_topic_count_max") pinned topics. The
--   limit can be increased with Telegram Premium. Returns <a>Ok</a>
data ToggleSavedMessagesTopicIsPinned
ToggleSavedMessagesTopicIsPinned :: Maybe Int -> Maybe Bool -> ToggleSavedMessagesTopicIsPinned

-- | Identifier of Saved Messages topic to pin or unpin
[saved_messages_topic_id] :: ToggleSavedMessagesTopicIsPinned -> Maybe Int

-- | Pass true to pin the topic; pass false to unpin it
[is_pinned] :: ToggleSavedMessagesTopicIsPinned -> Maybe Bool
defaultToggleSavedMessagesTopicIsPinned :: ToggleSavedMessagesTopicIsPinned
instance GHC.Show.Show TD.Query.ToggleSavedMessagesTopicIsPinned.ToggleSavedMessagesTopicIsPinned
instance GHC.Classes.Eq TD.Query.ToggleSavedMessagesTopicIsPinned.ToggleSavedMessagesTopicIsPinned
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSavedMessagesTopicIsPinned.ToggleSavedMessagesTopicIsPinned
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSavedMessagesTopicIsPinned.ToggleSavedMessagesTopicIsPinned

module TD.Query.ToggleSessionCanAcceptCalls

-- | Toggles whether a session can accept incoming calls. Returns <a>Ok</a>
data ToggleSessionCanAcceptCalls
ToggleSessionCanAcceptCalls :: Maybe Int -> Maybe Bool -> ToggleSessionCanAcceptCalls

-- | Session identifier
[session_id] :: ToggleSessionCanAcceptCalls -> Maybe Int

-- | Pass true to allow accepting incoming calls by the session; pass false
--   otherwise
[can_accept_calls] :: ToggleSessionCanAcceptCalls -> Maybe Bool
defaultToggleSessionCanAcceptCalls :: ToggleSessionCanAcceptCalls
instance GHC.Show.Show TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls
instance GHC.Classes.Eq TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSessionCanAcceptCalls.ToggleSessionCanAcceptCalls

module TD.Query.ToggleSessionCanAcceptSecretChats

-- | Toggles whether a session can accept incoming secret chats. Returns
--   <a>Ok</a>
data ToggleSessionCanAcceptSecretChats
ToggleSessionCanAcceptSecretChats :: Maybe Int -> Maybe Bool -> ToggleSessionCanAcceptSecretChats

-- | Session identifier
[session_id] :: ToggleSessionCanAcceptSecretChats -> Maybe Int

-- | Pass true to allow accepting secret chats by the session; pass false
--   otherwise
[can_accept_secret_chats] :: ToggleSessionCanAcceptSecretChats -> Maybe Bool
defaultToggleSessionCanAcceptSecretChats :: ToggleSessionCanAcceptSecretChats
instance GHC.Show.Show TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats
instance GHC.Classes.Eq TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSessionCanAcceptSecretChats.ToggleSessionCanAcceptSecretChats

module TD.Query.ToggleStoryIsPostedToChatPage

-- | Toggles whether a story is accessible after expiration. Can be called
--   only if story.can_toggle_is_posted_to_chat_page == true. Returns
--   <a>Ok</a>
data ToggleStoryIsPostedToChatPage
ToggleStoryIsPostedToChatPage :: Maybe Int -> Maybe Int -> Maybe Bool -> ToggleStoryIsPostedToChatPage

-- | Identifier of the chat that posted the story
[story_sender_chat_id] :: ToggleStoryIsPostedToChatPage -> Maybe Int

-- | Identifier of the story
[story_id] :: ToggleStoryIsPostedToChatPage -> Maybe Int

-- | Pass true to make the story accessible after expiration; pass false to
--   make it private
[is_posted_to_chat_page] :: ToggleStoryIsPostedToChatPage -> Maybe Bool
defaultToggleStoryIsPostedToChatPage :: ToggleStoryIsPostedToChatPage
instance GHC.Show.Show TD.Query.ToggleStoryIsPostedToChatPage.ToggleStoryIsPostedToChatPage
instance GHC.Classes.Eq TD.Query.ToggleStoryIsPostedToChatPage.ToggleStoryIsPostedToChatPage
instance TD.Lib.Internal.ShortShow TD.Query.ToggleStoryIsPostedToChatPage.ToggleStoryIsPostedToChatPage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleStoryIsPostedToChatPage.ToggleStoryIsPostedToChatPage

module TD.Query.ToggleSupergroupCanHaveSponsoredMessages

-- | Toggles whether sponsored messages are shown in the channel chat;
--   requires owner privileges in the channel. The chat must have at least
--   chatBoostFeatures.min_sponsored_message_disable_boost_level boost
--   level to disable sponsored messages. Returns <a>Ok</a>
data ToggleSupergroupCanHaveSponsoredMessages
ToggleSupergroupCanHaveSponsoredMessages :: Maybe Int -> Maybe Bool -> ToggleSupergroupCanHaveSponsoredMessages

-- | The identifier of the channel
[supergroup_id] :: ToggleSupergroupCanHaveSponsoredMessages -> Maybe Int

-- | The new value of can_have_sponsored_messages
[can_have_sponsored_messages] :: ToggleSupergroupCanHaveSponsoredMessages -> Maybe Bool
defaultToggleSupergroupCanHaveSponsoredMessages :: ToggleSupergroupCanHaveSponsoredMessages
instance GHC.Show.Show TD.Query.ToggleSupergroupCanHaveSponsoredMessages.ToggleSupergroupCanHaveSponsoredMessages
instance GHC.Classes.Eq TD.Query.ToggleSupergroupCanHaveSponsoredMessages.ToggleSupergroupCanHaveSponsoredMessages
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupCanHaveSponsoredMessages.ToggleSupergroupCanHaveSponsoredMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupCanHaveSponsoredMessages.ToggleSupergroupCanHaveSponsoredMessages

module TD.Query.ToggleSupergroupHasAggressiveAntiSpamEnabled

-- | Toggles whether aggressive anti-spam checks are enabled in the
--   supergroup. Can be called only if
--   supergroupFullInfo.can_toggle_aggressive_anti_spam == true. Returns
--   <a>Ok</a>
data ToggleSupergroupHasAggressiveAntiSpamEnabled
ToggleSupergroupHasAggressiveAntiSpamEnabled :: Maybe Int -> Maybe Bool -> ToggleSupergroupHasAggressiveAntiSpamEnabled

-- | The identifier of the supergroup, which isn't a broadcast group
[supergroup_id] :: ToggleSupergroupHasAggressiveAntiSpamEnabled -> Maybe Int

-- | The new value of has_aggressive_anti_spam_enabled
[has_aggressive_anti_spam_enabled] :: ToggleSupergroupHasAggressiveAntiSpamEnabled -> Maybe Bool
defaultToggleSupergroupHasAggressiveAntiSpamEnabled :: ToggleSupergroupHasAggressiveAntiSpamEnabled
instance GHC.Show.Show TD.Query.ToggleSupergroupHasAggressiveAntiSpamEnabled.ToggleSupergroupHasAggressiveAntiSpamEnabled
instance GHC.Classes.Eq TD.Query.ToggleSupergroupHasAggressiveAntiSpamEnabled.ToggleSupergroupHasAggressiveAntiSpamEnabled
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupHasAggressiveAntiSpamEnabled.ToggleSupergroupHasAggressiveAntiSpamEnabled
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupHasAggressiveAntiSpamEnabled.ToggleSupergroupHasAggressiveAntiSpamEnabled

module TD.Query.ToggleSupergroupHasHiddenMembers

-- | Toggles whether non-administrators can receive only administrators and
--   bots using getSupergroupMembers or searchChatMembers. Can be called
--   only if supergroupFullInfo.can_hide_members == true. Returns <a>Ok</a>
data ToggleSupergroupHasHiddenMembers
ToggleSupergroupHasHiddenMembers :: Maybe Int -> Maybe Bool -> ToggleSupergroupHasHiddenMembers

-- | Identifier of the supergroup
[supergroup_id] :: ToggleSupergroupHasHiddenMembers -> Maybe Int

-- | New value of has_hidden_members
[has_hidden_members] :: ToggleSupergroupHasHiddenMembers -> Maybe Bool
defaultToggleSupergroupHasHiddenMembers :: ToggleSupergroupHasHiddenMembers
instance GHC.Show.Show TD.Query.ToggleSupergroupHasHiddenMembers.ToggleSupergroupHasHiddenMembers
instance GHC.Classes.Eq TD.Query.ToggleSupergroupHasHiddenMembers.ToggleSupergroupHasHiddenMembers
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupHasHiddenMembers.ToggleSupergroupHasHiddenMembers
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupHasHiddenMembers.ToggleSupergroupHasHiddenMembers

module TD.Query.ToggleSupergroupIsAllHistoryAvailable

-- | Toggles whether the message history of a supergroup is available to
--   new members; requires can_change_info member right. Returns <a>Ok</a>
data ToggleSupergroupIsAllHistoryAvailable
ToggleSupergroupIsAllHistoryAvailable :: Maybe Int -> Maybe Bool -> ToggleSupergroupIsAllHistoryAvailable

-- | The identifier of the supergroup
[supergroup_id] :: ToggleSupergroupIsAllHistoryAvailable -> Maybe Int

-- | The new value of is_all_history_available
[is_all_history_available] :: ToggleSupergroupIsAllHistoryAvailable -> Maybe Bool
defaultToggleSupergroupIsAllHistoryAvailable :: ToggleSupergroupIsAllHistoryAvailable
instance GHC.Show.Show TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable
instance GHC.Classes.Eq TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupIsAllHistoryAvailable.ToggleSupergroupIsAllHistoryAvailable

module TD.Query.ToggleSupergroupIsBroadcastGroup

-- | Upgrades supergroup to a broadcast group; requires owner privileges in
--   the supergroup. Returns <a>Ok</a>
data ToggleSupergroupIsBroadcastGroup
ToggleSupergroupIsBroadcastGroup :: Maybe Int -> ToggleSupergroupIsBroadcastGroup

-- | Identifier of the supergroup
[supergroup_id] :: ToggleSupergroupIsBroadcastGroup -> Maybe Int
instance GHC.Show.Show TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup
instance GHC.Classes.Eq TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupIsBroadcastGroup.ToggleSupergroupIsBroadcastGroup

module TD.Query.ToggleSupergroupIsForum

-- | Toggles whether the supergroup is a forum; requires owner privileges
--   in the supergroup. Discussion supergroups can't be converted to
--   forums. Returns <a>Ok</a>
data ToggleSupergroupIsForum
ToggleSupergroupIsForum :: Maybe Int -> Maybe Bool -> ToggleSupergroupIsForum

-- | Identifier of the supergroup
[supergroup_id] :: ToggleSupergroupIsForum -> Maybe Int

-- | New value of is_forum
[is_forum] :: ToggleSupergroupIsForum -> Maybe Bool
defaultToggleSupergroupIsForum :: ToggleSupergroupIsForum
instance GHC.Show.Show TD.Query.ToggleSupergroupIsForum.ToggleSupergroupIsForum
instance GHC.Classes.Eq TD.Query.ToggleSupergroupIsForum.ToggleSupergroupIsForum
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupIsForum.ToggleSupergroupIsForum
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupIsForum.ToggleSupergroupIsForum

module TD.Query.ToggleSupergroupJoinByRequest

-- | Toggles whether all users directly joining the supergroup need to be
--   approved by supergroup administrators; requires can_restrict_members
--   administrator right. Returns <a>Ok</a>
data ToggleSupergroupJoinByRequest
ToggleSupergroupJoinByRequest :: Maybe Int -> Maybe Bool -> ToggleSupergroupJoinByRequest

-- | Identifier of the channel
[supergroup_id] :: ToggleSupergroupJoinByRequest -> Maybe Int

-- | New value of join_by_request
[join_by_request] :: ToggleSupergroupJoinByRequest -> Maybe Bool
defaultToggleSupergroupJoinByRequest :: ToggleSupergroupJoinByRequest
instance GHC.Show.Show TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest
instance GHC.Classes.Eq TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupJoinByRequest.ToggleSupergroupJoinByRequest

module TD.Query.ToggleSupergroupJoinToSendMessages

-- | Toggles whether joining is mandatory to send messages to a discussion
--   supergroup; requires can_restrict_members administrator right. Returns
--   <a>Ok</a>
data ToggleSupergroupJoinToSendMessages
ToggleSupergroupJoinToSendMessages :: Maybe Int -> Maybe Bool -> ToggleSupergroupJoinToSendMessages

-- | Identifier of the supergroup
[supergroup_id] :: ToggleSupergroupJoinToSendMessages -> Maybe Int

-- | New value of join_to_send_messages
[join_to_send_messages] :: ToggleSupergroupJoinToSendMessages -> Maybe Bool
defaultToggleSupergroupJoinToSendMessages :: ToggleSupergroupJoinToSendMessages
instance GHC.Show.Show TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages
instance GHC.Classes.Eq TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupJoinToSendMessages.ToggleSupergroupJoinToSendMessages

module TD.Query.ToggleSupergroupSignMessages

-- | Toggles whether sender signature is added to sent messages in a
--   channel; requires can_change_info member right. Returns <a>Ok</a>
data ToggleSupergroupSignMessages
ToggleSupergroupSignMessages :: Maybe Int -> Maybe Bool -> ToggleSupergroupSignMessages

-- | Identifier of the channel
[supergroup_id] :: ToggleSupergroupSignMessages -> Maybe Int

-- | New value of sign_messages
[sign_messages] :: ToggleSupergroupSignMessages -> Maybe Bool
defaultToggleSupergroupSignMessages :: ToggleSupergroupSignMessages
instance GHC.Show.Show TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages
instance GHC.Classes.Eq TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupSignMessages.ToggleSupergroupSignMessages

module TD.Query.ToggleSupergroupUsernameIsActive

-- | Changes active state for a username of a supergroup or channel,
--   requires owner privileges in the supergroup or channel. The editable
--   username can't be disabled. May return an error with a message
--   <a>USERNAMES_ACTIVE_TOO_MUCH</a> if the maximum number of active
--   usernames has been reached. Returns <a>Ok</a>
data ToggleSupergroupUsernameIsActive
ToggleSupergroupUsernameIsActive :: Maybe Int -> Maybe Text -> Maybe Bool -> ToggleSupergroupUsernameIsActive

-- | Identifier of the supergroup or channel
[supergroup_id] :: ToggleSupergroupUsernameIsActive -> Maybe Int

-- | The username to change
[username] :: ToggleSupergroupUsernameIsActive -> Maybe Text

-- | Pass true to activate the username; pass false to disable it
[is_active] :: ToggleSupergroupUsernameIsActive -> Maybe Bool
defaultToggleSupergroupUsernameIsActive :: ToggleSupergroupUsernameIsActive
instance GHC.Show.Show TD.Query.ToggleSupergroupUsernameIsActive.ToggleSupergroupUsernameIsActive
instance GHC.Classes.Eq TD.Query.ToggleSupergroupUsernameIsActive.ToggleSupergroupUsernameIsActive
instance TD.Lib.Internal.ShortShow TD.Query.ToggleSupergroupUsernameIsActive.ToggleSupergroupUsernameIsActive
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleSupergroupUsernameIsActive.ToggleSupergroupUsernameIsActive

module TD.Query.ToggleUsernameIsActive

-- | Changes active state for a username of the current user. The editable
--   username can't be disabled. May return an error with a message
--   <a>USERNAMES_ACTIVE_TOO_MUCH</a> if the maximum number of active
--   usernames has been reached. Returns <a>Ok</a>
data ToggleUsernameIsActive
ToggleUsernameIsActive :: Maybe Text -> Maybe Bool -> ToggleUsernameIsActive

-- | The username to change
[username] :: ToggleUsernameIsActive -> Maybe Text

-- | Pass true to activate the username; pass false to disable it
[is_active] :: ToggleUsernameIsActive -> Maybe Bool
defaultToggleUsernameIsActive :: ToggleUsernameIsActive
instance GHC.Show.Show TD.Query.ToggleUsernameIsActive.ToggleUsernameIsActive
instance GHC.Classes.Eq TD.Query.ToggleUsernameIsActive.ToggleUsernameIsActive
instance TD.Lib.Internal.ShortShow TD.Query.ToggleUsernameIsActive.ToggleUsernameIsActive
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ToggleUsernameIsActive.ToggleUsernameIsActive

module TD.Query.TransferChatOwnership

-- | Changes the owner of a chat; requires owner privileges in the chat.
--   Use the method canTransferOwnership to check whether the ownership can
--   be transferred from the current session. Available only for
--   supergroups and channel chats. Returns <a>Ok</a>
data TransferChatOwnership
TransferChatOwnership :: Maybe Int -> Maybe Int -> Maybe Text -> TransferChatOwnership

-- | Chat identifier
[chat_id] :: TransferChatOwnership -> Maybe Int

-- | Identifier of the user to which transfer the ownership. The ownership
--   can't be transferred to a bot or to a deleted user
[user_id] :: TransferChatOwnership -> Maybe Int

-- | The 2-step verification password of the current user
[password] :: TransferChatOwnership -> Maybe Text
defaultTransferChatOwnership :: TransferChatOwnership
instance GHC.Show.Show TD.Query.TransferChatOwnership.TransferChatOwnership
instance GHC.Classes.Eq TD.Query.TransferChatOwnership.TransferChatOwnership
instance TD.Lib.Internal.ShortShow TD.Query.TransferChatOwnership.TransferChatOwnership
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TransferChatOwnership.TransferChatOwnership

module TD.Query.TranslateMessageText

-- | Extracts text or caption of the given message and translates it to the
--   given language. If the current user is a Telegram Premium user, then
--   text formatting is preserved. Returns <a>FormattedText</a>
data TranslateMessageText
TranslateMessageText :: Maybe Int -> Maybe Int -> Maybe Text -> TranslateMessageText

-- | Identifier of the chat to which the message belongs
[chat_id] :: TranslateMessageText -> Maybe Int

-- | Identifier of the message
[message_id] :: TranslateMessageText -> Maybe Int

-- | Language code of the language to which the message is translated. Must
--   be one of "af", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs",
--   "bg", "ca", "ceb", "zh-CN", "zh", "zh-Hans", "zh-TW", "zh-Hant", "co",
--   "hr", "cs", "da", "nl", "en", "eo", "et", "fi", "fr", "fy", "gl",
--   "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "iw", "hi", "hmn",
--   "hu", "is", "ig", "id", "in", "ga", "it", "ja", "jv", "kn", "kk",
--   "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk",
--   "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "ny",
--   "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr",
--   "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv",
--   "tl", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug",
--   "uz", "vi", "cy", "xh", "yi", "ji", "yo", "zu"
[to_language_code] :: TranslateMessageText -> Maybe Text
defaultTranslateMessageText :: TranslateMessageText
instance GHC.Show.Show TD.Query.TranslateMessageText.TranslateMessageText
instance GHC.Classes.Eq TD.Query.TranslateMessageText.TranslateMessageText
instance TD.Lib.Internal.ShortShow TD.Query.TranslateMessageText.TranslateMessageText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TranslateMessageText.TranslateMessageText

module TD.Query.TranslateText

-- | Translates a text to the given language. If the current user is a
--   Telegram Premium user, then text formatting is preserved. Returns
--   <a>FormattedText</a>
data TranslateText
TranslateText :: Maybe FormattedText -> Maybe Text -> TranslateText

-- | Text to translate
[text] :: TranslateText -> Maybe FormattedText

-- | Language code of the language to which the message is translated. Must
--   be one of "af", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs",
--   "bg", "ca", "ceb", "zh-CN", "zh", "zh-Hans", "zh-TW", "zh-Hant", "co",
--   "hr", "cs", "da", "nl", "en", "eo", "et", "fi", "fr", "fy", "gl",
--   "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "iw", "hi", "hmn",
--   "hu", "is", "ig", "id", "in", "ga", "it", "ja", "jv", "kn", "kk",
--   "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk",
--   "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "ny",
--   "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr",
--   "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv",
--   "tl", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug",
--   "uz", "vi", "cy", "xh", "yi", "ji", "yo", "zu"
[to_language_code] :: TranslateText -> Maybe Text
defaultTranslateText :: TranslateText
instance GHC.Show.Show TD.Query.TranslateText.TranslateText
instance GHC.Classes.Eq TD.Query.TranslateText.TranslateText
instance TD.Lib.Internal.ShortShow TD.Query.TranslateText.TranslateText
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.TranslateText.TranslateText

module TD.Query.UnpinAllChatMessages

-- | Removes all pinned messages from a chat; requires can_pin_messages
--   member right if the chat is a basic group or supergroup, or
--   can_edit_messages administrator right if the chat is a channel.
--   Returns <a>Ok</a>
data UnpinAllChatMessages
UnpinAllChatMessages :: Maybe Int -> UnpinAllChatMessages

-- | Identifier of the chat
[chat_id] :: UnpinAllChatMessages -> Maybe Int
instance GHC.Show.Show TD.Query.UnpinAllChatMessages.UnpinAllChatMessages
instance GHC.Classes.Eq TD.Query.UnpinAllChatMessages.UnpinAllChatMessages
instance TD.Lib.Internal.ShortShow TD.Query.UnpinAllChatMessages.UnpinAllChatMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UnpinAllChatMessages.UnpinAllChatMessages

module TD.Query.UnpinAllMessageThreadMessages

-- | Removes all pinned messages from a forum topic; requires
--   can_pin_messages member right in the supergroup. Returns <a>Ok</a>
data UnpinAllMessageThreadMessages
UnpinAllMessageThreadMessages :: Maybe Int -> Maybe Int -> UnpinAllMessageThreadMessages

-- | Identifier of the chat
[chat_id] :: UnpinAllMessageThreadMessages -> Maybe Int

-- | Message thread identifier in which messages will be unpinned
[message_thread_id] :: UnpinAllMessageThreadMessages -> Maybe Int
defaultUnpinAllMessageThreadMessages :: UnpinAllMessageThreadMessages
instance GHC.Show.Show TD.Query.UnpinAllMessageThreadMessages.UnpinAllMessageThreadMessages
instance GHC.Classes.Eq TD.Query.UnpinAllMessageThreadMessages.UnpinAllMessageThreadMessages
instance TD.Lib.Internal.ShortShow TD.Query.UnpinAllMessageThreadMessages.UnpinAllMessageThreadMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UnpinAllMessageThreadMessages.UnpinAllMessageThreadMessages

module TD.Query.UnpinChatMessage

-- | Removes a pinned message from a chat; requires can_pin_messages member
--   right if the chat is a basic group or supergroup, or can_edit_messages
--   administrator right if the chat is a channel. Returns <a>Ok</a>
data UnpinChatMessage
UnpinChatMessage :: Maybe Int -> Maybe Int -> UnpinChatMessage

-- | Identifier of the chat
[chat_id] :: UnpinChatMessage -> Maybe Int

-- | Identifier of the removed pinned message
[message_id] :: UnpinChatMessage -> Maybe Int
defaultUnpinChatMessage :: UnpinChatMessage
instance GHC.Show.Show TD.Query.UnpinChatMessage.UnpinChatMessage
instance GHC.Classes.Eq TD.Query.UnpinChatMessage.UnpinChatMessage
instance TD.Lib.Internal.ShortShow TD.Query.UnpinChatMessage.UnpinChatMessage
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UnpinChatMessage.UnpinChatMessage

module TD.Query.UpgradeBasicGroupChatToSupergroupChat

-- | Creates a new supergroup from an existing basic group and sends a
--   corresponding messageChatUpgradeTo and messageChatUpgradeFrom;
--   requires owner privileges. Deactivates the original basic group.
--   Returns <a>Chat</a>
data UpgradeBasicGroupChatToSupergroupChat
UpgradeBasicGroupChatToSupergroupChat :: Maybe Int -> UpgradeBasicGroupChatToSupergroupChat

-- | Identifier of the chat to upgrade
[chat_id] :: UpgradeBasicGroupChatToSupergroupChat -> Maybe Int
instance GHC.Show.Show TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat
instance GHC.Classes.Eq TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat
instance TD.Lib.Internal.ShortShow TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UpgradeBasicGroupChatToSupergroupChat.UpgradeBasicGroupChatToSupergroupChat

module TD.Query.UploadStickerFile

-- | Uploads a file with a sticker; returns the uploaded file. Returns
--   <a>File</a>
data UploadStickerFile
UploadStickerFile :: Maybe Int -> Maybe StickerFormat -> Maybe InputFile -> UploadStickerFile

-- | Sticker file owner; ignored for regular users
[user_id] :: UploadStickerFile -> Maybe Int

-- | Sticker format
[sticker_format] :: UploadStickerFile -> Maybe StickerFormat

-- | File file to upload; must fit in a 512x512 square. For WEBP stickers
--   the file must be in WEBP or PNG format, which will be converted to
--   WEBP server-side. See
--   <a>https://core.telegram.org/animated_stickers#technical-requirements</a>
--   for technical requirements
[sticker] :: UploadStickerFile -> Maybe InputFile
defaultUploadStickerFile :: UploadStickerFile
instance GHC.Show.Show TD.Query.UploadStickerFile.UploadStickerFile
instance GHC.Classes.Eq TD.Query.UploadStickerFile.UploadStickerFile
instance TD.Lib.Internal.ShortShow TD.Query.UploadStickerFile.UploadStickerFile
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.UploadStickerFile.UploadStickerFile

module TD.Query.ValidateOrderInfo

-- | Validates the order information provided by a user and returns the
--   available shipping options for a flexible invoice. Returns
--   <a>ValidatedOrderInfo</a>
data ValidateOrderInfo
ValidateOrderInfo :: Maybe InputInvoice -> Maybe OrderInfo -> Maybe Bool -> ValidateOrderInfo

-- | The invoice
[input_invoice] :: ValidateOrderInfo -> Maybe InputInvoice

-- | The order information, provided by the user; pass null if empty
[order_info] :: ValidateOrderInfo -> Maybe OrderInfo

-- | Pass true to save the order information
[allow_save] :: ValidateOrderInfo -> Maybe Bool
defaultValidateOrderInfo :: ValidateOrderInfo
instance GHC.Show.Show TD.Query.ValidateOrderInfo.ValidateOrderInfo
instance GHC.Classes.Eq TD.Query.ValidateOrderInfo.ValidateOrderInfo
instance TD.Lib.Internal.ShortShow TD.Query.ValidateOrderInfo.ValidateOrderInfo
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ValidateOrderInfo.ValidateOrderInfo

module TD.Query.ViewMessages

-- | Informs TDLib that messages are being viewed by the user. Sponsored
--   messages must be marked as viewed only when the entire text of the
--   message is shown on the screen (excluding the button). Many useful
--   activities depend on whether the messages are currently being viewed
--   or not (e.g., marking messages as read, incrementing a view counter,
--   updating a view counter, removing deleted messages in supergroups and
--   channels). Returns <a>Ok</a>
data ViewMessages
ViewMessages :: Maybe Int -> Maybe [Int] -> Maybe MessageSource -> Maybe Bool -> ViewMessages

-- | Chat identifier
[chat_id] :: ViewMessages -> Maybe Int

-- | The identifiers of the messages being viewed
[message_ids] :: ViewMessages -> Maybe [Int]

-- | Source of the message view; pass null to guess the source based on
--   chat open state
[source] :: ViewMessages -> Maybe MessageSource

-- | Pass true to mark as read the specified messages even the chat is
--   closed
[force_read] :: ViewMessages -> Maybe Bool
defaultViewMessages :: ViewMessages
instance GHC.Show.Show TD.Query.ViewMessages.ViewMessages
instance GHC.Classes.Eq TD.Query.ViewMessages.ViewMessages
instance TD.Lib.Internal.ShortShow TD.Query.ViewMessages.ViewMessages
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewMessages.ViewMessages

module TD.Query.ViewPremiumFeature

-- | Informs TDLib that the user viewed detailed information about a
--   Premium feature on the Premium features screen. Returns <a>Ok</a>
data ViewPremiumFeature
ViewPremiumFeature :: Maybe PremiumFeature -> ViewPremiumFeature

-- | The viewed premium feature
[feature] :: ViewPremiumFeature -> Maybe PremiumFeature
instance GHC.Show.Show TD.Query.ViewPremiumFeature.ViewPremiumFeature
instance GHC.Classes.Eq TD.Query.ViewPremiumFeature.ViewPremiumFeature
instance TD.Lib.Internal.ShortShow TD.Query.ViewPremiumFeature.ViewPremiumFeature
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewPremiumFeature.ViewPremiumFeature

module TD.Query.ViewTrendingStickerSets

-- | Informs the server that some trending sticker sets have been viewed by
--   the user. Returns <a>Ok</a>
data ViewTrendingStickerSets
ViewTrendingStickerSets :: Maybe [Int] -> ViewTrendingStickerSets

-- | Identifiers of viewed trending sticker sets
[sticker_set_ids] :: ViewTrendingStickerSets -> Maybe [Int]
instance GHC.Show.Show TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets
instance GHC.Classes.Eq TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets
instance TD.Lib.Internal.ShortShow TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.ViewTrendingStickerSets.ViewTrendingStickerSets

module TD.Query.WriteGeneratedFilePart

-- | Writes a part of a generated file. This method is intended to be used
--   only if the application has no direct access to TDLib's file system,
--   because it is usually slower than a direct write to the destination
--   file. Returns <a>Ok</a>
data WriteGeneratedFilePart
WriteGeneratedFilePart :: Maybe Int -> Maybe Int -> Maybe ByteString -> WriteGeneratedFilePart

-- | The identifier of the generation process
[generation_id] :: WriteGeneratedFilePart -> Maybe Int

-- | The offset from which to write the data to the file
[offset] :: WriteGeneratedFilePart -> Maybe Int

-- | The data to write
[_data] :: WriteGeneratedFilePart -> Maybe ByteString
defaultWriteGeneratedFilePart :: WriteGeneratedFilePart
instance GHC.Show.Show TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
instance GHC.Classes.Eq TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
instance TD.Lib.Internal.ShortShow TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
instance Data.Aeson.Types.ToJSON.ToJSON TD.Query.WriteGeneratedFilePart.WriteGeneratedFilePart
